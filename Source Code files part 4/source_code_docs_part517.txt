stem.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />. If there is no matched type, this method returns null.</returns>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> that supplies the type in the object space.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
      <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
      <returns>If there is no entity container, this method returns null; otherwise, it returns the first entity container.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns all the overloads of the functions by using the specified name, namespace name, and data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the functions that match the specified name in a given namespace and a data model.</returns>
      <param name="name">The name of the function.</param>
      <param name="namespaceName">The namespace of the function.</param>
      <param name="dataSpace">The conceptual model in which the functions are searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>Returns all the overloads of the functions by using the specified function name, namespace name, and data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the functions that match the specified name in the given namespace and the data model.</returns>
      <param name="name">The name of the function.</param>
      <param name="namespaceName">The namespace of the function.</param>
      <param name="dataSpace">The conceptual model in which the functions are searched.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an item by using the specified identity and the data model.</summary>
      <returns>The item that matches the given identity in the specified data model.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the item is searched.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an item by using the specified identity and the data model.</summary>
      <returns>The item that matches the given identity in the specified data model.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="dataSpace">The conceptual model in which the item is searched.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Metadata.Edm.DataSpace)">
      <summary>Gets <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> items.</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> items.</returns>
      <param name="dataSpace">T:System.Data.Metadata.Edm.DataSpace from which to retrieve items.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Metadata.Edm.DataSpace)">
      <summary>Gets all the items in the specified data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the items in the specified data model.</returns>
      <param name="dataSpace">The conceptual model for which the list of items is needed.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Metadata.Edm.DataSpace)">
      <summary>Gets all the items in the specified data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the items in the specified data model.</returns>
      <param name="dataSpace">The conceptual model for which the list of items is needed.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type that matches the type supplied by the parameter <paramref name="edmSpaceType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the Object space type. If there is no matched type, this method returns null.</returns>
      <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns the list of primitive types in the specified data model.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains all the primitive types in the specified data model.</returns>
      <param name="dataSpace">The data model for which you need the list of primitive types.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase)">
      <summary>Gets original value members from an entity set and entity type.</summary>
      <returns>The original value members from an entity set and entity type.</returns>
      <param name="entitySet">Entity set from which to retrieve original values.</param>
      <param name="entityType">Entity type of which to retrieve original values.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the type is searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type that matches the given type name and the namespace name in the specified data model. If there is no matched type, this method returns null.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="dataSpace">The conceptual model on which the type is searched.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Loads metadata from the given assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>Loads metadata from the given assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
      <param name="logLoadMessage">The delegate for logging the load messages.</param>
    </member>
    <member name="F:System.Data.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>Represents the maximum Entity Data Model (EDM) version supported by the Entity Framework runtime.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Metadata.Edm.ItemCollection)">
      <summary>Registers the item collection with each associated data model. </summary>
      <param name="collection">The output parameter collection that needs to be filled up.</param>
      <exception cref="T:System.ArgumentNullException">The collection argument is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified data model has already a registered an item collection.</exception>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object via the out parameter <paramref name="edmSpaceType" /> that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" /> that matches the type supplied by the parameter <paramref name="objectSpaceType" />.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type.</param>
      <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
      <param name="entityContainer">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it returns the first entity container.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object by using the specified entity container name and the data model.</summary>
      <returns>true if there is an entity container that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the entity container.</param>
      <param name="dataSpace">The conceptual model on which the entity container is searched.</param>
      <param name="entityContainer">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object. If there is no entity container, this output parameter contains null; otherwise, it returns the first entity container.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>Returns an item by using the specified identity and the data model.</summary>
      <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the item is searched.</param>
      <param name="item">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.GlobalIem" /> object.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>Returns an item by using the specified identity and the data model.</summary>
      <returns>true if there is an item that matches the search criteria; otherwise, false.</returns>
      <param name="identity">The identity of the item.</param>
      <param name="space">The conceptual model on which the item is searched.</param>
      <param name="item">When this method returns, contains a <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object.</param>
      <typeparam name="T">The type returned by the method.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.ItemCollection@)">
      <summary>Tests the retrieval of <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>true if the retrieval was successful; othewise, false.</returns>
      <param name="dataSpace">
        <see cref="T:System.Data.Metadata.Edm.DataSpace" /> from which to attempt retrieval of <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</param>
      <param name="collection">Item collection.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>Returns a <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object via the out parameter <paramref name="objectSpaceType" /> that represents the type that matches the <see cref="T:System.Data.Metadata.Edm.EdmType" /> supplied by the parameter <paramref name="edmSpaceType" />.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="edmSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> object that represents the object space type.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
      <param name="dataSpace">The conceptual model on which the type is searched.</param>
      <param name="type">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>Returns an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object by using the specified type name, namespace name, and data model.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="name">The name of the type.</param>
      <param name="namespaceName">The namespace of the type.</param>
      <param name="dataSpace">The conceptual model on which the type is searched.</param>
      <param name="type">When this method returns, contains an <see cref="T:System.Data.Metadata.Edm.EdmType" /> object.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.NavigationProperty">
      <summary>Represents the navigation from one entity type to another entity type in the conceptual model . </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>Gets the "from" relationship end member in this navigation.</summary>
      <returns>The "from" relationship end member in this navigation.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>Gets the foreign key properties for a navigation property that is on the dependent end of a referential constraint.</summary>
      <returns>A collection of the foreign key properties.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>Gets the relationship type that this navigation property operates on.</summary>
      <returns>The relationship type that this navigation property operates on.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>Gets the "to" relationship end member of this navigation.</summary>
      <returns>The "to" relationship end member of this navigation.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ObjectItemCollection">
      <summary>Loads metadata about the object data model. This class is derived from the <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> class.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" /> class.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Returns the CLR type that corresponds to the <see cref="T:System.Data.Metadata.Edm.StructuralType" /> supplied by the <paramref name="objectSpaceType" /> parameter.</summary>
      <returns>CLR type.</returns>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> that represents the object space type.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>Returns the collection of items that are of type <paramref name="T" />.</summary>
      <returns>The collection of items that are of type <paramref name="T" />.</returns>
      <typeparam name="T">The type of the items to retrieve.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>Returns a collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</summary>
      <returns>A collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Loads metadata from the given assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection)">
      <summary>Loads metadata from the specified assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
      <param name="edmItemCollection">The EDM metadata source for the O space metadata.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>Loads metadata from the given assembly.</summary>
      <param name="assembly">The assembly from which the metadata will be loaded.</param>
      <param name="edmItemCollection">The EDM metadata source for the O space metadata.</param>
      <param name="logLoadMessage">The delegate to which log messages are sent.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.StructuralType,System.Type@)">
      <summary>Returns a CLR type corresponding to the <see cref="T:System.Data.Metadata.Edm.StructuralType" /> supplied by the <paramref name="objectSpaceType" /> parameter.</summary>
      <returns>true if there is a type that matches the search criteria; otherwise, false.</returns>
      <param name="objectSpaceType">A <see cref="T:System.Data.Metadata.Edm.StructuralType" /> that represents the object space type.</param>
      <param name="clrType">CLR type.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.OperationAction">
      <summary>Specifies the list of possible actions when the parent End of the <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> is deleted. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.None">
      <summary>Only a parent End can be deleted.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Cascade">
      <summary>When a parent End is deleted, its associated child ends are deleted as well. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Restrict">
      <summary>A parent End cannot be deleted if it has one or more associated child ends.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterMode">
      <summary>Specifies the direction of a parameter.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.In">
      <summary>An input parameter.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.Out">
      <summary>An output parameter.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.InOut">
      <summary>Both an input and an output parameter.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>A return value of the method.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterTypeSemantics">
      <summary>Specifies the type semantics that are used to resolve the function overloads. Each store provider must use these enumeration flags in the provider manifest file for every function definition. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>A flag indicating the implicit conversion between the given and the formal argument types. This is the default conversion type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>A flag indicating the type promotion between the given and the formal argument types.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>A flag indicating the usage of strict equivalence only.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveType">
      <summary>Describes the .NET Framework primitive types, conceptual model primitive types, and storage provider-specific primitive types.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>Returns an equivalent common language runtime (CLR) type of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />. Note that the <see cref="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> property always returns a non-nullable type value.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents an equivalent common language runtime (CLR) type of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>Gets the list of facet descriptions for this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of facet descriptions for this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>Returns the equivalent <see cref="T:System.Data.Metadata.Edm.EdmType" /> of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />. </summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that is an equivalent of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Returns the equivalent <see cref="T:System.Data.Metadata.Edm.EdmType" /> of a <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that is an equivalent of a specified <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
      <param name="primitiveTypeKind">A value of type <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>Returns the list of primitive types.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of primitive types.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>Gets a <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> enumeration value that indicates a primitive type of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" /> enumeration value that indicates a primitive type of this <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveTypeKind">
      <summary>Specifies the kinds of all primitive types defined by the conceptual model. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>An enumeration member that indicates the Binary (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>An enumeration member that indicates the Boolean (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>An enumeration member that indicates the Byte (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>An enumeration member that indicates the DateTime (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>An enumeration member that indicates the Decimal (EDM)type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>An enumeration member that indicates the Double (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>An enumeration member that indicates the Guid (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>An enumeration member that indicates the Single (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>An enumeration member that indicates the SByte type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>An enumeration member that indicates the Int16 (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>An enumeration member that indicates the Int32 (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>An enumeration member that indicates the Int64 (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>An enumeration member that indicates the String (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>An enumeration member that indicates the Time (EDM) type.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>An enumeration member that indicates the DateTimeOffset type.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PropertyKind">
      <summary>Specifies the kinds of item attributes in the conceptual model. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.System">
      <summary>An enumeration member indicating that an item attribute is System.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.Extended">
      <summary>An enumeration member indicating that an item attribute is Extended.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>Represents a collection of members in the ADO.NET metadata hierarchy by providing a read-only collection with advanced lookup capabilities. This class is derived from the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" /> class. </summary>
      <typeparam name="T">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>Determines whether the collection contains an item with the specified identity.</summary>
      <returns>true if the collection contains the item to be searched for; otherwise, false. The default is false.</returns>
      <param name="identity">The identity of the item.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>Returns an enumerator that can iterate through this collection.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> that can be used to iterate through this <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>Retrieves an item from this collection by using the specified identity.</summary>
      <returns>An item from this collection.</returns>
      <param name="identity">The identity of the item to be searched for.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>Returns the index of the specified value in this collection.</summary>
      <returns>The index of the specified value in this collection.</returns>
      <param name="value">A value to seek.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>Gets a value indicating whether this collection is read-only.</summary>
      <returns>true if this collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>Gets an item from this collection by using the specified identity.</summary>
      <returns>An item from this collection.</returns>
      <param name="identity">The identity of the item to be searched for.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>Retrieves an item from this collection by using the specified identity.</summary>
      <returns>true if there is an item that matches the search criteria; otherwise, false. </returns>
      <param name="identity">The identity of the item to be searched for.</param>
      <param name="ignoreCase">true to perform the case-insensitive search; otherwise, false. </param>
      <param name="item">When this method returns, this output parameter contains an item from the collection. If there is no matched item, this output parameter contains null.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>Supports a simple iteration over the <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> collection. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>Gets the member at the current position. </summary>
      <returns>The member at the current position.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>Disposes of this enumerator.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>Moves to the next member in the collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />.</summary>
      <returns>true if the enumerator is moved in the collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>Positions the enumerator before the first position in the collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the member at the current position.</summary>
      <returns>The member at the current position.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReferentialConstraint">
      <summary>Describes the referential constraints on the relationships in a conceptual model.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>Gets the list of properties for the "from role" on which this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> is defined.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for "from role" on which this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> is defined.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>Gets the "from role" that takes part in this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> object that represents the "from role" that takes part in this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>Gets the list of properties for the "to role" on which this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> is defined.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties for the "to role" on which this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" /> is defined.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>Gets the "to role" that takes part in this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" /> object that represents the "to role" that takes part in this <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>Returns the combination of the names of the <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> and the <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" />.</summary>
      <returns>The combination of the names of the <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> and the <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" />. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RefType">
      <summary>Provides the address of an entity for operations that use the entity. You cannot define a <see cref="T:System.Data.Metadata.Edm.RefType" /> in a conceptual model schema explicitly.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.ElementType">
      <summary>Gets the entity type referenced by this <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" /> object that represents the entity type referenced by this <see cref="T:System.Data.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipEndMember">
      <summary>Defines the End member for the <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>Gets the operational behavior of this relationship end member.</summary>
      <returns>One of the <see cref="T:System.Data.Metadata.Edm.OperationAction" /> values. The default is <see cref="P:System.Data.Metadata.Edm.OperationAction.None" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>Access the EntityType of the EndMember in an association.</summary>
      <returns>The EntityType of the EndMember in an association.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>Gets the multiplicity of this relationship end member.</summary>
      <returns>One of the <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> values.  </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipMultiplicity">
      <summary>Represents the multiplicity information about the End of a relationship type. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>A lower bound is zero and an upper bound is one.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>A lower bound is one and an upper bound is one.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>A lower bound is zero and an upper bound is null.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipSet">
      <summary>Represents a relationship set in a conceptual model. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.ElementType">
      <summary>Gets the relationship type of this <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.RelationshipType" /> object that represents the relationship type of this <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipType">
      <summary>Represents the base class for relationships in a conceptual model. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>Gets the list of ends for this relationship type. </summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of Ends for this relationship type.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RowType">
      <summary>Describes a row, such as the result of a query. This class is derived from the <see cref="T:System.Data.Metadata.Edm.StructuralType" /> class. The structure of the row type depends on what database columns are projected in the query. The <see cref="T:System.Data.Metadata.Edm.RowType" /> can be useful in conceptual model functions.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.Properties">
      <summary>Gets the list of properties on this <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of properties on this <see cref="T:System.Data.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.SimpleType">
      <summary>A base class that describes primitive types in a conceptual model.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreGeneratedPattern">
      <summary>Represents an enumeration that specifies three options indicating whether the column in the  store schema definition language (SSDL) (.ssdl) needs a value during insert and update operations. ADO.NET reads the value of the column and then stores it in-memory cache.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>A value indicating that it is not a server generated property. This is the default value.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>A value is generated on insert and remains unchanged on update.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>A value is generated on both insert and update.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreItemCollection">
      <summary>Loads metadata about the storage (database) model. The <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> loads metadata from store schema definition language (SSDL) files. This class is derived from the <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> class. </summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> class. </summary>
      <param name="xmlReaders">XML Reader used to create metadata.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> class.</summary>
      <param name="filePaths">Path to file used to create metadata.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>Returns a collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" /> object that represents a collection of the <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> objects.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.StructuralType">
      <summary>A base type for all the types in a conceptual model that have members.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.StructuralType.Members">
      <summary>Gets the list of members on this type.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains a set of members on this type. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.TypeUsage">
      <summary>Describes a type and a set of facets for that type. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>Gets the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" /> object that represents the built-in type kind for this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a binary type by using the specified facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a binary type by using the specified facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="isFixedLength">true to set the length of the binary type to fixed; otherwise, false. </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a binary type by using the specified facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a binary type by using the specified facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="isFixedLength">true to set the length of the binary type to fixed; otherwise, false.</param>
      <param name="maxLength">The maximum length of the binary type.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> object of the type that the parameters describe.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> object.</returns>
      <param name="primitiveType">The simple type that defines the units of measurement of the offset.</param>
      <param name="precision">The degree of granularity of the <see cref="T:System." /><see cref="DateTimeOffset" /> in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> object of the type that the parameters describe.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> object.</returns>
      <param name="primitiveType">The simple type that defines the units of measurement of the <see cref="T:System." /><see cref="DateTime" /> object.</param>
      <param name="precision">The degree of granularity of the <see cref="T:System." /><see cref="DateTimeOffset" /> in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a decimal type with unbounded precision and scale facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a decimal type with unbounded precision and scale facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a decimal type by using the specified facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a decimal type by using the specified facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="precision">The precision of the decimal type as type <see cref="T:System.Byte" />.</param>
      <param name="scale">The scale of the decimal type as type <see cref="T:System.Byte" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Metadata.Edm.EdmType)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object with the specified conceptual model type.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object with the default facet values for the specified <see cref="T:System.Data.Metadata.Edm.EdmType" />.</returns>
      <param name="edmType">A <see cref="T:System.Data.Metadata.Edm.EdmType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a string type by using the specified facet values and unbounded MaxLength.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a string type by using the specified facet values and unbounded MaxLength.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="isUnicode">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
      <param name="isFixedLength">true to set the length of the string type to fixed; otherwise, false</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to describe a string type by using the specified facet values.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object describing a string type by using the specified facet values.</returns>
      <param name="primitiveType">A <see cref="T:System.Data.Metadata.Edm.PrimitiveType" /> for which the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object is created.</param>
      <param name="isUnicode">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
      <param name="isFixedLength">true to set the character-encoding standard of the string type to Unicode; otherwise, false.</param>
      <param name="maxLength">true to set the length of the string type to fixed; otherwise, false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Creates a <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> object of the type that the parameters describe.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> object.</returns>
      <param name="primitiveType">The simple type that defines the units of measurement of the <see cref="T:System." /><see cref="DateTime" /> object.</param>
      <param name="precision">The degree of granularity of the <see cref="T:System." /><see cref="DateTimeOffset" /> in fractions of a second, based on the number of decimal places supported. For example a precision of 3 means the granularity supported is milliseconds.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.EdmType">
      <summary>Gets the type information described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmType" /> object that represents the type information described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.Facets">
      <summary>Gets the list of facets for the type that is described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>A collection of type <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" /> that contains the list of facets for the type that is described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Metadata.Edm.TypeUsage)">
      <summary>Checks whether this <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> is a subtype of the specified <see cref="T:System.Data.Metadata.Edm.TypeUsage" />. </summary>
      <returns>true if this <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> is a subtype of the specified <see cref="T:System.Data.Metadata.Edm.TypeUsage" />; otherwise, false. </returns>
      <param name="typeUsage">The <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object to be checked.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.ToString">
      <summary>Returns the full name of the type described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>The full name of the type described by this <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> as string.</returns>
    </member>
    <member name="T:System.Data.Objects.CompiledQuery">
      <summary>Represents a cached LINQ to Entities query.</summary>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`10" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`11" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`12" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`13" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`14" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg12 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`15" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg12 " />must be a primitive type.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg13 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`16" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg12 " />must be a primitive type.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg13 " />must be a primitive type.</typeparam>
      <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg14 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`17" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg8 " />must be a primitive type.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg9 " />must be a primitive type.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg10 " />must be a primitive type.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg11 " />must be a primitive type.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg12 " />must be a primitive type.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg13 " />must be a primitive type.</typeparam>
      <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg14 " />must be a primitive type.</typeparam>
      <typeparam name="TArg15">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg15 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`2" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`3" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1" />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`4" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`5" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />  method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`6" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`7" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`8" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Creates a new delegate that represents the compiled LINQ to Entities query.</summary>
      <returns>
        <see cref="T:System.Func`9" />, a generic delegate that represents the compiled LINQ to Entities query.</returns>
      <param name="query">The lambda expression to compile.</param>
      <typeparam name="TArg0">A type derived from <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg1 " />must be a primitive type.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg2 " />must be a primitive type.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg3 " />must be a primitive type.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg4 " />must be a primitive type.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg5 " />must be a primitive type.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg6 " />must be a primitive type.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by this method. <paramref name="TArg7 " />must be a primitive type.</typeparam>
      <typeparam name="TResult">The type <paramref name="T" /> of the query results returned by executing the delegate returned by the <see cref="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> method.</typeparam>
    </member>
    <member name="T:System.Data.Objects.CurrentValueRecord">
      <summary>Provides access to the current values of object data. </summary>
    </member>
    <member name="T:System.Data.Objects.DbUpdatableDataRecord">
      <summary>Provides access to the original values of object data. The <see cref="T:System.Data.Objects.DbUpdatableDataRecord" /> implements methods that allow updates to the original values of an object.</summary>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>Gets data record information.</summary>
      <returns>A <see cref="T:System.Data.Common.DataRecordInfo" /> object.</returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>Gets the number of fields in the record.</summary>
      <returns>An integer value that is the field count.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>Retrieves the field value as a Boolean.</summary>
      <returns>The field value as a Boolean.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>Retrieves the field value as a byte.</summary>
      <returns>The field value as a byte.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves the field value as a byte array.</summary>
      <returns>The number of bytes copied.</returns>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="dataIndex">The index at which to start copying data.</param>
      <param name="buffer">The destination buffer where data is copied.</param>
      <param name="bufferIndex">The index in the destination buffer where copying will begin.</param>
      <param name="length">The number of bytes to copy.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>Retrieves the field value as a char.</summary>
      <returns>The field value as a char.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Retrieves the field value as a char array.</summary>
      <returns>The number of characters copied.</returns>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="dataIndex">The index at which to start copying data.</param>
      <param name="buffer">The destination buffer where data is copied.</param>
      <param name="bufferIndex">The index in the destination buffer where copying will begin.</param>
      <param name="length">The number of characters to copy.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>Retrieves the field value as a <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>The field value as a <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>Retrieves a field value as a <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>A field value as a <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>Retrieves the name of the field data type.</summary>
      <returns>The name of the field data type.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>Retrieves the field value as a <see cref="T:System.DateTime" />.</summary>
      <returns>The field value as a <see cref="T:System.DateTime" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>Retrieves the field value as a <see cref="T:System.Common.DbDataReader" /></summary>
      <returns>The field value as a <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>Retrieves the field value as a decimal.</summary>
      <returns>The field value as a decimal.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>Retrieves the field value as a double.</summary>
      <returns>The field value as a double.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>Retrieves the type of a field.</summary>
      <returns>The field type.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>Retrieves the field value as a float.</summary>
      <returns>The field value as a float.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>Retrieves the field value as a <see cref="T:System.Guid" />.</summary>
      <returns>The field value as a <see cref="T:System.Guid" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>Retrieves the field value as an <see cref="T:System.Int16" />.</summary>
      <returns>The field value as an <see cref="T:System.Int16" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>Retrieves the field value as an <see cref="T:System.Int32" />.</summary>
      <returns>The field value as an <see cref="T:System.Int32" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>Retrieves the field value as an <see cref="T:System.Int64" />.</summary>
      <returns>The field value as an <see cref="T:System.Int64" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>Retrieves the name of a field.</summary>
      <returns>The name of the field.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>Retrieves the ordinal of a field by using the name of the field.</summary>
      <returns>The ordinal of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>Retrieves the value of a field.</summary>
      <returns>The field value.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>Retrieves the field value as a string.</summary>
      <returns>The field value.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>Retrieves the value of a field.</summary>
      <returns>The field value.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>Populates an array of objects with the field values of the current record.</summary>
      <returns>The number of field values returned.</returns>
      <param name="values">An array of objects to store the field values.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>Returns whether the specified field is set to <see cref="T:System.DBNull" />.</summary>
      <returns>true if the field is set to <see cref="T:System.DBNull" />; otherwise false.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>Returns a value that has the given field ordinal.</summary>
      <returns>The value that has the given field ordinal.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>Gets a value that has the given field name.</summary>
      <returns>The field value.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>Sets a field to the <see cref="T:System.DBNull" /> value.</summary>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>Sets the value of a field in a record.</summary>
      <param name="ordinal">The ordinal of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>Sets field values in a record.</summary>
      <returns>The number of the fields that were set.</returns>
      <param name="values">The values of the field.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>Retrieves the field value as an <see cref="T:System.Data.IDataReader" />.</summary>
      <returns>The field value as an <see cref="T:System.Data.IDataReader" />.</returns>
      <param name="ordinal">The ordinal of the field.</param>
    </member>
    <member name="T:System.Data.Objects.EntityFunctions">
      <summary>Provides common language runtime (CLR) methods that expose conceptual model canonical functions in LINQ to Entities queries. For information about canonical functions, see Canonical Functions (Entity SQL). </summary>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddDays function. For information about the canonical AddDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date.</param>
      <param name="addValue">The number of days to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddDays function. For information about the canonical AddDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date time offset.</param>
      <param name="addValue">The number of days to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddHours function. For information about the canonical AddHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of hours to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddHours function. For information about the canonical AddHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of hours to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddHours function. For information about the canonical AddHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of hours to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMicroseconds function. For information about the canonical AddMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of microseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMicroseconds function. For information about the canonical AddMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of microseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMicroseconds function. For information about the canonical AddMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of microseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMilliseconds function. For information about the canonical AddMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of milliseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMilliseconds function. For information about the canonical AddMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of milliseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMilliseconds function. For information about the canonical AddMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of milliseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMinutes function. For information about the canonical AddMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of minutes to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMinutes function. For information about the canonical AddMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of minutes to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMinutes function. For information about the canonical AddMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of minutes to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMonths function. For information about the canonical AddMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date.</param>
      <param name="addValue">The number of months to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddMonths function. For information about the canonical AddMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date time offset.</param>
      <param name="addValue">The number of months to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddNanoseconds function. For information about the canonical AddNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of nanoseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddNanoseconds function. For information about the canonical AddNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of nanoseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddNanoseconds function. For information about the canonical AddNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of nanoseconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddSeconds function. For information about the canonical AddSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date.</param>
      <param name="addValue">The number of seconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddSeconds function. For information about the canonical AddSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid date time offset.</param>
      <param name="addValue">The number of seconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddSeconds function. For information about the canonical AddSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="timeValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="timeValue">A valid time span.</param>
      <param name="addValue">The number of seconds to add to <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddYears function. For information about the canonical AddYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date.</param>
      <param name="addValue">The number of years to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Invokes the canonical AddYears function. For information about the canonical AddYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The <paramref name="dateValue" /> incremented by <paramref name="addValue" />.</returns>
      <param name="dateValue">A valid date time offset.</param>
      <param name="addValue">The number of years to add to <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>A LINQ to Entities operator that treats the input string as a non-unicode string. This method only applies to LINQ to Entities queries.</summary>
      <returns>A non-unicode string.</returns>
      <param name="value">The input string.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>A LINQ to Entities operator that ensures the input string is treated as a unicode string. This method only applies to LINQ to Entities queries.</summary>
      <returns>A unicode string.</returns>
      <param name="value">The input string.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Invokes the canonical CreateDateTime function. For information about the canonical CreateDateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The new date.</returns>
      <param name="year">The year part of the new date.</param>
      <param name="month">The month part of the new date.</param>
      <param name="day">The day part of the new date.</param>
      <param name="hour">The hour part of the new date.</param>
      <param name="minute">The minutes part of the new date.</param>
      <param name="second">The seconds part of the new date. Note that you can specify fractions of a second with this parameter.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Invokes the canonical CreateDateTimeOffset function. For information about the canonical CreateDateTimeOffset function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The new date.</returns>
      <param name="year">The year part of the new date.</param>
      <param name="month">The month part of the new date.</param>
      <param name="day">The day part of the new date.</param>
      <param name="hour">The hour part of the new date.</param>
      <param name="minute">The minute part of the new date.</param>
      <param name="second">The seconds part of the new date. Note that you can specify fractions of a second with this parameter.</param>
      <param name="timeZoneOffset">The time zone offset part of the new date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Invokes the canonical CreateTime function. For information about the canonical CreateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The new time span.</returns>
      <param name="hour">The hours part of the new time span.</param>
      <param name="minute">The minutes part of the new time span.</param>
      <param name="second">The seconds part of the new time span. Note that you can specify fractions of a second with this parameter.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffDays function. For information about the canonical DiffDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of days between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffDays function. For information about the canonical DiffDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of days between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMonths function. For information about the canonical DiffMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of months between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMonths function. For information about the canonical DiffMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of months between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffYears function. For information about the canonical DiffYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of years between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffYears function. For information about the canonical DiffYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of years between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical GetTotalOffsetMinutes function. For information about the canonical GetTotalOffsetMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes that the <paramref name="dateTimeOffsetArgument" /> is offset from GMT. This is generally between +780 and -780 (+ or - 13 hrs). </returns>
      <param name="dateTimeOffsetArgument">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Invokes the canonical Left function. For information about the canonical Left function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The leftmost <paramref name="length" /> number of characters of <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">A valid string expression.</param>
      <param name="length">The number of characters to return.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Reverse(System.String)">
      <summary>Invokes the canonical Reverse function. For information about the canonical Reverse function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The input string with the order of the characters reversed.</returns>
      <param name="stringArgument">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Invokes the canonical Right function. For information about the canonical Right function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The rightmost <paramref name="length" /> number of characters of <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">A valid string expression.</param>
      <param name="length">The number of characters to return.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Invokes the canonical Truncate function. For information about the canonical Truncate function, see Math Canonical Functions (Entity SQL).</summary>
      <returns>
        <paramref name="value" /> truncated to the length or precision specified by <paramref name="digits" />.</returns>
      <param name="value">The number to truncate.</param>
      <param name="digits">The length or precision to truncate to.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Invokes the canonical Truncate function. For information about the canonical Truncate function, see Math Canonical Functions (Entity SQL).</summary>
      <returns>
        <paramref name="value" /> truncated to the length or precision specified by <paramref name="digits" />.</returns>
      <param name="value">The number to truncate.</param>
      <param name="digits">The length or precision to truncate to.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Invokes the canonical TruncateTime function. For information about the canonical TruncateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The input date with the time portion cleared.</returns>
      <param name="dateValue">The date to truncate.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical TruncateTime function. For information about the canonical TruncateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The input date with the time portion cleared.</returns>
      <param name="dateValue">The date time offset to truncate.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specifed collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="T:System.Data.Objects.IObjectSet`1">
      <summary>Provides functionality to allow making modifications to a set of data objects.</summary>
      <typeparam name="TEntity">The type of an entity object returned from the query.</typeparam>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Notifies the set that an object that represents a new entity must be added to the set.</summary>
      <param name="entity">The new object to add to the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Attach(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be added to the set.</summary>
      <param name="entity">The existing object to add to the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be deleted from the set. </summary>
      <param name="entity">The existing object to delete from the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Detach(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be detached from the set.</summary>
      <param name="entity">The object to detach from the set.</param>
    </member>
    <member name="T:System.Data.Objects.MergeOption">
      <summary>Specifies how objects being loaded into the object context are merged with objects already in the object context. </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.AppendOnly">
      <summary>Objects that already exist in the object context are not loaded from the data source. This is the default behavior for queries or when calling the <see cref="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" /> method on an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.OverwriteChanges">
      <summary>Objects are always loaded from the data source. Any property changes made to objects in the object context are overwritten by the data source values.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.PreserveChanges">
      <summary>In the Entity Framework version 3.5 SP1, the unmodified properties of objects in the object context are overwritten with server values. </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.NoTracking">
      <summary>Objects are maintained in a <see cref="F:System.Data.EntityState.Detached" /> state and are not tracked in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="T:System.Data.Objects.ObjectContext">
      <summary>Provides facilities for querying and working with entity data as objects. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with the given connection. During construction, the metadata workspace is extracted from the <see cref="T:System.Data.EntityClient.EntityConnection" /> object.</summary>
      <param name="connection">An <see cref="T:System.Data.EntityClient.EntityConnection" /> that contains references to the model and to the data source connection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connection" /> is invalid.-or-The metadata workspace is invalid. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with a given connection and entity container name.</summary>
      <param name="connection">An <see cref="T:System.Data.EntityClient.EntityConnection" /> that contains references to the model and to the data source connection.</param>
      <param name="defaultContainerName">The name of the default entity container. When the <paramref name="defaultContainerName" /> is set through this method, the property becomes read-only.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connection" />, <paramref name="defaultContainerName" />, or metadata workspace is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with the given connection string and default entity container name.</summary>
      <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionString" /> is invalid.-or-The metadata workspace is not valid. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with a given connection string and entity container name.  </summary>
      <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
      <param name="defaultContainerName">The name of the default entity container. When the <paramref name="defaultContainerName" /> is set through this method, the property becomes read-only.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionString" />, <paramref name="defaultContainerName" />, or metadata workspace is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AcceptAllChanges">
      <summary>Accepts all changes made to objects in the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Adds an object to the object context. </summary>
      <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name. </param>
      <param name="entity">The <see cref="T:System.Object" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> parameter is null. -or-The <paramref name="entitySetName" /> does not qualify.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.CurrentValues" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="currentEntity">The detached object that has property updates to apply to the original object.</param>
      <typeparam name="TEntity">The entity type of the object.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> or <paramref name="current" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When the object is not in the <see cref="T:System.Data.Objects.ObjectStateManager" /> or it is in a <see cref="F:System.Data.EntityState.Detached" /> state.-or- The entity key of the supplied object is invalid.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="originalEntity">The detached object that has original values to apply to the object.</param>
      <typeparam name="TEntity">The type of the entity object.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> or <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object cannot be found in the <see cref="T:System.Data.Objects.ObjectStateManager" />. -or-When the object is in an <see cref="F:System.Data.EntityState.Added" /> or a <see cref="F:System.Data.EntityState.Detached" /> state.-or- The entity key of the supplied object is invalid or has property changes.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Applies property changes from a detached object to an object already attached to the object context.</summary>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="changed">The detached object that has property updates to apply to the original object.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> is null or an empty string.-or-When <paramref name="changed" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When the entity is in a state other than <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.-or- The original object is not attached to the context.</exception>
      <exception cref="T:System.ArgumentException">When the type of the <paramref name="changed" /> object is not the same type as the original object.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)">
      <summary>Attaches an object or object graph to the object context when the object has an entity key. </summary>
      <param name="entity">The object to attach.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">Invalid entity key. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Attaches an object or object graph to the object context in a specific entity set. </summary>
      <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name. </param>
      <param name="entity">The <see cref="T:System.Object" /> to attach. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">Invalid entity set.-or-The object has a temporary key. -or-The object has an <see cref="T:System.Data.EntityKey" /> and the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> does not match with the entity set passed in as an argument of the method.-or-The object does not have an <see cref="T:System.Data.EntityKey" /> and no entity set is provided.-or-Any object from the object graph has a temporary <see cref="T:System.Data.EntityKey" />.-or-Any object from the object graph has an invalid <see cref="T:System.Data.EntityKey" /> (for example, values in the key do not match values in the object).-or-The entity set could not be found from a given <paramref name="entitySetName" /> name and entity container name.-or-Any object from the object graph already exists in another state manager.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.CommandTimeout">
      <summary>Gets or sets the timeout value, in seconds, for all object context operations. A null value indicates that the default value of the underlying provider will be used.</summary>
      <returns>An <see cref="T:System.Int32" /> value that is the timeout value, in seconds.</returns>
      <exception cref="T:System.ArgumentException">The timeout value is less than 0. </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.Connection">
      <summary>Gets the connection used by the object context.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnection" /> object that is the connection.</returns>
      <exception cref="T:System.ObjectDisposedException">When the <see cref="T:System.Data.Objects.ObjectContext" /> instance has been disposed.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ContextOptions">
      <summary>Gets the <see cref="T:System.Data.Objects.ObjectContextOptions" /> instance that contains options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectContextOptions" /> instance that contains options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />.  </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabase">
      <summary>Creates the database by using the current data source connection and the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Generates a data definition langauge (DDL) script that creates schema objects (tables, primary keys, foreign keys) for the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
      <returns>A DDL script that creates schema objects for the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Creates the entity key for a specific object, or returns the entity key if it already exists. </summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> of the object.</returns>
      <param name="entitySetName">The fully qualified name of the entity set to which the entity object belongs.</param>
      <param name="entity">The object for which the entity key is being retrieved. The object must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithKey" />.</param>
      <exception cref="T:System.ArgumentNullException">When either parameter is null. </exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is empty.-or- When the type of the <paramref name="entity" /> object does not exist in the entity set.-or-When the <paramref name="entitySetName" /> is not fully qualified.</exception>
      <exception cref="T:System.InvalidOperationException">When the entity key cannot be constructed successfully based on the supplied parameters.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObject``1">
      <summary>Creates and returns an instance of the requested type .</summary>
      <returns>An instance of the requested type <paramref name="T" />, or an instance of a derived type that enables <paramref name="T" /> to be used with the Entity Framework. The returned object is either an instance of the requested type or an instance of a derived type that enables the requested type to be used with the Entity Framework.</returns>
      <typeparam name="T">Type of object to be returned.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance that is used to query, add, modify, and delete objects of the specified entity type.</summary>
      <returns>The new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</returns>
      <typeparam name="TEntity">Entity type of the requested <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" />.-or-When the specified type belongs to more than one entity set.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance that is used to query, add, modify, and delete objects of the specified type and with the specified entity set name.</summary>
      <returns>The new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</returns>
      <param name="entitySetName">Name of the entity set for the returned <see cref="T:System.Data.Objects.ObjectSet`1" />. The string must be qualified by the default container name if the <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" />. </param>
      <typeparam name="TEntity">Entity type of the requested <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When the <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" /> and the name is not qualified as part of the <paramref name="entitySetName" /> parameter.-or-When the specified type belongs to more than one entity set.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Generates an equivalent type that can be used with the Entity Framework for each type in the supplied enumeration.</summary>
      <param name="types"></param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Creates an <see cref="T:System.Data.Objects.ObjectQuery`1" /> in the current object context by using the specified query string.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> of the specified type.</returns>
      <param name="queryString">The query string to be executed.</param>
      <param name="parameters">Parameters to pass to the query.</param>
      <typeparam name="T">The entity type of the returned <see cref="T:System.Data.Objects.ObjectQuery`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="queryString" /> or <paramref name="parameters" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DatabaseExists">
      <summary>Checks if the database that is specified as the database in the current data source connection exists on the data source. </summary>
      <returns>true if the database exists.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.DefaultContainerName">
      <summary>Gets or sets the default container name.</summary>
      <returns>A <see cref="T:System.String" /> that is the default container name. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteDatabase">
      <summary>Deletes the database that is specified as the database in the current data source connection.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Marks an object for deletion. </summary>
      <param name="entity">An object that specifies the entity to delete. The object can be in any state except <see cref="F:System.Data.EntityState.Detached" />. </param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Detach(System.Object)">
      <summary>Removes the object from the object context.</summary>
      <param name="entity">Object to be detached. Only the <paramref name="entity" /> is removed; if there are any related objects that are being tracked by the same <see cref="T:System.Data.Objects.ObjectStateManager" />, those will not be detached automatically.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="entity" /> is not associated with this <see cref="T:System.Data.Objects.ObjectContext" /> (for example, was newly created and not associated with any context yet, or was obtained through some other context, or was already detached).</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DetectChanges">
      <summary>Ensures that <see cref="T:System.Data.Objects.ObjectStateEntry" /> changes are synchronized with changes in all objects that are tracked by the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose">
      <summary>Releases the resources used by the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Releases the resources used by the object context.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])">
      <summary>Executes the given stored procedure or function that is defined in the data source and expressed in the conceptual model, with the specified parameters, and merge option. Returns a typed <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> for the data that is returned by the stored procedure.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. </param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <typeparam name="TElement">The entity type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the function is executed against the data source. This type must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Executes a stored procedure or function that is defined in the data source and mapped in the conceptual model, with the specified parameters. Returns a typed <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> for the data that is returned by the stored procedure.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <typeparam name="TElement">The entity type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the function is executed against the data source. This type must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Executes a stored procedure or function that is defined in the data source and expressed in the conceptual model; discards any results returned from the function; and returns the number of rows affected by the execution.</summary>
      <returns>The number of rows affected.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>Executes an arbitrary command directly against the data source using the existing connection.</summary>
      <returns>The number of rows affected.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Executes a query directly against the data source that returns a sequence of typed results. </summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])">
      <summary>Executes a query directly against the data source and returns a sequence of typed results. Specify the entity set and the merge option so that query results can be tracked as entities. </summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="entitySetName">The entity set of the <paramref name="TResult" /> type. If an entity set name is not provided, the results are not going to be tracked.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Returns all the existing proxy types.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of all the existing proxy types.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)">
      <summary>Returns an object that has the specified entity key.</summary>
      <returns>An <see cref="T:System.Object" /> that is an instance of an entity type.</returns>
      <param name="key">The key of the object to be found.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.Data.ObjectNotFoundException">The object is not found in either the <see cref="T:System.Data.Objects.ObjectStateManager" /> or the data source.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Returns the entity type of the POCO entity associated with a proxy object of a specified type.</summary>
      <returns>The <see cref="T:System.Type" /> of the associated POCO entity.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the proxy object.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Explicitly loads an object related to the supplied object by the specified navigation property and using the default merge option. </summary>
      <param name="entity">The entity for which related objects are to be loaded.</param>
      <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-When the <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)">
      <summary>Explicitly loads an object that is related to the supplied object by the specified navigation property and using the specified merge option. </summary>
      <param name="entity">The entity for which related objects are to be loaded.</param>
      <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> value to use when you load the related objects.</param>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-When the <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Explicitly loads an object that is related to the supplied object by the specified LINQ query and by using the default merge option. </summary>
      <param name="entity">The source object for which related objects are to be loaded.</param>
      <param name="selector">A LINQ expression that defines the related objects to be loaded.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">When <paramref name="selector" /> does not supply a valid input parameter.</exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-When the <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)">
      <summary>Explicitly loads an object that is related to the supplied object by the specified LINQ query and by using the specified merge option. </summary>
      <param name="entity">The source object for which related objects are to be loaded.</param>
      <param name="selector">A LINQ expression that defines the related objects to be loaded.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> value to use when you load the related objects.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">When <paramref name="selector" /> does not supply a valid input parameter.</exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-When the <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.MetadataWorkspace">
      <summary>Gets the metadata workspace used by the object context. </summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> object associated with this <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.ObjectMaterialized">
      <summary>Occurs when a new entity object is created from data in the data source as part of a query or load operation. </summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ObjectStateManager">
      <summary>Gets the object state manager used by the object context to track object changes.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateManager" /> used by this <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.QueryProvider">
      <summary>Gets the LINQ query provider associated with this object context.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> instance used by this object context.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Updates a collection of objects in the object context with data from the data source. </summary>
      <param name="refreshMode">A <see cref="T:System.Data.Objects.RefreshMode" /> value that indicates whether property changes in the object context are overwritten with property values from the data source.</param>
      <param name="collection">An <see cref="T:System.Collections.IEnumerable" /> collection of objects to refresh.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="refreshMode" /> is not valid.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> is empty. -or- An object is not attached to the context. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)">
      <summary>Updates an object in the object context with data from the data source. </summary>
      <param name="refreshMode">One of the <see cref="T:System.Data.Objects.RefreshMode" /> values that specifies which mode to use for refreshing the <see cref="T:System.Data.Objects.ObjectStateManager" />.</param>
      <param name="entity">The object to be refreshed. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="refreshMode" /> is not valid.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> is empty. -or- An object is not attached to the context. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges">
      <summary>Persists all updates to the data source and resets change tracking in the object context.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred in the data source.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Persists all updates to the data source and optionally resets change tracking in the object context.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <param name="acceptChangesDuringSave">This parameter is needed for client-side transaction support. If true, the change tracking on all objects is reset after <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> finishes. If false, you must call the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> method after <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />. </param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)">
      <summary>Persists all updates to the data source with the specified <see cref="T:System.Data.Objects.SaveOptions" />.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <param name="options">A <see cref="T:System.Data.Objects.SaveOptions" /> value that determines the behavior of the operation.</param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred.</exception>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.SavingChanges">
      <summary>Occurs when changes are saved to the data source. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Translates a <see cref="T:System.Data.Common.DbDataReader" /> that contains rows of entity data to objects of the requested entity type.</summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="reader">The <see cref="T:System.Data.Common.DbDataReader" /> that contains entity data to translate into entity objects.</param>
      <typeparam name="TElement"></typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)">
      <summary>Translates a <see cref="T:System.Data.Common.DbDataReader" /> that contains rows of entity data to objects of the requested entity type, in a specific entity set, and with the specified merge option.</summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="reader">The <see cref="T:System.Data.Common.DbDataReader" /> that contains entity data to translate into entity objects.</param>
      <param name="entitySetName">The entity set of the <paramref name="TResult" /> type.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when translated objects are added to the object context. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">When the supplied <paramref name="mergeOption" /> is not a valid <see cref="T:System.Data.Objects.MergeOption" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">When the supplied <paramref name="entitySetName" /> is not a valid entity set for the <paramref name="TResult" /> type. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)">
      <summary>Returns an object that has the specified entity key.</summary>
      <returns>true if the object was retrieved successfully. false if the <paramref name="key" /> is temporary, the connection is null, or the <paramref name="value" /> is null.</returns>
      <param name="key">The key of the object to be found.</param>
      <param name="value">When this method returns, contains the object.</param>
      <exception cref="T:System.ArgumentException">Incompatible metadata for <paramref name="key" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectContextOptions">
      <summary>Defines options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Gets or sets a Boolean value that determines whether related objects are loaded automatically when a navigation property is accessed.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when lazy loading is enabled; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Gets or sets a Boolean value that determines whether proxy instances are created for custom data classes that are persistence ignorant. </summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when proxies are created; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value that determines whether to use the legacy <see cref="F:System.Data.Objects.MergeOption.PreserveChanges" /> behavior. </summary>
      <returns>true if the legacy <see cref="F:System.Data.Objects.MergeOption.PreserveChanges" /> behavior should be used; otherwise, false.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventArgs">
      <summary>Contains the data for the <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> event.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Gets the entity object that was created.</summary>
      <returns>The entity object that was created.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> event of the <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <param name="sender">The <see cref="T:System.Data.Objects.ObjectContext" /> instance that triggered the event. </param>
      <param name="e">An <see cref="T:System.Data.Objects.ObjectMaterializedEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="T:System.Data.Objects.ObjectParameter">
      <summary>Represents a query parameter that is passed to an object query. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class with the specified name and value. </summary>
      <param name="name">The parameter name. This name should not include the "@" parameter marker that is used in Entity SQL statements, only the actual name. The first character of the expression must be a letter. Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</param>
      <param name="value">The initial value (and inherently, the type) of the parameter.</param>
      <exception cref="T:System.ArgumentNullException">If the value of either argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the value of the name argument is not valid. Parameter names must start with a letter and can only contain letters, numbers, and underscores.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class with the specified name and type. </summary>
      <param name="name">The parameter name. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name. The first character of the expression must be a letter. Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</param>
      <param name="type">The common language runtime (CLR) type of the parameter.</param>
      <exception cref="T:System.ArgumentNullException">If the value of either argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the value of the name argument is invalid. Parameter names must start with a letter and can only contain letters, numbers, and underscores.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Name">
      <summary>Gets the parameter name, which can only be set through a constructor.</summary>
      <returns>The parameter name, which can only be set through a constructor.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.ParameterType">
      <summary>Gets the parameter type.</summary>
      <returns>The <see cref="T:System.Type" /> of the parameter.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Value">
      <summary>Gets or sets the parameter value.</summary>
      <returns>The parameter value.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectParameterCollection">
      <summary>Represents the query parameters as <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are defined in an <see cref="T:System.Data.Objects.ObjectQuery`1" />. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)">
      <summary>Adds the specified <see cref="T:System.Data.Objects.ObjectParameter" /> to the collection.</summary>
      <param name="parameter">The parameter to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The<paramref name=" parameter" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameter" /> argument already exists in the collection. This behavior differs from that of most collections that allow duplicate entries. -or-Another parameter with the same name as the <paramref name="parameter" /> argument already exists in the collection. Note that the lookup is case-insensitive. This behavior differs from that of most collections, and is more like that of a <see cref="T:System.Collections.Generic.Dictionary" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The type of the <paramref name="parameter" /> is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Clear">
      <summary>Deletes all <see cref="T:System.Data.Objects.ObjectParameter" /> instances from the collection.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)">
      <summary>Checks for the existence of a specified <see cref="T:System.Data.Objects.ObjectParameter" /> in the collection by reference.</summary>
      <returns>Returns true if the parameter object was found in the collection; otherwise, false.  </returns>
      <param name="parameter">The <see cref="T:System.Data.Objects.ObjectParameter" /> to find in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameter" /> argument is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Determines whether an <see cref="T:System.Data.Objects.ObjectParameter" /> with the specified name is in the collection.</summary>
      <returns>Returns true if a parameter with the specified name was found in the collection; otherwise, false.</returns>
      <param name="name">The name of the parameter to look for in the collection. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)">
      <summary>Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.</summary>
      <param name="array">The array into which to copy the parameters.</param>
      <param name="index">The index in the array at which to start copying the parameters.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Count">
      <summary>Gets the number of parameters currently in the collection.</summary>
      <returns>The number of <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are currently in the collection.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Provides an indexer that allows callers to retrieve parameters by name.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectParameter" /> instance.</returns>
      <param name="name">The name of the parameter to find. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">No parameter with the specified name is found in the collection.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)">
      <summary>Removes an instance of an <see cref="T:System.Data.Objects.ObjectParameter" /> from the collection by reference if it exists in the collection.  </summary>
      <returns>Returns true if the parameter object was found and removed from the collection; otherwise, false. </returns>
      <param name="parameter">An object to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameter" /> argument is null.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only or can be modified.</summary>
      <returns>A Boolean value that is true if the collection is read-only and false of the collection can be modified.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns a typed enumerator over the collection. </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Data.Objects.ObjectParameter" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an untyped enumerator over the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> instance.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery">
      <summary>Implements common functionality for queries against a conceptual model using both LINQ to Entities and <see cref="T:System.Data.Objects.ObjectQuery`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.CommandText">
      <summary>Returns the command text for the query.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Context">
      <summary>Gets the object context associated with this object query.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectContext" /> associated with this <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Gets or sets a value that indicates whether the query plan should be cached.</summary>
      <returns>A value that indicates whether the query plan should be cached.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.Execute(System.Data.Objects.MergeOption)">
      <summary>Executes the untyped object query with the specified merge option.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> that contains a collection of entity objects returned by the query.</returns>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.GetResultType">
      <summary>Returns information about the result type of the query.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> value that contains information about the result type of the query.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.MergeOption">
      <summary>Gets or sets how objects returned from a query are added to the object context. </summary>
      <returns>The query <see cref="T:System.Data.Objects.MergeOption" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Parameters">
      <summary>Gets the parameter collection for this object query.</summary>
      <returns>The parameter collection for this <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the collection returned by the query contains collection objects.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Gets the result element type for this query instance.</summary>
      <returns>A <see cref="T:System.Type" /> that is the result element type for this query instance.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Gets the expression describing this query. </summary>
      <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression" /> that describes this query.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Gets the LINQ <see cref="T:System.Linq.IQueryProvider" /> associated with this query instance.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> associated with this query instance.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.ToTraceString">
      <summary>Returns the commands to execute against the data source.</summary>
      <returns>A string that represents the commands that the query executes against the data source.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery`1">
      <summary>Represents a typed query against a conceptual model in a given object context. </summary>
      <typeparam name="T">The entity type of the query.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance using the specified Entity SQL command as the initial query.</summary>
      <param name="commandText">The Entity SQL query.</param>
      <param name="context">The <see cref="T:System.Data.Objects.ObjectContext" /> on which to execute the query.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance using the specified Entity SQL command as the initial query and the specified merge option.</summary>
      <param name="commandText">The Entity SQL query.</param>
      <param name="context">The <see cref="T:System.Data.Objects.ObjectContext" /> on which to execute the query.</param>
      <param name="mergeOption">Specifies how the entities that are retrieved through this query should be merged with the entities that have been returned from previous queries against the same <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Distinct">
      <summary>Limits the query to unique results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with SELECT DISTINCT applied.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})">
      <summary>Limits the query results by excluding results based on the results of another object query.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with EXCEPT applied based on the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to exclude from the query.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)">
      <summary>Executes the object query with the specified merge option.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> that contains a collection of entity objects returned by the query.</returns>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Groups the query results by the specified criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of type <see cref="T:System.Data.Common.DbDataRecord" /> that is equivalent to the original instance with GROUP BY applied. </returns>
      <param name="keys">The key columns by which to group the results.</param>
      <param name="projection">The list of selected properties that defines the projection. </param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or an empty string.-or-The <paramref name="projection" /> parameter is null or an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Specifies the related objects to include in the query results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> with the defined query path.</returns>
      <param name="path">Dot-separated list of related objects to return in the query results.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})">
      <summary>Limits the query results by including only the results that exist in another object query. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with INTERSECT applied based on the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to include in the query.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or is an empty string.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery`1.Name">
      <summary>Gets or sets the name of this object query.</summary>
      <returns>A string value that is the name of this <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
      <exception cref="T:System.ArgumentException">The value specified on set is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OfType``1">
      <summary>Limits the query to only results of a specific type.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with OFTYPE applied.</returns>
      <typeparam name="TResultType">The type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the query is executed with the applied filter.</typeparam>
      <exception cref="T:System.Data.EntitySqlException">The type specified is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Orders the query results by the specified criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with ORDER BY applied. </returns>
      <param name="keys">The key columns by which to order the results.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="keys" /> or <paramref name="parameters" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="key" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to only the properties that are defined in the specified projection.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of type <see cref="T:System.Data.Common.DbDataRecord" /> that is equivalent to the original instance with SELECT applied. </returns>
      <param name="projection">The list of selected properties that defines the projection.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="projection" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to only the property specified in the projection.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of a type compatible with the specific projection. The returned <see cref="T:System.Data.Objects.ObjectQuery`1" /> is equivalent to the original instance with SELECT VALUE applied. </returns>
      <param name="projection">The projection list.</param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <typeparam name="TResultType">The type of the <see cref="T:System.Data.Objects.ObjectQuery`1" /> returned by the <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> method.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="projection" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Orders the query results by the specified criteria and skips a specified number of results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with both ORDER BY and SKIP applied. </returns>
      <param name="keys">The key columns by which to order the results.</param>
      <param name="count">The number of results to skip. This must be either a constant or a parameter reference.</param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <exception cref="T:System.ArgumentNullException">Any argument is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> is an empty string.-or-<paramref name="count" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the results of the query.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the results.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to a specified number of items.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with TOP applied. </returns>
      <param name="count">The number of items in the results as a string. </param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="count" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})">
      <summary>Combines the results of the query with the results of another object query, without any duplicates. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with UNION applied to add the results of the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})">
      <summary>Combines the results of the query with the results of another object query, including all duplicates. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with UNION ALL applied to add the results of the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query to results that match specified filtering criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with WHERE applied.</returns>
      <param name="predicate">The filter predicate.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="predicate" /> is an empty string.</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectResult">
      <summary>The base class for the results of an object query against a conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.Dispose">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.ElementType">
      <summary>When overridden in a derived type, gets the type of the generic <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the generic <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the query results.</summary>
      <returns>An enumerator that iterates through the query results.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the collection returned by the query contains collection objects.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Returns the results in a format useful for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectResult`1">
      <summary>Represents the result of an <see cref="T:System.Data.Objects.ObjectQuery`1" /> as an enumerable collection of objects.</summary>
      <typeparam name="T">The entity type of the result.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.Dispose">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult`1.ElementType">
      <summary>Gets the type of the <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the query results.</summary>
      <returns>An enumerator that iterates through the query results.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectSet`1">
      <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations. </summary>
      <typeparam name="TEntity">The entity type.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Adds an object to the object context in the current entity set. </summary>
      <param name="entity">The object to add.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.CurrentValues" /> property of an <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="currentEntity">The detached object that has property updates to apply to the original object.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> property of an <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="originalEntity">The detached object that has property updates to apply to the original object.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Attach(`0)">
      <summary>Attaches an object or object graph to the object context in the current entity set. </summary>
      <param name="entity">The object to attach.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject``1">
      <summary>Creates an instance of the specified type.</summary>
      <returns>An instance of the requested type <paramref name="T" />, or an instance of a proxy type that corresponds to the type <paramref name="T" />.</returns>
      <typeparam name="T">Type of object to be returned.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject">
      <summary>Creates a new entity type object.</summary>
      <returns>The new entity type object, or an instance of a proxy type that corresponds to the entity type.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Marks an object for deletion. </summary>
      <param name="entity">An object that represents the entity to delete. The object can be in any state except <see cref="F:System.Data.EntityState.Detached" />. </param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Detach(`0)">
      <summary>Removes the object from the object context.</summary>
      <param name="entity">Object to be detached. Only the <paramref name="entity" /> is removed; if there are any related objects that are being tracked by the same <see cref="T:System.Data.Objects.ObjectStateManager" />, those will not be detached automatically.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectSet`1.EntitySet">
      <summary>Gets the metadata of the entity set represented by this <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object. </returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateEntry">
      <summary>Maintains state and key information for objects and relationships and change tracking for object properties. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Accepts the current values as original values.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Sets the current values of the entry to match the property values of a supplied object.</summary>
      <param name="currentEntity">The detached object that has updated values to apply to the object. <paramref name="currentEntity " />can also be the object's entity key.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="currentEntity " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the key of the supplied object does not match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" />.-or-When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-When the object is not in the <see cref="T:System.Data.Objects.ObjectStateManager." />-or- The object is in either an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Deleted" />, or <see cref="F:System.Data.EntityState.Detached" /> state.-or-The entity key of the supplied object is invalid or has property changes.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Sets the original values of the entry to match the property values of a supplied object.</summary>
      <param name="originalEntity">The detached object that has original values to apply to the object. <paramref name="original" /> can also be the object's entity key.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the key of the supplied object does not match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" />.-or-When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-When the object is not in the <see cref="T:System.Data.Objects.ObjectStateManager." />-or- The object is in either an <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> state.-or-The entity key of the supplied object is invalid or has property changes.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ChangeState(System.Data.EntityState)">
      <summary>Changes state of the entry to the specified <see cref="T:System.Data.EntityState" /> value.</summary>
      <param name="state">The <see cref="T:System.Data.EntityState" /> value to set for the <see cref="P:System.Data.Objects.ObjectStateEntry.State" /> property of the entry.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When trying to change the state to <see cref="F:System.Data.EntityState.Detached" /> from any other <see cref="T:System.Data.EntityState." />-or- When trying to change the state of an entity key entry to any state besides <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.CurrentValues">
      <summary>Gets the current property values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>A <see cref="T:System.Data.Objects.CurrentValueRecord" /> that contains the current values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.Delete">
      <summary>Marks an entity as deleted.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.Entity">
      <summary>Gets the object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />. </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntityKey">
      <summary>Gets the <see cref="T:System.Data.EntityKey" /> associated with the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> associated with the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntitySet">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> for the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> of this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Returns the names of an object's properties that have changed since the last time <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of names as <see cref="T:System.String" />. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Gets the updatable version of original values of the object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.  </summary>
      <returns>The updatable original values of object data.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.IsRelationship">
      <summary>Gets a Boolean value that indicates whether this <see cref="T:System.Data.Objects.ObjectStateEntry" /> represents a relationship.</summary>
      <returns>A Boolean value that is true if this <see cref="T:System.Data.Objects.ObjectStateEntry" /> represents a relationship; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Gets the <see cref="T:System.Data.Objects.ObjectStateManager" /> for this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateManager" /> for this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.OriginalValues">
      <summary>Gets the read-only version of original values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />. To get updatable original values, use <see cref="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues" />.</summary>
      <returns>The read-only version of original values of the relationship set entry or entity associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Returns a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instance for the object represented by entry.</summary>
      <returns>A <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-The object is in a <see cref="F:System.Data.EntityState.Detached" /> state.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModified">
      <summary>Sets the state of the object or relationship to Modified.</summary>
      <exception cref="T:System.InvalidOperationException">The state is not <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Marks the specified property as modified.</summary>
      <param name="propertyName">An Entity Data Model name.</param>
      <exception cref="T:System.InvalidOperationException">The state is not <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.State">
      <summary>Gets the state of this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>An <see cref="T:System.Data.EntityState" /> that represents the current state of the object or relationship. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Notifies the state manager that a complex property has changed.</summary>
      <param name="entityMemberName">The name of the top-level object property that is changing. This property returns the complex object.</param>
      <param name="complexObject">The complex object that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property on the complex object that is changing.</param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="entityMemberName" /> is null (Nothing in Visual Basic).-or- The value of <paramref name="complexObjectMemberName" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="complexObject" /> is null (Nothing in Visual Basic). Objects cannot have complex properties that are null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Notifies the state manager that a complex property has a pending change.</summary>
      <param name="entityMemberName">The name of the complex property. This property returns the complex object.</param>
      <param name="complexObject">The complex object that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property on the complex object that is changing.</param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="entityMemberName" /> is null (Nothing in Visual Basic).-or- The value of <paramref name="complexObjectMemberName" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="complexObject" /> is null (Nothing in Visual Basic). Objects cannot have complex properties that are null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Notifies the state manager that a property has changed.</summary>
      <param name="entityMemberName">The name of the entity property that has changed.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Notifies the state manager that a property has a pending change.</summary>
      <param name="entityMemberName">The name of the entity property that is changing.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Gets the <see cref="T:System.Data.EntityState" /> for the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.EntityState" /> for the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateManager">
      <summary>Maintains object state and identity management for entity type instances and relationship instances.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.#ctor(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectStateManager" /> class. </summary>
      <param name="metadataWorkspace">The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, which supplies mapping and metadata information.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.EntityState)">
      <summary>Changes state of the <see cref="T:System.Data.Objects.ObjectStateEntry" /> for a specific object to the specified <paramref name="entityState" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the supplied <paramref name="entity" />.</returns>
      <param name="entity">The object for which the state must be changed.</param>
      <param name="entityState">The new state of the object.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the object is not detached and does not have an entry in the state manager.-or-When you try to change the state to <see cref="F:System.Data.EntityState.Detached" /> from any other <see cref="T:System.Data.EntityState." />-or- When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the name of the navigation property.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="navigationProperty">The name of the navigation property on <paramref name="source" /> that returns the specified <paramref name="target" />.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When trying to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the properties of the relationship.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="relationshipName">The name of the relationship.</param>
      <param name="targetRoleName">The role name at the <paramref name="target" /> end of the relationship.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and a LINQ expression that defines the navigation property.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="navigationPropertySelector">A LINQ expression that selects the navigation property on <paramref name="source" /> that returns the specified <paramref name="target" />.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <typeparam name="TEntity">The entity type of the <paramref name="source" /> object.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="target" />, or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> is malformed or cannot return a navigation property.</exception>
      <exception cref="T:System.InvalidOperationException">When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState)">
      <summary>Returns a collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects for objects or relationships with the given state.</summary>
      <returns>A collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects in the given <see cref="T:System.Data.EntityState" />.</returns>
      <param name="state">An <see cref="T:System.Data.EntityState" /> used to filter the returned <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects. </param>
      <exception cref="T:System.ArgumentException">When <paramref name="state" /> is <see cref="F:System.Data.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.EntityKey)">
      <summary>Returns an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object or relationship entry with the specified key.</summary>
      <returns>The corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" />.</returns>
      <param name="key">The <see cref="T:System.Data.EntityKey" />.  </param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When the specified <paramref name="key" /> cannot be found in the state manager.</exception>
      <exception cref="T:System.InvalidOperationException">No entity with the specified <see cref="T:System.Data.EntityKey" /> exists in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Returns an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the specified object.</summary>
      <returns>The corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Object" />.</returns>
      <param name="entity">The <see cref="T:System.Object" /> to which the retrieved <see cref="T:System.Data.Objects.ObjectStateEntry" /> belongs.</param>
      <exception cref="T:System.InvalidOperationException">No entity for the specified <see cref="T:System.Object" /> exists in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Returns the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> that is used by the specified object. </summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for the specified object.</returns>
      <param name="entity">The object for which to return the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <exception cref="T:System.InvalidOperationException">When a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> cannot be returned for the specified <paramref name="entity" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> associated with this state manager.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> associated with this <see cref="T:System.Data.Objects.ObjectStateManager" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Occurs when entities are added to or removed from the state manager.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.EntityKey,System.Data.Objects.ObjectStateEntry@)">
      <summary>Tries to retrieve the corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object or relationship with the specified <see cref="T:System.Data.EntityKey" />.</summary>
      <returns>A Boolean value that is true if there is a corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" />; otherwise, false.</returns>
      <param name="key">The given <see cref="T:System.Data.EntityKey" />.</param>
      <param name="entry">When this method returns, contains an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" /> This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">A null (Nothing in Visual Basic) value is provided for <paramref name="key" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Objects.ObjectStateEntry@)">
      <summary>Tries to retrieve the corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the specified <see cref="T:System.Object" />.</summary>
      <returns>A Boolean value that is true if there is a corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given object; otherwise, false.</returns>
      <param name="entity">The <see cref="T:System.Object" /> to which the retrieved <see cref="T:System.Data.Objects.ObjectStateEntry" /> belongs.</param>
      <param name="entry">When this method returns, contains the <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" /> This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Objects.DataClasses.RelationshipManager@)">
      <summary>Returns the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> that is used by the specified object. </summary>
      <returns>true if a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instance was returned for the supplied <paramref name="entity" />; otherwise false. </returns>
      <param name="entity">The object for which to return the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <param name="relationshipManager">When this method returns, contains the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for the <paramref name="entity" />.</param>
    </member>
    <member name="T:System.Data.Objects.OriginalValueRecord">
      <summary>Provides access to the original values of object data.</summary>
    </member>
    <member name="T:System.Data.Objects.ProxyDataContractResolver">
      <summary>This class helps resolve proxy types that were created for persistence-ignorant data classes to the actual types of persistence-ignorant objects. </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> class. </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>During deserialization, maps any xsi:type information to the actual type of the persistence-ignorant object. </summary>
      <returns>Returns the type that the xsi:type is mapped to. Returns null if no known type was found that matches the xsi:type.</returns>
      <param name="typeName">The xsi:type information to map.</param>
      <param name="typeNamespace">The namespace of the xsi:type.</param>
      <param name="declaredType">The declared type.</param>
      <param name="knownTypeResolver">An instance of <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>During serialization, maps actual types to xsi:type information.</summary>
      <returns>true if the type was resolved; otherwise, false.  </returns>
      <param name="dataContractType">The actual type of the persistence-ignorant object.</param>
      <param name="declaredType">The declared type.</param>
      <param name="knownTypeResolver">An instance of <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">When this method returns, contains a list of xsi:type declarations.</param>
      <param name="typeNamespace">When this method returns, contains a list of namespaces used.</param>
    </member>
    <member name="T:System.Data.Objects.RefreshMode">
      <summary>Specifies whether property changes made to objects tracked by Object Services are kept or replaced with property values from the data source. </summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.ClientWins">
      <summary>Property changes made to objects in the object context are not replaced with values from the data source. On the next call to <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />, these changes are sent to the data source.</summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.StoreWins">
      <summary>Property changes made to objects in the object context are replaced with values from the data source. </summary>
    </member>
    <member name="T:System.Data.Objects.SaveOptions">
      <summary>Specifies the behavior of the object context when the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" /> method is called.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.None">
      <summary>Changes are saved without the <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> or the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> methods being called.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>After changes are saved, the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> method is called, which resets change tracking in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>Before changes are saved, the <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> method is called to synchronize the property values of objects that are attached to the object context with data in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.ComplexObject">
      <summary>Base class for complex types.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Creates an instance of <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Notifies the change tracker that a property of a complex object has changed.</summary>
      <param name="property">The name of the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Notifies the change tracker that a property change is pending on a complex object.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Attribute that indicates that the property represents a complex property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute" /> class. </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>Attribute that indicates that the class represents a complex type.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Attribute that indicates that the class represents an entity type. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute" /> class. </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmFunctionAttribute">
      <summary>An attribute that, when applied to a method, indicates that the method is a proxy for a function in the conceptual model or storage model. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmFunctionAttribute" /> class.</summary>
      <param name="namespaceName">The namespace of the mapped-to function.</param>
      <param name="functionName">The name of the mapped-to function.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.FunctionName">
      <summary>The name of the mapped-to function.</summary>
      <returns>The name of the mapped-to function.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.NamespaceName">
      <summary>The namespace of the mapped-to function.</summary>
      <returns>The namespace of the mapped-to function.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Base class for attributes that define how properties of types in the object layer are mapped to the properties of entity types or complex types in the conceptual model.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Defines a relationship between two entity types based on an association in the conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Creates an instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> class.</summary>
      <param name="relationshipNamespaceName">The name of the namespace for the association in which this entity participates.</param>
      <param name="relationshipName">The name of a relationship in which this entity participates. </param>
      <param name="role1Name">Name of the role for the type at one end of the association.</param>
      <param name="role1Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at one end of the association, such as one or many.</param>
      <param name="role1Type">The type of the entity at one end of the association.</param>
      <param name="role2Name">Name of the role for the type at the other end of the association.</param>
      <param name="role2Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at the other end of the association, such as one or many.</param>
      <param name="role2Type">The type of the entity at the other end of the association.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> class. </summary>
      <param name="relationshipNamespaceName">The name of the namespace for the association in which this entity participates.</param>
      <param name="relationshipName">The name of a relationship in which this entity participates.</param>
      <param name="role1Name">Name of the role for the type at one end of the association.</param>
      <param name="role1Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at one end of the association, such as one or many.</param>
      <param name="role1Type">The type of the entity at one end of the association.</param>
      <param name="role2Name">Name of the role for the type at the other end of the association.</param>
      <param name="role2Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at the other end of the association, such as one or many.</param>
      <param name="role2Type">The type of the entity at the other end of the association.</param>
      <param name="isForeignKey">A value that indicates whether the relationship is based on the foreign key value.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Gets a Boolean value that indicates whether the relationship is based on the foreign key value.</summary>
      <returns>true if the relationship is based on the foreign key value; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Name of the relationship. </summary>
      <returns>A <see cref="T:System.String" /> that is the name of a relationship that is defined by this <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />. </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>The namespace for the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace for the relationship.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Multiplicity at one end of the relationship.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> value that indicates the multiplicity.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Name of the role at one end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the name of the role.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Type of the entity at one end of the relationship.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the object at this end of the association.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Multiplicity at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> value that indicates the multiplicity.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Name of the role at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the name of the role.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Type of the entity at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the object t the other end of the association. </returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Attribute that indicates that the property represents a navigation property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> class. </summary>
      <param name="relationshipNamespaceName">The namespace name of the relationship property.</param>
      <param name="relationshipName">The name of the relationship. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">The role name at the other end of the relationship.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Gets the unqualified relationship name. </summary>
      <returns>The relationship name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>The namespace name of the navigation property.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Gets the role name at the other end of the relationship.</summary>
      <returns>The target role name is specified by the Role attribute of the other End element in the association that defines this relationship in the conceptual model. For more information, see Association (EDM).</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Attribute that indicates that the property represents a scalar property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute" /> class.  </summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Gets or sets the value that indicates whether the property is part of the entity key.</summary>
      <returns>The value that indicates whether the property is part of the entity key.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Gets or sets the value that indicates whether the property can have a null value.</summary>
      <returns>The value that indicates whether the property can have a null value.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Attribute that indicates that the assembly contains classes that are mapped to entity types in a conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> class. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> class with a unique value for each model referenced by the assembly. </summary>
      <param name="assemblyGuid">A string that is a unique GUID value for the model in the assembly.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmTypeAttribute">
      <summary>Base class for attributes that define how types in the object layer are mapped to entity types and complex types in the conceptual model.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>The name of the type in the conceptual schema that maps to the class to which this attribute is applied.</summary>
      <returns>A <see cref="T:System.String" /> that is the name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>The namespace name of the entity object type or complex type in the conceptual schema that maps to this type.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityCollection`1">
      <summary>Represents a collection of objects on the "many" end of a relationship. </summary>
      <typeparam name="TEntity">The entity type of the collection.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Adds an object to the collection.</summary>
      <param name="entity">An object to add to the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity " />is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Defines relationships between an object and a collection of related objects in an object context.</summary>
      <param name="entities">Collection of objects in the object context that are related to the source object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entities" /> collection is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source object or an object in the <paramref name="entities" /> collection is null or is not in an <see cref="F:System.Data.EntityState.Unchanged" /> or <see cref="F:System.Data.EntityState.Modified" /> state.-or-The relationship cannot be defined based on the EDM metadata. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Defines a relationship between two attached objects in an object context.</summary>
      <param name="entity">The object being attached.</param>
      <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the source object. This can occur when the association in the conceptual schema does not support a relationship between the two types.-or-When either object is null or is not in an <see cref="F:System.Data.EntityState.Unchanged" /> or <see cref="F:System.Data.EntityState.Modified" /> state.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Removes all entities from the collection. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Determines whether a specific object exists in the collection.</summary>
      <returns>true if the object is found in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />; otherwise, false.</returns>
      <param name="entity">The object to locate in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies all the contents of the collection to an array, starting at the specified index of the target array.</summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Gets the number of objects that are contained in the collection.</summary>
      <returns>The number of elements that are contained in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Returns an object query that, when it is executed, returns the same set of objects that exists in the current collection. </summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the entity collection.</returns>
      <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.-or-When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="T:System.Data.Objects.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Returns an enumerator that is used to iterate through the objects in the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> is read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)">
      <summary>Loads related objects into the collection, using the specified merge option.</summary>
      <param name="mergeOption">Specifies how the objects in this collection should be merged with the objects that might have been returned from previous queries against the same <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects.</summary>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to serialize entity objects.</summary>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Removes an object from the collection and marks the relationship for deletion.</summary>
      <returns>true if item was successfully removed; otherwise, false. </returns>
      <param name="entity">The object to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> object is null.</exception>
      <exception cref="T:System.InvalidOperationException">The<paramref name=" entity " />object is not attached to the same object context.-or-The <paramref name="entity " />object does not have a valid relationship manager.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that is used to iterate through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the related entity collection consists of collection objects. </summary>
      <returns>This property always returns false because the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> contains objects and not collections.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityObject">
      <summary>Base class for entity types that are generated by the Entity Data Model tools.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EntityObject" /> class.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Gets or sets the key for this object.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> for this object.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityState">
      <summary>Gets the entity state of the object.</summary>
      <returns>The <see cref="T:System.Data.EntityState" /> of this object. </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Notifies the change tracker that a property has changed.</summary>
      <param name="property">The name of the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Notifies the change tracker that a property change is pending.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Specifies the instance of <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> that is used to report property changes.</summary>
      <param name="changeTracker">Reference to the change tracker that is used to report property changes.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Gets the relationship manager used by this object.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> used by this object.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference">
      <summary>Base class that implements non-generic functionality for an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Returns the key for the related object. </summary>
      <returns>An <see cref="T:System.Data.EntityKey" /> that is the key of the related object.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference`1">
      <summary>Represents a related end of an association with a multiplicity of zero or one. </summary>
      <typeparam name="TEntity">The entity type of the reference.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Creates a new instance of <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Creates a many-to-one or one-to-one relationship between two objects in the object context.</summary>
      <param name="entity">The object being attached.</param>
      <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the current related end. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Creates an equivalent object query that returns the related object.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that returns the related object.</returns>
      <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.-or-When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)">
      <summary>Loads the related object for this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> with the specified merge option.</summary>
      <param name="mergeOption">Specifies how the object should be returned if it already exists in the <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <exception cref="T:System.InvalidOperationException">The source of the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> is null.-or-A query returned more than one related end.-or-A query returned zero related ends, and one related end was expected.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>This method is used internally to serialize related entity objects.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>This method is used internally to serialize related entity objects.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference`1.Value">
      <summary>Gets or sets the related object returned by this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />. </summary>
      <returns>The object returned by this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityChangeTracker">
      <summary>Defines the facilities that are used by Object Services to track changes that are made to the properties of an object.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Notifies the change tracker that a property of a complex type has changed.</summary>
      <param name="entityMemberName">The name of the complex property of the entity type that has changed.</param>
      <param name="complexObject">The complex type that contains the property that changed.</param>
      <param name="complexObjectMemberName">The name of the property that changed on complex type.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Notifies the change tracker of a pending change to a complex property.</summary>
      <param name="entityMemberName">The name of the top-level entity property that is changing.</param>
      <param name="complexObject">The complex type that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property that is changing on complex type.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Notifies the change tracker that a property of an entity type has changed.</summary>
      <param name="entityMemberName">The name of the property that has changed.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Notifies the change tracker of a pending change to a property of an entity type.</summary>
      <param name="entityMemberName">The name of the property that is changing.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Gets current state of a tracked object.</summary>
      <returns>An <see cref="T:System.Data.EntityState" /> that is the state of the tracked object.For more information, see Identity Resolution, State Managment, and Change Tracking and Tracking Changes in POCO Entities.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Defines an entity type that implements change tracking. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Gets or sets the <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> used to report changes.</summary>
      <param name="changeTracker">The <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> used to report changes.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithKey">
      <summary>Defines an entity type that exposes an entity key.  </summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Gets or sets the <see cref="T:System.Data.EntityKey" /> for instances of entity types that implement this interface.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithRelationships">
      <summary>Defines an entity type with a relationship to one or more other entity type.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Returns the relationship manager that manages relationships for an instance of an entity type.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for this entity.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IRelatedEnd">
      <summary>Defines the end of a relationship. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Defines a relationship between two attached objects.</summary>
      <param name="entity">The object being attached. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Defines a relationship between two attached objects.</summary>
      <param name="entity">The object being attached.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Returns an <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Gets a value that indicates whether all related objects have been loaded.</summary>
      <returns>true if the related end contains all the related entities from the database; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Loads the related object or objects into this related end with the default merge option.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>Loads the related object or objects into the related end with the specified merge option.</summary>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when merging objects into an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Gets the name of the relationship in which this related end participates.</summary>
      <returns>The name of the relationship in which this <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> is participating. The relationship name is not namespace qualified. </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Returns a reference to the metadata for the related end.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object that contains metadata for the end of a relationship.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Removes an object from the collection of objects at the related end.</summary>
      <returns>true if <paramref name="entity" /> was successfully removed, false if <paramref name="entity" /> was not part of the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">The object to remove from the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Removes an object from the collection of objects at the related end.</summary>
      <returns>true if <paramref name="entity" /> was successfully removed; false if <paramref name="entity" /> was not part of the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">An object to remove from the collection.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Gets the role name at the source end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Gets the role name at the target end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelatedEnd">
      <summary>Base class that implements common functionality for a related end.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Occurs when a change is made to a related end. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Gets a value that indicates whether all related objects have been loaded.</summary>
      <returns>true if the related end contains all the related objects from the database; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load">
      <summary>When overridden in a derived class, loads the related object or objects into the related end with the default merge option.</summary>
      <exception cref="T:System.InvalidOperationException">When the source object was retrieved by using a <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> query and the <see cref="T:System.Data.Objects.MergeOption" /> is not <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> or the related objects are already loaded.-or-When the source object is not attached to the <see cref="T:System.Data.Objects.ObjectContext" />.-or-When the source object is being tracked but is in the <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Deleted" /> state or the <see cref="T:System.Data.Objects.MergeOption" /> used for <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> is <see cref="F:System.Data.Objects.MergeOption.NoTracking" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>When overridden in a derived class, loads an object or objects from the related end with the specified merge option.</summary>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when merging objects into an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
      <exception cref="T:System.InvalidOperationException">When the source object was retrieved by using a <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> query and the <see cref="T:System.Data.Objects.MergeOption" /> is not <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> or the related objects are already loaded.-or-When the source object is not attached to the <see cref="T:System.Data.Objects.ObjectContext" />.-or-When the source object is being tracked but is in the <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Deleted" /> state or the <see cref="T:System.Data.Objects.MergeOption" /> used for <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> is <see cref="F:System.Data.Objects.MergeOption.NoTracking" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects along with the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instances.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Gets the name of the relationship in which this related end participates.</summary>
      <returns>The name of the relationship in which this <see cref="T:System.Data.Objects.DataClasses.RelatedEnd" /> participates. The relationship name is not namespace qualified.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Returns a reference to the metadata for the related end.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object that contains metadata for the end of a relationship.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Gets the role name at the source end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection. This object must implement the <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" /> interface.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Adds an object to the related end.  </summary>
      <param name="entity">An entity instance to add to the related end.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Attaches an object at the related end.</summary>
      <param name="entity">The object being attached.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Attaches an object to the related end.</summary>
      <param name="entity">An entity instance to attach to the related end.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Returns an <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Removes an object from the collection at the related end.</summary>
      <returns>A value that indicates whether the object was removed.</returns>
      <param name="entity">The entity instance to remove from the collection.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Removes an object from the related end if the object is part of the related end.  </summary>
      <returns>true if the entity was successfully removed; otherwise, false.</returns>
      <param name="entity">An entity instance to remove from the related end.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Gets the role name at the target end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipKind">
      <summary>Enumerates the type of the relationship between two or more entities. </summary>
    </member>
    <member name="F:System.Data.Objects.DataClasses.RelationshipKind.Association">
      <summary>The relationship is defined by an association in a conceptual model. For more information, see Association (EDM).</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipManager">
      <summary>Used to track relationships between objects in the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.Create(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Creates a new <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> object.</summary>
      <returns>The requested <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</returns>
      <param name="owner">Reference to the entity that is calling this method.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Returns an enumeration of all the related ends managed by the relationship manager.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of objects that implement <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />. An empty enumeration is returned when the relationships have not yet been populated.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Gets an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> of related objects with the specified relationship name and target role name. </summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> of related objects.</returns>
      <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
      <typeparam name="TTargetEntity">The type of the returned <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">The specified role returned an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> instead of an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Returns either an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> or <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> of the correct type for the specified target role in a relationship. </summary>
      <returns>
        <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> representing the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> or <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> that was retrieved.</returns>
      <param name="relationshipName">Name of the relationship in which <paramref name="targetRoleName" /> is defined. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Target role to use to retrieve the other end of <paramref name="relationshipName" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipName" /> or <paramref name="targetRoleName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source type does not match the type of the owner.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetRoleName" /> is invalid.-or-Unable to find the relationship type in the metadata.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Gets the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> for a related object by using the specified combination of relationship name and target role name.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> of a related object.</returns>
      <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
      <typeparam name="TTargetEntity">The type of the returned <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">The specified role returned an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> instead of an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Objects.DataClasses.EntityCollection{``0})">
      <summary>Initializes an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> that was created by using the default constructor.</summary>
      <param name="relationshipName">The relationship name.</param>
      <param name="targetRoleName">The role name of the related end.</param>
      <param name="entityCollection">The <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> to initialize.</param>
      <typeparam name="TTargetEntity">The type of the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> being initialized.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the provided <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> is already initialized.-or-When the relationship manager is already attached to an <see cref="T:System.Data.Objects.ObjectContext" />. -or-When the relationship manager already contains a relationship with this name and target role.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Objects.DataClasses.EntityReference{``0})">
      <summary>Initializes an existing <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> that was created by using the default constructor.</summary>
      <param name="relationshipName">The relationship name.</param>
      <param name="targetRoleName">The role name of the related end.</param>
      <param name="entityReference">The <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> to initialize.</param>
      <typeparam name="TTargetEntity">The type of the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> being initialized.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the provided <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> is already initialized.-or-When the relationship manager is already attached to an <see cref="T:System.Data.Objects.ObjectContext" />. -or-When the relationship manager already contains a relationship with this name and target role.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects along with the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instances.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Called by Object Services to prepare an <see cref="T:System.Data.EntityKey" /> for binary serialization with a serialized relationship. </summary>
      <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.StructuralObject">
      <summary>Provides support for code generation in the form of helper methods that are used to set field values for properties. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.StructuralObject" /> class.  </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Determines whether the specified byte arrays contain identical values.</summary>
      <returns>True, if both arrays are of the same length and contain the same byte values or if both arrays are null; otherwise, false.</returns>
      <param name="first">The first byte array value to compare.</param>
      <param name="second">The second byte array value to compare.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Returns the minimum date time value supported by the data source.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that is the minimum date time that is supported by the data source.</returns>
    </member>
    <member name="F:System.Data.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>This constant name is used for change tracking. </summary>
      <returns>Returns a <see cref="T:System.String" /> that is the name of the property that is the key.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Returns a copy of the current byte value.</summary>
      <returns>A copy of the current byte value.</returns>
      <param name="currentValue">The current byte array value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Returns a complex type for the specified property.</summary>
      <returns>A complex type object for the property.</returns>
      <param name="currentValue">A complex object that inherits from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</param>
      <param name="property">The name of the complex property that is the complex object.</param>
      <param name="isNullable">Indicates whether the type supports null values.</param>
      <param name="isInitialized">Indicated whether the type is initialized.</param>
      <typeparam name="T">The type of the complex object being requested. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged" /> event. </summary>
      <param name="property">The name of the changed property.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Raises the <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging" /> event. </summary>
      <param name="property">The name of the property changing.</param>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Occurs when a property value has changed.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Occurs when a property value change is a pending.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>When overridden in a derived class, raises an event that is used to report that a property change has occurred.</summary>
      <param name="property">The name for the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> is empty.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>When overridden in a derived class, raises an event that is used to report that a property change is pending.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Boolean" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Byte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Returns a copy of the supplied byte array, or null if supported.</summary>
      <returns>Returns a copy of the <see cref="T:System.Byte" /> array, or null. </returns>
      <param name="value">The <see cref="T:System.Byte" /> array to validate.</param>
      <param name="isNullable">Boolean that indicates if null values are supported.</param>
      <exception cref="T:System.Data.ConstraintException">If value is null for a non-nullable value.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.DateTimeOffset" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Guid" /> value</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int16" /> value</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Boolean" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Byte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.DateTime" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.DateTimeOffset" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Decimal" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Guid" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.SBtye" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Single" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.TimeSpan" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.UInt16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable unsigned integer value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.UInt64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.SByte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Single" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Returns a copy of the supplied string, or null if supported.</summary>
      <returns>The supplied <see cref="T:System.String" /> value, or null.</returns>
      <param name="value">A <see cref="T:System.String" /> value.</param>
      <param name="isNullable">
        <see cref="T:System.Boolean" /> that indicates if null values are supported.</param>
      <exception cref="T:System.Data.ConstraintException">If value is null for a non-nullable value.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.TimeSpan" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Sets a complex object for the specified property. </summary>
      <returns>A complex type that derives from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</returns>
      <param name="oldValue">The original complex object for the property, if any.</param>
      <param name="newValue">The complex object that is being set.</param>
      <param name="property">The complex property that is being set to the complex object.</param>
      <typeparam name="T">The type of the complex object being replaced. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Verifies that a complex object is not null.</summary>
      <returns>The complex object being validated.</returns>
      <param name="complexObject">The complex object that is being validated.</param>
      <param name="propertyName">The complex property on the parent object that is associated with <paramref name="complexObject" />.</param>
      <typeparam name="TComplex">The type of the complex object being verified. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
      <exception cref="T:System.Data.ConstraintException">When the complex type is null.</exception>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlFunctions">
      <summary>Provides common language runtime (CLR) methods that call functions in the database in LINQ to Entities queries. </summary>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose cosine is the specified numerical value. This angle is called the arccosine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The cosine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose cosine is the specified numerical value. This angle is called the arccosine.</summary>
      <returns>The angle, in radians, defined by the input cosine value.</returns>
      <param name="arg1">The cosine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Ascii(System.String)">
      <summary>Returns the ASCII code value of the left-most character of a character expression.</summary>
      <returns>The ASCII code of the first character in the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose sine is the specified numerical value. This angle is called the arcsine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The sine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose sine is the specified numerical value. This angle is called the arcsine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The sine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose tangent is the specified numerical value. This angle is called the arctangent.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The tangent of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose tangent is the specified numerical value. This angle is called the arctangent.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The tangent of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the positive angle, in radians, between the positive x-axis and the ray from the origin through the point (x, y), where x and y are the two specified numerical values. The first parameter passed to the function is the y-value and the second parameter is the x-value.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The y-coordinate of a point.</param>
      <param name="arg2">The x-coordinate of a point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the positive angle, in radians, between the positive x-axis and the ray from the origin through the point (x, y), where x and y are the two specified numerical values. The first parameter passed to the function is the y-value and the second parameter is the x-value.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The y-coordinate of a point.</param>
      <param name="arg2">The x-coordinate of a point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Char(System.Nullable{System.Int32})">
      <summary>Returns the character that corresponds to the specified integer ASCII value.</summary>
      <returns>The character that corresponds to the specified ASCII value.</returns>
      <param name="arg">An ASCII code.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[])">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> at which searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String)">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value that is the starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[])">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[])">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
      <param name="arg2">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
      <param name="arg2">The character array for which the checksum is calculated.</param>
      <param name="arg3">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String)">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String)">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String,System.String)">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the checksum of the values in a collection. Null values are ignored.</summary>
      <returns>The checksum computed from the input collection.</returns>
      <param name="arg">The collection of values over which the checksum is computed.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the checksum of the values in a collection. Null values are ignored.</summary>
      <returns>The checksum computed from the input collection.</returns>
      <param name="arg">The collection of values over which the checksum is computed.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric cosine of the specified angle, in radians, in the specified expression.</summary>
      <returns>The trigonometric cosine of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Double})">
      <summary>Returns the trigonometric cosine of the specified angle, in radians, in the specified expression.</summary>
      <returns>The trigonometric cosine of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the trigonometric cotangent of the specified angle, in radians.</summary>
      <returns>The trigonometric cotangent of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the trigonometric cotangent of the specified angle, in radians.</summary>
      <returns>The trigonometric cotangent of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentTimestamp">
      <summary>Returns the current date and time. </summary>
      <returns>The current date and time.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentUser">
      <summary>Returns the name of the current user.</summary>
      <returns>The name of the current user.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Byte[])">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Boolean})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTime})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Decimal})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Double})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Guid})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.TimeSpan})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.String)">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>Returns a new datetime value based on adding an interval to the specified date.</summary>
      <returns>The new date.</returns>
      <param name="datePartArg">The part of the date to increment. </param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="date">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
      <summary>Returns a new date value based on adding an interval to the specified date.</summary>
      <returns>The new point in time, expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="dateTimeOffsetArg">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
      <summary>Returns a new time span value based on adding an interval to the specified time span.</summary>
      <returns>The new time span.</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="time">The time span to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
      <summary>Returns a new datetime value based on adding an interval to the specified date.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value that is the new date.</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="date">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two Dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The value specifying the number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTime})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.String)">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The the specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.String)">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Decimal})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Double})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int32})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int64})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Difference(System.String,System.String)">
      <summary>Returns an integer value that indicates the difference between the SOUNDEX values of two character expressions.</summary>
      <returns>The SOUNDEX difference between the two strings.</returns>
      <param name="string1">The first string.</param>
      <param name="string2">The second string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Decimal})">
      <summary>Returns the exponential value of the specified float expression.</summary>
      <returns>The constant e raised to the power of the input value.</returns>
      <param name="arg">The input value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Double})">
      <summary>Returns the exponential value of the specified float expression.</summary>
      <returns>The constant e raised to the power of the input value.</returns>
      <param name="arg">The input value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetDate">
      <summary>Returns the current database system timestamp as a datetime value without the database time zone offset. This value is derived from the operating system of the computer on which the instance of SQL Server is running.</summary>
      <returns>The current database timestamp.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetUtcDate">
      <summary>Returns the current database system timestamp as a datetime value. The database time zone offset is not included. This value represents the current UTC time (Coordinated Universal Time). This value is derived from the operating system of the computer on which the instance of SQL Server is running.</summary>
      <returns>The current database UTC timestamp.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.HostName">
      <summary>Returns the workstation name.</summary>
      <returns>The name of the workstation.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsDate(System.String)">
      <summary>Indicates whether the input value is a valid date or time.</summary>
      <returns>1 if the input expression is a valid date or time value of datetime or smalldatetime data types; otherwise, 0.</returns>
      <param name="arg">The tested value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(System.String)">
      <summary>Indicates whether the input value is a valid numeric type.</summary>
      <returns>1 if the input expression is a valid numeric data type; otherwise, 0.</returns>
      <param name="arg">A string expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Decimal})">
      <summary>Returns the natural logarithm of the specified input value.</summary>
      <returns>The natural logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Double})">
      <summary>Returns the natural logarithm of the specified input value.</summary>
      <returns>The natural logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Decimal})">
      <summary>Returns the base-10 logarithm of the specified input value.</summary>
      <returns>The base-10 logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Double})">
      <summary>Returns the base-10 logarithm of the specified input value.</summary>
      <returns>The base-10 logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.NChar(System.Nullable{System.Int32})">
      <summary>Returns the Unicode character with the specified integer code, as defined by the Unicode standard.</summary>
      <returns>The character that corresponds to the input character code.</returns>
      <param name="arg">A character code.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.PatIndex(System.String,System.String)">
      <summary>Returns the starting position of the first occurrence of a pattern in a specified expression, or zeros if the pattern is not found, on all valid text and character data types.</summary>
      <returns>The starting character position where the string pattern was found.</returns>
      <param name="stringPattern">A string pattern to search for.</param>
      <param name="target">The string to search.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Pi">
      <summary>Returns the constant value of pi.</summary>
      <returns>The numeric value of pi.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String)">
      <summary>Returns a Unicode string with the delimiters added to make the input string a valid Microsoft SQL Server delimited identifier.</summary>
      <returns>The original string with brackets added.</returns>
      <param name="stringArg">The expression that quote characters will be added to.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String,System.String)">
      <summary>Returns a Unicode string with the delimiters added to make the input string a valid Microsoft SQL Server delimited identifier.</summary>
      <returns>The original string with the specified quote characters added.</returns>
      <param name="stringArg">The expression that quote characters will be added to.</param>
      <param name="quoteCharacter">The one-character string to use as the delimiter. It can be a single quotation mark ( ' ), a left or right bracket ( [ ] ), or a double quotation mark ( " ). If quote_character is not specified, brackets are used.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Decimal})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Double})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int32})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int64})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand">
      <summary>Returns a pseudo-random float value from 0 through 1, exclusive.</summary>
      <returns>The pseudo-random value.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand(System.Nullable{System.Int32})">
      <summary>Returns a pseudo-random float value from 0 through 1, exclusive.</summary>
      <returns>The pseudo-random value.</returns>
      <param name="seed">The seed value. If <paramref name="seed" /> is not specified, the SQL Server Database Engine assigns a seed value at random. For a specified seed value, the result returned is always the same.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Replicate(System.String,System.Nullable{System.Int32})">
      <summary>Repeats a string value a specified number of times.</summary>
      <returns>The target string, repeated the number of times specified by <paramref name="count" />.</returns>
      <param name="target">A valid string.</param>
      <param name="count">The value that specifies how many time to repeat <paramref name="target" />.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Decimal})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Double})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int32})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int64})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric sine of the specified angle.</summary>
      <returns>The trigonometric sine of the input expression.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Double})">
      <summary>Returns the trigonometric sine of the specified angle.</summary>
      <returns>The trigonometric sine of the input expression.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SoundCode(System.String)">
      <summary>Converts an alphanumeric string to a four-character (SOUNDEX) code to find similar-sounding words or names.</summary>
      <returns>The SOUNDEX code of the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Space(System.Nullable{System.Int32})">
      <summary>Returns a string of repeated spaces.</summary>
      <returns>A string that consists of the specified number of spaces.</returns>
      <param name="arg1">The number of spaces. If negative, a null string is returned.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Decimal})">
      <summary>Returns the square of the specified number.</summary>
      <returns>The square of the input value.</returns>
      <param name="arg1">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Double})">
      <summary>Returns the square of the specified number.</summary>
      <returns>The square of the input value.</returns>
      <param name="arg1">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Decimal})">
      <summary>Returns the square root of the specified number.</summary>
      <returns>The square root of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Double})">
      <summary>Returns the square root of the specified number.</summary>
      <returns>The square root of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
      <param name="decimalArg">The number of places to the right of the decimal point. <paramref name="decimal" /> must be less than or equal to 16. If<paramref name=" decimal" /> is more than 16 then the result is truncated to sixteen places to the right of the decimal point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
      <param name="decimalArg">The number of places to the right of the decimal point. <paramref name="decimal" /> must be less than or equal to 16. If<paramref name=" decimal" /> is more than 16 then the result is truncated to sixteen places to the right of the decimal point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
      <summary>Inserts a string into another string. It deletes a specified length of characters in the target string at the start position and then inserts the second string into the target string at the start position.</summary>
      <returns>A string consisting of the two strings.</returns>
      <param name="stringInput">The target string.</param>
      <param name="start">The character position in <paramref name="stringinput" /> where the replacement string is to be inserted.</param>
      <param name="length">The number of characters to delete from <paramref name="stringInput" />. If <paramref name="length" /> is longer than <paramref name="stringInput" />, deletion occurs up to the last character in <paramref name="stringReplacement" />.</param>
      <param name="stringReplacement">The substring to be inserted into <paramref name="stringInput" />.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric tangent of the input expression.</summary>
      <returns>The tangent of the input angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Double})">
      <summary>Returns the trigonometric tangent of the input expression.</summary>
      <returns>The tangent of the input angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Unicode(System.String)">
      <summary>Returns the integer value, as defined by the Unicode standard, for the first character of the input expression.</summary>
      <returns>The character code for the first character in the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName">
      <summary>Returns a database user name corresponding to a specified identification number.</summary>
      <returns>The user name.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName(System.Nullable{System.Int32})">
      <summary>Returns a database user name corresponding to a specified identification number.</summary>
      <returns>The user name.</returns>
      <param name="arg">A user ID.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.configuration.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Configuration</name>
  </assembly>
  <members>
    <member name="T:System.Configuration.AppSettingsSection">
      <summary>Provides configuration system support for the appSettings configuration section. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.AppSettingsSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.AppSettingsSection" /> class.</summary>
    </member>
    <member name="P:System.Configuration.AppSettingsSection.File">
      <summary>Gets or sets a configuration file that provides additional settings or overrides the settings specified in the appSettings element.</summary>
      <returns>A configuration file that provides additional settings or overrides the settings specified in the appSettings element.</returns>
    </member>
    <member name="P:System.Configuration.AppSettingsSection.Settings">
      <summary>Gets a <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> object of key/value pairs that contain application settings.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the application settings from the configuration file.</returns>
    </member>
    <member name="T:System.Configuration.CallbackValidator">
      <summary>Provides dynamic validation of an object.</summary>
    </member>
    <member name="M:System.Configuration.CallbackValidator.#ctor(System.Type,System.Configuration.ValidatorCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.CallbackValidator" /> class.</summary>
      <param name="type">The type of object that will be validated.</param>
      <param name="callback">The <see cref="T:System.Configuration.ValidatorCallback" /> used as the delegate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type " />is null.</exception>
    </member>
    <member name="M:System.Configuration.CallbackValidator.CanValidate(System.Type)">
      <summary>Determines whether the type of the object can be validated.</summary>
      <returns>true if the type parameter matches the type used as the first parameter when creating an instance of <see cref="T:System.Configuration.CallbackValidator" />; otherwise, false. </returns>
      <param name="type">The type of object.</param>
    </member>
    <member name="M:System.Configuration.CallbackValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid.</summary>
      <param name="value">The value of an object.</param>
    </member>
    <member name="T:System.Configuration.CallbackValidatorAttribute">
      <summary>Specifies a <see cref="T:System.Configuration.CallbackValidator" /> object to use for code validation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.CallbackValidatorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.CallbackValidatorAttribute" /> class. </summary>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.CallbackMethodName">
      <summary>Gets or sets the name of the callback method.</summary>
      <returns>The name of the method to call.</returns>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.Type">
      <summary>Gets or sets the type of the validator.</summary>
      <returns>The <see cref="T:System.Type" /> of the current validator attribute instance.</returns>
    </member>
    <member name="P:System.Configuration.CallbackValidatorAttribute.ValidatorInstance">
      <summary>Gets the validator instance.</summary>
      <returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">The value of the <see cref="P:System.Configuration.CallbackValidatorAttribute.Type" /> property is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.CallbackValidatorAttribute.CallbackMethodName" /> property is not set to a public static void method with one object parameter.</exception>
    </member>
    <member name="T:System.Configuration.CommaDelimitedStringCollection">
      <summary>Represents a collection of string elements separated by commas. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> class.</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Add(System.String)">
      <summary>Adds a string to the comma-delimited collection.</summary>
      <param name="value">A string value.</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.AddRange(System.String[])">
      <summary>Adds all the strings in a string array to the collection.</summary>
      <param name="range">An array of strings to add to the collection.</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Clear">
      <summary>Clears the collection.</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Clone">
      <summary>Creates a copy of the collection.</summary>
      <returns>A <see cref="T:System.Configuration.CommaDelimitedStringCollection" />.</returns>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Insert(System.Int32,System.String)">
      <summary>Adds a string element to the collection at the specified index.</summary>
      <param name="index">The index in the collection at which the new element will be added.</param>
      <param name="value">The value of the new element to add to the collection.</param>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.IsModified">
      <summary>Gets a value that specifies whether the collection has been modified. </summary>
      <returns>true if the <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> has been modified; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.IsReadOnly">
      <summary>Gets a value indicating whether the collection object is read-only.</summary>
      <returns>true if the specified string element in the <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.CommaDelimitedStringCollection.Item(System.Int32)">
      <summary>Gets or sets a string element in the collection based on the index.</summary>
      <returns>A string element in the collection.</returns>
      <param name="index">The index of the string element in the collection.</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.Remove(System.String)">
      <summary>Removes a string element from the collection.</summary>
      <param name="value">The string to remove.</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.SetReadOnly">
      <summary>Sets the collection object to read-only.</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollection.ToString">
      <summary>Returns a string representation of the object.</summary>
      <returns>A string representation of the object.</returns>
    </member>
    <member name="T:System.Configuration.CommaDelimitedStringCollectionConverter">
      <summary>Converts a comma-delimited string value to and from a <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.CommaDelimitedStringCollectionConverter" /> class. </summary>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> object to a <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> containing the converted value.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> used during conversion.</param>
      <param name="data">The comma-separated <see cref="T:System.String" /> to convert.</param>
    </member>
    <member name="M:System.Configuration.CommaDelimitedStringCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Configuration.CommaDelimitedStringCollection" /> object to a <see cref="T:System.String" /> object.</summary>
      <returns>The <see cref="T:System.String" /> representing the converted <paramref name="value" /> parameter, which is a <see cref="T:System.Configuration.CommaDelimitedStringCollection" />.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> used during conversion.</param>
      <param name="value">The value to convert.</param>
      <param name="type">The conversion type.</param>
    </member>
    <member name="T:System.Configuration.Configuration">
      <summary>Represents a configuration file that is applicable to a particular computer, application, or resource. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Configuration.Configuration.AppSettings">
      <summary>Gets the <see cref="T:System.Configuration.AppSettingsSection" /> object configuration section that applies to this <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>An <see cref="T:System.Configuration.AppSettingsSection" /> object representing the appSettings configuration section that applies to this <see cref="T:System.Configuration.Configuration" /> object.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.AssemblyStringTransformer">
      <summary>Specifies a function delegate that is used to transform assembly strings in configuration files.</summary>
      <returns>A delegate that transforms type strings. The default value is null.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.ConnectionStrings">
      <summary>Gets a <see cref="T:System.Configuration.ConnectionStringsSection" /> configuration-section object that applies to this <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.ConnectionStringsSection" /> configuration-section object representing the connectionStrings configuration section that applies to this <see cref="T:System.Configuration.Configuration" /> object.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.EvaluationContext">
      <summary>Gets the <see cref="T:System.Configuration.ContextInformation" /> object for the <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>The <see cref="T:System.Configuration.ContextInformation" /> object for the <see cref="T:System.Configuration.Configuration" /> object.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.FilePath">
      <summary>Gets the physical path to the configuration file represented by this <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>The physical path to the configuration file represented by this <see cref="T:System.Configuration.Configuration" /> object.</returns>
    </member>
    <member name="M:System.Configuration.Configuration.GetSection(System.String)">
      <summary>Returns the specified <see cref="T:System.Configuration.ConfigurationSection" /> object.</summary>
      <returns>The specified <see cref="T:System.Configuration.ConfigurationSection" /> object.</returns>
      <param name="sectionName">The path to the section to be returned.</param>
    </member>
    <member name="M:System.Configuration.Configuration.GetSectionGroup(System.String)">
      <summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> specified.</returns>
      <param name="sectionGroupName">The path name of the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> to return.</param>
    </member>
    <member name="P:System.Configuration.Configuration.HasFile">
      <summary>Gets a value that indicates whether a file exists for the resource represented by this <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>true if there is a configuration file; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.Locations">
      <summary>Gets the locations defined within this <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationLocationCollection" /> containing the locations defined within this <see cref="T:System.Configuration.Configuration" /> object.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.NamespaceDeclared">
      <summary>Gets or sets a value indicating whether the configuration file has an XML namespace.</summary>
      <returns>true if the configuration file has an XML namespace; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.RootSectionGroup">
      <summary>Gets the root <see cref="T:System.Configuration.ConfigurationSectionGroup" /> for this <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>The root section group for this <see cref="T:System.Configuration.Configuration" /> object.</returns>
    </member>
    <member name="M:System.Configuration.Configuration.Save">
      <summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" /> object to the current XML configuration file.</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    </member>
    <member name="M:System.Configuration.Configuration.Save(System.Configuration.ConfigurationSaveMode)">
      <summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" /> object to the current XML configuration file.</summary>
      <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" /> value that determines which property values to save.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    </member>
    <member name="M:System.Configuration.Configuration.Save(System.Configuration.ConfigurationSaveMode,System.Boolean)">
      <summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" /> object to the current XML configuration file.</summary>
      <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" /> value that determines which property values to save.</param>
      <param name="forceSaveAll">true to save even if the configuration was not modified; otherwise, false.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String)">
      <summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" /> object to the specified XML configuration file.</summary>
      <param name="filename">The path and file name to save the configuration file to.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String,System.Configuration.ConfigurationSaveMode)">
      <summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" /> object to the specified XML configuration file.</summary>
      <param name="filename">The path and file name to save the configuration file to.</param>
      <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" /> value that determines which property values to save.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    </member>
    <member name="M:System.Configuration.Configuration.SaveAs(System.String,System.Configuration.ConfigurationSaveMode,System.Boolean)">
      <summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" /> object to the specified XML configuration file.</summary>
      <param name="filename">The path and file name to save the configuration file to.</param>
      <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" /> value that determines which property values to save.</param>
      <param name="forceSaveAll">true to save even if the configuration was not modified; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> is null or an empty string ("").</exception>
    </member>
    <member name="P:System.Configuration.Configuration.SectionGroups">
      <summary>Gets a collection of the section groups defined by this configuration.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> collection representing the collection of section groups for this <see cref="T:System.Configuration.Configuration" /> object.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.Sections">
      <summary>Gets a collection of the sections defined by this <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>A collection of the sections defined by this <see cref="T:System.Configuration.Configuration" /> object.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.TargetFramework">
      <summary>Specifies the targeted version of the .NET Framework when a version earlier than the current one is targeted.</summary>
      <returns>The name of the targeted version of the .NET Framework. The default value is null, which indicates that the current version is targeted.</returns>
    </member>
    <member name="P:System.Configuration.Configuration.TypeStringTransformer">
      <summary>Specifies a function delegate that is used to transform type strings in configuration files. </summary>
      <returns>A delegate that transforms type strings. The default value is null.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationAllowDefinition">
      <summary>Specifies the locations within the configuration-file hierarchy that can set or override the properties contained within a <see cref="T:System.Configuration.ConfigurationSection" /> object.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineOnly">
      <summary>The <see cref="T:System.Configuration.ConfigurationSection" /> can be defined only in the Machine.config file.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineToWebRoot">
      <summary>The <see cref="T:System.Configuration.ConfigurationSection" /> can be defined in either the Machine.config file or the machine-level Web.config file found in the same directory as Machine.config, but not in application Web.config files.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.MachineToApplication">
      <summary>The <see cref="T:System.Configuration.ConfigurationSection" /> can be defined in either the Machine.config file, the machine-level Web.config file found in the same directory as Machine.config, or the top-level application Web.config file found in the virtual-directory root, but not in subdirectories of a virtual root.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowDefinition.Everywhere">
      <summary>The <see cref="T:System.Configuration.ConfigurationSection" /> can be defined anywhere.</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationAllowExeDefinition">
      <summary>Specifies the locations within the configuration-file hierarchy that can set or override the properties contained within a <see cref="T:System.Configuration.ConfigurationSection" /> object.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineOnly">
      <summary>The <see cref="T:System.Configuration.ConfigurationSection" /> can be defined only in the Machine.config file. </summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToApplication">
      <summary>The <see cref="T:System.Configuration.ConfigurationSection" /> can be defined either in the Machine.config file or in the Exe.config file in the client application directory. This is the default value.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToRoamingUser">
      <summary>The <see cref="T:System.Configuration.ConfigurationSection" /> can be defined in the Machine.config file, in the Exe.config file in the client application directory, or in the User.config file in the roaming user directory. </summary>
    </member>
    <member name="F:System.Configuration.ConfigurationAllowExeDefinition.MachineToLocalUser">
      <summary>The <see cref="T:System.Configuration.ConfigurationSection" /> can be defined in the Machine.config file, in the Exe.config file in the client application directory, in the User.config file in the roaming user directory, or in the User.config file in the local user directory.</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationCollectionAttribute">
      <summary>Declaratively instructs the .NET Framework to create an instance of a configuration element collection. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationCollectionAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationCollectionAttribute" /> class.</summary>
      <param name="itemType">The type of the property collection to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> is null.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.AddItemName">
      <summary>Gets or sets the name of the &lt;add&gt; configuration element.</summary>
      <returns>The name that substitutes the standard name "add" for the configuration item.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.ClearItemsName">
      <summary>Gets or sets the name for the &lt;clear&gt; configuration element.</summary>
      <returns>The name that replaces the standard name "clear" for the configuration item.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.CollectionType">
      <summary>Gets or sets the type of the <see cref="T:System.Configuration.ConfigurationCollectionAttribute" /> attribute.</summary>
      <returns>The type of the <see cref="T:System.Configuration.ConfigurationCollectionAttribute" />.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.ItemType">
      <summary>Gets the type of the collection element.</summary>
      <returns>The type of the collection element.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationCollectionAttribute.RemoveItemName">
      <summary>Gets or sets the name for the &lt;remove&gt; configuration element.</summary>
      <returns>The name that replaces the standard name "remove" for the configuration element.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationConverterBase">
      <summary>The base class for the configuration converter types.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationConverterBase" /> class.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the conversion is allowed.</summary>
      <returns>true if the conversion is allowed; otherwise, false.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="type">The <see cref="T:System.Type" /> to convert from.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the conversion is allowed.</summary>
      <returns>true if the conversion is allowed; otherwise, false. </returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversion.</param>
      <param name="type">The type to convert to.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationElement">
      <summary>Represents a configuration element within a configuration file.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElement" /> class. </summary>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.CurrentConfiguration">
      <summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" /> instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" /> instance belongs to.</summary>
      <returns>The top-level <see cref="T:System.Configuration.Configuration" /> instance that the current <see cref="T:System.Configuration.ConfigurationElement" /> instance belongs to.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads XML from the configuration file.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> that reads from the configuration file.</param>
      <param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The element to read is locked.- or -An attribute of the current node is not recognized.- or -The lock status of the current node cannot be determined.  </exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.ElementInformation">
      <summary>Gets an <see cref="T:System.Configuration.ElementInformation" /> object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" /> object. </summary>
      <returns>An <see cref="T:System.Configuration.ElementInformation" /> that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.ElementProperty">
      <summary>Gets the <see cref="T:System.Configuration.ConfigurationElementProperty" /> object that represents the <see cref="T:System.Configuration.ConfigurationElement" /> object itself.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationElementProperty" /> that represents the <see cref="T:System.Configuration.ConfigurationElement" /> itself.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Equals(System.Object)">
      <summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" /> instance to the specified object.</summary>
      <returns>true if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" /> instance; otherwise, false. The default is false. </returns>
      <param name="compareTo">The object to compare with.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.EvaluationContext">
      <summary>Gets the <see cref="T:System.Configuration.ContextInformation" /> object for the <see cref="T:System.Configuration.ConfigurationElement" /> object.</summary>
      <returns>The <see cref="T:System.Configuration.ContextInformation" /> for the <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The current element is not associated with a context.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetHashCode">
      <summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" /> instance.</summary>
      <returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" /> instance.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)">
      <summary>Returns the transformed version of the specified assembly name. </summary>
      <returns>The transformed version of the assembly name. If no transformer is available, the <paramref name="assemblyName" /> parameter value is returned unchanged. The <see cref="P:System.Configuration.Configuration.TypeStringTransformer" /> property is null if no transformer is available.</returns>
      <param name="assemblyName">The name of the assembly.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)">
      <summary>Returns the transformed version of the specified type name.</summary>
      <returns>The transformed version of the specified type name. If no transformer is available, the <paramref name="typeName" /> parameter value is returned unchanged. The <see cref="P:System.Configuration.Configuration.TypeStringTransformer" /> property is null if no transformer is available.</returns>
      <param name="typeName">The name of the type.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Init">
      <summary>Sets the <see cref="T:System.Configuration.ConfigurationElement" /> object to its initial state.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.InitializeDefault">
      <summary>Used to initialize a default set of values for the <see cref="T:System.Configuration.ConfigurationElement" /> object.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.IsModified">
      <summary>Indicates whether this configuration element has been modified since it was last saved or loaded, when implemented in a derived class.</summary>
      <returns>true if the element has been modified; otherwise, false. </returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationElement" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)">
      <summary>Gets or sets a property or attribute of this configuration element.</summary>
      <returns>The specified property, attribute, or child element.</returns>
      <param name="prop">The property to access. </param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="prop" /> is null or does not exist within the element.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="prop" /> is read only or locked.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Item(System.String)">
      <summary>Gets or sets a property, attribute, or child element of this configuration element.</summary>
      <returns>The specified property, attribute, or child element</returns>
      <param name="propertyName">The name of the <see cref="T:System.Configuration.ConfigurationProperty" /> to access.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="prop" /> is read-only or locked.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)">
      <summary>Adds the invalid-property errors in this <see cref="T:System.Configuration.ConfigurationElement" /> object, and in all subelements, to the passed list.</summary>
      <param name="errorList">An object that implements the <see cref="T:System.Collections.IList" /> interface.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAllAttributesExcept">
      <summary>Gets the collection of locked attributes.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" /> of locked attributes (properties) for the element.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAllElementsExcept">
      <summary>Gets the collection of locked elements.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" /> of locked elements.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockAttributes">
      <summary>Gets the collection of locked attributes </summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" /> of locked attributes (properties) for the element.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockElements">
      <summary>Gets the collection of locked elements.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" /> of locked elements.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.LockItem">
      <summary>Gets or sets a value indicating whether the element is locked.</summary>
      <returns>true if the element is locked; otherwise, false. The default is false.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>Gets a value indicating whether an unknown attribute is encountered during deserialization.</summary>
      <returns>true when an unknown attribute is encountered while deserializing; otherwise, false.</returns>
      <param name="name">The name of the unrecognized attribute.</param>
      <param name="value">The value of the unrecognized attribute.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>Gets a value indicating whether an unknown element is encountered during deserialization.</summary>
      <returns>true when an unknown element is encountered while deserializing; otherwise, false.</returns>
      <param name="elementName">The name of the unknown subelement.</param>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> being used for deserialization.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The element identified by <paramref name="elementName" /> is locked.- or -One or more of the element's attributes is locked.- or -<paramref name="elementName" /> is unrecognized, or the element has an unrecognized attribute.- or -The element has a Boolean attribute with an invalid value.- or -An attempt was made to deserialize a property more than once.- or -An attempt was made to deserialize a property that is not a valid member of the element.- or -The element cannot contain a CDATA or text element.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)">
      <summary>Throws an exception when a required property is not found.</summary>
      <returns>None.</returns>
      <param name="name">The name of the required attribute that was not found.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">In all cases.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.PostDeserialize">
      <summary>Called after deserialization.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)">
      <summary>Called before serialization.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> that will be used to serialize the <see cref="T:System.Configuration.ConfigurationElement" />.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElement.Properties">
      <summary>Gets the collection of properties.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> of properties for the element.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)">
      <summary>Resets the internal state of the <see cref="T:System.Configuration.ConfigurationElement" /> object, including the locks and the properties collections.</summary>
      <param name="parentElement">The parent node of the configuration element.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.ResetModified">
      <summary>Resets the value of the <see cref="M:System.Configuration.ConfigurationElement.IsModified" /> method to false when implemented in a derived class.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>Writes the contents of this configuration element to the configuration file when implemented in a derived class.</summary>
      <returns>true if any data was actually serialized; otherwise, false.</returns>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> that writes to the configuration file. </param>
      <param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false. </param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The current attribute is locked at a higher configuration level.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
      <summary>Writes the outer tags of this configuration element to the configuration file when implemented in a derived class.</summary>
      <returns>true if writing was successful; otherwise, false.</returns>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> that writes to the configuration file. </param>
      <param name="elementName">The name of the <see cref="T:System.Configuration.ConfigurationElement" /> to be written. </param>
      <exception cref="T:System.Exception">The element has multiple child elements. </exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)">
      <summary>Sets a property to the specified value.</summary>
      <param name="prop">The element property to set. </param>
      <param name="value">The value to assign to the property.</param>
      <param name="ignoreLocks">true if the locks on the property should be ignored; otherwise, false.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs if the element is read-only or <paramref name="ignoreLocks" /> is true but the locks cannot be ignored.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.SetReadOnly">
      <summary>Sets the <see cref="M:System.Configuration.ConfigurationElement.IsReadOnly" /> property for the <see cref="T:System.Configuration.ConfigurationElement" /> object and all subelements.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>Modifies the <see cref="T:System.Configuration.ConfigurationElement" /> object to remove all values that should not be saved. </summary>
      <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement" /> at the current level containing a merged view of the properties.</param>
      <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement" />, or null if this is the top level.</param>
      <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" /> that determines which property values to include.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationElementCollection">
      <summary>Represents a configuration element containing a collection of child elements.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElementCollection" /> class. </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.#ctor(System.Collections.IComparer)">
      <summary>Creates a new instance of the <see cref="T:System.Configuration.ConfigurationElementCollection" /> class.</summary>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> comparer to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.AddElementName">
      <summary>Gets or sets the name of the <see cref="T:System.Configuration.ConfigurationElement" /> to associate with the add operation in the <see cref="T:System.Configuration.ConfigurationElementCollection" /> when overridden in a derived class. </summary>
      <returns>The name of the element.</returns>
      <exception cref="T:System.ArgumentException">The selected value starts with the reserved prefix "config" or "lock".</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>Adds a configuration element to the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to add. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)">
      <summary>Adds a configuration element to the configuration element collection.</summary>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to add. </param>
      <param name="throwIfExists">true to throw an exception if the <see cref="T:System.Configuration.ConfigurationElement" /> specified is already contained in the <see cref="T:System.Configuration.ConfigurationElementCollection" />; otherwise, false. </param>
      <exception cref="T:System.Exception">The <see cref="T:System.Configuration.ConfigurationElement" /> to add already exists in the <see cref="T:System.Configuration.ConfigurationElementCollection" /> and the <paramref name="throwIfExists" /> parameter is true. </exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)">
      <summary>Adds a configuration element to the configuration element collection.</summary>
      <param name="index">The index location at which to add the specified <see cref="T:System.Configuration.ConfigurationElement" />. </param>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to add. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseClear">
      <summary>Removes all configuration element objects from the collection.</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is read-only.- or -A collection item has been locked in a higher-level configuration.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32)">
      <summary>Gets the configuration element at the specified index location.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationElement" /> at the specified index.</returns>
      <param name="index">The index location of the <see cref="T:System.Configuration.ConfigurationElement" /> to return. </param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="index" /> is less than 0.- or -There is no <see cref="T:System.Configuration.ConfigurationElement" /> at the specified <paramref name="index" />.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGet(System.Object)">
      <summary>Returns the configuration element with the specified key.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationElement" /> with the specified key; otherwise, null.</returns>
      <param name="key">The key of the element to return. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGetAllKeys">
      <summary>Returns an array of the keys for all of the configuration elements contained in the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
      <returns>An array that contains the keys for all of the <see cref="T:System.Configuration.ConfigurationElement" /> objects contained in the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32)">
      <summary>Gets the key for the <see cref="T:System.Configuration.ConfigurationElement" /> at the specified index location.</summary>
      <returns>The key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
      <param name="index">The index location for the <see cref="T:System.Configuration.ConfigurationElement" />.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="index" /> is less than 0.- or -There is no <see cref="T:System.Configuration.ConfigurationElement" /> at the specified <paramref name="index" />.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement)">
      <summary>The index of the specified <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>The index of the specified <see cref="T:System.Configuration.ConfigurationElement" />; otherwise, -1.</returns>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> for the specified index location. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object)">
      <summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" /> with the specified key has been removed from the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationElement" /> with the specified key has been removed; otherwise, false. The default is false.</returns>
      <param name="key">The key of the element to check.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object)">
      <summary>Removes a <see cref="T:System.Configuration.ConfigurationElement" /> from the collection.</summary>
      <param name="key">The key of the <see cref="T:System.Configuration.ConfigurationElement" /> to remove. </param>
      <exception cref="T:System.Exception">No <see cref="T:System.Configuration.ConfigurationElement" /> with the specified key exists in the collection, the element has already been removed, or the element cannot be removed because the value of its <see cref="P:System.Configuration.ConfigurationProperty.Type" /> is not <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" />. </exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Configuration.ConfigurationElement" /> at the specified index location.</summary>
      <param name="index">The index location of the <see cref="T:System.Configuration.ConfigurationElement" /> to remove. </param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is read-only.- or -<paramref name="index" /> is less than 0 or greater than the number of <see cref="T:System.Configuration.ConfigurationElement" /> objects in the collection.- or -The <see cref="T:System.Configuration.ConfigurationElement" /> object has already been removed.- or -The value of the <see cref="T:System.Configuration.ConfigurationElement" /> object has been locked at a higher level.- or -The <see cref="T:System.Configuration.ConfigurationElement" /> object was inherited.- or -The value of the <see cref="T:System.Configuration.ConfigurationElement" /> object's <see cref="P:System.Configuration.ConfigurationProperty.Type" /> is not <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" /> or <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate" />.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ClearElementName">
      <summary>Gets or sets the name for the <see cref="T:System.Configuration.ConfigurationElement" /> to associate with the clear operation in the <see cref="T:System.Configuration.ConfigurationElementCollection" /> when overridden in a derived class. </summary>
      <returns>The name of the element.</returns>
      <exception cref="T:System.ArgumentException">The selected value starts with the reserved prefix "config" or "lock".</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.CollectionType">
      <summary>Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[],System.Int32)">
      <summary>Copies the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" /> to an array.</summary>
      <param name="array">Array to which to copy the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</param>
      <param name="index">Index location at which to begin copying.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CreateNewElement">
      <summary>When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>A new <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String)">
      <summary>Creates a new <see cref="T:System.Configuration.ConfigurationElement" /> when overridden in a derived class.</summary>
      <returns>A new <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
      <param name="elementName">The name of the <see cref="T:System.Configuration.ConfigurationElement" /> to create. </param>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ElementName">
      <summary>Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.</summary>
      <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.EmitClear">
      <summary>Gets or sets a value that specifies whether the collection has been cleared.</summary>
      <returns>true if the collection has been cleared; otherwise, false. The default is false.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is read-only.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Equals(System.Object)">
      <summary>Compares the <see cref="T:System.Configuration.ConfigurationElementCollection" /> to the specified object.</summary>
      <returns>true if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElementCollection" /> instance; otherwise, false. The default is false.</returns>
      <param name="compareTo">The object to compare. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Gets the element key for a specified configuration element when overridden in a derived class.</summary>
      <returns>An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetEnumerator">
      <summary>Gets an <see cref="T:System.Collections.IEnumerator" /> which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" /></returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.GetHashCode">
      <summary>Gets a unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" /> instance.</summary>
      <returns>A unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" /> current instance.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsElementName(System.String)">
      <summary>Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement" /> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
      <returns>true if the element exists in the collection; otherwise, false. The default is false.</returns>
      <param name="elementName">The name of the element to verify. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)">
      <summary>Gets a value indicating whether the specified <see cref="T:System.Configuration.ConfigurationElement" /> can be removed from the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
      <returns>true if the specified <see cref="T:System.Configuration.ConfigurationElement" /> can be removed from this <see cref="T:System.Configuration.ConfigurationElementCollection" />; otherwise, false. The default is true.</returns>
      <param name="element">The element to check.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsModified">
      <summary>Indicates whether this <see cref="T:System.Configuration.ConfigurationElementCollection" /> has been modified since it was last saved or loaded when overridden in a derived class.</summary>
      <returns>true if any contained element has been modified; otherwise, false</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElementCollection" /> object is read only.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationElementCollection" /> object is read only; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Configuration.ConfigurationElementCollection" /> is synchronized; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
      <summary>Causes the configuration system to throw an exception.</summary>
      <returns>true if the unrecognized element was deserialized successfully; otherwise, false. The default is false.</returns>
      <param name="elementName">The name of the unrecognized element. </param>
      <param name="reader">An input stream that reads XML from the configuration file. </param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The element specified in <paramref name="elementName" /> is the &lt;clear&gt; element.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementName" /> starts with the reserved prefix "config" or "lock".</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.RemoveElementName">
      <summary>Gets or sets the name of the <see cref="T:System.Configuration.ConfigurationElement" /> to associate with the remove operation in the <see cref="T:System.Configuration.ConfigurationElementCollection" /> when overridden in a derived class. </summary>
      <returns>The name of the element.</returns>
      <exception cref="T:System.ArgumentException">The selected value starts with the reserved prefix "config" or "lock".</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement)">
      <summary>Resets the <see cref="T:System.Configuration.ConfigurationElementCollection" /> to its unmodified state when overridden in a derived class.</summary>
      <param name="parentElement">The <see cref="T:System.Configuration.ConfigurationElement" /> representing the collection parent element, if any; otherwise, null. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.ResetModified">
      <summary>Resets the value of the <see cref="M:System.Configuration.ConfigurationElementCollection.IsModified" /> property to false when overridden in a derived class.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>Writes the configuration data to an XML element in the configuration file when overridden in a derived class.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationElementCollection" /> was written to the configuration file successfully.</returns>
      <param name="writer">Output stream that writes XML to the configuration file. </param>
      <param name="serializeCollectionKey">true to serialize the collection key; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">One of the elements in the collection was added or replaced and starts with the reserved prefix "config" or "lock".</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.SetReadOnly">
      <summary>Sets the <see cref="M:System.Configuration.ConfigurationElementCollection.IsReadOnly" /> property for the <see cref="T:System.Configuration.ConfigurationElementCollection" /> object and for all sub-elements.</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.SyncRoot">
      <summary>Gets an object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</summary>
      <returns>An object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Configuration.ConfigurationElementCollection" /> to an array.</summary>
      <param name="arr">Array to which to copy this <see cref="T:System.Configuration.ConfigurationElementCollection" />.</param>
      <param name="index">Index location at which to begin copying.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate">
      <summary>Gets a value indicating whether an attempt to add a duplicate <see cref="T:System.Configuration.ConfigurationElement" /> to the <see cref="T:System.Configuration.ConfigurationElementCollection" /> will cause an exception to be thrown.</summary>
      <returns>true if an attempt to add a duplicate <see cref="T:System.Configuration.ConfigurationElement" /> to this <see cref="T:System.Configuration.ConfigurationElementCollection" /> will cause an exception to be thrown; otherwise, false. </returns>
    </member>
    <member name="M:System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>Reverses the effect of merging configuration information from different levels of the configuration hierarchy </summary>
      <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement" /> object at the current level containing a merged view of the properties.</param>
      <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement" /> object of the current element, or null if this is the top level.</param>
      <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" /> enumerated value that determines which property values to include.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationElementCollectionType">
      <summary>Specifies the type of a <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> object.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.BasicMap">
      <summary>Collections of this type contain elements that apply to the level at which they are specified, and to all child levels. A child level cannot modify the properties specified by a parent element of this type.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap">
      <summary>The default type of <see cref="T:System.Configuration.ConfigurationElementCollection" />. Collections of this type contain elements that can be merged across a hierarchy of configuration files. At any particular level within such a hierarchy, add, remove, and clear directives are used to modify any inherited properties and specify new ones.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate">
      <summary>Same as <see cref="F:System.Configuration.ConfigurationElementCollectionType.BasicMap" />, except that this type causes the <see cref="T:System.Configuration.ConfigurationElementCollection" /> object to sort its contents such that inherited elements are listed last.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate">
      <summary>Same as <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" />, except that this type causes the <see cref="T:System.Configuration.ConfigurationElementCollection" /> object to sort its contents such that inherited elements are listed last.</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationElementProperty">
      <summary>Specifies the property of a configuration element. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationElementProperty.#ctor(System.Configuration.ConfigurationValidatorBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElementProperty" /> class, based on a supplied parameter.</summary>
      <param name="validator">A <see cref="T:System.Configuration.ConfigurationValidatorBase" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> is null.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationElementProperty.Validator">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationValidatorBase" /> object used to validate the <see cref="T:System.Configuration.ConfigurationElementProperty" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationValidatorBase" /> object.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationErrorsException">
      <summary>The current value is not one of the <see cref="P:System.Web.Configuration.PagesSection.EnableSessionState" /> values.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="info">The object that holds the information to deserialize.</param>
      <param name="context">Contextual information about the source or destination.</param>
      <exception cref="T:System.InvalidOperationException">The current type is not a <see cref="T:System.Configuration.ConfigurationException" /> or a <see cref="T:System.Configuration.ConfigurationErrorsException" />.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
      <param name="inner">The exception that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.String,System.Int32)">
      <summary>Initializes a new instance of a <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
      <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
      <param name="filename">The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
      <param name="line">The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.Xml.XmlNode)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
      <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Exception,System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
      <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
      <param name="filename">The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
      <param name="line">The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Xml.XmlNode)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.#ctor(System.String,System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" /> class.</summary>
      <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</param>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.BareMessage">
      <summary>Gets a description of why this configuration exception was thrown.</summary>
      <returns>A description of why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> was thrown.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Errors">
      <summary>Gets a collection of errors that detail the reasons this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object that contains errors that identify the reasons this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Filename">
      <summary>Gets the path to the configuration file that caused this configuration exception to be thrown.</summary>
      <returns>The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> to be thrown.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetFilename(System.Xml.XmlNode)">
      <summary>Gets the path to the configuration file from which the internal <see cref="T:System.Xml.XmlNode" /> object was loaded when this configuration exception was thrown.</summary>
      <returns>The path to the configuration file from which the internal <see cref="T:System.Xml.XmlNode" /> object was loaded when this configuration exception was thrown. </returns>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetFilename(System.Xml.XmlReader)">
      <summary>Gets the path to the configuration file that the internal <see cref="T:System.Xml.XmlReader" /> was reading when this configuration exception was thrown.</summary>
      <returns>The path of the configuration file the internal <see cref="T:System.Xml.XmlReader" /> object was accessing when the exception occurred.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetLineNumber(System.Xml.XmlNode)">
      <summary>Gets the line number within the configuration file that the internal <see cref="T:System.Xml.XmlNode" /> object represented when this configuration exception was thrown.</summary>
      <returns>The line number within the configuration file that contains the <see cref="T:System.Xml.XmlNode" /> object being parsed when this configuration exception was thrown.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetLineNumber(System.Xml.XmlReader)">
      <summary>Gets the line number within the configuration file that the internal <see cref="T:System.Xml.XmlReader" /> object was processing when this configuration exception was thrown.</summary>
      <returns>The line number within the configuration file that the <see cref="T:System.Xml.XmlReader" /> object was accessing when the exception occurred.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception to be thrown.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationErrorsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name and line number at which this configuration exception occurred.</summary>
      <param name="info">The object that holds the information to be serialized.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Line">
      <summary>Gets the line number within the configuration file at which this configuration exception was thrown.</summary>
      <returns>The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationErrorsException.Message">
      <summary>Gets an extended description of why this configuration exception was thrown.</summary>
      <returns>An extended description of why this <see cref="T:System.Configuration.ConfigurationErrorsException" /> exception was thrown.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationFileMap">
      <summary>Defines the configuration file mapping for the machine configuration file. </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationFileMap" /> class. </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationFileMap" /> class based on the supplied parameter.</summary>
      <param name="machineConfigFilename">The name of the machine configuration file.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationFileMap.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.Configuration.ConfigurationFileMap" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationFileMap" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationFileMap.MachineConfigFilename">
      <summary>Gets or sets the name of the machine configuration file name.</summary>
      <returns>The machine configuration file name.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationLocation">
      <summary>Represents a location element within a configuration file.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationLocation.OpenConfiguration">
      <summary>Creates an instance of a Configuration object.</summary>
      <returns>A Configuration object.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLocation.Path">
      <summary>Gets the relative path to the resource whose configuration settings are represented by this <see cref="T:System.Configuration.ConfigurationLocation" /> object.</summary>
      <returns>The relative path to the resource whose configuration settings are represented by this <see cref="T:System.Configuration.ConfigurationLocation" />.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationLocationCollection">
      <summary>Contains a collection of <see cref="T:System.Configuration.ConfigurationLocationCollection" /> objects.</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationLocationCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Configuration.ConfigurationLocationCollection" /> object at the specified index.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationLocationCollection" /> at the specified index.</returns>
      <param name="index">The index location of the <see cref="T:System.Configuration.ConfigurationLocationCollection" /> to return.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationLockCollection">
      <summary>Contains a collection of locked configuration objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Add(System.String)">
      <summary>Locks a configuration object by adding it to the collection.</summary>
      <param name="name">The name of the configuration object.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when the <paramref name="name" /> does not match an existing configuration object within the collection.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.AttributeList">
      <summary>Gets a list of configuration objects contained in the collection.</summary>
      <returns>A comma-delimited string that lists the lock configuration objects in the collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Clear">
      <summary>Clears all configuration objects from the collection.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Contains(System.String)">
      <summary>Verifies whether a specific configuration object is locked.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationLockCollection" /> contains the specified configuration object; otherwise, false.</returns>
      <param name="name">The name of the configuration object to verify.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.CopyTo(System.String[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">A one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Configuration.ConfigurationLockCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.Count">
      <summary>Gets the number of locked configuration objects contained in the collection.</summary>
      <returns>The number of locked configuration objects contained in the collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.GetEnumerator">
      <summary>Gets an <see cref="T:System.Collections.IEnumerator" /> object, which is used to iterate through this <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.HasParentElements">
      <summary>Gets a value specifying whether the collection of locked objects has parent elements.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection has parent elements; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.IsModified">
      <summary>Gets a value specifying whether the collection has been modified.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection has been modified; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.IsReadOnly(System.String)">
      <summary>Verifies whether a specific configuration object is read-only.</summary>
      <returns>true if the specified configuration object in the <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection is read-only; otherwise, false.</returns>
      <param name="name">The name of the configuration object to verify.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The specified configuration object is not in the collection.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.IsSynchronized">
      <summary>Gets a value specifying whether the collection is synchronized.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection is synchronized; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.Remove(System.String)">
      <summary>Removes a configuration object from the collection.</summary>
      <param name="name">The name of the configuration object.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when the <paramref name="name" /> does not match an existing configuration object within the collection.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.SetFromList(System.String)">
      <summary>Locks a set of configuration objects based on the supplied list.</summary>
      <param name="attributeList">A comma-delimited string.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when an item in the <paramref name="attributeList" /> parameter is not a valid lockable configuration attribute.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationLockCollection.SyncRoot">
      <summary>Gets an object used to synchronize access to this <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection.</summary>
      <returns>An object used to synchronize access to this <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationLockCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">A one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Configuration.ConfigurationLockCollection" /> collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationManager">
      <summary>Provides access to configuration files for client applications. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationManager.AppSettings">
      <summary>Gets the <see cref="T:System.Configuration.AppSettingsSection" /> data for the current application's default configuration.</summary>
      <returns>Returns a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object that contains the contents of the <see cref="T:System.Configuration.AppSettingsSection" /> object for the current application's default configuration. </returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Could not retrieve a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object with the application settings data.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationManager.ConnectionStrings">
      <summary>Gets the <see cref="T:System.Configuration.ConnectionStringsSection" /> data for the current application's default configuration.</summary>
      <returns>Returns a <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> object that contains the contents of the <see cref="T:System.Configuration.ConnectionStringsSection" /> object for the current application's default configuration. </returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Could not retrieve a <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> object.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.GetSection(System.String)">
      <summary>Retrieves a specified configuration section for the current application's default configuration.</summary>
      <returns>The specified <see cref="T:System.Configuration.ConfigurationSection" /> object, or null if the section does not exist.</returns>
      <param name="sectionName">The configuration section path and name.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)">
      <summary>Opens the configuration file for the current application as a <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.Configuration" /> object.</returns>
      <param name="userLevel">The <see cref="T:System.Configuration.ConfigurationUserLevel" /> for which you are opening the configuration.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)">
      <summary>Opens the specified client configuration file as a <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.Configuration" /> object.</returns>
      <param name="exePath">The path of the configuration file. The configuration file resides in the same directory as the executable file.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMachineConfiguration">
      <summary>Opens the machine configuration file on the current computer as a <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.Configuration" /> object.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)">
      <summary>Opens the specified client configuration file as a <see cref="T:System.Configuration.Configuration" /> object that uses the specified file mapping and user level.</summary>
      <returns>A <see cref="T:System.Configuration.Configuration" /> object.</returns>
      <param name="fileMap">An <see cref="T:System.Configuration.ExeConfigurationFileMap" /> object that references configuration file to use instead of the application default configuration file.</param>
      <param name="userLevel">The <see cref="T:System.Configuration.ConfigurationUserLevel" /> object for which you are opening the configuration.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)">
      <summary>Opens the machine configuration file as a <see cref="T:System.Configuration.Configuration" /> object that uses the specified file mapping.</summary>
      <returns>A <see cref="T:System.Configuration.Configuration" /> object.</returns>
      <param name="fileMap">An <see cref="T:System.Configuration.ExeConfigurationFileMap" /> object that references configuration file to use instead of the application default configuration file.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationManager.RefreshSection(System.String)">
      <summary>Refreshes the named section so the next time that it is retrieved it will be re-read from disk.</summary>
      <param name="sectionName">The configuration section name or the configuration path and section name of the section to refresh.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationPermission">
      <summary>Provides a permission structure that allows methods or classes to access configuration files. </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationPermission" /> class. </summary>
      <param name="state">The permission level to grant.</param>
      <exception cref="T:System.ArgumentException">The value of <paramref name="state" /> is neither <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> nor <see cref="F:System.Security.Permissions.PermissionState.None" />.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Copy">
      <summary>Returns a new <see cref="T:System.Configuration.ConfigurationPermission" /> object with the same permission level.</summary>
      <returns>A new <see cref="T:System.Configuration.ConfigurationPermission" /> with the same permission level.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reads the value of the permission state from XML.</summary>
      <param name="securityElement">The configuration element from which the permission state is read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Security.SecurityElement.Tag" /> for the given <paramref name="securityElement" /> does not equal "IPermission".</exception>
      <exception cref="T:System.ArgumentException">The class attribute of the given <paramref name="securityElement " />equals null.</exception>
      <exception cref="T:System.ArgumentException">The class attribute of the given <paramref name="securityElement" /> is not the type name for <see cref="T:System.Configuration.ConfigurationPermission" />.</exception>
      <exception cref="T:System.ArgumentException">The version attribute for the given <paramref name="securityElement" /> does not equal 1.</exception>
      <exception cref="T:System.ArgumentException">The unrestricted attribute for the given <paramref name="securityElement" /> is neither true nor false.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Intersect(System.Security.IPermission)">
      <summary>Returns the logical intersection between the <see cref="T:System.Configuration.ConfigurationPermission" /> object and a given object that implements the <see cref="T:System.Security.IPermission" /> interface.</summary>
      <returns>The logical intersection between the <see cref="T:System.Configuration.ConfigurationPermission" /> and a given object that implements <see cref="T:System.Security.IPermission" />.</returns>
      <param name="target">The object containing the permissions to perform the intersection with.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not typed as <see cref="T:System.Configuration.ConfigurationPermission" />.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Compares the <see cref="T:System.Configuration.ConfigurationPermission" /> object with an object implementing the <see cref="T:System.Security.IPermission" /> interface.</summary>
      <returns>true if the permission state is equal; otherwise, false.</returns>
      <param name="target">The object to compare to.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not typed as <see cref="T:System.Configuration.ConfigurationPermission" />.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.IsUnrestricted">
      <summary>Indicates whether the permission state for the <see cref="T:System.Configuration.ConfigurationPermission" /> object is the <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> value of the <see cref="T:System.Security.Permissions.PermissionState" /> enumeration.</summary>
      <returns>true if the permission state for the <see cref="T:System.Configuration.ConfigurationPermission" /> is the <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> value of <see cref="T:System.Security.Permissions.PermissionState" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.ToXml">
      <summary>Returns a <see cref="T:System.Security.SecurityElement" /> object with attribute values based on the current <see cref="T:System.Configuration.ConfigurationPermission" /> object.</summary>
      <returns>A <see cref="T:System.Security.SecurityElement" /> with attribute values based on the current <see cref="T:System.Configuration.ConfigurationPermission" />.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Union(System.Security.IPermission)">
      <summary>Returns the logical union of the <see cref="T:System.Configuration.ConfigurationPermission" /> object and an object that implements the <see cref="T:System.Security.IPermission" /> interface.</summary>
      <returns>The logical union of the <see cref="T:System.Configuration.ConfigurationPermission" /> and an object that implements <see cref="T:System.Security.IPermission" />.</returns>
      <param name="target">The object to perform the union with.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not typed as <see cref="T:System.Configuration.ConfigurationPermission" />.</exception>
    </member>
    <member name="T:System.Configuration.ConfigurationPermissionAttribute">
      <summary>Creates a <see cref="T:System.Configuration.ConfigurationPermission" /> object that either grants or denies the marked target permission to access sections of configuration files.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationPermissionAttribute" /> class.</summary>
      <param name="action">The security action represented by an enumeration member of <see cref="T:System.Security.Permissions.SecurityAction" />. Determines the permission state of the attribute.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPermissionAttribute.CreatePermission">
      <summary>Creates and returns an object that implements the <see cref="T:System.Security.IPermission" /> interface.</summary>
      <returns>Returns an object that implements <see cref="T:System.Security.IPermission" />.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationProperty">
      <summary>Represents an attribute or a child of a configuration element. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" /> class. </summary>
      <param name="name">The name of the configuration entity. </param>
      <param name="type">The type of the configuration entity. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" /> class. </summary>
      <param name="name">The name of the configuration entity. </param>
      <param name="type">The type of the configuration entity. </param>
      <param name="defaultValue">The default value of the configuration entity. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.ComponentModel.TypeConverter,System.Configuration.ConfigurationValidatorBase,System.Configuration.ConfigurationPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" /> class. </summary>
      <param name="name">The name of the configuration entity. </param>
      <param name="type">The type of the configuration entity.</param>
      <param name="defaultValue">The default value of the configuration entity. </param>
      <param name="typeConverter">The type of the converter to apply.</param>
      <param name="validator">The validator to use. </param>
      <param name="options">One of the <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> enumeration values. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.ComponentModel.TypeConverter,System.Configuration.ConfigurationValidatorBase,System.Configuration.ConfigurationPropertyOptions,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" /> class. </summary>
      <param name="name">The name of the configuration entity. </param>
      <param name="type">The type of the configuration entity. </param>
      <param name="defaultValue">The default value of the configuration entity. </param>
      <param name="typeConverter">The type of the converter to apply.</param>
      <param name="validator">The validator to use. </param>
      <param name="options">One of the <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> enumeration values. </param>
      <param name="description">The description of the configuration entity. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationProperty.#ctor(System.String,System.Type,System.Object,System.Configuration.ConfigurationPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" /> class. </summary>
      <param name="name">The name of the configuration entity. </param>
      <param name="type">The type of the configuration entity. </param>
      <param name="defaultValue">The default value of the configuration entity. </param>
      <param name="options">One of the <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> enumeration values.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Converter">
      <summary>Gets the <see cref="T:System.ComponentModel.TypeConverter" /> used to convert this <see cref="T:System.Configuration.ConfigurationProperty" /> into an XML representation for writing to the configuration file.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> used to convert this <see cref="T:System.Configuration.ConfigurationProperty" /> into an XML representation for writing to the configuration file.</returns>
      <exception cref="T:System.Exception">This <see cref="T:System.Configuration.ConfigurationProperty" /> cannot be converted. </exception>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.DefaultValue">
      <summary>Gets the default value for this <see cref="T:System.Configuration.ConfigurationProperty" /> property.</summary>
      <returns>An <see cref="T:System.Object" /> that can be cast to the type specified by the <see cref="P:System.Configuration.ConfigurationProperty.Type" /> property.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Description">
      <summary>Gets the description associated with the <see cref="T:System.Configuration.ConfigurationProperty" />.</summary>
      <returns>A string value that describes the property.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsAssemblyStringTransformationRequired">
      <summary>Indicates whether the assembly name for the configuration property requires transformation when it is serialized for an earlier version of the .NET Framework.</summary>
      <returns>true if the property requires assembly name transformation; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsDefaultCollection">
      <summary>Gets a value that indicates whether the property is the default collection of an element. </summary>
      <returns>true if the property is the default collection of an element; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsKey">
      <summary>Gets a value indicating whether this <see cref="T:System.Configuration.ConfigurationProperty" /> is the key for the containing <see cref="T:System.Configuration.ConfigurationElement" /> object.</summary>
      <returns>true if this <see cref="T:System.Configuration.ConfigurationProperty" /> object is the key for the containing element; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsRequired">
      <summary>Gets a value indicating whether this <see cref="T:System.Configuration.ConfigurationProperty" /> is required.</summary>
      <returns>true if the <see cref="T:System.Configuration.ConfigurationProperty" /> is required; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsTypeStringTransformationRequired">
      <summary>Indicates whether the type name for the configuration property requires transformation when it is serialized for an earlier version of the .NET Framework.</summary>
      <returns>true if the property requires type-name transformation; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.IsVersionCheckRequired">
      <summary>Indicates whether the configuration property's parent configuration section is queried at serialization time to determine whether the configuration property should be serialized into XML.</summary>
      <returns>true if the parent configuration section should be queried; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Name">
      <summary>Gets the name of this <see cref="T:System.Configuration.ConfigurationProperty" />.</summary>
      <returns>The name of the <see cref="T:System.Configuration.ConfigurationProperty" />.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Type">
      <summary>Gets the type of this <see cref="T:System.Configuration.ConfigurationProperty" /> object.</summary>
      <returns>A <see cref="T:System.Type" /> representing the type of this <see cref="T:System.Configuration.ConfigurationProperty" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationProperty.Validator">
      <summary>Gets the <see cref="T:System.Configuration.ConfigurationValidatorAttribute" />, which is used to validate this <see cref="T:System.Configuration.ConfigurationProperty" /> object.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" /> validator, which is used to validate this <see cref="T:System.Configuration.ConfigurationProperty" />.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyAttribute">
      <summary>Declaratively instructs the .NET Framework to instantiate a configuration property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Configuration.ConfigurationPropertyAttribute" /> class.</summary>
      <param name="name">Name of the <see cref="T:System.Configuration.ConfigurationProperty" /> object defined.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.DefaultValue">
      <summary>Gets or sets the default value for the decorated property.</summary>
      <returns>The object representing the default value of the decorated configuration-element property.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsDefaultCollection">
      <summary>Gets or sets a value indicating whether this is the default property collection for the decorated configuration property. </summary>
      <returns>true if the property represents the default collection of an element; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsKey">
      <summary>Gets or sets a value indicating whether this is a key property for the decorated element property.</summary>
      <returns>true if the property is a key property for an element of the collection; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.IsRequired">
      <summary>Gets or sets a value indicating whether the decorated element property is required.</summary>
      <returns>true if the property is required; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.Name">
      <summary>Gets the name of the decorated configuration-element property.</summary>
      <returns>The name of the decorated configuration-element property.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyAttribute.Options">
      <summary>Gets or sets the <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> for the decorated configuration-element property.</summary>
      <returns>One of the <see cref="T:System.Configuration.ConfigurationPropertyOptions" /> enumeration values associated with the property.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyCollection">
      <summary>Represents a collection of configuration-element properties.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> class. </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Add(System.Configuration.ConfigurationProperty)">
      <summary>Adds a configuration property to the collection.</summary>
      <param name="property">The <see cref="T:System.Configuration.ConfigurationProperty" />  to add. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Clear">
      <summary>Removes all configuration property objects from the collection.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Contains(System.String)">
      <summary>Specifies whether the configuration property is contained in this collection.</summary>
      <returns>true if the specified <see cref="T:System.Configuration.ConfigurationProperty" /> is contained in the collection; otherwise, false.</returns>
      <param name="name">An identifier for the <see cref="T:System.Configuration.ConfigurationProperty" /> to verify. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.CopyTo(System.Configuration.ConfigurationProperty[],System.Int32)">
      <summary>Copies this ConfigurationPropertyCollection to an array.</summary>
      <param name="array">Array to which to copy.</param>
      <param name="index">Index at which to begin copying.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.Count">
      <summary>Gets the number of properties in the collection.</summary>
      <returns>The number of properties in the collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.GetEnumerator">
      <summary>Gets the <see cref="T:System.Collections.IEnumerator" /> object as it applies to the collection.</summary>
      <returns>The <see cref="T:System.Collections.IEnumerator" /> object as it applies to the collection</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.Item(System.String)">
      <summary>Gets the collection item with the specified name.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationProperty" /> with the specified <paramref name="name" />.</returns>
      <param name="name">The <see cref="T:System.Configuration.ConfigurationProperty" /> to return. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.Remove(System.String)">
      <summary>Removes a configuration property from the collection.</summary>
      <returns>true if the specified <see cref="T:System.Configuration.ConfigurationProperty" /> was removed; otherwise, false.</returns>
      <param name="name">The <see cref="T:System.Configuration.ConfigurationProperty" /> to remove. </param>
    </member>
    <member name="P:System.Configuration.ConfigurationPropertyCollection.SyncRoot">
      <summary>Gets the object to synchronize access to the collection.</summary>
      <returns>The object to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies this collection to an array.</summary>
      <param name="array">The array to which to copy.</param>
      <param name="index">The index location at which to begin copying.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationPropertyOptions">
      <summary>Specifies the options to apply to a property.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.None">
      <summary>Indicates that no option applies to the property.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsDefaultCollection">
      <summary>Indicates that the property is a default collection. </summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsRequired">
      <summary>Indicates that the property is required. </summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsKey">
      <summary>Indicates that the property is a collection key.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsTypeStringTransformationRequired">
      <summary>Indicates whether the type name for the configuration property requires transformation when it is serialized for an earlier version of the .NET Framework.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsAssemblyStringTransformationRequired">
      <summary>Indicates whether the assembly name for the configuration property requires transformation when it is serialized for an earlier version of the .NET Framework.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationPropertyOptions.IsVersionCheckRequired">
      <summary>Indicates whether the configuration property's parent configuration section should be queried at serialization time to determine whether the configuration property should be serialized into XML.</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSaveMode">
      <summary>Determines which properties are written out to a configuration file.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Modified">
      <summary>Causes only modified properties to be written to the configuration file, even when the value is the same as the inherited value.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Minimal">
      <summary>Causes only properties that differ from inherited values to be written to the configuration file.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationSaveMode.Full">
      <summary>Causes all properties to be written to the configuration file. This is useful mostly for creating information configuration files or moving configuration values from one machine to another.</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSection">
      <summary>Represents a section within a configuration file.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationSection" /> class. </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.DeserializeSection(System.Xml.XmlReader)">
      <summary>Reads XML from the configuration file.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object, which reads from the configuration file. </param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="reader" /> found no elements in the configuration file.</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.GetRuntimeObject">
      <summary>Returns a custom object when overridden in a derived class.</summary>
      <returns>The object representing the section.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.IsModified">
      <summary>Indicates whether this configuration element has been modified since it was last saved or loaded when implemented in a derived class.</summary>
      <returns>true if the element has been modified; otherwise, false. </returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ResetModified">
      <summary>Resets the value of the <see cref="M:System.Configuration.ConfigurationElement.IsModified" /> method to false when implemented in a derived class.</summary>
    </member>
    <member name="P:System.Configuration.ConfigurationSection.SectionInformation">
      <summary>Gets a <see cref="T:System.Configuration.SectionInformation" /> object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" /> object. </summary>
      <returns>A <see cref="T:System.Configuration.SectionInformation" /> that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)">
      <summary>Creates an XML string containing an unmerged view of the <see cref="T:System.Configuration.ConfigurationSection" /> object as a single section to write to a file.</summary>
      <returns>An XML string containing an unmerged view of the <see cref="T:System.Configuration.ConfigurationSection" /> object.</returns>
      <param name="parentElement">The <see cref="T:System.Configuration.ConfigurationElement" /> instance to use as the parent when performing the un-merge.</param>
      <param name="name">The name of the section to create.</param>
      <param name="saveMode">The <see cref="T:System.Configuration.ConfigurationSaveMode" /> instance to use when writing to a string.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializeElementInTargetVersion(System.Configuration.ConfigurationElement,System.String,System.Runtime.Versioning.FrameworkName)">
      <summary>Indicates whether the specified element should be serialized when the configuration object hierarchy is serialized for the specified target version of the .NET Framework.</summary>
      <returns>true if the <paramref name="element" /> should be serialized; otherwise, false.</returns>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> object that is a candidate for serialization.</param>
      <param name="elementName">The name of the <see cref="T:System.Configuration.ConfigurationElement" /> object as it occurs in XML.</param>
      <param name="targetFramework">The target version of the .NET Framework.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializePropertyInTargetVersion(System.Configuration.ConfigurationProperty,System.String,System.Runtime.Versioning.FrameworkName,System.Configuration.ConfigurationElement)">
      <summary>Indicates whether the specified property should be serialized when the configuration object hierarchy is serialized for the specified target version of the .NET Framework.</summary>
      <returns>true if the <paramref name="property" /> should be serialized; otherwise, false.</returns>
      <param name="property">The <see cref="T:System.Configuration.ConfigurationProperty" /> object that is a candidate for serialization.</param>
      <param name="propertyName">The name of the <see cref="T:System.Configuration.ConfigurationProperty" /> object as it occurs in XML.</param>
      <param name="targetFramework">The target version of the .NET Framework.</param>
      <param name="parentConfigurationElement">The parent element of the property.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSection.ShouldSerializeSectionInTargetVersion(System.Runtime.Versioning.FrameworkName)">
      <summary>Indicates whether the current <see cref="T:System.Configuration.ConfigurationSection" /> instance should be serialized when the configuration object hierarchy is serialized for the specified target version of the .NET Framework.</summary>
      <returns>true if the current section should be serialized; otherwise, false.</returns>
      <param name="targetFramework">The target version of the .NET Framework.</param>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionCollection">
      <summary>Represents a collection of related sections within a configuration file.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Add(System.String,System.Configuration.ConfigurationSection)">
      <summary>Adds a <see cref="T:System.Configuration.ConfigurationSection" /> object to the <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <param name="name">The name of the section to be added.</param>
      <param name="section">The section to be added.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Clear">
      <summary>Clears this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.CopyTo(System.Configuration.ConfigurationSection[],System.Int32)">
      <summary>Copies this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object to an array.</summary>
      <param name="array">The array to copy the <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object to.</param>
      <param name="index">The index location at which to begin copying.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="array" /> is less than the value of <see cref="P:System.Configuration.ConfigurationSectionCollection.Count" /> plus <paramref name="index" />.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Count">
      <summary>Gets the number of sections in this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <returns>An integer that represents the number of sections in the collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Get(System.Int32)">
      <summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSection" /> object contained in this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSection" /> object at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Configuration.ConfigurationSection" /> object to be returned.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Get(System.String)">
      <summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSection" /> object contained in this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSection" /> object with the specified name.</returns>
      <param name="name">The name of the <see cref="T:System.Configuration.ConfigurationSection" /> object to be returned.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or an empty string ("").</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetKey(System.Int32)">
      <summary>Gets the key of the specified <see cref="T:System.Configuration.ConfigurationSection" /> object contained in this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <returns>The key of the <see cref="T:System.Configuration.ConfigurationSection" /> object at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Configuration.ConfigurationSection" /> object whose key is to be returned. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Used by the system during serialization.</summary>
      <param name="info">The applicable <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">The applicable <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Item(System.Int32)">
      <summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSection" /> object.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSection" /> object at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Configuration.ConfigurationSection" /> object to be returned. </param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Item(System.String)">
      <summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSection" /> object.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSection" /> object with the specified name.</returns>
      <param name="name">The name of the <see cref="T:System.Configuration.ConfigurationSection" /> object to be returned. </param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionCollection.Keys">
      <summary>Gets the keys to all <see cref="T:System.Configuration.ConfigurationSection" /> objects contained in this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> object that contains the keys of all sections in this collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.Remove(System.String)">
      <summary>Removes the specified <see cref="T:System.Configuration.ConfigurationSection" /> object from this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <param name="name">The name of the section to be removed. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Configuration.ConfigurationSection" /> object from this <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object.</summary>
      <param name="index">The index of the section to be removed. </param>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionGroup">
      <summary>Represents a group of related sections within a configuration file.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> class. </summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ForceDeclaration">
      <summary>Forces the declaration for this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ForceDeclaration(System.Boolean)">
      <summary>Forces the declaration for this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</summary>
      <param name="force">true if the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object must be written to the file; otherwise, false.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object is the root section group.- or -The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object has a location.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.IsDeclarationRequired">
      <summary>Gets a value that indicates whether this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object declaration is required. </summary>
      <returns>true if this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> declaration is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.IsDeclared">
      <summary>Gets a value that indicates whether this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object is declared.</summary>
      <returns>true if this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> is declared; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Name">
      <summary>Gets the name property of this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</summary>
      <returns>The name property of this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.SectionGroupName">
      <summary>Gets the section group name associated with this <see cref="T:System.Configuration.ConfigurationSectionGroup" />.</summary>
      <returns>The section group name of this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.SectionGroups">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object that contains all the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> objects that are children of this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object that contains all the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> objects that are children of this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Sections">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object that contains all of <see cref="T:System.Configuration.ConfigurationSection" /> objects within this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationSectionCollection" /> object that contains all the <see cref="T:System.Configuration.ConfigurationSection" /> objects within this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroup.ShouldSerializeSectionGroupInTargetVersion(System.Runtime.Versioning.FrameworkName)">
      <summary>Indicates whether the current <see cref="T:System.Configuration.ConfigurationSectionGroup" /> instance should be serialized when the configuration object hierarchy is serialized for the specified target version of the .NET Framework.</summary>
      <returns>true if the current section group should be serialized; otherwise, false.</returns>
      <param name="targetFramework">The target version of the .NET Framework.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroup.Type">
      <summary>Gets or sets the type for this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</summary>
      <returns>The type of this <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object is the root section group.- or -The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object has a location.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The section or group is already defined at another level.</exception>
    </member>
    <member name="T:System.Configuration.ConfigurationSectionGroupCollection">
      <summary>Represents a collection of <see cref="T:System.Configuration.ConfigurationSectionGroup" /> objects.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Add(System.String,System.Configuration.ConfigurationSectionGroup)">
      <summary>Adds a <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object to this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object to be added.</param>
      <param name="sectionGroup">The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object to be added.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Clear">
      <summary>Clears the collection.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.CopyTo(System.Configuration.ConfigurationSectionGroup[],System.Int32)">
      <summary>Copies this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object to an array.</summary>
      <param name="array">The array to copy the object to.</param>
      <param name="index">The index location at which to begin copying.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="array" /> is less than the value of <see cref="P:System.Configuration.ConfigurationSectionGroupCollection.Count" /> plus <paramref name="index" />.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Count">
      <summary>Gets the number of section groups in the collection.</summary>
      <returns>An integer that represents the number of section groups in the collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Get(System.Int32)">
      <summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object contained in the collection.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object to be returned. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Get(System.String)">
      <summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object from the collection.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object with the specified name.</returns>
      <param name="name">The name of the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object to be returned. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or an empty string ("").</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through the <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetKey(System.Int32)">
      <summary>Gets the key of the specified <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object contained in this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object.</summary>
      <returns>The key of the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object at the specified index.</returns>
      <param name="index">The index of the section group whose key is to be returned. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Used by the system during serialization.</summary>
      <param name="info">The applicable <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">The applicable <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object whose index is specified from the collection.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object at the specified index.In C#, this property is the indexer for the <see cref="T:System.Configuration.ConfigurationSectionCollection" /> class. </returns>
      <param name="index">The index of the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object to be returned. </param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object whose name is specified from the collection.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object with the specified name.In C#, this property is the indexer for the <see cref="T:System.Configuration.ConfigurationSectionCollection" /> class. </returns>
      <param name="name">The name of the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object to be returned. </param>
    </member>
    <member name="P:System.Configuration.ConfigurationSectionGroupCollection.Keys">
      <summary>Gets the keys to all <see cref="T:System.Configuration.ConfigurationSectionGroup" /> objects contained in this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> object that contains the names of all section groups in this collection.</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.Remove(System.String)">
      <summary>Removes the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object whose name is specified from this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object.</summary>
      <param name="name">The name of the section group to be removed. </param>
    </member>
    <member name="M:System.Configuration.ConfigurationSectionGroupCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> object whose index is specified from this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" /> object.</summary>
      <param name="index">The index of the section group to be removed. </param>
    </member>
    <member name="T:System.Configuration.ConfigurationUserLevel">
      <summary>Used to specify which configuration file is to be represented by the Configuration object.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.None">
      <summary>Get the <see cref="T:System.Configuration.Configuration" /> that applies to all users.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.PerUserRoaming">
      <summary>Get the roaming <see cref="T:System.Configuration.Configuration" /> that applies to the current user.</summary>
    </member>
    <member name="F:System.Configuration.ConfigurationUserLevel.PerUserRoamingAndLocal">
      <summary>Get the local <see cref="T:System.Configuration.Configuration" /> that applies to the current user.</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationValidatorAttribute">
      <summary>Serves as the base class for the <see cref="N:System.Configuration" /> validator attribute types.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationValidatorAttribute" /> class.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationValidatorAttribute" /> class using the specified validator type.</summary>
      <param name="validator">The validator type to use when creating an instance of <see cref="T:System.Configuration.ConfigurationValidatorAttribute" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="validator" /> is not derived from <see cref="T:System.Configuration.ConfigurationValidatorBase" />.</exception>
    </member>
    <member name="P:System.Configuration.ConfigurationValidatorAttribute.ValidatorInstance">
      <summary>Gets the validator attribute instance.</summary>
      <returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase" />.</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationValidatorAttribute.ValidatorType">
      <summary>Gets the type of the validator attribute.</summary>
      <returns>The <see cref="T:System.Type" /> of the current validator attribute instance.</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationValidatorBase">
      <summary>Acts as a base class for deriving a validation class so that a value of an object can be verified.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Configuration.ConfigurationValidatorBase" /> class.</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.CanValidate(System.Type)">
      <summary>Determines whether an object can be validated based on type.</summary>
      <returns>true if the <paramref name="type" /> parameter value matches the expected type; otherwise, false. </returns>
      <param name="type">The object type.</param>
    </member>
    <member name="M:System.Configuration.ConfigurationValidatorBase.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid. </summary>
      <param name="value">The object value.</param>
    </member>
    <member name="T:System.Configuration.ConnectionStringSettings">
      <summary>Represents a single, named connection string in the connection strings configuration file section.</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Configuration.ConnectionStringSettings" /> class.</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of a <see cref="T:System.Configuration.ConnectionStringSettings" /> class.</summary>
      <param name="name">The name of the connection string.</param>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of a <see cref="T:System.Configuration.ConnectionStringSettings" /> object.</summary>
      <param name="name">The name of the connection string.</param>
      <param name="connectionString">The connection string.</param>
      <param name="providerName">The name of the provider to use with the connection string.</param>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.ConnectionString">
      <summary>Gets or sets the connection string.</summary>
      <returns>The string value assigned to the <see cref="P:System.Configuration.ConnectionStringSettings.ConnectionString" /> property.</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.Name">
      <summary>Gets or sets the <see cref="T:System.Configuration.ConnectionStringSettings" /> name.</summary>
      <returns>The string value assigned to the <see cref="P:System.Configuration.ConnectionStringSettings.Name" /> property.</returns>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettings.ProviderName">
      <summary>Gets or sets the provider name property.</summary>
      <returns>Gets or sets the <see cref="P:System.Configuration.ConnectionStringSettings.ProviderName" /> property.</returns>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettings.ToString">
      <summary>Returns a string representation of the object.</summary>
      <returns>A string representation of the object.</returns>
    </member>
    <member name="T:System.Configuration.ConnectionStringSettingsCollection">
      <summary>Contains a collection of <see cref="T:System.Configuration.ConnectionStringSettings" /> objects.</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> class. </summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Add(System.Configuration.ConnectionStringSettings)">
      <summary>Adds a <see cref="T:System.Configuration.ConnectionStringSettings" /> object to the collection.</summary>
      <param name="settings">A <see cref="T:System.Configuration.ConnectionStringSettings" /> object to add to the collection.</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Clear">
      <summary>Removes all the <see cref="T:System.Configuration.ConnectionStringSettings" /> objects from the collection.</summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.IndexOf(System.Configuration.ConnectionStringSettings)">
      <summary>Returns the collection index of the passed <see cref="T:System.Configuration.ConnectionStringSettings" /> object.</summary>
      <returns>The collection index of the specified <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> object.</returns>
      <param name="settings">A <see cref="T:System.Configuration.ConnectionStringSettings" /> object in the collection.</param>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettingsCollection.Item(System.Int32)">
      <summary>Gets or sets the connection string at the specified index in the collection.</summary>
      <returns>The <see cref="T:System.Configuration.ConnectionStringSettings" /> object at the specified index.</returns>
      <param name="index">The index of a <see cref="T:System.Configuration.ConnectionStringSettings" /> object in the collection.</param>
    </member>
    <member name="P:System.Configuration.ConnectionStringSettingsCollection.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Configuration.ConnectionStringSettings" /> object with the specified name in the collection.</summary>
      <returns>The <see cref="T:System.Configuration.ConnectionStringSettings" /> object with the specified name; otherwise, null.</returns>
      <param name="name">The name of a <see cref="T:System.Configuration.ConnectionStringSettings" /> object in the collection.</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Remove(System.Configuration.ConnectionStringSettings)">
      <summary>Removes the specified <see cref="T:System.Configuration.ConnectionStringSettings" /> object from the collection.</summary>
      <param name="settings">A <see cref="T:System.Configuration.ConnectionStringSettings" /> object in the collection.</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.Remove(System.String)">
      <summary>Removes the specified <see cref="T:System.Configuration.ConnectionStringSettings" /> object from the collection.</summary>
      <param name="name">The name of a <see cref="T:System.Configuration.ConnectionStringSettings" /> object in the collection.</param>
    </member>
    <member name="M:System.Configuration.ConnectionStringSettingsCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Configuration.ConnectionStringSettings" /> object at the specified index in the collection.</summary>
      <param name="index">The index of a <see cref="T:System.Configuration.ConnectionStringSettings" /> object in the collection.</param>
    </member>
    <member name="T:System.Configuration.ConnectionStringsSection">
      <summary>Provides programmatic access to the connection strings configuration-file section. </summary>
    </member>
    <member name="M:System.Configuration.ConnectionStringsSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ConnectionStringsSection" /> class.</summary>
    </member>
    <member name="P:System.Configuration.ConnectionStringsSection.ConnectionStrings">
      <summary>Gets a <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> collection of <see cref="T:System.Configuration.ConnectionStringSettings" /> objects.</summary>
      <returns>A <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> collection of <see cref="T:System.Configuration.ConnectionStringSettings" /> objects.</returns>
    </member>
    <member name="T:System.Configuration.ContextInformation">
      <summary>Encapsulates the context information that is associated with a <see cref="T:System.Configuration.ConfigurationElement" /> object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ContextInformation.GetSection(System.String)">
      <summary>Provides an object containing configuration-section information based on the specified section name.</summary>
      <returns>An object containing the specified section within the configuration.</returns>
      <param name="sectionName">The name of the configuration section.</param>
    </member>
    <member name="P:System.Configuration.ContextInformation.HostingContext">
      <summary>Gets the context of the environment where the configuration property is being evaluated.</summary>
      <returns>An object specifying the environment where the configuration property is being evaluated.</returns>
    </member>
    <member name="P:System.Configuration.ContextInformation.IsMachineLevel">
      <summary>Gets a value specifying whether the configuration property is being evaluated at the machine configuration level.</summary>
      <returns>true if the configuration property is being evaluated at the machine configuration level; otherwise, false.</returns>
    </member>
    <member name="T:System.Configuration.DefaultSection">
      <summary>Represents a basic configuration-section handler that exposes the configuration section's XML for both read and write access.</summary>
    </member>
    <member name="M:System.Configuration.DefaultSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.DefaultSection" /> class. </summary>
    </member>
    <member name="T:System.Configuration.DefaultValidator">
      <summary>Provides validation of an object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.DefaultValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.DefaultValidator" /> class. </summary>
    </member>
    <member name="M:System.Configuration.DefaultValidator.CanValidate(System.Type)">
      <summary>Determines whether an object can be validated, based on type.</summary>
      <returns>true for all types being validated. </returns>
      <param name="type">The object type.</param>
    </member>
    <member name="M:System.Configuration.DefaultValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid. </summary>
      <param name="value">The object value.</param>
    </member>
    <member name="T:System.Configuration.DpapiProtectedConfigurationProvider">
      <summary>Provides a <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object that uses the Windows data protection API (DPAPI) to encrypt and decrypt configuration data.</summary>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> class using default settings.</summary>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>Decrypts the passed <see cref="T:System.Xml.XmlNode" /> object.</summary>
      <returns>A decrypted <see cref="T:System.Xml.XmlNode" /> object.</returns>
      <param name="encryptedNode">The <see cref="T:System.Xml.XmlNode" /> object to decrypt. </param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="encryptedNode" /> does not have <see cref="P:System.Xml.XmlNode.Name" /> set to "EncryptedData" and <see cref="T:System.Xml.XmlNodeType" /> set to <see cref="F:System.Xml.XmlNodeType.Element" />.- or -<paramref name="encryptedNode" /> does not have a child node named "CipherData" with a child node named "CipherValue".- or -The child node named "CipherData" is an empty node.</exception>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>Encrypts the passed <see cref="T:System.Xml.XmlNode" /> object.</summary>
      <returns>An encrypted <see cref="T:System.Xml.XmlNode" /> object.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> object to encrypt. </param>
    </member>
    <member name="M:System.Configuration.DpapiProtectedConfigurationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes the provider with default settings.</summary>
      <param name="name">The provider name to use for the object.</param>
      <param name="configurationValues">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> collection of values to use when initializing the object.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="configurationValues" /> contains an unrecognized configuration setting.</exception>
    </member>
    <member name="P:System.Configuration.DpapiProtectedConfigurationProvider.UseMachineProtection">
      <summary>Gets a value that indicates whether the <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> object is using machine-specific or user-account-specific protection.</summary>
      <returns>true if the <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" /> is using machine-specific protection; false if it is using user-account-specific protection.</returns>
    </member>
    <member name="T:System.Configuration.ElementInformation">
      <summary>Contains meta-information about an individual element within the configuration. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Configuration.ElementInformation.Errors">
      <summary>Gets the errors for the associated element and subelements</summary>
      <returns>The collection containing the errors for the associated element and subelements</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsCollection">
      <summary>Gets a value indicating whether the associated <see cref="T:System.Configuration.ConfigurationElement" /> object is a <see cref="T:System.Configuration.ConfigurationElementCollection" /> collection.</summary>
      <returns>true if the associated <see cref="T:System.Configuration.ConfigurationElement" /> object is a <see cref="T:System.Configuration.ConfigurationElementCollection" /> collection; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsLocked">
      <summary>Gets a value that indicates whether the associated <see cref="T:System.Configuration.ConfigurationElement" /> object cannot be modified.</summary>
      <returns>true if the associated <see cref="T:System.Configuration.ConfigurationElement" /> object cannot be modified; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.IsPresent">
      <summary>Gets a value indicating whether the associated <see cref="T:System.Configuration.ConfigurationElement" /> object is in the configuration file.</summary>
      <returns>true if the associated <see cref="T:System.Configuration.ConfigurationElement" /> object is in the configuration file; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.LineNumber">
      <summary>Gets the line number in the configuration file where the associated <see cref="T:System.Configuration.ConfigurationElement" /> object is defined.</summary>
      <returns>The line number in the configuration file where the associated <see cref="T:System.Configuration.ConfigurationElement" /> object is defined.</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Properties">
      <summary>Gets a <see cref="T:System.Configuration.PropertyInformationCollection" /> collection of the properties in the associated <see cref="T:System.Configuration.ConfigurationElement" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.PropertyInformationCollection" /> collection of the properties in the associated <see cref="T:System.Configuration.ConfigurationElement" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Source">
      <summary>Gets the source file where the associated <see cref="T:System.Configuration.ConfigurationElement" /> object originated.</summary>
      <returns>The source file where the associated <see cref="T:System.Configuration.ConfigurationElement" /> object originated.</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Type">
      <summary>Gets the type of the associated <see cref="T:System.Configuration.ConfigurationElement" /> object.</summary>
      <returns>The type of the associated <see cref="T:System.Configuration.ConfigurationElement" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ElementInformation.Validator">
      <summary>Gets the object used to validate the associated <see cref="T:System.Configuration.ConfigurationElement" /> object.</summary>
      <returns>The object used to validate the associated <see cref="T:System.Configuration.ConfigurationElement" /> object.</returns>
    </member>
    <member name="T:System.Configuration.ExeConfigurationFileMap">
      <summary>Defines the configuration file mapping for an .exe application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ExeConfigurationFileMap" /> class.</summary>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ExeConfigurationFileMap" /> class by using the specified machine configuration file name.</summary>
      <param name="machineConfigFileName">The name of the machine configuration file that includes the complete physical path (for example, c:\Windows\Microsoft.NET\Framework\v2.0.50727\CONFIG\machine.config).</param>
    </member>
    <member name="M:System.Configuration.ExeConfigurationFileMap.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.Configuration.ExeConfigurationFileMap" /> object.</summary>
      <returns>An <see cref="T:System.Configuration.ExeConfigurationFileMap" /> object.</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.ExeConfigFilename">
      <summary>Gets or sets the name of the configuration file.</summary>
      <returns>The configuration file name.</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.LocalUserConfigFilename">
      <summary>Gets or sets the name of the configuration file for the local user.</summary>
      <returns>The configuration file name.</returns>
    </member>
    <member name="P:System.Configuration.ExeConfigurationFileMap.RoamingUserConfigFilename">
      <summary>Gets or sets the name of the configuration file for the roaming user.</summary>
      <returns>The configuration file name.</returns>
    </member>
    <member name="T:System.Configuration.ExeContext">
      <summary>Manages the path context for the current application. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Configuration.ExeContext.ExePath">
      <summary>Gets the current path for the application.</summary>
      <returns>A string value containing the current path.</returns>
    </member>
    <member name="P:System.Configuration.ExeContext.UserLevel">
      <summary>Gets an object representing the path level of the current application.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationUserLevel" /> object representing the path level of the current application.</returns>
    </member>
    <member name="T:System.Configuration.GenericEnumConverter">
      <summary>Converts between a string and an enumeration type. </summary>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.GenericEnumConverter" /> class.</summary>
      <param name="typeEnum">The enumeration type to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeEnum" /> is null.</exception>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to an <see cref="T:System.Enum" /> type.</summary>
      <returns>The <see cref="T:System.Enum" /> type that represents the <paramref name="data" /> parameter.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> is null or an empty string ("").- or -<paramref name="data" /> starts with a numeric character.- or -<paramref name="data" /> includes white space.</exception>
    </member>
    <member name="M:System.Configuration.GenericEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts an <see cref="T:System.Enum" /> type to a <see cref="T:System.String" /> value.</summary>
      <returns>The <see cref="T:System.String" /> that represents the <paramref name="value" /> parameter.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="value">The value to convert to.</param>
      <param name="type">The type to convert to.</param>
    </member>
    <member name="T:System.Configuration.IgnoreSection">
      <summary>Provides a wrapper type definition for configuration sections that are not handled by the <see cref="N:System.Configuration" /> types.</summary>
    </member>
    <member name="M:System.Configuration.IgnoreSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.IgnoreSection" /> class.</summary>
    </member>
    <member name="T:System.Configuration.InfiniteIntConverter">
      <summary>Converts between a string and the standard infinite or integer value.</summary>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.InfiniteIntConverter" /> class.</summary>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to an <see cref="T:System.Int32" />.</summary>
      <returns>The <see cref="F:System.Int32.MaxValue" />, if the <paramref name="data" /> parameter is the <see cref="T:System.String" /> "infinite"; otherwise, the <see cref="T:System.Int32" /> representing the <paramref name="data" /> parameter integer value.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
    </member>
    <member name="M:System.Configuration.InfiniteIntConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts an <see cref="T:System.Int32" />.to a <see cref="T:System.String" />.</summary>
      <returns>The <see cref="T:System.String" /> "infinite" if the <paramref name="value" /> is <see cref="F:System.Int32.MaxValue" />; otherwise, the <see cref="T:System.String" /> representing the <paramref name="value" /> parameter.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="value">The value to convert to.</param>
      <param name="type">The type to convert to.</param>
    </member>
    <member name="T:System.Configuration.InfiniteTimeSpanConverter">
      <summary>Converts between a string and the standard infinite <see cref="T:System.TimeSpan" /> value.</summary>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.InfiniteTimeSpanConverter" /> class.</summary>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>The <see cref="F:System.TimeSpan.MaxValue" />, if the <paramref name="data" /> parameter is the <see cref="T:System.String" /> infinite; otherwise, the <see cref="T:System.TimeSpan" /> representing the <paramref name="data" /> parameter in minutes.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
    </member>
    <member name="M:System.Configuration.InfiniteTimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />.</summary>
      <returns>The <see cref="T:System.String" /> "infinite", if the <paramref name="value" /> parameter is <see cref="F:System.TimeSpan.MaxValue" />; otherwise, the <see cref="T:System.String" /> representing the <paramref name="value" /> parameter in minutes.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> used during object conversion.</param>
      <param name="value">The value to convert.</param>
      <param name="type">The conversion type.</param>
    </member>
    <member name="T:System.Configuration.IntegerValidator">
      <summary>Provides validation of an <see cref="T:System.Int32" /> value.</summary>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.IntegerValidator" /> class. </summary>
      <param name="minValue">An <see cref="T:System.Int32" /> object that specifies the minimum value.</param>
      <param name="maxValue">An <see cref="T:System.Int32" /> object that specifies the maximum value.</param>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.IntegerValidator" /> class. </summary>
      <param name="minValue">An <see cref="T:System.Int32" /> object that specifies the minimum value.</param>
      <param name="maxValue">An <see cref="T:System.Int32" /> object that specifies the maximum value.</param>
      <param name="rangeIsExclusive">true to specify that the validation range is exclusive. Inclusive means the value to be validated must be within the specified range; exclusive means that it must be below the minimum or above the maximum.</param>
    </member>
    <member name="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.IntegerValidator" /> class. </summary>
      <param name="minValue">An <see cref="T:System.Int32" /> object that specifies the minimum length of the integer value.</param>
      <param name="maxValue">An <see cref="T:System.Int32" /> object that specifies the maximum length of the integer value.</param>
      <param name="rangeIsExclusive">A <see cref="T:System.Boolean" /> value that specifies whether the validation range is exclusive.</param>
      <param name="resolution">An <see cref="T:System.Int32" /> object that specifies a value that must be matched.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolution" /> is less than 0.- or -<paramref name="minValue" /> is greater than <paramref name="maxValue" />.</exception>
    </member>
    <member name="M:System.Configuration.IntegerValidator.CanValidate(System.Type)">
      <summary>Determines whether the type of the object can be validated.</summary>
      <returns>true if the <paramref name="type" /> parameter matches an <see cref="T:System.Int32" /> value; otherwise, false. </returns>
      <param name="type">The type of the object.</param>
    </member>
    <member name="M:System.Configuration.IntegerValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid.</summary>
      <param name="value">The value to be validated.</param>
    </member>
    <member name="T:System.Configuration.IntegerValidatorAttribute">
      <summary>Declaratively instructs the .NET Framework to perform integer validation on a configuration property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.IntegerValidatorAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Configuration.IntegerValidatorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.ExcludeRange">
      <summary>Gets or sets a value that indicates whether to include or exclude the integers in the range defined by the <see cref="P:System.Configuration.IntegerValidatorAttribute.MinValue" /> and <see cref="P:System.Configuration.IntegerValidatorAttribute.MaxValue" /> property values.</summary>
      <returns>true if the value must be excluded; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.MaxValue">
      <summary>Gets or sets the maximum value allowed for the property.</summary>
      <returns>An integer that indicates the allowed maximum value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see cref="P:System.Configuration.IntegerValidatorAttribute.MinValue" />.</exception>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.MinValue">
      <summary>Gets or sets the minimum value allowed for the property.</summary>
      <returns>An integer that indicates the allowed minimum value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value is greater than <see cref="P:System.Configuration.IntegerValidatorAttribute.MaxValue" />.</exception>
    </member>
    <member name="P:System.Configuration.IntegerValidatorAttribute.ValidatorInstance">
      <summary>Gets an instance of the <see cref="T:System.Configuration.IntegerValidator" /> class.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" /> validator instance.</returns>
    </member>
    <member name="T:System.Configuration.KeyValueConfigurationCollection">
      <summary>Contains a collection of <see cref="T:System.Configuration.KeyValueConfigurationElement" /> objects. </summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> class.</summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Add(System.Configuration.KeyValueConfigurationElement)">
      <summary>Adds a <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object to the collection based on the supplied parameters.</summary>
      <param name="keyValue">A <see cref="T:System.Configuration.KeyValueConfigurationElement" />.</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Add(System.String,System.String)">
      <summary>Adds a <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object to the collection based on the supplied parameters.</summary>
      <param name="key">A string specifying the key.</param>
      <param name="value">A string specifying the value.</param>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.AllKeys">
      <summary>Gets the keys to all items contained in the <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> collection.</summary>
      <returns>A string array.</returns>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Clear">
      <summary>Clears the <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> collection.</summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.CreateNewElement">
      <summary>When overridden in a derived class, the <see cref="M:System.Configuration.KeyValueConfigurationCollection.CreateNewElement" /> method creates a new <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object.</summary>
      <returns>A new <see cref="T:System.Configuration.KeyValueConfigurationElement" />.</returns>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Gets the element key for a specified configuration element when overridden in a derived class.</summary>
      <returns>An object that acts as the key for the specified <see cref="T:System.Configuration.KeyValueConfigurationElement" />.</returns>
      <param name="element">The <see cref="T:System.Configuration.KeyValueConfigurationElement" /> to which the key should be returned.</param>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object based on the supplied parameter.</summary>
      <returns>A configuration element, or null if the key does not exist in the collection.</returns>
      <param name="key">The key of the <see cref="T:System.Configuration.KeyValueConfigurationElement" /> contained in the collection.</param>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.Properties">
      <summary>Gets a collection of configuration properties.</summary>
      <returns>A collection of configuration properties.</returns>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationCollection.Remove(System.String)">
      <summary>Removes a <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object from the collection.</summary>
      <param name="key">A string specifying the <paramref name="key" />.</param>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationCollection.ThrowOnDuplicate">
      <summary>Gets a value indicating whether an attempt to add a duplicate <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object to the <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> collection will cause an exception to be thrown.</summary>
      <returns>true if an attempt to add a duplicate <see cref="T:System.Configuration.KeyValueConfigurationElement" /> to the <see cref="T:System.Configuration.KeyValueConfigurationCollection" /> will cause an exception to be thrown; otherwise, false. </returns>
    </member>
    <member name="T:System.Configuration.KeyValueConfigurationElement">
      <summary>Represents a configuration element that contains a key/value pair. </summary>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationElement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.KeyValueConfigurationElement" /> class based on the supplied parameters.</summary>
      <param name="key">The key of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />.</param>
      <param name="value">The value of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />.</param>
    </member>
    <member name="M:System.Configuration.KeyValueConfigurationElement.Init">
      <summary>Sets the <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object to its initial state.</summary>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Key">
      <summary>Gets the key of the <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object.</summary>
      <returns>The key of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />.</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Properties">
      <summary>Gets the collection of properties. </summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> of properties for the element.</returns>
    </member>
    <member name="P:System.Configuration.KeyValueConfigurationElement.Value">
      <summary>Gets or sets the value of the <see cref="T:System.Configuration.KeyValueConfigurationElement" /> object.</summary>
      <returns>The value of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />.</returns>
    </member>
    <member name="T:System.Configuration.LongValidator">
      <summary>Provides validation of an <see cref="T:System.Int64" /> value.</summary>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" /> class. </summary>
      <param name="minValue">An <see cref="T:System.Int64" /> value that specifies the minimum length of the long value.</param>
      <param name="maxValue">An <see cref="T:System.Int64" /> value that specifies the maximum length of the long value.</param>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" /> class. </summary>
      <param name="minValue">An <see cref="T:System.Int64" /> value that specifies the minimum length of the long value.</param>
      <param name="maxValue">An <see cref="T:System.Int64" /> value that specifies the maximum length of the long value.</param>
      <param name="rangeIsExclusive">A <see cref="T:System.Boolean" /> value that specifies whether the validation range is exclusive.</param>
    </member>
    <member name="M:System.Configuration.LongValidator.#ctor(System.Int64,System.Int64,System.Boolean,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" /> class. </summary>
      <param name="minValue">An <see cref="T:System.Int64" /> value that specifies the minimum length of the long value.</param>
      <param name="maxValue">An <see cref="T:System.Int64" /> value that specifies the maximum length of the long value.</param>
      <param name="rangeIsExclusive">A <see cref="T:System.Boolean" /> value that specifies whether the validation range is exclusive.</param>
      <param name="resolution">An <see cref="T:System.Int64" /> value that specifies a specific value that must be matched.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolution" /> is equal to or less than 0.- or -<paramref name="maxValue" /> is less than <paramref name="minValue" />.</exception>
    </member>
    <member name="M:System.Configuration.LongValidator.CanValidate(System.Type)">
      <summary>Determines whether the type of the object can be validated.</summary>
      <returns>true if the <paramref name="type" /> parameter matches an <see cref="T:System.Int64" /> value; otherwise, false. </returns>
      <param name="type">The type of object.</param>
    </member>
    <member name="M:System.Configuration.LongValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid.</summary>
      <param name="value">The value of an object.</param>
    </member>
    <member name="T:System.Configuration.LongValidatorAttribute">
      <summary>Declaratively instructs the .NET Framework to perform long-integer validation on a configuration property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.LongValidatorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidatorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.ExcludeRange">
      <summary>Gets or sets a value that indicates whether to include or exclude the integers in the range defined by the <see cref="P:System.Configuration.LongValidatorAttribute.MinValue" /> and <see cref="P:System.Configuration.LongValidatorAttribute.MaxValue" /> property values.</summary>
      <returns>true if the value must be excluded; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.MaxValue">
      <summary>Gets or sets the maximum value allowed for the property.</summary>
      <returns>A long integer that indicates the allowed maximum value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see cref="P:System.Configuration.LongValidatorAttribute.MinValue" />.</exception>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.MinValue">
      <summary>Gets or sets the minimum value allowed for the property.</summary>
      <returns>An integer that indicates the allowed minimum value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value is greater than <see cref="P:System.Configuration.LongValidatorAttribute.MaxValue" />.</exception>
    </member>
    <member name="P:System.Configuration.LongValidatorAttribute.ValidatorInstance">
      <summary>Gets an instance of the <see cref="T:System.Configuration.LongValidator" /> class.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" /> validator instance.</returns>
    </member>
    <member name="T:System.Configuration.NameValueConfigurationCollection">
      <summary>Contains a collection of <see cref="T:System.Configuration.NameValueConfigurationElement" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.NameValueConfigurationCollection" /> class.</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Add(System.Configuration.NameValueConfigurationElement)">
      <summary>Adds a <see cref="T:System.Configuration.NameValueConfigurationElement" /> object to the collection.</summary>
      <param name="nameValue">A  <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</param>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationCollection.AllKeys">
      <summary>Gets the keys to all items contained in the <see cref="T:System.Configuration.NameValueConfigurationCollection" />.</summary>
      <returns>A string array.</returns>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Clear">
      <summary>Clears the <see cref="T:System.Configuration.NameValueConfigurationCollection" />.</summary>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationCollection.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Configuration.NameValueConfigurationElement" /> object based on the supplied parameter.</summary>
      <returns>A <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</returns>
      <param name="name">The name of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> contained in the collection.</param>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Remove(System.Configuration.NameValueConfigurationElement)">
      <summary>Removes a <see cref="T:System.Configuration.NameValueConfigurationElement" /> object from the collection based on the provided parameter.</summary>
      <param name="nameValue">A <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</param>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationCollection.Remove(System.String)">
      <summary>Removes a <see cref="T:System.Configuration.NameValueConfigurationElement" /> object from the collection based on the provided parameter.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</param>
    </member>
    <member name="T:System.Configuration.NameValueConfigurationElement">
      <summary>A configuration element that contains a <see cref="T:System.String" /> name and <see cref="T:System.String" /> value. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.NameValueConfigurationElement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> class based on supplied parameters.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</param>
      <param name="value">The value of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</param>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationElement.Name">
      <summary>Gets the name of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</summary>
      <returns>The name of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</returns>
    </member>
    <member name="P:System.Configuration.NameValueConfigurationElement.Value">
      <summary>Gets or sets the value of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</summary>
      <returns>The value of the <see cref="T:System.Configuration.NameValueConfigurationElement" /> object.</returns>
    </member>
    <member name="T:System.Configuration.OverrideMode">
      <summary>Specifies the override behavior of a configuration element for configuration elements in child directories.</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Inherit">
      <summary>The configuration setting of the element or group will be overridden by configuration settings that are in child directories if explicitly allowed by a parent element of the current configuration element or group. Permission to override is specified by using the OverrideMode attribute.</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Allow">
      <summary>The configuration setting of the element or group can be overridden by configuration settings that are in child directories.</summary>
    </member>
    <member name="F:System.Configuration.OverrideMode.Deny">
      <summary>The configuration setting of the element or group cannot be overridden by configuration settings that are in child directories.</summary>
    </member>
    <member name="T:System.Configuration.PositiveTimeSpanValidator">
      <summary>Provides validation of a <see cref="T:System.TimeSpan" /> object. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.PositiveTimeSpanValidator" /> class. </summary>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.CanValidate(System.Type)">
      <summary>Determines whether the object type can be validated.</summary>
      <returns>true if the <paramref name="type" /> parameter matches a <see cref="T:System.TimeSpan" /> object; otherwise, false. </returns>
      <param name="type">The object type.</param>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid.</summary>
      <param name="value">The value of an object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be resolved as a positive <see cref="T:System.TimeSpan" /> value.</exception>
    </member>
    <member name="T:System.Configuration.PositiveTimeSpanValidatorAttribute">
      <summary>Declaratively instructs the .NET Framework to perform time validation on a configuration property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.PositiveTimeSpanValidatorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.PositiveTimeSpanValidatorAttribute" /> class. </summary>
    </member>
    <member name="P:System.Configuration.PositiveTimeSpanValidatorAttribute.ValidatorInstance">
      <summary>Gets an instance of the <see cref="T:System.Configuration.PositiveTimeSpanValidator" /> class.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" /> validator instance. </returns>
    </member>
    <member name="T:System.Configuration.PropertyInformation">
      <summary>Contains meta-information on an individual property within the configuration. This type cannot be inherited.</summary>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Converter">
      <summary>Gets the <see cref="T:System.ComponentModel.TypeConverter" /> object related to the configuration attribute.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> object.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.DefaultValue">
      <summary>Gets an object containing the default value related to a configuration attribute.</summary>
      <returns>An object containing the default value of the configuration attribute.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Description">
      <summary>Gets the description of the object that corresponds to a configuration attribute.</summary>
      <returns>The description of the configuration attribute.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsKey">
      <summary>Gets a value specifying whether the configuration attribute is a key.</summary>
      <returns>true if the configuration attribute is a key; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsLocked">
      <summary>Gets a value specifying whether the configuration attribute is locked.</summary>
      <returns>true if the <see cref="T:System.Configuration.PropertyInformation" /> object is locked; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsModified">
      <summary>Gets a value specifying whether the configuration attribute has been modified.</summary>
      <returns>true if the <see cref="T:System.Configuration.PropertyInformation" /> object has been modified; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.IsRequired">
      <summary>Gets a value specifying whether the configuration attribute is required.</summary>
      <returns>true if the <see cref="T:System.Configuration.PropertyInformation" /> object is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.LineNumber">
      <summary>Gets the line number in the configuration file related to the configuration attribute.</summary>
      <returns>A line number of the configuration file.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Name">
      <summary>Gets the name of the object that corresponds to a configuration attribute.</summary>
      <returns>The name of the <see cref="T:System.Configuration.PropertyInformation" /> object.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Source">
      <summary>Gets the source file that corresponds to a configuration attribute.</summary>
      <returns>The source file of the <see cref="T:System.Configuration.PropertyInformation" /> object.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Type">
      <summary>Gets the <see cref="T:System.Type" /> of the object that corresponds to a configuration attribute.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:System.Configuration.PropertyInformation" /> object.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Validator">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationValidatorBase" /> object related to the configuration attribute.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationValidatorBase" /> object.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.Value">
      <summary>Gets or sets an object containing the value related to a configuration attribute.</summary>
      <returns>An object containing the value for the <see cref="T:System.Configuration.PropertyInformation" /> object.</returns>
    </member>
    <member name="P:System.Configuration.PropertyInformation.ValueOrigin">
      <summary>Gets a <see cref="T:System.Configuration.PropertyValueOrigin" /> object related to the configuration attribute. </summary>
      <returns>A <see cref="T:System.Configuration.PropertyValueOrigin" /> object.</returns>
    </member>
    <member name="T:System.Configuration.PropertyInformationCollection">
      <summary>Contains a collection of <see cref="T:System.Configuration.PropertyInformation" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.CopyTo(System.Configuration.PropertyInformation[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Configuration.PropertyInformationCollection" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">A one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Configuration.PropertyInformationCollection" /> collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Array.Length" /> property of <paramref name="array" /> is less than <see cref="P:System.Collections.Specialized.NameObjectCollectionBase.Count" /> + <paramref name="index" />.</exception>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.GetEnumerator">
      <summary>Gets an <see cref="T:System.Collections.IEnumerator" /> object, which is used to iterate through this <see cref="T:System.Configuration.PropertyInformationCollection" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object, which is used to iterate through this <see cref="T:System.Configuration.PropertyInformationCollection" />.</returns>
    </member>
    <member name="M:System.Configuration.PropertyInformationCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the <see cref="T:System.Configuration.PropertyInformationCollection" /> instance.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Configuration.PropertyInformationCollection" /> instance.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Configuration.PropertyInformationCollection" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="P:System.Configuration.PropertyInformationCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Configuration.PropertyInformation" /> object in the collection, based on the specified property name.</summary>
      <returns>A <see cref="T:System.Configuration.PropertyInformation" /> object.</returns>
      <param name="propertyName">The name of the configuration attribute contained in the <see cref="T:System.Configuration.PropertyInformationCollection" />object.</param>
    </member>
    <member name="T:System.Configuration.PropertyValueOrigin">
      <summary>Specifies the level in the configuration hierarchy where a configuration property value originated.</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.Default">
      <summary>The configuration property value originates from the <see cref="P:System.Configuration.ConfigurationProperty.DefaultValue" /> property.</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.Inherited">
      <summary>The configuration property value is inherited from a parent level in the configuration.</summary>
    </member>
    <member name="F:System.Configuration.PropertyValueOrigin.SetHere">
      <summary>The configuration property value is defined at the current level of the hierarchy.</summary>
    </member>
    <member name="T:System.Configuration.ProtectedConfiguration">
      <summary>Provides access to the protected-configuration providers for the current application's configuration file. </summary>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.DataProtectionProviderName">
      <summary>The name of the data protection provider.</summary>
    </member>
    <member name="P:System.Configuration.ProtectedConfiguration.DefaultProvider">
      <summary>Gets the name of the default protected-configuration provider.</summary>
      <returns>The name of the default protected-configuration provider.</returns>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.ProtectedDataSectionName">
      <summary>The name of the protected data section.</summary>
    </member>
    <member name="P:System.Configuration.ProtectedConfiguration.Providers">
      <summary>Gets a collection of the installed protected-configuration providers.</summary>
      <returns>A <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection" /> collection of installed <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> objects.</returns>
    </member>
    <member name="F:System.Configuration.ProtectedConfiguration.RsaProviderName">
      <summary>The name of the RSA provider.</summary>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationProvider">
      <summary>Is the base class to create providers for encrypting and decrypting protected-configuration data.</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> class using default settings.</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>Decrypts the passed <see cref="T:System.Xml.XmlNode" /> object from a configuration file.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> object containing decrypted data.</returns>
      <param name="encryptedNode">The <see cref="T:System.Xml.XmlNode" /> object to decrypt.</param>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>Encrypts the passed <see cref="T:System.Xml.XmlNode" /> object from a configuration file.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> object containing encrypted data.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> object to encrypt.</param>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationProviderCollection">
      <summary>Provides a collection of <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> objects.</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection" /> class using default settings.</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>Adds a <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object to the collection.</summary>
      <param name="provider">A <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> is not a <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object.</exception>
      <exception cref="T:System.Configuration.ConfigurationException">The <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object to add already exists in the collection.- or -The collection is read-only.</exception>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationProviderCollection.Item(System.String)">
      <summary>Gets a <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object in the collection with the specified name.</summary>
      <returns>The <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object with the specified name, or null if there is no object with that name.</returns>
      <param name="name">The name of a <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object in the collection.</param>
    </member>
    <member name="T:System.Configuration.ProtectedConfigurationSection">
      <summary>Provides programmatic access to the configProtectedData configuration section. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.ProtectedConfigurationSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ProtectedConfigurationSection" /> class using default settings.</summary>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationSection.DefaultProvider">
      <summary>Gets or sets the name of the default <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object in the <see cref="P:System.Configuration.ProtectedConfigurationSection.Providers" /> collection property.</summary>
      <returns>The name of the default <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object in the <see cref="P:System.Configuration.ProtectedConfigurationSection.Providers" /> collection property. </returns>
    </member>
    <member name="P:System.Configuration.ProtectedConfigurationSection.Providers">
      <summary>Gets a <see cref="T:System.Configuration.ProviderSettingsCollection" /> collection of all the <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> objects in all participating configuration files.</summary>
      <returns>A <see cref="T:System.Configuration.ProviderSettingsCollection" /> collection of all the <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> objects in all participating configuration files. </returns>
    </member>
    <member name="T:System.Configuration.ProtectedProviderSettings">
      <summary>Represents a group of configuration elements that configure the providers for the &lt;configProtectedData&gt; configuration section.</summary>
    </member>
    <member name="M:System.Configuration.ProtectedProviderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ProtectedProviderSettings" /> class. </summary>
    </member>
    <member name="P:System.Configuration.ProtectedProviderSettings.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> collection that represents the properties of the providers for the protected configuration data.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that represents the properties of the providers for the protected configuration data.</returns>
    </member>
    <member name="P:System.Configuration.ProtectedProviderSettings.Providers">
      <summary>Gets a collection of <see cref="T:System.Configuration.ProviderSettings" /> objects that represent the properties of the providers for the protected configuration data.</summary>
      <returns>A collection of <see cref="T:System.Configuration.ProviderSettings" /> objects that represent the properties of the providers for the protected configuration data.</returns>
    </member>
    <member name="T:System.Configuration.ProviderSettings">
      <summary>Represents the configuration elements associated with a provider.</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ProviderSettings" /> class. </summary>
    </member>
    <member name="M:System.Configuration.ProviderSettings.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ProviderSettings" /> class. </summary>
      <param name="name">The name of the provider to configure settings for.</param>
      <param name="type">The type of the provider to configure settings for.</param>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Name">
      <summary>Gets or sets the name of the provider configured by this class.</summary>
      <returns>The name of the provider.</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Parameters">
      <summary>Gets a collection of user-defined parameters for the provider.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of parameters for the provider.</returns>
    </member>
    <member name="P:System.Configuration.ProviderSettings.Type">
      <summary>Gets or sets the type of the provider configured by this class.</summary>
      <returns>The fully qualified namespace and class name for the type of provider configured by this <see cref="T:System.Configuration.ProviderSettings" /> instance.</returns>
    </member>
    <member name="T:System.Configuration.ProviderSettingsCollection">
      <summary>Represents a collection of <see cref="T:System.Configuration.ProviderSettings" /> objects.</summary>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.ProviderSettingsCollection" /> class. </summary>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Add(System.Configuration.ProviderSettings)">
      <summary>Adds a <see cref="T:System.Configuration.ProviderSettings" /> object to the collection.</summary>
      <param name="provider">The <see cref="T:System.Configuration.ProviderSettings" /> object to add.</param>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Clear">
      <summary>Clears the collection.</summary>
    </member>
    <member name="P:System.Configuration.ProviderSettingsCollection.Item(System.Int32)">
      <summary>Gets or sets a value at the specified index in the <see cref="T:System.Configuration.ProviderSettingsCollection" /> collection.</summary>
      <returns>The specified <see cref="T:System.Configuration.ProviderSettings" />.</returns>
      <param name="index">The index of the <see cref="T:System.Configuration.ProviderSettings" /> to return.</param>
    </member>
    <member name="P:System.Configuration.ProviderSettingsCollection.Item(System.String)">
      <summary>Gets an item from the collection. </summary>
      <returns>A <see cref="T:System.Configuration.ProviderSettings" /> object contained in the collection.</returns>
      <param name="key">A string reference to the <see cref="T:System.Configuration.ProviderSettings" /> object within the collection.</param>
    </member>
    <member name="M:System.Configuration.ProviderSettingsCollection.Remove(System.String)">
      <summary>Removes an element from the collection.</summary>
      <param name="name">The name of the <see cref="T:System.Configuration.ProviderSettings" /> object to remove.</param>
    </member>
    <member name="T:System.Configuration.RegexStringValidator">
      <summary>Provides validation of a string based on the rules provided by a regular expression.</summary>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.RegexStringValidator" /> class. </summary>
      <param name="regex">A string that specifies a regular expression.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="regex" /> is null or an empty string ("").</exception>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.CanValidate(System.Type)">
      <summary>Determines whether the type of the object can be validated.</summary>
      <returns>true if the <paramref name="type" /> parameter matches a string; otherwise, false. </returns>
      <param name="type">The type of object.</param>
    </member>
    <member name="M:System.Configuration.RegexStringValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid.</summary>
      <param name="value">The value of an object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> does not conform to the parameters of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.</exception>
    </member>
    <member name="T:System.Configuration.RegexStringValidatorAttribute">
      <summary>Declaratively instructs the .NET Framework to perform string validation on a configuration property using a regular expression. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.RegexStringValidatorAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.RegexStringValidatorAttribute" /> object.</summary>
      <param name="regex">The string to use for regular expression validation.</param>
    </member>
    <member name="P:System.Configuration.RegexStringValidatorAttribute.Regex">
      <summary>Gets the string used to perform regular-expression validation.</summary>
      <returns>The string containing the regular expression used to filter the string assigned to the decorated configuration-element property.</returns>
    </member>
    <member name="P:System.Configuration.RegexStringValidatorAttribute.ValidatorInstance">
      <summary>Gets an instance of the <see cref="T:System.Configuration.RegexStringValidator" /> class.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" /> validator instance.</returns>
    </member>
    <member name="T:System.Configuration.RsaProtectedConfigurationProvider">
      <summary>Provides a <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> instance that uses RSA encryption to encrypt and decrypt configuration data.</summary>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> class. </summary>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.AddKey(System.Int32,System.Boolean)">
      <summary>Adds a key to the RSA key container.</summary>
      <param name="keySize">The size of the key to add.</param>
      <param name="exportable">true to indicate that the key is exportable; otherwise, false.</param>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.CspProviderName">
      <summary>Gets the name of the Windows cryptography API (crypto API) cryptographic service provider (CSP).</summary>
      <returns>The name of the CryptoAPI cryptographic service provider.</returns>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Decrypt(System.Xml.XmlNode)">
      <summary>Decrypts the XML node passed to it.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> object containing decrypted data.</returns>
      <param name="encryptedNode">The <see cref="T:System.Xml.XmlNode" /> to decrypt.</param>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.DeleteKey">
      <summary>Removes a key from the RSA key container.</summary>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Encrypt(System.Xml.XmlNode)">
      <summary>Encrypts the XML node passed to it.</summary>
      <returns>An encrypted <see cref="T:System.Xml.XmlNode" /> object.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> to encrypt.</param>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.ExportKey(System.String,System.Boolean)">
      <summary>Exports an RSA key from the key container.</summary>
      <param name="xmlFileName">The file name and path to export the key to.</param>
      <param name="includePrivateParameters">true to indicate that private parameters are exported; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">An error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.ImportKey(System.String,System.Boolean)">
      <summary>Imports an RSA key into the key container.</summary>
      <param name="xmlFileName">The file name and path to import the key from.</param>
      <param name="exportable">true to indicate that the key is exportable; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
      <exception cref="T:System.IO.IOException">An error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> specified a file that is write-only.-or- This operation is not supported on the current platform.-or- <paramref name="path" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> is in an invalid format. </exception>
    </member>
    <member name="M:System.Configuration.RsaProtectedConfigurationProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes the provider with default settings.</summary>
      <param name="name">The provider name to use for the object.</param>
      <param name="configurationValues">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> collection of values to use when initializing the object.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="configurationValues" /> includes one or more unrecognized values.</exception>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.KeyContainerName">
      <summary>Gets the name of the key container.</summary>
      <returns>The name of the key container.</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.RsaPublicKey">
      <summary>Gets the public key used by the provider.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.RSAParameters" /> object that contains the public key used by the provider.</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.UseMachineContainer">
      <summary>Gets a value that indicates whether the <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> object is using the machine key container.</summary>
      <returns>true if the <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> object is using the machine key container; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.RsaProtectedConfigurationProvider.UseOAEP">
      <summary>Gets a value that indicates whether the provider is using Optimal Asymmetric Encryption Padding (OAEP) key exchange data.</summary>
      <returns>true if the <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" /> object is using Optimal Asymmetric Encryption Padding (OAEP) key exchange data; otherwise, false.</returns>
    </member>
    <member name="T:System.Configuration.SectionInformation">
      <summary>Contains metadata about an individual section within the configuration hierarchy. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowDefinition">
      <summary>Gets or sets a value that indicates where in the configuration file hierarchy the associated configuration section can be defined. </summary>
      <returns>A value that indicates where in the configuration file hierarchy the associated <see cref="T:System.Configuration.ConfigurationSection" /> object can be declared.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowExeDefinition">
      <summary>Gets or sets a value that indicates where in the configuration file hierarchy the associated configuration section can be declared.</summary>
      <returns>A value that indicates where in the configuration file hierarchy the associated <see cref="T:System.Configuration.ConfigurationSection" /> object can be declared for .exe files.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowLocation">
      <summary>Gets or sets a value that indicates whether the configuration section allows the location attribute.</summary>
      <returns>true if the location attribute is allowed; otherwise, false. The default is true.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.AllowOverride">
      <summary>Gets or sets a value that indicates whether the associated configuration section can be overridden by lower-level configuration files.</summary>
      <returns>true if the section can be overridden; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.ConfigSource">
      <summary>Gets or sets the name of the include file in which the associated configuration section is defined, if such a file exists.</summary>
      <returns>The name of the include file in which the associated <see cref="T:System.Configuration.ConfigurationSection" /> is defined, if such a file exists; otherwise, an empty string ("").</returns>
    </member>
    <member name="M:System.Configuration.SectionInformation.ForceDeclaration">
      <summary>Forces the associated configuration section to appear in the configuration file.</summary>
    </member>
    <member name="M:System.Configuration.SectionInformation.ForceDeclaration(System.Boolean)">
      <summary>Forces the associated configuration section to appear in the configuration file, or removes an existing section from the configuration file.</summary>
      <param name="force">true if the associated section should be written in the configuration file; otherwise, false.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="force" /> is true and the associated section cannot be exported to the child configuration file, or it is undeclared.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.ForceSave">
      <summary>Gets or sets a value that indicates whether the associated configuration section will be saved even if it has not been modified.</summary>
      <returns>true if the associated <see cref="T:System.Configuration.ConfigurationSection" /> object will be saved even if it has not been modified; otherwise, false. The default is false.NoteIf the configuration file is saved (even if there are no modifications), ASP.NET restarts the application.</returns>
    </member>
    <member name="M:System.Configuration.SectionInformation.GetParentSection">
      <summary>Gets the configuration section that contains the configuration section associated with this object.</summary>
      <returns>The configuration section that contains the <see cref="T:System.Configuration.ConfigurationSection" /> that is associated with this <see cref="T:System.Configuration.SectionInformation" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The method is invoked from a parent section.</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.GetRawXml">
      <summary>Returns an XML node object that represents the associated configuration-section object.</summary>
      <returns>The XML representation for this configuration section.</returns>
      <exception cref="T:System.InvalidOperationException">This configuration object is locked and cannot be edited.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.InheritInChildApplications">
      <summary>Gets or sets a value that indicates whether the settings that are specified in the associated configuration section are inherited by applications that reside in a subdirectory of the relevant application.</summary>
      <returns>true if the settings specified in this <see cref="T:System.Configuration.ConfigurationSection" /> object are inherited by child applications; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsDeclarationRequired">
      <summary>Gets a value that indicates whether the configuration section must be declared in the configuration file.</summary>
      <returns>true if the associated <see cref="T:System.Configuration.ConfigurationSection" /> object must be declared in the configuration file; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsDeclared">
      <summary>Gets a value that indicates whether the associated configuration section is declared in the configuration file.</summary>
      <returns>true if this <see cref="T:System.Configuration.ConfigurationSection" /> is declared in the configuration file; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsLocked">
      <summary>Gets a value that indicates whether the associated configuration section is locked.</summary>
      <returns>true if the section is locked; otherwise, false. </returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.IsProtected">
      <summary>Gets a value that indicates whether the associated configuration section is protected.</summary>
      <returns>true if this <see cref="T:System.Configuration.ConfigurationSection" /> is protected; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.Name">
      <summary>Gets the name of the associated configuration section.</summary>
      <returns>The complete name of the configuration section.</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideMode">
      <summary>Gets or sets the <see cref="T:System.Configuration.OverrideMode" /> enumeration value that specifies whether the associated configuration section can be overridden by child configuration files.</summary>
      <returns>One of the <see cref="T:System.Configuration.OverrideMode" /> enumeration values.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">An attempt was made to change both the <see cref="P:System.Configuration.SectionInformation.AllowOverride" /> and <see cref="P:System.Configuration.SectionInformation.OverrideMode" /> properties, which is not supported for compatibility reasons. </exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideModeDefault">
      <summary>Gets or sets a value that specifies the default override behavior of a configuration section by child configuration files.</summary>
      <returns>One of the <see cref="T:System.Configuration.OverrideMode" /> enumeration values.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The override behavior is specified in a parent configuration section.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.OverrideModeEffective">
      <summary>Gets the override behavior of a configuration section that is in turn based on whether child configuration files can lock the configuration section. </summary>
      <returns>One of the <see cref="T:System.Configuration.OverrideMode" /> enumeration values.</returns>
    </member>
    <member name="P:System.Configuration.SectionInformation.ProtectionProvider">
      <summary>Gets the protected configuration provider for the associated configuration section.</summary>
      <returns>The protected configuration provider for this <see cref="T:System.Configuration.ConfigurationSection" /> object.</returns>
    </member>
    <member name="M:System.Configuration.SectionInformation.ProtectSection(System.String)">
      <summary>Marks a configuration section for protection. </summary>
      <param name="protectionProvider">The name of the protection provider to use.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Configuration.SectionInformation.AllowLocation" /> property is set to false.- or -The target section is already a protected data section.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.RequirePermission">
      <summary>Gets a value that indicates whether the associated configuration section requires access permissions.</summary>
      <returns>true if the requirePermission attribute is set to true; otherwise, false. The default is true.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.RestartOnExternalChanges">
      <summary>Gets or sets a value that specifies whether a change in an external configuration include file requires an application restart.</summary>
      <returns>true if a change in an external configuration include file requires an application restart; otherwise, false. The default is true.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.RevertToParent">
      <summary>Causes the associated configuration section to inherit all its values from the parent section.</summary>
      <exception cref="T:System.InvalidOperationException">This method cannot be called outside editing mode.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.SectionName">
      <summary>Gets the name of the associated configuration section.</summary>
      <returns>The name of the associated <see cref="T:System.Configuration.ConfigurationSection" /> object.</returns>
    </member>
    <member name="M:System.Configuration.SectionInformation.SetRawXml(System.String)">
      <summary>Sets the object to an XML representation of the associated configuration section within the configuration file.</summary>
      <param name="rawXml">The XML to use.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawXml" /> is null.</exception>
    </member>
    <member name="P:System.Configuration.SectionInformation.Type">
      <summary>Gets or sets the section class name.</summary>
      <returns>The name of the class that is associated with this <see cref="T:System.Configuration.ConfigurationSection" /> section.</returns>
      <exception cref="T:System.ArgumentException">The selected value is null or an empty string ("").</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    </member>
    <member name="M:System.Configuration.SectionInformation.UnprotectSection">
      <summary>Removes the protected configuration encryption from the associated configuration section.</summary>
    </member>
    <member name="T:System.Configuration.StringValidator">
      <summary>Provides validation of a string.</summary>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.StringValidator" /> class, based on a supplied parameter.</summary>
      <param name="minLength">An integer that specifies the minimum length of the string value.</param>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.StringValidator" /> class, based on supplied parameters.</summary>
      <param name="minLength">An integer that specifies the minimum length of the string value.</param>
      <param name="maxLength">An integer that specifies the maximum length of the string value.</param>
    </member>
    <member name="M:System.Configuration.StringValidator.#ctor(System.Int32,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.StringValidator" /> class, based on supplied parameters.</summary>
      <param name="minLength">An integer that specifies the minimum length of the string value.</param>
      <param name="maxLength">An integer that specifies the maximum length of the string value.</param>
      <param name="invalidCharacters">A string that represents invalid characters. </param>
    </member>
    <member name="M:System.Configuration.StringValidator.CanValidate(System.Type)">
      <summary>Determines whether an object can be validated based on type.</summary>
      <returns>true if the <paramref name="type" /> parameter matches a string; otherwise, false. </returns>
      <param name="type">The object type.</param>
    </member>
    <member name="M:System.Configuration.StringValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid. </summary>
      <param name="value">The object value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is less than <paramref name="minValue" /> or greater than <paramref name="maxValue" /> as defined in the constructor.- or -<paramref name="value" /> contains invalid characters.</exception>
    </member>
    <member name="T:System.Configuration.StringValidatorAttribute">
      <summary>Declaratively instructs the .NET Framework to perform string validation on a configuration property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.StringValidatorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.StringValidatorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.InvalidCharacters">
      <summary>Gets or sets the invalid characters for the property.</summary>
      <returns>The string that contains the set of characters that are not allowed for the property.</returns>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.MaxLength">
      <summary>Gets or sets the maximum length allowed for the string to assign to the property.</summary>
      <returns>An integer that indicates the maximum allowed length for the string to assign to the property.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see cref="P:System.Configuration.StringValidatorAttribute.MinLength" />.</exception>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.MinLength">
      <summary>Gets or sets the minimum allowed value for the string to assign to the property.</summary>
      <returns>An integer that indicates the allowed minimum length for the string to assign to the property.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value is greater than <see cref="P:System.Configuration.StringValidatorAttribute.MaxLength" />.</exception>
    </member>
    <member name="P:System.Configuration.StringValidatorAttribute.ValidatorInstance">
      <summary>Gets an instance of the <see cref="T:System.Configuration.StringValidator" /> class.</summary>
      <returns>A current <see cref="T:System.Configuration.StringValidator" /> settings in a <see cref="T:System.Configuration.ConfigurationValidatorBase" /> validator instance.</returns>
    </member>
    <member name="T:System.Configuration.SubclassTypeValidator">
      <summary>Validates that an object is a derived class of a specified type.</summary>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SubclassTypeValidator" /> class. </summary>
      <param name="baseClass">The base class to validate against.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseClass" /> is null.</exception>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.CanValidate(System.Type)">
      <summary>Determines whether an object can be validated based on type.</summary>
      <returns>true if the <paramref name="type" /> parameter matches a type that can be validated; otherwise, false. </returns>
      <param name="type">The object type.</param>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid. </summary>
      <param name="value">The object value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not of a <see cref="T:System.Type" /> that can be derived from <paramref name="baseClass" /> as defined in the constructor.</exception>
    </member>
    <member name="T:System.Configuration.SubclassTypeValidatorAttribute">
      <summary>Declaratively instructs the .NET Framework to perform validation on a configuration property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.SubclassTypeValidatorAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.SubclassTypeValidatorAttribute" /> class. </summary>
      <param name="baseClass">The base class type.</param>
    </member>
    <member name="P:System.Configuration.SubclassTypeValidatorAttribute.BaseClass">
      <summary>Gets the base type of the object being validated.</summary>
      <returns>The base type of the object being validated.</returns>
    </member>
    <member name="P:System.Configuration.SubclassTypeValidatorAttribute.ValidatorInstance">
      <summary>Gets the validator attribute instance.</summary>
      <returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase" /> instance.</returns>
    </member>
    <member name="T:System.Configuration.TimeSpanMinutesConverter">
      <summary>Converts a time span expressed in minutes. </summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanMinutesConverter" /> class.</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> representing the <paramref name="data" /> parameter in minutes.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />. </summary>
      <returns>The <see cref="T:System.String" /> representing the <paramref name="value" /> parameter in minutes.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="value">The value to convert to.</param>
      <param name="type">The type to convert to.</param>
    </member>
    <member name="T:System.Configuration.TimeSpanMinutesOrInfiniteConverter">
      <summary>Converts a <see cref="T:System.TimeSpan" /> expressed in minutes or as a standard infinite time span.</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanMinutesOrInfiniteConverter" /> class.</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>The <see cref="F:System.TimeSpan.MaxValue" />, if the <paramref name="data" /> parameter is the <see cref="T:System.String" /> "infinite"; otherwise, the <see cref="T:System.TimeSpan" /> representing the <paramref name="data" /> parameter in minutes.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
    </member>
    <member name="M:System.Configuration.TimeSpanMinutesOrInfiniteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />.</summary>
      <returns>The <see cref="T:System.String" /> "infinite", if the <paramref name="value" /> parameter is <see cref="F:System.TimeSpan.MaxValue" />; otherwise, the <see cref="T:System.String" /> representing the <paramref name="value" /> parameter in minutes.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="value">The value to convert.</param>
      <param name="type">The conversion type.</param>
    </member>
    <member name="T:System.Configuration.TimeSpanSecondsConverter">
      <summary>Converts a time span expressed in seconds. </summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanSecondsConverter" /> class.</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> representing the <paramref name="data" /> parameter in seconds.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> cannot be parsed as an integer value.</exception>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />.</summary>
      <returns>The <see cref="T:System.String" /> that represents the <paramref name="value" /> parameter in minutes.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="value">The value to convert to.</param>
      <param name="type">The type to convert to.</param>
    </member>
    <member name="T:System.Configuration.TimeSpanSecondsOrInfiniteConverter">
      <summary>Converts a <see cref="T:System.TimeSpan" /> expressed in seconds or as a standard infinite time span.</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanSecondsOrInfiniteConverter" /> class.</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>The <see cref="F:System.TimeSpan.MaxValue" />, if the <paramref name="data" /> parameter is the <see cref="T:System.String" /> "infinite"; otherwise, the <see cref="T:System.TimeSpan" /> representing the <paramref name="data" /> parameter in seconds.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
    </member>
    <member name="M:System.Configuration.TimeSpanSecondsOrInfiniteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.TimeSpan" /> to a. <see cref="T:System.String" />.</summary>
      <returns>The <see cref="T:System.String" /> "infinite", if the <paramref name="value" /> parameter is <see cref="F:System.TimeSpan.MaxValue" />; otherwise, the <see cref="T:System.String" /> representing the <paramref name="value" /> parameter in seconds.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="value">The value to convert.</param>
      <param name="type">The conversion type.</param>
    </member>
    <member name="T:System.Configuration.TimeSpanValidator">
      <summary>Provides validation of a <see cref="T:System.TimeSpan" /> object.</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanValidator" /> class, based on supplied parameters.</summary>
      <param name="minValue">A <see cref="T:System.TimeSpan" /> object that specifies the minimum time allowed to pass validation.</param>
      <param name="maxValue">A <see cref="T:System.TimeSpan" /> object that specifies the maximum time allowed to pass validation.</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanValidator" /> class, based on supplied parameters.</summary>
      <param name="minValue">A <see cref="T:System.TimeSpan" /> object that specifies the minimum time allowed to pass validation.</param>
      <param name="maxValue">A <see cref="T:System.TimeSpan" /> object that specifies the maximum time allowed to pass validation.</param>
      <param name="rangeIsExclusive">A <see cref="T:System.Boolean" /> value that specifies whether the validation range is exclusive.</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanValidator" /> class, based on supplied parameters.</summary>
      <param name="minValue">A <see cref="T:System.TimeSpan" /> object that specifies the minimum time allowed to pass validation.</param>
      <param name="maxValue">A <see cref="T:System.TimeSpan" /> object that specifies the maximum time allowed to pass validation.</param>
      <param name="rangeIsExclusive">A <see cref="T:System.Boolean" /> value that specifies whether the validation range is exclusive.</param>
      <param name="resolutionInSeconds">An <see cref="T:System.Int64" /> value that specifies a number of seconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="resolutionInSeconds" /> is less than 0.- or -<paramref name="minValue" /> is greater than <paramref name="maxValue" />.</exception>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.CanValidate(System.Type)">
      <summary>Determines whether the type of the object can be validated.</summary>
      <returns>true if the <paramref name="type" /> parameter matches a <see cref="T:System.TimeSpan" /> value; otherwise, false. </returns>
      <param name="type">The type of the object.</param>
    </member>
    <member name="M:System.Configuration.TimeSpanValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid.</summary>
      <param name="value">The value of an object.</param>
    </member>
    <member name="T:System.Configuration.TimeSpanValidatorAttribute">
      <summary>Declaratively instructs the .NET Framework to perform time validation on a configuration property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.TimeSpanValidatorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanValidatorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.ExcludeRange">
      <summary>Gets or sets a value that indicates whether to include or exclude the integers in the range as defined by <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MinValueString" /> and <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MaxValueString" />.</summary>
      <returns>true if the value must be excluded; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MaxValue">
      <summary>Gets the absolute maximum <see cref="T:System.TimeSpan" /> value.</summary>
      <returns>The allowed maximum <see cref="T:System.TimeSpan" /> value. </returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MaxValueString">
      <summary>Gets or sets the relative maximum <see cref="T:System.TimeSpan" /> value.</summary>
      <returns>The allowed maximum <see cref="T:System.TimeSpan" /> value. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value represents less than <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MinValue" />.</exception>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MinValue">
      <summary>Gets the absolute minimum <see cref="T:System.TimeSpan" /> value.</summary>
      <returns>The allowed minimum <see cref="T:System.TimeSpan" /> value. </returns>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.MinValueString">
      <summary>Gets or sets the relative minimum <see cref="T:System.TimeSpan" /> value.</summary>
      <returns>The minimum allowed <see cref="T:System.TimeSpan" /> value. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value represents more than <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MaxValue" />.</exception>
    </member>
    <member name="F:System.Configuration.TimeSpanValidatorAttribute.TimeSpanMaxValue">
      <summary>Gets the absolute maximum value allowed.</summary>
    </member>
    <member name="F:System.Configuration.TimeSpanValidatorAttribute.TimeSpanMinValue">
      <summary>Gets the absolute minimum value allowed.</summary>
    </member>
    <member name="P:System.Configuration.TimeSpanValidatorAttribute.ValidatorInstance">
      <summary>Gets an instance of the <see cref="T:System.Configuration.TimeSpanValidator" /> class.</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" /> validator instance. </returns>
    </member>
    <member name="T:System.Configuration.TypeNameConverter">
      <summary>Converts between type and string values. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.TypeNameConverter" /> class.</summary>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> object to a <see cref="T:System.Type" /> object.</summary>
      <returns>The <see cref="T:System.Type" /> that represents the <paramref name="data" /> parameter.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Type" /> value cannot be resolved.</exception>
    </member>
    <member name="M:System.Configuration.TypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Type" /> object to a <see cref="T:System.String" /> object.</summary>
      <returns>The <see cref="T:System.String" /> that represents the <paramref name="value" /> parameter. </returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="value">The value to convert to.</param>
      <param name="type">The type to convert to.</param>
    </member>
    <member name="T:System.Configuration.ValidatorCallback">
      <summary>Represents a method to be called after the validation of an object.</summary>
      <param name="value">The callback method.</param>
    </member>
    <member name="T:System.Configuration.WhiteSpaceTrimStringConverter">
      <summary>Converts a string to its canonical format. </summary>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.WhiteSpaceTrimStringConverter" /> class.</summary>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to canonical form.</summary>
      <returns>An object representing the converted value.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="data">The <see cref="T:System.String" /> object to convert.</param>
    </member>
    <member name="M:System.Configuration.WhiteSpaceTrimStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.String" /> to canonical form.</summary>
      <returns>An object representing the converted value.</returns>
      <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object used for type conversions.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> object used during conversion.</param>
      <param name="value">The value to convert to.</param>
      <param name="type">The type to convert to.</param>
    </member>
    <member name="T:System.Configuration.Internal.DelegatingConfigHost">
      <summary>Delegates all members of the <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> interface to another instance of a host.</summary>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Internal.DelegatingConfigHost" /> class.</summary>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.CreateConfigurationContext(System.String,System.String)">
      <summary>Creates a new configuration context.</summary>
      <returns>A <see cref="T:System.Object" /> representing a new configuration context.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
      <param name="locationSubPath">A string representing a location subpath.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.CreateDeprecatedConfigContext(System.String)">
      <summary>Creates a deprecated configuration context.</summary>
      <returns>A <see cref="T:System.Object" /> representing a deprecated configuration context.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.DecryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>Decrypts an encrypted configuration section.</summary>
      <returns>A string representing a decrypted configuration section.</returns>
      <param name="encryptedXml">An encrypted section of a configuration file.</param>
      <param name="protectionProvider">A <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object.</param>
      <param name="protectedConfigSection">A <see cref="T:System.Configuration.ProtectedConfigurationSection" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.DeleteStream(System.String)">
      <summary>Deletes the <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</summary>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.EncryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>Encrypts a section of a configuration object.</summary>
      <returns>A string representing an encrypted section of the configuration object.</returns>
      <param name="clearTextXml">A section of the configuration that is not encrypted.</param>
      <param name="protectionProvider">A <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object.</param>
      <param name="protectedConfigSection">A <see cref="T:System.Configuration.ProtectedConfigurationSection" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigPathFromLocationSubPath(System.String,System.String)">
      <summary>Returns a configuration path based on a location subpath.</summary>
      <returns>A string representing a configuration path.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
      <param name="locationSubPath">A string representing a location subpath.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigType(System.String,System.Boolean)">
      <summary>Returns a <see cref="T:System.Type" /> representing the type of the configuration.</summary>
      <returns>A <see cref="T:System.Type" /> representing the type of the configuration.</returns>
      <param name="typeName">A string representing the configuration type.</param>
      <param name="throwOnError">true if an exception should be thrown if an error is encountered; false if an exception should not be thrown if an error is encountered.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetConfigTypeName(System.Type)">
      <summary>Returns a string representing the type name of the configuration object.</summary>
      <returns>A string representing the type name of the configuration object.</returns>
      <param name="t">A <see cref="T:System.Type" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetRestrictedPermissions(System.Configuration.Internal.IInternalConfigRecord,System.Security.PermissionSet@,System.Boolean@)">
      <summary>Sets the specified permission set if available within the host object.</summary>
      <param name="configRecord">An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object.</param>
      <param name="permissionSet">A <see cref="T:System.Security.PermissionSet" /> object.</param>
      <param name="isHostReady">true if the host has finished initialization; otherwise, false.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamName(System.String)">
      <summary>Returns the name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</summary>
      <returns>A string representing the name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamNameForConfigSource(System.String,System.String)">
      <summary>Returns the name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration source.</summary>
      <returns>A string representing the name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration source.</returns>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
      <param name="configSource">A string representing the configuration source.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.GetStreamVersion(System.String)">
      <summary>Returns a <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" /> object representing the version of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</summary>
      <returns>A <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" /> object representing the version of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</returns>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.Host">
      <summary>Gets or sets the <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> object.</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.Impersonate">
      <summary>Instructs the host to impersonate and returns an <see cref="T:System.IDisposable" /> object required internally by the .NET Framework.</summary>
      <returns>An <see cref="T:System.IDisposable" /> value.</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.Init(System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>Initializes the configuration host.</summary>
      <param name="configRoot">An <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> object.</param>
      <param name="hostInitParams">A parameter object containing the values used for initializing the configuration host.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.InitForConfiguration(System.String@,System.String@,System.String@,System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>Initializes the host for configuration.</summary>
      <param name="locationSubPath">A string representing a location subpath (passed by reference).</param>
      <param name="configPath">A string representing the path to a configuration file.</param>
      <param name="locationConfigPath">The location configuration path.</param>
      <param name="configRoot">The configuration root element.</param>
      <param name="hostInitConfigurationParams">A parameter object representing the parameters used to initialize the host.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsAboveApplication(System.String)">
      <summary>Returns a value indicating whether the configuration is above the application configuration in the configuration hierarchy.</summary>
      <returns>true if the configuration is above the application configuration in the configuration hierarchy; otherwise, false.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsConfigRecordRequired(System.String)">
      <summary>Returns a value indicating whether a configuration record is required for the host configuration initialization.</summary>
      <returns>true if a configuration record is required for the host configuration initialization; otherwise, false.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition)">
      <summary>Restricts or allows definitions in the host configuration. </summary>
      <returns>true if the grant or restriction of definitions in the host configuration was successful; otherwise, false.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
      <param name="allowDefinition">The <see cref="T:System.Configuration.ConfigurationAllowDefinition" /> object.</param>
      <param name="allowExeDefinition">The <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsFile(System.String)">
      <summary>Returns a value indicating whether the file path used by a <see cref="T:System.IO.Stream" /> object to read a configuration file is a valid path.</summary>
      <returns>true if the path used by a <see cref="T:System.IO.Stream" /> object to read a configuration file is a valid path; otherwise, false.</returns>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsFullTrustSectionWithoutAptcaAllowed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>Returns a value indicating whether a configuration section requires a fully trusted code access security level and does not allow the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> attribute to disable implicit link demands.</summary>
      <returns>true if the configuration section requires a fully trusted code access security level and does not allow the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> attribute to disable implicit link demands; otherwise, false.</returns>
      <param name="configRecord">The <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsInitDelayed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>Returns a value indicating whether the initialization of a configuration object is considered delayed.</summary>
      <returns>true if the initialization of a configuration object is considered delayed; otherwise, false.</returns>
      <param name="configRecord">The <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsLocationApplicable(System.String)">
      <summary>Returns a value indicating whether the configuration object supports a location tag.</summary>
      <returns>true if the configuration object supports a location tag; otherwise, false.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.IsRemote">
      <summary>Gets a value indicating whether the configuration is remote.</summary>
      <returns>true if the configuration is remote; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsSecondaryRoot(System.String)">
      <summary>Returns a value indicating whether a configuration path is to a configuration node whose contents should be treated as a root.</summary>
      <returns>true if the configuration path is to a configuration node whose contents should be treated as a root; otherwise, false.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.IsTrustedConfigPath(System.String)">
      <summary>Returns a value indicating whether the configuration path is trusted.</summary>
      <returns>true if the configuration path is trusted; otherwise, false.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForRead(System.String)">
      <summary>Opens a <see cref="T:System.IO.Stream" /> object to read a configuration file.</summary>
      <returns>Returns the <see cref="T:System.IO.Stream" /> object specified by <paramref name="streamName" />.</returns>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForRead(System.String,System.Boolean)">
      <summary>Opens a <see cref="T:System.IO.Stream" /> object to read a configuration file.</summary>
      <returns>Returns the <see cref="T:System.IO.Stream" /> object specified by <paramref name="streamName" />.</returns>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
      <param name="assertPermissions">true to assert permissions; otherwise, false.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@)">
      <summary>Opens a <see cref="T:System.IO.Stream" /> object for writing to a configuration file or for writing to a temporary file used to build a configuration file. Allows a <see cref="T:System.IO.Stream" /> object to be designated as a template for copying file attributes.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object.</returns>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
      <param name="templateStreamName">The name of a <see cref="T:System.IO.Stream" /> object from which file attributes are to be copied as a template.</param>
      <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" /> object (passed by reference).</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@,System.Boolean)">
      <summary>Opens a <see cref="T:System.IO.Stream" /> object for writing to a configuration file. Allows a <see cref="T:System.IO.Stream" /> object to be designated as a template for copying file attributes.</summary>
      <returns>Returns the <see cref="T:System.IO.Stream" /> object specified by the <paramref name="streamName" /> parameter.</returns>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
      <param name="templateStreamName">The name of a <see cref="T:System.IO.Stream" /> object from which file attributes are to be copied as a template.</param>
      <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file (passed by reference).</param>
      <param name="assertPermissions">true to assert permissions; otherwise, false.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.PrefetchAll(System.String,System.String)">
      <summary>Returns a value indicating whether the entire configuration file could be read by a designated <see cref="T:System.IO.Stream" /> object.</summary>
      <returns>true if the entire configuration file could be read by the <see cref="T:System.IO.Stream" /> object designated by <paramref name="streamName" />; otherwise, false.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.PrefetchSection(System.String,System.String)">
      <summary>Instructs the <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> object to read a designated section of its associated configuration file.</summary>
      <returns>true if a section of the configuration file designated by the <paramref name="sectionGroupName" /> and <paramref name="sectionName" /> parameters can be read by a <see cref="T:System.IO.Stream" /> object; otherwise, false.</returns>
      <param name="sectionGroupName">A string representing the name of a section group in the configuration file.</param>
      <param name="sectionName">A string representing the name of a section in the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.RequireCompleteInit(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>Indicates that a new configuration record requires a complete initialization.</summary>
      <param name="configRecord">An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.StartMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>Instructs the host to monitor an associated <see cref="T:System.IO.Stream" /> object for changes in a configuration file.</summary>
      <returns>An <see cref="T:System.Object" /> instance containing changed configuration settings.</returns>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
      <param name="callback">A <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> object to receive the returned data representing the changes in the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.StopMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>Instructs the host object to stop monitoring an associated <see cref="T:System.IO.Stream" /> object for changes in a configuration file.</summary>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
      <param name="callback">A <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> object.</param>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsChangeNotifications">
      <summary>Gets a value indicating whether the host configuration supports change notifications.</summary>
      <returns>true if the host supports change notifications; otherwise, false. </returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsLocation">
      <summary>Gets a value indicating whether the host configuration supports location tags.</summary>
      <returns>true if the host supports location tags; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsPath">
      <summary>Gets a value indicating whether the host configuration has path support.</summary>
      <returns>true if the host configuration has path support; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Internal.DelegatingConfigHost.SupportsRefresh">
      <summary>Gets a value indicating whether the host configuration supports refresh.</summary>
      <returns>true if the host configuration supports refresh; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.VerifyDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>Verifies that a configuration definition is allowed for a configuration record.</summary>
      <param name="configPath">A string representing the path to a configuration file.</param>
      <param name="allowDefinition">An <see cref="P:System.Configuration.SectionInformation.AllowDefinition" /> object.</param>
      <param name="allowExeDefinition">A <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> object</param>
      <param name="errorInfo">An <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.WriteCompleted(System.String,System.Boolean,System.Object)">
      <summary>Indicates that all writing to the configuration file has completed.</summary>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
      <param name="success">true if writing to the configuration file completed successfully; otherwise, false.</param>
      <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.DelegatingConfigHost.WriteCompleted(System.String,System.Boolean,System.Object,System.Boolean)">
      <summary>Indicates that all writing to the configuration file has completed and specifies whether permissions should be asserted.</summary>
      <param name="streamName">The name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on a configuration file.</param>
      <param name="success">true to indicate that writing was completed successfully; otherwise, false.</param>
      <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="assertPermissions">true to assert permissions; otherwise, false.</param>
    </member>
    <member name="T:System.Configuration.Internal.IConfigErrorInfo">
      <summary>Defines an interface used by the .NET Framework to support creating error configuration records.</summary>
    </member>
    <member name="P:System.Configuration.Internal.IConfigErrorInfo.Filename">
      <summary>Gets a string specifying the file name related to the configuration details.</summary>
      <returns>A string specifying a filename.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigErrorInfo.LineNumber">
      <summary>Gets an integer specifying the line number related to the configuration details.</summary>
      <returns>An integer specifying a line number.</returns>
    </member>
    <member name="T:System.Configuration.Internal.IConfigSystem">
      <summary>Defines an interface used by the .NET Framework to support the initialization of configuration properties.</summary>
    </member>
    <member name="P:System.Configuration.Internal.IConfigSystem.Host">
      <summary>Gets the configuration host.</summary>
      <returns>An <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> object that is used by the .NET Framework to initialize application configuration properties.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IConfigSystem.Init(System.Type,System.Object[])">
      <summary>Initializes a configuration object.</summary>
      <param name="typeConfigHost">The type of configuration host.</param>
      <param name="hostInitParams">An array of configuration host parameters.</param>
    </member>
    <member name="P:System.Configuration.Internal.IConfigSystem.Root">
      <summary>Gets the root of the configuration hierarchy.</summary>
      <returns>An <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> object.</returns>
    </member>
    <member name="T:System.Configuration.Internal.IConfigurationManagerHelper">
      <summary>Defines an interface used by the .NET Framework to support configuration management.</summary>
    </member>
    <member name="M:System.Configuration.Internal.IConfigurationManagerHelper.EnsureNetConfigLoaded">
      <summary>Ensures that the networking configuration is loaded.</summary>
    </member>
    <member name="T:System.Configuration.Internal.IConfigurationManagerInternal">
      <summary>Defines an interface used by the .NET Framework to initialize configuration properties.</summary>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ApplicationConfigUri">
      <summary>Gets the configuration file name related to the application path.</summary>
      <returns>A string value representing a configuration file name.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigDirectory">
      <summary>Gets the local configuration directory of the application based on the entry assembly.</summary>
      <returns>A string representing the local configuration directory.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigPath">
      <summary>Gets the local configuration path of the application based on the entry assembly.</summary>
      <returns>A string value representing the local configuration path of the application.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeProductName">
      <summary>Gets the product name of the application based on the entry assembly.</summary>
      <returns>A string value representing the product name of the application.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeProductVersion">
      <summary>Gets the product version of the application based on the entry assembly.</summary>
      <returns>A string value representing the product version of the application.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigDirectory">
      <summary>Gets the roaming configuration directory of the application based on the entry assembly.</summary>
      <returns>A string value representing the roaming configuration directory of the application.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigPath">
      <summary>Gets the roaming user's configuration path based on the application's entry assembly.</summary>
      <returns>A string value representing the roaming user's configuration path.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.MachineConfigPath">
      <summary>Gets the configuration path for the Machine.config file.</summary>
      <returns>A string value representing the path of the Machine.config file.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.SetConfigurationSystemInProgress">
      <summary>Gets a value representing the configuration system's status.</summary>
      <returns>true if the configuration system is in the process of being initialized; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.SupportsUserConfig">
      <summary>Gets a value that specifies whether user configuration settings are supported.</summary>
      <returns>true if the configuration system supports user configuration settings; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IConfigurationManagerInternal.UserConfigFilename">
      <summary>Gets the name of the file used to store user configuration settings.</summary>
      <returns>A string specifying the name of the file used to store user configuration.</returns>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigClientHost">
      <summary>Defines interfaces that allow the internal .NET Framework infrastructure to customize configuration.</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetExeConfigPath">
      <summary>Returns the path to the application configuration file. </summary>
      <returns>A string representing the path to the application configuration file.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetLocalUserConfigPath">
      <summary>Returns a string representing the path to the known local user configuration file.</summary>
      <returns>A string representing the path to the known local user configuration file.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.GetRoamingUserConfigPath">
      <summary>Returns a string representing the path to the known roaming user configuration file.</summary>
      <returns>A string representing the path to the known roaming user configuration file.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsExeConfig(System.String)">
      <summary>Returns a value indicating whether a configuration file path is the same as a currently known application configuration file path. </summary>
      <returns>true if a string representing a configuration path is the same as a path to the application configuration file; false if a string representing a configuration path is not the same as a path to the application configuration file. </returns>
      <param name="configPath">A string representing the path to the application configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsLocalUserConfig(System.String)">
      <summary>Returns a value indicating whether a configuration file path is the same as the configuration file path for the currently known local user. </summary>
      <returns>true if a string representing a configuration path is the same as a path to a known local user configuration file; otherwise, false.</returns>
      <param name="configPath">A string representing the path to the application configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigClientHost.IsRoamingUserConfig(System.String)">
      <summary>Returns a value indicating whether a configuration file path is the same as the configuration file path for the currently known roaming user.</summary>
      <returns>true if a string representing a configuration path is the same as a path to a known roaming user configuration file; otherwise, false.</returns>
      <param name="configPath">A string representing the path to an application configuration file.</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigConfigurationFactory">
      <summary>Defines the interfaces used by the internal design time API to create a <see cref="T:System.Configuration.Configuration" /> object.</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigConfigurationFactory.Create(System.Type,System.Object[])">
      <summary>Creates and initializes a <see cref="T:System.Configuration.Configuration" /> object.</summary>
      <returns>A <see cref="T:System.Configuration.Configuration" /> object.</returns>
      <param name="typeConfigHost">The <see cref="T:System.Type" /> of the <see cref="T:System.Configuration.Configuration" /> object to be created.</param>
      <param name="hostInitConfigurationParams">A parameter array of <see cref="T:System.Object" /> that contains the parameters to be applied to the created <see cref="T:System.Configuration.Configuration" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigConfigurationFactory.NormalizeLocationSubPath(System.String,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>Normalizes a location subpath of a path to a configuration file.</summary>
      <returns>A normalized subpath string.</returns>
      <param name="subPath">A string representing the path to the configuration file.</param>
      <param name="errorInfo">An instance of <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> or null.</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigHost">
      <summary>Defines interfaces used by internal .NET structures to initialize application configuration properties.</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.CreateConfigurationContext(System.String,System.String)">
      <summary>Creates and returns a context object for a <see cref="T:System.Configuration.ConfigurationElement" /> of an application configuration.</summary>
      <returns>A context object for a <see cref="T:System.Configuration.ConfigurationElement" /> object of an application configuration.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
      <param name="locationSubPath">A string representing a subpath location of the configuration element.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.CreateDeprecatedConfigContext(System.String)">
      <summary>Creates and returns a deprecated context object of the application configuration.</summary>
      <returns>A deprecated context object of the application configuration.</returns>
      <param name="configPath">A string representing a path to an application configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.DecryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>Decrypts an encrypted configuration section and returns it as a string.</summary>
      <returns>A decrypted configuration section as a string.</returns>
      <param name="encryptedXml">An encrypted XML string representing a configuration section.</param>
      <param name="protectionProvider">The <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object.</param>
      <param name="protectedConfigSection">The <see cref="T:System.Configuration.ProtectedConfigurationSection" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.DeleteStream(System.String)">
      <summary>Deletes the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the application configuration file.</summary>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.EncryptSection(System.String,System.Configuration.ProtectedConfigurationProvider,System.Configuration.ProtectedConfigurationSection)">
      <summary>Encrypts a configuration section and returns it as a string.</summary>
      <returns>An encrypted configuration section represented as a string.</returns>
      <param name="clearTextXml">An XML string representing a configuration section to encrypt.</param>
      <param name="protectionProvider">The <see cref="T:System.Configuration.ProtectedConfigurationProvider" /> object.</param>
      <param name="protectedConfigSection">The <see cref="T:System.Configuration.ProtectedConfigurationSection" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigPathFromLocationSubPath(System.String,System.String)">
      <summary>Returns the complete path to an application configuration file based on the location subpath.</summary>
      <returns>A string representing the complete path to an application configuration file.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
      <param name="locationSubPath">The subpath location of the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigType(System.String,System.Boolean)">
      <summary>Returns a <see cref="T:System.Type" /> object representing the type of the configuration object.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type of the configuration object.</returns>
      <param name="typeName">The type name</param>
      <param name="throwOnError">true to throw an exception if an error occurs; otherwise, false</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetConfigTypeName(System.Type)">
      <summary>Returns a string representing a type name from the <see cref="T:System.Type" /> object representing the type of the configuration.</summary>
      <returns>A string representing the type name from a <see cref="T:System.Type" /> object representing the type of the configuration.</returns>
      <param name="t">A <see cref="T:System.Type" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetRestrictedPermissions(System.Configuration.Internal.IInternalConfigRecord,System.Security.PermissionSet@,System.Boolean@)">
      <summary>Associates the configuration with a <see cref="T:System.Security.PermissionSet" /> object.</summary>
      <param name="configRecord">An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object.</param>
      <param name="permissionSet">The <see cref="T:System.Security.PermissionSet" /> object to associate with the configuration.</param>
      <param name="isHostReady">true to indicate the configuration host is has completed building associated permissions; otherwise, false.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamName(System.String)">
      <summary>Returns a string representing the configuration file name associated with the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</summary>
      <returns>A string representing the configuration file name associated with the <see cref="T:System.IO.Stream" /> I/O tasks on the configuration file.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamNameForConfigSource(System.String,System.String)">
      <summary>Returns a string representing the configuration file name associated with the <see cref="T:System.IO.Stream" /> object performing I/O tasks on a remote configuration file.</summary>
      <returns>A string representing the configuration file name associated with the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</returns>
      <param name="streamName">A string representing the configuration file name associated with the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="configSource">A string representing a path to a remote configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.GetStreamVersion(System.String)">
      <summary>Returns the version of the <see cref="T:System.IO.Stream" /> object associated with configuration file.</summary>
      <returns>The version of the <see cref="T:System.IO.Stream" /> object associated with configuration file.</returns>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.Impersonate">
      <summary>Instructs the host to impersonate and returns an <see cref="T:System.IDisposable" /> object required by the internal .NET structure.</summary>
      <returns>An <see cref="T:System.IDisposable" /> value.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.Init(System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>Initializes a configuration host.</summary>
      <param name="configRoot">The configuration root object.</param>
      <param name="hostInitParams">The parameter object containing the values used for initializing the configuration host.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.InitForConfiguration(System.String@,System.String@,System.String@,System.Configuration.Internal.IInternalConfigRoot,System.Object[])">
      <summary>Initializes a configuration object.</summary>
      <param name="locationSubPath">The subpath location of the configuration file.</param>
      <param name="configPath">A string representing the path of the application configuration file.</param>
      <param name="locationConfigPath">A string representing the location of a configuration path.</param>
      <param name="configRoot">The <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> object.</param>
      <param name="hostInitConfigurationParams">The parameter object containing the values used for initializing the configuration host.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsAboveApplication(System.String)">
      <summary>Returns a value indicating whether the configuration file is located at a higher level in the configuration hierarchy than the application configuration.</summary>
      <returns>true the configuration file is located at a higher level in the configuration hierarchy than the application configuration; otherwise, false.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsConfigRecordRequired(System.String)">
      <summary>Returns a value indicating whether a child record is required for a child configuration path.</summary>
      <returns>true if child record is required for a child configuration path; otherwise, false.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition)">
      <summary>Determines if a different <see cref="T:System.Type" /> definition is allowable for an application configuration object.</summary>
      <returns>true if a different <see cref="T:System.Type" /> definition is allowable for an application configuration object; otherwise, false.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
      <param name="allowDefinition">A <see cref="T:System.Configuration.ConfigurationAllowDefinition" /> object.</param>
      <param name="allowExeDefinition">A <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsFile(System.String)">
      <summary>Returns a value indicating whether the file path used by a <see cref="T:System.IO.Stream" /> object to read a configuration file is a valid path.</summary>
      <returns>true if the path used by a <see cref="T:System.IO.Stream" /> object to read a configuration file is a valid path; otherwise, false.</returns>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsFullTrustSectionWithoutAptcaAllowed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>Returns a value indicating whether a configuration section requires a fully trusted code access security level and does not allow the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> attribute to disable implicit link demands.</summary>
      <returns>true if the configuration section requires a fully trusted code access security level and does not allow the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> attribute to disable implicit link demands; otherwise, false.</returns>
      <param name="configRecord">The <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsInitDelayed(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>Returns a value indicating whether the initialization of a configuration object is considered delayed.</summary>
      <returns>true if the initialization of a configuration object is considered delayed; otherwise, false.</returns>
      <param name="configRecord">The <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsLocationApplicable(System.String)">
      <summary>Returns a value indicating whether the configuration object supports a location tag.</summary>
      <returns>true if the configuration object supports a location tag; otherwise, false.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.IsRemote">
      <summary>Returns a value indicating whether the configuration is remote.</summary>
      <returns>true if the configuration is remote; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsSecondaryRoot(System.String)">
      <summary>Returns a value indicating whether a configuration path is to a configuration node whose contents should be treated as a root.</summary>
      <returns>true if the configuration path is to a configuration node whose contents should be treated as a root; otherwise, false.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.IsTrustedConfigPath(System.String)">
      <summary>Returns a value indicating whether the configuration path is trusted.</summary>
      <returns>true if the configuration path is trusted; otherwise, false.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead(System.String)">
      <summary>Opens a <see cref="T:System.IO.Stream" /> to read a configuration file.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object.</returns>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead(System.String,System.Boolean)">
      <summary>Opens a <see cref="T:System.IO.Stream" /> object to read a configuration file.</summary>
      <returns>Returns the <see cref="T:System.IO.Stream" /> object specified by <paramref name="streamName" />.</returns>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="assertPermissions">true to assert permissions; otherwise, false.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@)">
      <summary>Opens a <see cref="T:System.IO.Stream" /> object for writing to a configuration file or for writing to a temporary file used to build a configuration file. Allows a <see cref="T:System.IO.Stream" /> object to be designated as a template for copying file attributes.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object.</returns>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="templateStreamName">The name of a <see cref="T:System.IO.Stream" /> object from which file attributes are to be copied as a template.</param>
      <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite(System.String,System.String,System.Object@,System.Boolean)">
      <summary>Opens a <see cref="T:System.IO.Stream" /> object for writing to a configuration file. Allows a <see cref="T:System.IO.Stream" /> object to be designated as a template for copying file attributes.</summary>
      <returns>Returns the <see cref="T:System.IO.Stream" /> object specified by <paramref name="streamName" />.</returns>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="templateStreamName">The name of a <see cref="T:System.IO.Stream" /> from which file attributes are to be copied as a template.</param>
      <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="assertPermissions">true to assert permissions; otherwise, false.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.PrefetchAll(System.String,System.String)">
      <summary>Returns a value indicating whether the entire configuration file could be read by a designated <see cref="T:System.IO.Stream" /> object.</summary>
      <returns>true if the entire configuration file could be read by the <see cref="T:System.IO.Stream" /> object designated by <paramref name="streamName" />; otherwise, false.</returns>
      <param name="configPath">A string representing the path of the application configuration file.</param>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.PrefetchSection(System.String,System.String)">
      <summary>Instructs the <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> object to read a designated section of its associated configuration file.</summary>
      <returns>true if a section of the configuration file designated by <paramref name="sectionGroupName" /> and <paramref name="sectionName" /> could be read by a <see cref="T:System.IO.Stream" /> object; otherwise, false.</returns>
      <param name="sectionGroupName">A string representing the identifying name of a configuration file section group.</param>
      <param name="sectionName">A string representing the identifying name of a configuration file section.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.RequireCompleteInit(System.Configuration.Internal.IInternalConfigRecord)">
      <summary>Indicates a new configuration record requires a complete initialization.</summary>
      <param name="configRecord">An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.StartMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>Instructs the <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> object to monitor an associated <see cref="T:System.IO.Stream" /> object for changes in a configuration file.</summary>
      <returns>An <see cref="T:System.Object" /> containing changed configuration settings.</returns>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="callback">A <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> object to receive the returned data representing the changes in the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.StopMonitoringStreamForChanges(System.String,System.Configuration.Internal.StreamChangeCallback)">
      <summary>Instructs the  <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> object to stop monitoring an associated <see cref="T:System.IO.Stream" /> object for changes in a configuration file.</summary>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="callback">A <see cref="T:System.Configuration.Internal.StreamChangeCallback" /> object.</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsChangeNotifications">
      <summary>Returns a value indicating whether the host configuration supports change notification.</summary>
      <returns>true if the configuration supports change notification; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsLocation">
      <summary>Returns a value indicating whether the host configuration supports location tags.</summary>
      <returns>true if the configuration supports location tags; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsPath">
      <summary>Returns a value indicating whether the host configuration supports path tags.</summary>
      <returns>true if the configuration supports path tags; otherwise, false.</returns>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigHost.SupportsRefresh">
      <summary>Returns a value indicating whether the host configuration supports configuration refresh.</summary>
      <returns>true if the configuration supports configuration refresh; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.VerifyDefinitionAllowed(System.String,System.Configuration.ConfigurationAllowDefinition,System.Configuration.ConfigurationAllowExeDefinition,System.Configuration.Internal.IConfigErrorInfo)">
      <summary>Verifies that a configuration definition is allowed for a configuration record.</summary>
      <param name="configPath">A string representing the path of the application configuration file.</param>
      <param name="allowDefinition">A <see cref="P:System.Configuration.SectionInformation.AllowDefinition" /> object.</param>
      <param name="allowExeDefinition">A <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" /> object</param>
      <param name="errorInfo">An <see cref="T:System.Configuration.Internal.IConfigErrorInfo" /> object.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.WriteCompleted(System.String,System.Boolean,System.Object)">
      <summary>Indicates that all writing to the configuration file has completed.</summary>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="success">true if the write to the configuration file was completed successfully; otherwise, false.</param>
      <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigHost.WriteCompleted(System.String,System.Boolean,System.Object,System.Boolean)">
      <summary>Indicates that all writing to the configuration file has completed and specifies whether permissions should be asserted.</summary>
      <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="success">true to indicate the write was completed successfully; otherwise, false.</param>
      <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
      <param name="assertPermissions">true to assert permissions; otherwise, false.</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigRecord">
      <summary>Defines interfaces used by internal .NET structures to support creation of new configuration records.</summary>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.ConfigPath">
      <summary>Gets a string representing a configuration file path.</summary>
      <returns>A string representing a configuration file path.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.GetLkgSection(System.String)">
      <summary>Returns an object representing a section of a configuration from the last-known-good (LKG) configuration.</summary>
      <returns>An <see cref="T:System.Object" /> instance representing the section of the last-known-good configuration specified by <paramref name="configKey" />.</returns>
      <param name="configKey">A string representing a key to a configuration section.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.GetSection(System.String)">
      <summary>Returns an <see cref="T:System.Object" /> instance representing a section of a configuration file.</summary>
      <returns>An <see cref="T:System.Object" /> instance representing a section of a configuration file.</returns>
      <param name="configKey">A string representing a key to a configuration section.</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.HasInitErrors">
      <summary>Returns a value indicating whether an error occurred during initialization of a configuration object.</summary>
      <returns>true if an error occurred during initialization of a configuration object; otherwise, false.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.RefreshSection(System.String)">
      <summary>Causes a specified section of the configuration object to be reinitialized.</summary>
      <param name="configKey">A string representing a key to a configuration section that is to be refreshed.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.Remove">
      <summary>Removes a configuration record.</summary>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRecord.StreamName">
      <summary>Returns the name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</summary>
      <returns>A string representing the name of a <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRecord.ThrowIfInitErrors">
      <summary>Grants the configuration object the permission to throw an exception if an error occurs during initialization.</summary>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigRoot">
      <summary>Defines interfaces used by internal .NET structures to support a configuration root object.</summary>
    </member>
    <member name="E:System.Configuration.Internal.IInternalConfigRoot.ConfigChanged">
      <summary>Represents the method that handles the <see cref="E:System.Configuration.Internal.IInternalConfigRoot.ConfigChanged" /> event of an <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> object.</summary>
    </member>
    <member name="E:System.Configuration.Internal.IInternalConfigRoot.ConfigRemoved">
      <summary>Represents the method that handles the <see cref="E:System.Configuration.Internal.IInternalConfigRoot.ConfigRemoved" /> event of a <see cref="T:System.Configuration.Internal.IInternalConfigRoot" /> object.</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetConfigRecord(System.String)">
      <summary>Returns an <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object representing a configuration specified by a configuration path.</summary>
      <returns>An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object representing a configuration specified by <paramref name="configPath" />.</returns>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetSection(System.String,System.String)">
      <summary>Returns an <see cref="T:System.Object" /> representing the data in a section of a configuration file.</summary>
      <returns>An <see cref="T:System.Object" /> representing the data in a section of a configuration file.</returns>
      <param name="section">A string representing a section of a configuration file.</param>
      <param name="configPath">A string representing the path to a configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetUniqueConfigPath(System.String)">
      <summary>Returns a value representing the file path of the nearest configuration ancestor that has configuration data.</summary>
      <returns>Returns a string representing the file path of the nearest configuration ancestor that has configuration data.</returns>
      <param name="configPath">The path of configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.GetUniqueConfigRecord(System.String)">
      <summary>Returns an <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object representing a unique configuration record for given configuration path.</summary>
      <returns>An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" /> object representing a unique configuration record for a given configuration path.</returns>
      <param name="configPath">The path of the configuration file.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.Init(System.Configuration.Internal.IInternalConfigHost,System.Boolean)">
      <summary>Initializes a configuration object.</summary>
      <param name="host">An <see cref="T:System.Configuration.Internal.IInternalConfigHost" /> object.</param>
      <param name="isDesignTime">true if design time; false if run time.</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigRoot.IsDesignTime">
      <summary>Returns a value indicating whether the configuration is a design-time configuration.</summary>
      <returns>true if the configuration is a design-time configuration; false if the configuration is not a design-time configuration.</returns>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigRoot.RemoveConfig(System.String)">
      <summary>Finds and removes a configuration record and all its children for a given configuration path.</summary>
      <param name="configPath">The path of the configuration file.</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigSettingsFactory">
      <summary>Defines an interface used by the configuration system to set the <see cref="T:System.Configuration.ConfigurationSettings" /> class.</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSettingsFactory.CompleteInit">
      <summary>Indicates that initialization of the configuration system has completed. </summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSettingsFactory.SetConfigurationSystem(System.Configuration.Internal.IInternalConfigSystem,System.Boolean)">
      <summary>Provides hierarchical configuration settings and extensions specific to ASP.NET to the configuration system. </summary>
      <param name="internalConfigSystem">An <see cref="T:System.Configuration.Internal.IInternalConfigSystem" /> object used by the <see cref="T:System.Configuration.ConfigurationSettings" /> class.</param>
      <param name="initComplete">true if the initialization process of the configuration system is complete; otherwise, false.</param>
    </member>
    <member name="T:System.Configuration.Internal.IInternalConfigSystem">
      <summary>Defines an interface used by the .NET Framework to initialize application configuration properties.</summary>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSystem.GetSection(System.String)">
      <summary>Returns the configuration object based on the specified key. </summary>
      <returns>A configuration object.</returns>
      <param name="configKey">The configuration key value.</param>
    </member>
    <member name="M:System.Configuration.Internal.IInternalConfigSystem.RefreshConfig(System.String)">
      <summary>Refreshes the configuration system based on the specified section name. </summary>
      <param name="sectionName">The name of the configuration section.</param>
    </member>
    <member name="P:System.Configuration.Internal.IInternalConfigSystem.SupportsUserConfig">
      <summary>Gets a value indicating whether the user configuration is supported. </summary>
      <returns>true if the user configuration is supported; otherwise, false.</returns>
    </member>
    <member name="T:System.Configuration.Internal.InternalConfigEventArgs">
      <summary>Defines a class that allows the .NET Framework infrastructure to specify event arguments for configuration events.</summary>
    </member>
    <member name="M:System.Configuration.Internal.InternalConfigEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Internal.InternalConfigEventArgs" /> class.</summary>
      <param name="configPath">A configuration path.</param>
    </member>
    <member name="P:System.Configuration.Internal.InternalConfigEventArgs.ConfigPath">
      <summary>Gets or sets the configuration path related to the <see cref="T:System.Configuration.Internal.InternalConfigEventArgs" /> object.</summary>
      <returns>A string value specifying the configuration path.</returns>
    </member>
    <member name="T:System.Configuration.Internal.InternalConfigEventHandler">
      <summary>Defines a class used by the .NET Framework infrastructure to support configuration events.</summary>
      <param name="sender">The source object of the event.</param>
      <param name="e">A configuration event argument.</param>
    </member>
    <member name="T:System.Configuration.Internal.StreamChangeCallback">
      <summary>Represents a method for hosts to call when a monitored stream has changed.</summary>
      <param name="streamName">The name of the <see cref="T:System.IO.Stream" /> object performing I/O tasks on the configuration file.</param>
    </member>
    <member name="T:System.Configuration.Provider.ProviderBase">
      <summary>Provides a base implementation for the extensible provider model.</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Provider.ProviderBase" /> class. </summary>
    </member>
    <member name="P:System.Configuration.Provider.ProviderBase.Description">
      <summary>Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).</summary>
      <returns>A brief, friendly description suitable for display in administrative tools or other UIs.</returns>
    </member>
    <member name="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes the provider.</summary>
      <param name="name">The friendly name of the provider.</param>
      <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
      <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
      <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> on a provider after the provider has already been initialized.</exception>
    </member>
    <member name="P:System.Configuration.Provider.ProviderBase.Name">
      <summary>Gets the friendly name used to refer to the provider during configuration.</summary>
      <returns>The friendly name used to refer to the provider during configuration.</returns>
    </member>
    <member name="T:System.Configuration.Provider.ProviderCollection">
      <summary>Represents a collection of provider objects that inherit from <see cref="T:System.Configuration.Provider.ProviderBase" />.</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Configuration.Provider.ProviderCollection" /> class. </summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>Adds a provider to the collection.</summary>
      <param name="provider">The provider to be added.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> of <paramref name="provider" /> is null.- or -The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> of <paramref name="provider" /> is less than 1.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Clear">
      <summary>Removes all items from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The collection is set to read-only.</exception>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.CopyTo(System.Configuration.Provider.ProviderBase[],System.Int32)">
      <summary>Copies the contents of the collection to the given array starting at the specified index.</summary>
      <param name="array">The array to copy the elements of the collection to.</param>
      <param name="index">The index of the collection item at which to start the copying process.</param>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.Count">
      <summary>Gets the number of providers in the collection.</summary>
      <returns>The number of providers in the collection.</returns>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.GetEnumerator">
      <summary>Returns an object that implements the <see cref="T:System.Collections.IEnumerator" /> interface to iterate through the collection.</summary>
      <returns>An object that implements <see cref="T:System.Collections.IEnumerator" /> to iterate through the collection.</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.Item(System.String)">
      <summary>Gets the provider with the specified name.</summary>
      <returns>The provider with the specified name.</returns>
      <param name="name">The key by which the provider is identified.</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.Remove(System.String)">
      <summary>Removes a provider from the collection.</summary>
      <param name="name">The name of the provider to be removed.</param>
      <exception cref="T:System.NotSupportedException">The collection has been set to read-only.</exception>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.SetReadOnly">
      <summary>Sets the collection to be read-only.</summary>
    </member>
    <member name="P:System.Configuration.Provider.ProviderCollection.SyncRoot">
      <summary>Gets the current object.</summary>
      <returns>The current object.</returns>
    </member>
    <member name="M:System.Configuration.Provider.ProviderCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Configuration.Provider.ProviderCollection" /> to an array, starting at a particular array index.</summary>
      <param name="array">The array to copy the elements of the collection to.</param>
      <param name="index">The index of the array at which to start copying provider instances from the collection.</param>
    </member>
    <member name="T:System.Configuration.Provider.ProviderException">
      <summary>The exception that is thrown when a configuration provider error has occurred. This exception class is also used by providers to throw exceptions when internal errors occur within the provider that do not map to other pre-existing exception classes.</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Configuration.Provider.ProviderException" /> class.</summary>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Configuration.Provider.ProviderException" /> class.</summary>
      <param name="info">The object that holds the information to deserialize.</param>
      <param name="context">Contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Configuration.Provider.ProviderException" /> class.</summary>
      <param name="message">A message describing why this <see cref="T:System.Configuration.Provider.ProviderException" /> was thrown.</param>
    </member>
    <member name="M:System.Configuration.Provider.ProviderException.#ctor(System.String,System.Exception)">
      <summary>Creates a new instance of the <see cref="T:System.Configuration.Provider.ProviderException" /> class.</summary>
      <param name="message">A message describing why this <see cref="T:System.Configuration.Provider.ProviderException" /> was thrown.</param>
      <param name="innerException">The exception that caused this <see cref="T:System.Configuration.Provider.ProviderException" /> to be thrown.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\PresentationCore.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>PresentationCore</name>
  </assembly>
  <members>
    <member name="T:System.IO.Packaging.PackageStore">
      <summary>Represents a collection of application-specific <see cref="T:System.IO.Packaging.Package" /> instances used in combination with <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)">
      <summary>Adds a <see cref="T:System.IO.Packaging.Package" /> to the store.</summary>
      <param name="uri">The key URI of the <paramref name="package" /> to compare in a <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
      <param name="package">The package to add to the store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is an invalid package URI.</exception>
      <exception cref="T:System.InvalidOperationException">A package with the specified <paramref name="packageUri" /> is already in the store.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)">
      <summary>Returns the <see cref="T:System.IO.Packaging.Package" /> with a specified URI from the store.</summary>
      <returns>The package with a specified <paramref name="packageUri" />; or null, if a package with the specified <paramref name="packageUri" /> is not in the store.</returns>
      <param name="uri">The uniform resource identifier (URI) of the package to return.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is an invalid package URI.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)">
      <summary>Removes the <see cref="T:System.IO.Packaging.Package" /> with a specified URI from the store.</summary>
      <param name="uri">The uniform resource identifier (URI) of the package to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> is an invalid package URI.</exception>
    </member>
    <member name="T:System.IO.Packaging.PackWebRequest">
      <summary>Makes a request to an entire <see cref="T:System.IO.Packaging.PackagePart" /> or to a <see cref="T:System.IO.Packaging.PackagePart" /> in a package, identified by a pack URI.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.CachePolicy">
      <summary>Gets or sets the <see cref="T:System.Net.Cache.RequestCachePolicy" />.</summary>
      <returns>The <see cref="T:System.Net.Cache.RequestCachePolicy" /> to use with pack URI web request.</returns>
      <exception cref="T:System.Net.WebException">The specified <see cref="T:System.Net.Cache.RequestCachePolicy" /> to set is not valid.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.ConnectionGroupName">
      <summary>Gets or sets the name of the connection group.</summary>
      <returns>The connection group name.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.ContentLength">
      <summary>Gets or sets the Content-length HTTP header. </summary>
      <returns>The content length, in bytes.</returns>
      <exception cref="T:System.NotSupportedException">Set is not supported, <see cref="T:System.IO.Packaging.PackWebRequest" /> is read-only.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.ContentType">
      <summary>Gets or sets the Content-type HTTP header. </summary>
      <returns>The contents of the header.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Credentials">
      <summary>Gets or sets the authentication credentials.</summary>
      <returns>The authentication credentials to use with the request.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequest.GetInnerRequest">
      <summary>Gets the inner <see cref="T:System.Net.WebRequest" />.</summary>
      <returns>A <see cref="T:System.Net.WebRequest" /> created from the inner-URI if the request resolves to a valid transport protocol such http or ftp; or a <see cref="T:System.Net.WebRequest" /> created with a null-URI if the request resolves from the <see cref="T:System.IO.Packaging.PackageStore" /> cache.</returns>
      <exception cref="T:System.NotSupportedException">The inner URI does not resolve to a valid transport protocol such as http for ftp, nor can the request be resolved from the <see cref="T:System.IO.Packaging.PackageStore" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequest.GetRequestStream">
      <summary>Do not use—<see cref="M:System.IO.Packaging.PackWebRequest.GetRequestStream" /> is not supported by <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
      <returns>If <see cref="M:System.IO.Packaging.PackWebRequest.GetRequestStream" /> is called, a <see cref="T:System.NotSupportedException" /> is thrown.</returns>
      <exception cref="T:System.NotSupportedException">Occurs on any call to <see cref="M:System.IO.Packaging.PackWebRequest.GetRequestStream" />.  The pack URI protocol does not support writing.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequest.GetResponse">
      <summary>Returns the response stream for the request.</summary>
      <returns>The response stream for the request.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Headers">
      <summary>Gets or sets the collection of header name/value pairs associated with the request. </summary>
      <returns>A header collection object.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Method">
      <summary>Gets or sets the protocol method to use with the pack URI request.</summary>
      <returns>The protocol method name that performs this request.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.PreAuthenticate">
      <summary>Gets or sets a value that indicates whether to preauthenticate the request.</summary>
      <returns>true to send a WWW-authenticate HTTP header with the initial request; otherwise, false. </returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Proxy">
      <summary>Gets or sets the network proxy for Internet access.</summary>
      <returns>The <see cref="T:System.Net.WebProxy" /> to use for Internet access.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.RequestUri">
      <summary>Gets the URI of the resource associated with the request.</summary>
      <returns>The uniform resource identifier (URI) of the resource associated with the request.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.Timeout">
      <summary>Gets or sets the length of time before the request times out.</summary>
      <returns>The number of milliseconds to wait before the request times out.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebRequest.UseDefaultCredentials">
      <summary>Gets or sets the default authentication credentials.</summary>
      <returns>The default authentication credentials to use with the pack URI request.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackWebRequestFactory">
      <summary>Represents the class that is invoked when an instance of a pack URI <see cref="T:System.IO.Packaging.PackWebRequest" /> is created.    </summary>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequestFactory.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.IO.Packaging.PackWebRequestFactory" /> class. </summary>
    </member>
    <member name="M:System.IO.Packaging.PackWebRequestFactory.System#Net#IWebRequestCreate#Create(System.Uri)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.  Use the type-safe <see cref="T:System.IO.Packaging.PackUriHelper" /> method instead. </summary>
      <returns>The pack URI Web request.</returns>
      <param name="uri">The URI to create the Web request.</param>
    </member>
    <member name="T:System.IO.Packaging.PackWebResponse">
      <summary>Represents a response of a <see cref="T:System.IO.Packaging.PackWebRequest" />. </summary>
    </member>
    <member name="M:System.IO.Packaging.PackWebResponse.Close">
      <summary>Closes the stream for this request. </summary>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.ContentLength">
      <summary>Gets the content length of the response. </summary>
      <returns>The content length, in bytes.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.ContentType">
      <summary>Gets the Multipurpose Internet Mail Extensions (MIME) content type of the response stream's content. </summary>
      <returns>The MIME type of the stream's content.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackWebResponse.GetResponseStream">
      <summary>Gets the response stream that is contained in the <see cref="T:System.IO.Packaging.PackWebResponse" />. </summary>
      <returns>The response stream.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.Headers">
      <summary>Gets the collection of Web <see cref="P:System.Net.WebResponse.Headers" /> for this response. </summary>
      <returns>The collection of Web response <see cref="P:System.Net.WebResponse.Headers" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.InnerResponse">
      <summary>Gets the inner <see cref="T:System.Net.WebResponse" /> object for the response. </summary>
      <returns>The response data as a <see cref="T:System.Net.WebResponse" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.IsFromCache">
      <summary>Gets a value indicating whether the response is from the package cache or from a Web request. </summary>
      <returns>true if the response is from the package cache; false if the response is from a Web request.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackWebResponse.ResponseUri">
      <summary>Gets the uniform resource identifier (URI) of the response. </summary>
      <returns>The URI of the response.</returns>
    </member>
    <member name="T:System.Windows.AutoResizedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Interop.HwndSource.AutoResized" /> event raised by <see cref="T:System.Windows.Interop.HwndSource" />.</summary>
    </member>
    <member name="M:System.Windows.AutoResizedEventArgs.#ctor(System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.AutoResizedEventArgs" /> class.</summary>
      <param name="size">The size to report in the event data.</param>
    </member>
    <member name="P:System.Windows.AutoResizedEventArgs.Size">
      <summary>Gets the new size of the window after the auto resize operation.</summary>
      <returns>Size of the window after resizing.</returns>
    </member>
    <member name="T:System.Windows.AutoResizedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Interop.HwndSource.AutoResized" /> event raised by <see cref="T:System.Windows.Interop.HwndSource" />.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.BaselineAlignment">
      <summary>Describes how the baseline for a text-based element is positioned on the vertical axis, relative to the established baseline for text.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Top">
      <summary>A baseline that is aligned to the upper edge of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Center">
      <summary>A baseline that is aligned to the center of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Bottom">
      <summary>A baseline that is aligned at the lower edge of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Baseline">
      <summary>A baseline that is aligned at the actual baseline of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.TextTop">
      <summary>A baseline that is aligned at the upper edge of the text baseline.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.TextBottom">
      <summary>A baseline that is aligned at the lower edge of the text baseline.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Subscript">
      <summary>A baseline that is aligned at the subscript position of the containing box.</summary>
    </member>
    <member name="F:System.Windows.BaselineAlignment.Superscript">
      <summary>A baseline that is aligned at the superscript position of the containing box.</summary>
    </member>
    <member name="T:System.Windows.Clipboard">
      <summary>Provides static methods that facilitate transferring data to and from the system Clipboard.</summary>
    </member>
    <member name="M:System.Windows.Clipboard.Clear">
      <summary>Clears any data from the system Clipboard.</summary>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsAudio">
      <summary>Queries the Clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format.</summary>
      <returns>true if the Clipboard contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsData(System.String)">
      <summary>Queries the Clipboard for the presence of data in a specified data format.</summary>
      <returns>true if data in the specified format is available on the Clipboard; otherwise, false. See Remarks.</returns>
      <param name="format">The format of the data to look for. See <see cref="T:System.Windows.DataFormats" /> for predefined formats. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsFileDropList">
      <summary>Queries the Clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.FileDrop" /> data format.</summary>
      <returns>true if the Clipboard contains data in the <see cref="F:System.Windows.DataFormats.FileDrop" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsImage">
      <summary>Queries the Clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> data format.</summary>
      <returns>true if the Clipboard contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsText">
      <summary>Queries the Clipboard for the presence of data in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> format.</summary>
      <returns>true if the Clipboard contains data in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.ContainsText(System.Windows.TextDataFormat)">
      <summary>Queries the Clipboard for the presence of data in a text data format.</summary>
      <returns>true if the Clipboard contains data in the specified text data format; otherwise, false.</returns>
      <param name="format">A member of the <see cref="T:System.Windows.TextDataFormat" /> enumeration that specifies the text data format to query for.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="format" /> does not specify a valid member of <see cref="T:System.Windows.TextDataFormat" />.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.GetAudioStream">
      <summary>Returns a stream of Clipboard data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format.</summary>
      <returns>A stream that contains the data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> format, or null if the Clipboard does not contain data in this format.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetData(System.String)">
      <summary>Retrieves data in a specified format from the Clipboard.</summary>
      <returns>An object that contains the data in the specified format, or null if the data is unavailable in the specified format.</returns>
      <param name="format">A string that specifies the format of the data to retrieve. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.GetDataObject">
      <summary>Returns a data object that represents the entire contents of the Clipboard.</summary>
      <returns>A data object that enables access to the entire contents of the system Clipboard, or null if there is no data on the Clipboard.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetFileDropList">
      <summary>Returns a string collection that contains a list of dropped files available on the Clipboard.</summary>
      <returns>A collection of strings, where each string specifies the name of a file in the list of dropped files on the Clipboard, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetImage">
      <summary>Returns a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object from the Clipboard that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> format.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> format, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetText">
      <summary>Returns a string containing the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data on the Clipboard.</summary>
      <returns>A string containing the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data , or an empty string if no <see cref="F:System.Windows.DataFormats.UnicodeText" /> data is available on the Clipboard.</returns>
    </member>
    <member name="M:System.Windows.Clipboard.GetText(System.Windows.TextDataFormat)">
      <summary>Returns a string containing text data on the Clipboard. </summary>
      <returns>A string containing text data in the specified data format, or an empty string if no corresponding text data is available.</returns>
      <param name="format">A member of <see cref="T:System.Windows.TextDataFormat" /> that specifies the text data format to retrieve.</param>
    </member>
    <member name="M:System.Windows.Clipboard.IsCurrent(System.Windows.IDataObject)">
      <summary>Compares a specified data object to the contents of the Clipboard.</summary>
      <returns>true if the specified data object matches what is on the system Clipboard; otherwise, false.</returns>
      <param name="data">A data object to compare to the contents of the system Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">An error occurred when accessing the Clipboard. The exception details will include an HResult that identifies the specific error; see <see cref="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode" />.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetAudio(System.Byte[])">
      <summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio" /> data format) on the Clipboard.  The audio data is specified as a byte array.</summary>
      <param name="audioBytes">A byte array that contains audio data to store on the Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioBytes" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetAudio(System.IO.Stream)">
      <summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio" /> data format) on the Clipboard.  The audio data is specified as a stream.</summary>
      <param name="audioStream">A stream that contains audio data to store on the Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioStream" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetData(System.String,System.Object)">
      <summary>Stores the specified data on the Clipboard in the specified format.</summary>
      <param name="format">A string that specifies the format to use to store the data. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="data">An object representing the data to store on the Clipboard.</param>
    </member>
    <member name="M:System.Windows.Clipboard.SetDataObject(System.Object)">
      <summary>Places a specified non-persistent data object on the system Clipboard.</summary>
      <param name="data">A data object (an object that implements <see cref="T:System.Windows.IDataObject" />) to place on the system Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioStream" /> is null.</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">An error occurred when accessing the Clipboard. The exception details will include an HResult that identifies the specific error; see <see cref="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode" />.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetDataObject(System.Object,System.Boolean)">
      <summary>Places a specified data object on the system Clipboard and accepts a Boolean parameter that indicates whether the data object should be left on the Clipboard when the application exits.</summary>
      <param name="data">A data object (an object that implements <see cref="T:System.Windows.IDataObject" />) to place on the system Clipboard.</param>
      <param name="copy">true to leave the data on the system Clipboard when the application exits; false to clear the data from the system Clipboard when the application exits.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioStream" /> is null.</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">An error occured when accessing the Clipboard.  The exception details will include an HResult that identifies the specific error; see <see cref="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode" />.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetFileDropList(System.Collections.Specialized.StringCollection)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.FileDrop" /> data on the Clipboard.  The dropped file list is specified as a string collection.</summary>
      <param name="fileDropList">A string collection that contains the dropped file list to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileDropList" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileDropList" /> contains zero strings, or the full path to file specified in the list cannot be resolved.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetImage(System.Windows.Media.Imaging.BitmapSource)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.Bitmap" /> data on the Clipboard.  The image data is specified as a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <param name="image">A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains the image data to store on the Clipboard.</param>
    </member>
    <member name="M:System.Windows.Clipboard.SetText(System.String)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.UnicodeText" /> data on the Clipboard. </summary>
      <param name="text">A string that contains the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data to store on the Clipboard.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textData" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Clipboard.SetText(System.String,System.Windows.TextDataFormat)">
      <summary>Stores text data on the Clipboard in a specified text data format.  The <see cref="F:System.Windows.DataFormats.UnicodeText" /> data to store is specified as a string.</summary>
      <param name="text">A string that contains the text data to store on the Clipboard.</param>
      <param name="format">A member of <see cref="T:System.Windows.TextDataFormat" /> that specifies the specific text data format to store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="T:System.Windows.ContentElement">
      <summary>Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model. </summary>
    </member>
    <member name="M:System.Windows.ContentElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.ContentElement" /> class. </summary>
    </member>
    <member name="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
    </member>
    <member name="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
      <param name="handledEventsToo">true to register the handler such that it is invoked even when  the routed event is marked handled in its event data; false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false.Do not routinely ask to rehandle a routed event. For more information, see Remarks.</param>
    </member>
    <member name="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
      <summary>Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.ContentElement" /> event handler collection.</summary>
      <param name="route">The event route that handlers are added to.</param>
      <param name="e">The event data that is used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the arguments to create the handlers. </param>
    </member>
    <member name="P:System.Windows.ContentElement.AllowDrop">
      <summary>Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.  </summary>
      <returns>true if this element can be used as the target of a drag-and-drop operation; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.AllowDropProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AllowDrop" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AllowDrop" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
      <summary>Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.</summary>
      <param name="dp">The identifier for the property to animate.</param>
      <param name="clock">The animation clock that controls and declares the animation.</param>
    </member>
    <member name="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</summary>
      <param name="dp">The property to animate.</param>
      <param name="clock">The animation clock that controls and declares the animation.</param>
      <param name="handoffBehavior">A value of the enumeration. The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</param>
    </member>
    <member name="P:System.Windows.ContentElement.AreAnyTouchesCaptured">
      <summary>Gets a value that indicates whether at least one touch is captured to this element. </summary>
      <returns>true if at least one touch is captured to this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin">
      <summary>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree. </summary>
      <returns>true if at least one touch is captured to this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element.</summary>
      <returns>true if at least one touch is pressed over this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.AreAnyTouchesOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree. </summary>
      <returns>true if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.ContentElement.AreAnyTouchesOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
      <summary>Starts an animation for a specified animated property on this element. </summary>
      <param name="dp">The property to animate, which is specified as a dependency property identifier.</param>
      <param name="animation">The timeline of the animation to start.</param>
    </member>
    <member name="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation. </summary>
      <param name="dp">The property to animate, which is specified as the dependency property identifier.</param>
      <param name="animation">The timeline of the animation to be applied.</param>
      <param name="handoffBehavior">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</param>
    </member>
    <member name="M:System.Windows.ContentElement.CaptureMouse">
      <summary>Attempts to force capture of the mouse to this element. </summary>
      <returns>true if the mouse is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.CaptureStylus">
      <summary>Attempts to force capture of the stylus to this element. </summary>
      <returns>true if the stylus is successfully captured; otherwise, false. </returns>
    </member>
    <member name="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)">
      <summary>Attempts to force capture of a touch to this element.</summary>
      <returns>true if the specified touch is captured to this element; otherwise, false.</returns>
      <param name="touchDevice">The device to capture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="P:System.Windows.ContentElement.CommandBindings">
      <summary>Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects that are associated with this element. </summary>
      <returns>The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.DragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.DragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.DragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.DragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.DragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.DragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.DragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.DragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.DragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.DragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.DragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.DragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.Drop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.DropEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.Drop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.Drop" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.Focus">
      <summary>Attempts to set focus to this element. </summary>
      <returns>true if keyboard focus could be set to this element; false if this method call did not force focus.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.Focusable">
      <summary>Gets or sets a value that indicates whether the element can receive focus.  </summary>
      <returns>true if the element is focusable; otherwise false. The default is false; however, see Remarks.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.FocusableChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.Focusable" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.FocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.Focusable" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.Focusable" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
      <summary>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation. </summary>
      <returns>The property value as if no animations are attached to the specified dependency property. </returns>
      <param name="dp">The dependency property to check.</param>
    </member>
    <member name="M:System.Windows.ContentElement.GetUIParentCore">
      <summary>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists. </summary>
      <returns>An object, if implementation of a derived class has an alternate parent connection to report.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GiveFeedback">
      <summary>Occurs when the input system reports an underlying drag-and-drop event that involves this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotFocus">
      <summary>Occurs when this element gets logical focus. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotMouseCapture">
      <summary>Occurs when this element captures the mouse. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotStylusCapture">
      <summary>Occurs when this element captures the stylus. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.GotTouchCapture">
      <summary>Occurs when a touch is captured to this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.GotTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.HasAnimatedProperties">
      <summary>Gets a value that indicates whether this element has any animated properties. </summary>
      <returns>true if this element has animations attached to any of its properties; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.InputBindings">
      <summary>Gets the collection of input bindings that are associated with this element. </summary>
      <returns>The collection of input bindings.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsEnabled">
      <summary>Gets or sets a value that indicates whether this element is enabled in the user interface (UI).  </summary>
      <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsEnabledChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsEnabled" /> property on this element changes. </summary>
    </member>
    <member name="P:System.Windows.ContentElement.IsEnabledCore">
      <summary>Gets a value that becomes the return value of <see cref="P:System.Windows.ContentElement.IsEnabled" /> in derived classes. </summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsEnabled" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsFocused">
      <summary>Gets a value that determines whether this element has logical focus.  </summary>
      <returns>true if this element has logical focus; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsFocused" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.ContentElement.IsFocused" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsInputMethodEnabled">
      <summary>Gets a value that indicates whether an input method system, such as an Input Method Editor (IME), is enabled for processing the input to this element. </summary>
      <returns>true if an input method is active; otherwise, false. The default value of the underlying attached property is true; however, this value is influenced by the state of input methods at runtime.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsKeyboardFocused">
      <summary>Gets a value that indicates whether this element has keyboard focus.  </summary>
      <returns>true if this element has keyboard focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsKeyboardFocusedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsKeyboardFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsKeyboardFocusWithin">
      <summary>Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.  </summary>
      <returns>true if keyboard focus is on the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged">
      <summary>Occurs when the value of the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsMouseCaptured">
      <summary>Gets a value that indicates whether the mouse is captured by this element.  </summary>
      <returns>true if the element has mouse capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsMouseCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsMouseCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsMouseCaptureWithin">
      <summary>Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree. </summary>
      <returns>true if this element or a contained element has mouse capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> changes on this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsMouseDirectlyOver">
      <summary>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the mouse pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsMouseOver">
      <summary>Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing). </summary>
      <returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.IsMouseOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsMouseOver" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.ContentElement.IsMouseOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsStylusCaptured">
      <summary>Gets a value that indicates whether the stylus is captured to this element.  </summary>
      <returns>true if the element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsStylusCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsStylusCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsStylusCaptureWithin">
      <summary>Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing. </summary>
      <returns>true if stylus capture is held within this element; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsStylusDirectlyOver">
      <summary>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the stylus is over the same element as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.IsStylusOver">
      <summary>Gets a value that indicates whether the stylus is located over this element (including visual child elements).  </summary>
      <returns>true if the stylus is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.ContentElement.IsStylusOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.ContentElement.IsStylusOver" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.ContentElement.IsStylusOver" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.KeyDown">
      <summary>Occurs when a key is pressed while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.KeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.KeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.KeyUp">
      <summary>Occurs when a key is released while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.KeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.KeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostFocus">
      <summary>Occurs when this element loses logical focus. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostMouseCapture">
      <summary>Occurs when this element loses mouse capture. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostStylusCapture">
      <summary>Occurs when this element loses stylus capture. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.LostTouchCapture">
      <summary>Occurs when this element loses a touch capture. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.LostTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseEnter">
      <summary>Occurs when the mouse pointer enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseMove">
      <summary>Occurs when the mouse pointer moves while over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseUp">
      <summary>Occurs when any mouse button is released over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.MouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.MouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.MouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.MouseWheel" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)">
      <summary>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element. </summary>
      <returns>true if the requested traversal was performed; otherwise, false. </returns>
      <param name="request">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnCreateAutomationPeer">
      <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.ContentElement.GotFocus" /> routed event by using the event data provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.ContentElement.GotFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked just before the <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.ContentElement.LostFocus" /> routed event by using the event data that is provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.ContentElement.LostFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.ContentElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
      <summary>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</summary>
      <returns>The element that would have received focus if <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</returns>
      <param name="direction">The direction of the requested focus traversal.</param>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewDragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewDragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewDragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewDragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewDragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewDragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewDragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewDragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewDrop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewDropEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewDrop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewDrop" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewGiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewGotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewKeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewKeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewKeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewKeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewLostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseUp">
      <summary>Occurs when any mouse button is released while the mouse pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewMouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewMouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewQueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusDown">
      <summary>Occurs when the stylus touches the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusMove">
      <summary>Occurs when the stylus moves while over the element. The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewStylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewStylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> routed event. </returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewTextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewTextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewTextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewTextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewTouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewTouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewTouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewTouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.PreviewTouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.PreviewTouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.QueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.QueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.QueryCursor">
      <summary>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.QueryCursorEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.QueryCursor" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.QueryCursor" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)">
      <summary>Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data). </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise. </param>
    </member>
    <member name="M:System.Windows.ContentElement.ReleaseAllTouchCaptures">
      <summary>Releases all captured touch devices from this element.</summary>
    </member>
    <member name="M:System.Windows.ContentElement.ReleaseMouseCapture">
      <summary>Releases the mouse capture, if this element held the capture.</summary>
    </member>
    <member name="M:System.Windows.ContentElement.ReleaseStylusCapture">
      <summary>Releases the stylus device capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
      <summary>Attempts to release the specified touch device from this element.</summary>
      <returns>true if the touch device is released; otherwise, false.</returns>
      <param name="touchDevice">The device to release. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Removes the specified routed event handler from this element. </summary>
      <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from the event handler collection on this element.</param>
    </member>
    <member name="M:System.Windows.ContentElement.ShouldSerializeCommandBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.CommandBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.ContentElement.CommandBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.ContentElement.ShouldSerializeInputBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.ContentElement.InputBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.ContentElement.InputBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusDown">
      <summary>Occurs when the stylus touches the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusEnter">
      <summary>Occurs when the stylus enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusLeave">
      <summary>Occurs when the stylus leaves the bounds of the element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusMove">
      <summary>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.StylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.StylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.StylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.StylusUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchEnter">
      <summary>Occurs when a touch moves from outside to inside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchEnter" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.TouchesCaptured">
      <summary>Gets all touch devices that are captured to this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.TouchesCapturedWithin">
      <summary>Gets all touch devices that are captured to this element or any child elements in its visual tree. </summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.TouchesDirectlyOver">
      <summary>Gets all touch devices that are over this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</returns>
    </member>
    <member name="P:System.Windows.ContentElement.TouchesOver">
      <summary>Gets all touch devices that are over this element or any child elements in its visual tree.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchLeave">
      <summary>Occurs when a touch moves from inside to outside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.ContentElement.TouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.ContentElement.TouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.ContentElement.TouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.ContentElement.TouchUp" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.ContentOperations">
      <summary>Provides static utility methods for getting or setting the position of a <see cref="T:System.Windows.ContentElement" /> in an element tree.</summary>
    </member>
    <member name="M:System.Windows.ContentOperations.GetParent(System.Windows.ContentElement)">
      <summary>Gets the parent element of the specified <see cref="T:System.Windows.ContentElement" />.</summary>
      <returns>The parent element in the current tree.</returns>
      <param name="reference">The <see cref="T:System.Windows.ContentElement" /> to get the parent from.</param>
    </member>
    <member name="M:System.Windows.ContentOperations.SetParent(System.Windows.ContentElement,System.Windows.DependencyObject)">
      <summary>Sets the parent element of the provided <see cref="T:System.Windows.ContentElement" />.</summary>
      <param name="reference">The <see cref="T:System.Windows.ContentElement" /> to reparent.</param>
      <param name="parent">The new parent element.</param>
    </member>
    <member name="T:System.Windows.CultureInfoIetfLanguageTagConverter">
      <summary>Converts instances of <see cref="T:System.Globalization.CultureInfo" /> to and from other data types.</summary>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> can convert from a given type.</summary>
      <returns>true if <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> can convert; otherwise, false. </returns>
      <param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> value.</param>
      <param name="sourceType">The <see cref="T:System.Type" /> being queried for conversion support.</param>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> can convert to a given type.</summary>
      <returns>true if <see cref="T:System.Windows.CultureInfoIetfLanguageTagConverter" /> can convert; otherwise, false. </returns>
      <param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> value.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> being queried for conversion support.</param>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a given object type to a <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
      <param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> value.</param>
      <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo" /> object whose value is respected during conversion.</param>
      <param name="source">The <see cref="T:System.Type" /> being converted.</param>
    </member>
    <member name="M:System.Windows.CultureInfoIetfLanguageTagConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Globalization.CultureInfo" /> object to a given object type.</summary>
      <returns>A <see cref="T:System.Object" />.</returns>
      <param name="typeDescriptorContext">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> value.</param>
      <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo" /> object whose value is respected during conversion.</param>
      <param name="value">The object that represents the <see cref="T:System.Globalization.CultureInfo" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> of the returned converted object.</param>
    </member>
    <member name="T:System.Windows.DataFormat">
      <summary>Represents a data format by using a format name and numeric ID.</summary>
    </member>
    <member name="M:System.Windows.DataFormat.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataFormat" /> class.</summary>
      <param name="name">The name for the data format.</param>
      <param name="id">The integer ID for the data format.</param>
    </member>
    <member name="P:System.Windows.DataFormat.Id">
      <summary>Gets the numeric ID of the data format.</summary>
      <returns>The numeric ID of the data format.</returns>
    </member>
    <member name="P:System.Windows.DataFormat.Name">
      <summary>Gets the name of the data format.</summary>
      <returns>The name of the data format.</returns>
    </member>
    <member name="T:System.Windows.DataFormats">
      <summary>Provides a set of predefined data format names that can be used to identify data formats available in the clipboard or drag-and-drop operations.</summary>
    </member>
    <member name="F:System.Windows.DataFormats.Bitmap">
      <summary>Specifies a Microsoft Windows bitmap data format.</summary>
      <returns>A string denoting the Windows bitmap data format: "Bitmap".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.CommaSeparatedValue">
      <summary>Specifies a comma-separated value (CSV) data format.</summary>
      <returns>A string denoting the comma-separated value data format: "CSV".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Dib">
      <summary>Specifies the device-independent bitmap (DIB) data format.</summary>
      <returns>A string denoting the DIB data format: "DeviceIndependentBitmap".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Dif">
      <summary>Specifies the Windows Data Interchange Format (DIF) data format.</summary>
      <returns>A string denoting the DIF data format: "DataInterchangeFormat".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.EnhancedMetafile">
      <summary>Specifies the Windows enhanced metafile format.</summary>
      <returns>A string denoting the Windows enhanced metafile format: "EnhancedMetafile".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.FileDrop">
      <summary>Specifies the Windows file drop format.</summary>
      <returns>A string denoting the Windows file drop format; "FileDrop".</returns>
    </member>
    <member name="M:System.Windows.DataFormats.GetDataFormat(System.Int32)">
      <summary>Returns a <see cref="T:System.Windows.DataFormat" /> object that defines a name and numeric ID for the specified data format. The desired data format is specified by numeric ID.</summary>
      <returns>A <see cref="T:System.Windows.DataFormat" /> object that contains the numeric ID and the name of the requested data format.</returns>
      <param name="id">The numeric ID of the data format to request a <see cref="T:System.Windows.DataFormat" /> object for.</param>
    </member>
    <member name="M:System.Windows.DataFormats.GetDataFormat(System.String)">
      <summary>Returns a <see cref="T:System.Windows.DataFormat" /> object that defines a name and numeric ID for the specified data format. The desired data format is specified by name (a string).</summary>
      <returns>A <see cref="T:System.Windows.DataFormat" /> object that contains the numeric ID and the name of the requested data format.</returns>
      <param name="format">The name of the data format to request a <see cref="T:System.Windows.DataFormat" /> object for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="F:System.Windows.DataFormats.Html">
      <summary>Specifies the HTML data format.</summary>
      <returns>A string denoting the HTML data format: "HTML Format".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Locale">
      <summary>Specifies the Windows locale (culture) data format.</summary>
      <returns>A string denoting the Windows locale format: "Locale".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.MetafilePicture">
      <summary>Specifies the Windows metafile picture data format.</summary>
      <returns>A string denoting the Windows metafile picture data format: "MetaFilePict".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.OemText">
      <summary>Specifies the standard Windows OEM text data format.</summary>
      <returns>A string denoting the Windows OEM text data format: "OEMText".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Palette">
      <summary>Specifies the Windows palette data format.</summary>
      <returns>A string denoting the Windows palette data format: "Palette".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.PenData">
      <summary>Specifies the Windows pen data format.</summary>
      <returns>A string denoting the Windows pen data format: "PenData".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Riff">
      <summary>Specifies the Resource Interchange File Format (RIFF) audio data format.</summary>
      <returns>A string denoting the RIFF audio data format: "RiffAudio".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Rtf">
      <summary>Specifies the Rich Text Format (RTF) data format.</summary>
      <returns>A string denoting the RTF data format: "Rich Text Format".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Serializable">
      <summary>Specifies a data format that encapsulates any type of serializable data objects.</summary>
      <returns>A string denoting a serializable data format: "PersistentObject".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.StringFormat">
      <summary>Specifies the common language runtime (CLR) string class data format.</summary>
      <returns>A string denoting the CLR string class data format: "System.String".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.SymbolicLink">
      <summary>Specifies the Windows symbolic link data format.</summary>
      <returns>A string denoting the Windows symbolic link data format: "SymbolicLink".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Text">
      <summary>Specifies the ANSI text data format.</summary>
      <returns>A string denoting the ANSI text data format: "Text".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Tiff">
      <summary>Specifies the Tagged Image File Format (TIFF) data format.</summary>
      <returns>A string denoting the TIFF data format: "TaggedImageFileFormat".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.UnicodeText">
      <summary>Specifies the Unicode text data format.</summary>
      <returns>A string denoting the Unicode text data format: "UnicodeText".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.WaveAudio">
      <summary>Specifies the wave audio data format.</summary>
      <returns>A string denoting the wave audio format: "WaveAudio".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.Xaml">
      <summary>Specifies the Extensible Application Markup Language (XAML) data format.</summary>
      <returns>A string denoting the XAML data format: "Xaml".</returns>
    </member>
    <member name="F:System.Windows.DataFormats.XamlPackage">
      <summary>Specifies the Extensible Application Markup Language (XAML) package data format.</summary>
      <returns>A string denoting the XAML data format: "XamlPackage".</returns>
    </member>
    <member name="T:System.Windows.DataObject">
      <summary>Provides a basic implementation of the <see cref="T:System.Windows.IDataObject" /> interface, which defines a format-independent mechanism for transferring data.</summary>
    </member>
    <member name="M:System.Windows.DataObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class.</summary>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class that contains the specified data.</summary>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="data" /> references a <see cref="T:System.Windows.DataObject" /> object.</exception>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class that contains the specified data and its associated format; the format is specified by a string.</summary>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the       <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.String,System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class that contains the specified data and its associated format; the format is specified by a string. This overload includes a Boolean flag to indicate whether the data may be converted to another format on retrieval.</summary>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">The data to store in this data object.</param>
      <param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.#ctor(System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DataObject" /> class that contains the specified data and its associated format; the data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <param name="format">A <see cref="T:System.Type" /> that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">The data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.AddCopyingHandler(System.Windows.DependencyObject,System.Windows.DataObjectCopyingEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.DataObject.Copying" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to add.</param>
    </member>
    <member name="M:System.Windows.DataObject.AddPastingHandler(System.Windows.DependencyObject,System.Windows.DataObjectPastingEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.DataObject.Pasting" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to add.</param>
    </member>
    <member name="M:System.Windows.DataObject.AddSettingDataHandler(System.Windows.DependencyObject,System.Windows.DataObjectSettingDataEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.DataObject.SettingData" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to add.</param>
    </member>
    <member name="M:System.Windows.DataObject.ContainsAudio">
      <summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format.</summary>
      <returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DataObject.ContainsFileDropList">
      <summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.FileDrop" /> data format.</summary>
      <returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.FileDrop" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DataObject.ContainsImage">
      <summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> data format.</summary>
      <returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DataObject.ContainsText">
      <summary>Queries a data object for the presence of data in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> format.</summary>
      <returns>true if the data object contains data in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data format; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.DataObject.ContainsText(System.Windows.TextDataFormat)">
      <summary>Queries a data object for the presence of data in a text data format.</summary>
      <returns>true if the data object contains data in a text data format; otherwise, false.</returns>
      <param name="format">A member of the <see cref="T:System.Windows.TextDataFormat" /> enumeration that specifies the text data format to query for.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="format" /> does not specify a valid member of <see cref="T:System.Windows.TextDataFormat" />.</exception>
    </member>
    <member name="E:System.Windows.DataObject.Copying">
      <summary>Occurs when the associated dependency object has prepared appropriate data formats that represent the copy selection, added the copy selection formats to a <see cref="T:System.Windows.DataObject" />, and is ready to either place the <see cref="T:System.Windows.DataObject" /> on the <see cref="T:System.Windows.Clipboard" /> or begin a drag-and-drop operation.</summary>
    </member>
    <member name="F:System.Windows.DataObject.CopyingEvent">
      <summary>Identifies the <see cref="E:System.Windows.DataObject.Copying" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.DataObject.Copying" />  attached event.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetAudioStream">
      <summary>Returns a stream that contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> data format.</summary>
      <returns>A stream that contains data in the <see cref="F:System.Windows.DataFormats.WaveAudio" /> format, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.String)">
      <summary>Returns data in a format specified by a string.</summary>
      <returns>An object that contains the data in the specified format, or null if the data is unavailable in the specified format.</returns>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.String,System.Boolean)">
      <summary>Returns a data object in a specified format, optionally converting the data to the specified format.</summary>
      <returns>A data object with the data in the specified format, or null if the data is unavailable in the specified format.If the <paramref name="autoConvert" /> parameter is true and the data cannot be converted to the specified format, or if automatic conversion is disabled (by calling <see cref="M:System.Windows.DataObject.SetData(System.String,System.Object,System.Boolean)" /> with the <paramref name="autoConvert" /> parameter set to false), this method returns null.</returns>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="autoConvert">true to attempt to automatically convert the data to the specified format; false for no data format conversion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetData(System.Type)">
      <summary>Returns a data object in a format specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>A data object with the data in the specified format, or null if the data is unavailable in the specified format.</returns>
      <param name="format">A <see cref="T:System.Type" /> that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.String)">
      <summary>Determines whether the data is available in, or can be converted to, a format specified by a string.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.String,System.Boolean)">
      <summary>Determines whether the data is available in, or can be converted to, a specified format. A Boolean flag indicates whether to check if the data can be converted to the specified format if it is not available in that format.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies the data format to check. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="autoConvert">false to check only for the specified format; true to also check whether data stored in this data object can be converted to the specified format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetDataPresent(System.Type)">
      <summary>Determines whether the data is available in, or can be converted to, a format specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A <see cref="T:System.Type" /> that specifies the data format to check. F or a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.GetFileDropList">
      <summary>Returns a string collection that contains a list of dropped files.</summary>
      <returns>A collection of strings, where each string specifies the name of a file in the list of dropped files, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetFormats">
      <summary>Returns a list of formats in which the data in this data object is stored, or can be converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format that this data object supports.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetFormats(System.Boolean)">
      <summary>Returns a list of formats in which the data in this data object is stored. A Boolean flag indicates whether to also include formats that the data can be automatically converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
      <param name="autoConvert">true to retrieve all formats in which the data in this data object is stored, or can be converted to; false to retrieve only formats in which the data in this data object is stored.</param>
    </member>
    <member name="M:System.Windows.DataObject.GetImage">
      <summary>Returns a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> format.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains data in the <see cref="F:System.Windows.DataFormats.Bitmap" /> format, or null if the data is unavailable in this format.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetText">
      <summary>Returns a string that contains the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data in this data object.</summary>
      <returns>A string that contains the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data, or an empty string if no <see cref="F:System.Windows.DataFormats.UnicodeText" /> data is available.</returns>
    </member>
    <member name="M:System.Windows.DataObject.GetText(System.Windows.TextDataFormat)">
      <summary>Returns a string that contains text data of the specified format in this data object.</summary>
      <returns>A string containing text data in the specified data format, or an empty string if no corresponding text data is available.</returns>
      <param name="format">A member of <see cref="T:System.Windows.TextDataFormat" /> that specifies the specific text data format to retrieve.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="format" /> does not specify a valid member of <see cref="T:System.Windows.TextDataFormat" />.</exception>
    </member>
    <member name="E:System.Windows.DataObject.Pasting">
      <summary>Occurs when the associated dependency object is ready to paste data.</summary>
    </member>
    <member name="F:System.Windows.DataObject.PastingEvent">
      <summary>Identifies the <see cref="E:System.Windows.DataObject.Pasting" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.DataObject.Pasting" />  attached event.</returns>
    </member>
    <member name="M:System.Windows.DataObject.RemoveCopyingHandler(System.Windows.DependencyObject,System.Windows.DataObjectCopyingEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.DataObject.Copying" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to remove.</param>
    </member>
    <member name="M:System.Windows.DataObject.RemovePastingHandler(System.Windows.DependencyObject,System.Windows.DataObjectPastingEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.DataObject.Pasting" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to remove.</param>
    </member>
    <member name="M:System.Windows.DataObject.RemoveSettingDataHandler(System.Windows.DependencyObject,System.Windows.DataObjectSettingDataEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.DataObject.SettingData" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to remove.</param>
    </member>
    <member name="M:System.Windows.DataObject.SetAudio(System.Byte[])">
      <summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio" /> data format) in this data object. The audio data is specified as a byte array.</summary>
      <param name="audioBytes">A byte array that contains audio data to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioBytes" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetAudio(System.IO.Stream)">
      <summary>Stores audio data (<see cref="F:System.Windows.DataFormats.WaveAudio" /> data format) in this data object.  The audio data is specified as a stream.</summary>
      <param name="audioStream">A stream that contains audio data to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="audioStream" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.Object)">
      <summary>Stores the specified data in this data object, automatically determining the data format from the source object type.</summary>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.String,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats; the data format is specified by a string.</summary>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.String,System.Object,System.Boolean)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. This overload includes a Boolean flag to indicate whether the data can be converted to another format on retrieval.</summary>
      <param name="format">A string that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">An object that represents the data to store in this data object.</param>
      <param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetData(System.Type,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats; the data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <param name="format">A <see cref="T:System.Type" /> object that specifies the format for the data. For a set of predefined data formats, see the <see cref="T:System.Windows.DataFormats" /> class.</param>
      <param name="data">An object that represents the data to store in this data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetFileDropList(System.Collections.Specialized.StringCollection)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.FileDrop" /> data in this data object.  The dropped file list is specified as a string collection.</summary>
      <param name="fileDropList">A string collection that contains the dropped file list to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileDropList" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileDropList" /> contains zero strings, or the full path to file specified in the list cannot be resolved.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetImage(System.Windows.Media.Imaging.BitmapSource)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.Bitmap" /> data in this data object.  The image data is specified as a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <param name="image">A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object that contains the image data to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="image" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetText(System.String)">
      <summary>Stores <see cref="F:System.Windows.DataFormats.UnicodeText" /> data, specified as a string, in this data object.</summary>
      <param name="textData">A string that contains the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data to store in the data object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textData" /> is null.</exception>
    </member>
    <member name="M:System.Windows.DataObject.SetText(System.String,System.Windows.TextDataFormat)">
      <summary>Stores text data in this data object. The format of the text data to store is specified with a member of <see cref="T:System.Windows.TextDataFormat" />.</summary>
      <param name="textData">A string that contains the text data to store in the data object.</param>
      <param name="format">A member of <see cref="T:System.Windows.TextDataFormat" /> that specifies the text data format to store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textData" /> is null.</exception>
    </member>
    <member name="E:System.Windows.DataObject.SettingData">
      <summary>Occurs when the associated dependency object attempts to add a new data format to a <see cref="T:System.Windows.DataObject" />.</summary>
    </member>
    <member name="F:System.Windows.DataObject.SettingDataEvent">
      <summary>Identifies the <see cref="E:System.Windows.DataObject.SettingData" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.DataObject.SettingData" /> attached event.</returns>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: </returns>
      <param name="pFormatetc"> A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="advf">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> values that specifies a group of flags for controlling the advisory connection.</param>
      <param name="pAdvSink">A pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> interface on the advisory sink that will receive the change notification.</param>
      <param name="pdwConnection">When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#DUnadvise(System.Int32)">
      <summary>Destroys a notification connection that had been previously established.</summary>
      <param name="dwConnection">A DWORD token that specifies the connection to remove. Use the value returned by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> when the connection was originally established.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <returns>This method supports the standard return value E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe enumerator object is successfully instantiated or there are no connections.OLE_E_ADVISENOTSUPPORTEDThis object does not support advisory notifications.</returns>
      <param name="enumAdvise">When this method returns, contains an <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> that receives the interface pointer to the new enumerator object. If the implementation sets <paramref name="enumAdvise" /> to null, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Creates an object for enumerating the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures for a data object. These structures are used in calls to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> or <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />. </summary>
      <returns>This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:ValueDescriptionS_OKThe enumerator object was successfully created.E_NOTIMPLThe direction specified by the <paramref name="direction" /> parameter is not supported.OLE_S_USEREGRequests that OLE enumerate the formats from the registry.</returns>
      <param name="dwDirection">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> values that specifies the direction of the data.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Provides a standard <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures would return the same data, removing the need for duplicate rendering.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: ValueDescriptionS_OKThe returned <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure is different from the one that was passed.DATA_S_SAMEFORMATETCThe <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures are the same and null is returned in the <paramref name="formatOut" /> parameter.DV_E_LINDEXThere is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCThere is an invalid value for the <paramref name="pFormatetc" /> parameter.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="pformatetcIn">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> member is not significant in this case and should be ignored.</param>
      <param name="pformatetcOut">When this method returns, contains a pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <paramref name="formatetIn" />. The caller must allocate this structure and the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> method must fill in the data. To retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, the caller uses the supplied value of <paramref name="formatOut" />, unless the value supplied is null. This value is null if the method returns DATA_S_SAMEFORMATETC. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. The <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> method, which is called by a data consumer, renders the data described in the specified <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure and transfers it through the specified <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure. The caller then assumes responsibility for releasing the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure.</summary>
      <param name="formatetc">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="medium">When this method returns, contains a pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that indicates the storage medium containing the returned data through its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> member, and the responsibility for releasing the medium through the value of its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> is null, the receiver of the medium is responsible for releasing it; otherwise, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> points to the IUnknown interface on the appropriate object so its Release method can be called. The medium must be allocated and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="formatetc">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, and only the following <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> values are valid: <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" />, or <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. The caller must also free the medium. The implementation of this method must always supply a value of null for the <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member of the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that this parameter points to.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> to get an indication of whether the operation may be successful.</summary>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following: ValueDescriptionS_OKA subsequent call to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> would probably be successful.DV_E_LINDEXAn invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.DV_E_FORMATETCAn invalid value for the <paramref name="pFormatetc" /> parameter.DV_E_TYMEDAn invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> value.DV_E_DVASPECTAn invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> value.OLE_E_NOTRUNNINGThe application is not running.</returns>
      <param name="formatetc">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
    </member>
    <member name="M:System.Windows.DataObject.System#Runtime#InteropServices#ComTypes#IDataObject#SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="pFormatetcIn">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="pmedium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="fRelease">true to specify that the data object called, which implements <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the ReleaseStgMedium function. false to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.</param>
    </member>
    <member name="T:System.Windows.DataObjectCopyingEventArgs">
      <summary>Arguments for the <see cref="T:System.Windows.DataObject" />.<see cref="E:System.Windows.DataObject.Copying" /> event.</summary>
    </member>
    <member name="M:System.Windows.DataObjectCopyingEventArgs.#ctor(System.Windows.IDataObject,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectCopyingEventArgs" />.</summary>
      <param name="dataObject">A <see cref="T:System.Windows.DataObject" /> containing data ready to be copied.</param>
      <param name="isDragDrop">A Boolean value indicating whether the copy is part of a drag-and-drop operation. true to indicate that the copy is part of a drag-and-drop operation; otherwise, false. If this parameter is set to true, the <see cref="E:System.Windows.DataObject.Copying" /> event fires when dragging is initiated.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="dataObject" /> is null.</exception>
    </member>
    <member name="P:System.Windows.DataObjectCopyingEventArgs.DataObject">
      <summary>Gets the data object associated with the <see cref="E:System.Windows.DataObject.Copying" /> event.</summary>
      <returns>The data object associated with the <see cref="E:System.Windows.DataObject.Copying" /> event.</returns>
    </member>
    <member name="T:System.Windows.DataObjectCopyingEventHandler">
      <summary>Represents a method that will handle the <see cref="E:System.Windows.DataObject.Copying" /> attached event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DataObjectEventArgs">
      <summary>Provides an abstract base class for events associated with the <see cref="T:System.Windows.DataObject" /> class.</summary>
    </member>
    <member name="M:System.Windows.DataObjectEventArgs.CancelCommand">
      <summary>Cancels the associated command or operation.</summary>
    </member>
    <member name="P:System.Windows.DataObjectEventArgs.CommandCancelled">
      <summary>Gets a value indicating whether the associated command or operation has been canceled.</summary>
      <returns>true if the command has been canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.DataObjectEventArgs.IsDragDrop">
      <summary>Gets a value indicating whether the associated event is part of a drag-and-drop operation.</summary>
      <returns>true if the associated event is part of a drag-and-drop operation; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.DataObjectPastingEventArgs">
      <summary>Contains arguments for the <see cref="T:System.Windows.DataObject" />.<see cref="E:System.Windows.DataObject.Pasting" /> event.</summary>
    </member>
    <member name="M:System.Windows.DataObjectPastingEventArgs.#ctor(System.Windows.IDataObject,System.Boolean,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectPastingEventArgs" />.</summary>
      <param name="dataObject">A <see cref="T:System.Windows.DataObject" /> containing the data to be pasted.</param>
      <param name="isDragDrop">A Boolean value indicating whether the paste is part of a drag-and-drop operation. true to indicate that the paste is part of a drag-and-drop operation; otherwise, false. If this parameter is set to true, a <see cref="E:System.Windows.DataObject.Pasting" /> event is fired on drop.</param>
      <param name="formatToApply">A string specifying the preferred data format to use for the paste operation. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="dataObject" /> or <paramref name="formatToApply" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Raised when <paramref name="formatToApply" /> specifies a data format that is not present in the data object specified by <paramref name="dataObject" />.</exception>
    </member>
    <member name="P:System.Windows.DataObjectPastingEventArgs.DataObject">
      <summary>Gets or sets a suggested <see cref="T:System.Windows.DataObject" /> to use for the paste operation.</summary>
      <returns>The currently suggested <see cref="T:System.Windows.DataObject" /> to use for the paste operation. Getting this value returns the currently suggested <see cref="T:System.Windows.DataObject" /> for the paste operation.Setting this value specifies a new suggested <see cref="T:System.Windows.DataObject" /> to use for the paste operation.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
      <exception cref="T:System.ArgumentException">Raised when an attempt is made to set this property to a data object that contains no data formats.</exception>
    </member>
    <member name="P:System.Windows.DataObjectPastingEventArgs.FormatToApply">
      <summary>Gets or sets a string specifying the suggested data format to use for the paste operation.</summary>
      <returns>A string specifying the suggested data format to use for the paste operation.Getting this value returns the currently suggested data format to use for the paste operation.Setting this value specifies a new suggested data format to use for the paste operation.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
      <exception cref="T:System.ArgumentException">Raised when an attempt is made to set this property to a data format that is not present in the data object referenced by the <see cref="P:System.Windows.DataObjectPastingEventArgs.DataObject" /> property.</exception>
    </member>
    <member name="P:System.Windows.DataObjectPastingEventArgs.SourceDataObject">
      <summary>Gets a copy of the original data object associated with the paste operation.</summary>
      <returns>A copy of the original data object associated with the paste operation.</returns>
    </member>
    <member name="T:System.Windows.DataObjectPastingEventHandler">
      <summary>Represents a method that will handle the <see cref="E:System.Windows.DataObject.Pasting" /> attached event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DataObjectSettingDataEventArgs">
      <summary>Contains arguments for the <see cref="T:System.Windows.DataObject" />.<see cref="E:System.Windows.DataObject.SettingData" /> event.</summary>
    </member>
    <member name="M:System.Windows.DataObjectSettingDataEventArgs.#ctor(System.Windows.IDataObject,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.DataObjectSettingDataEventArgs" />.</summary>
      <param name="dataObject">The <see cref="T:System.Windows.DataObject" /> to which a new data format is being added.</param>
      <param name="format">A string specifying the new data format that is being added to the accompanying data object. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="dataObject" /> or <paramref name="format" /> is null.</exception>
    </member>
    <member name="P:System.Windows.DataObjectSettingDataEventArgs.DataObject">
      <summary>Gets the <see cref="T:System.Windows.DataObject" /> associated with the <see cref="E:System.Windows.DataObject.SettingData" /> event.</summary>
      <returns>The <see cref="T:System.Windows.DataObject" /> associated with the <see cref="E:System.Windows.DataObject.SettingData" /> event.</returns>
    </member>
    <member name="P:System.Windows.DataObjectSettingDataEventArgs.Format">
      <summary>Gets a string specifying the new data format that is being added to the accompanying data object.</summary>
      <returns>A string specifying the new data format that is being added to the accompanying data object.</returns>
    </member>
    <member name="T:System.Windows.DataObjectSettingDataEventHandler">
      <summary>Represents a method that will handle the <see cref="E:System.Windows.DataObject.SettingData" /> attached event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.DragAction">
      <summary>Specifies how and if a drag-and-drop operation should continue.</summary>
    </member>
    <member name="F:System.Windows.DragAction.Continue">
      <summary>The operation will continue.</summary>
    </member>
    <member name="F:System.Windows.DragAction.Drop">
      <summary>The operation will stop with a drop.</summary>
    </member>
    <member name="F:System.Windows.DragAction.Cancel">
      <summary>The operation is canceled with no drop message.</summary>
    </member>
    <member name="T:System.Windows.DragDrop">
      <summary>Provides helper methods and fields for initiating drag-and-drop operations, including a method to begin a drag-and-drop operation, and facilities for adding and removing drag-and-drop related event handlers.</summary>
    </member>
    <member name="M:System.Windows.DragDrop.AddDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.DragEnter" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.DragLeave" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.DragOver" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.Drop" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.GiveFeedback" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDragOver" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewDrop" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddPreviewQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.AddQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
      <summary>Adds a <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> event handler to a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) to which to add the event handler.</param>
      <param name="handler">A delegate that references the handler method to be added.</param>
    </member>
    <member name="M:System.Windows.DragDrop.DoDragDrop(System.Windows.DependencyObject,System.Object,System.Windows.DragDropEffects)">
      <summary>Initiates a drag-and-drop operation.</summary>
      <returns>One of the <see cref="T:System.Windows.DragDropEffects" /> values that specifies the final effect that was performed during the drag-and-drop operation.</returns>
      <param name="dragSource">A reference to the dependency object that is the source of the data being dragged.</param>
      <param name="data">A data object that contains the data being dragged.</param>
      <param name="allowedEffects">One of the <see cref="T:System.Windows.DragDropEffects" /> values that specifies permitted effects of the drag-and-drop operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dragSource" /> or <paramref name="data" /> is null.</exception>
    </member>
    <member name="E:System.Windows.DragDrop.DragEnter">
      <summary>Occurs when an object is dragged into the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.DragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.DragDrop.DragEnter" />  attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragEnter" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.DragLeave">
      <summary>Occurs when an object is dragged out of the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.DragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragLeave" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragLeave" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.DragOver">
      <summary>Occurs when an object is dragged over the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.DragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragOver" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragOver" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.Drop">
      <summary>Occurs when an object is dropped within the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.DropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.Drop" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.Drop" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.GiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started, and enables the drop target to send feedback information to the drop source.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.GiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GiveFeedback" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewDragEnter">
      <summary>Occurs when an object is dragged into the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewDragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewDragLeave">
      <summary>Occurs when an object is dragged out of the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewDragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewDragOver">
      <summary>Occurs when an object is dragged over the bounds of an element.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewDragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewDrop">
      <summary>Occurs when an object is dropped within the bounds of the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewDropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDrop" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewGiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started, and enables the drop target to send feedback information to the drop source.</summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewGiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.PreviewQueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button states during a drag-and-drop operation, and enables the drop source to cancel the drag-and-drop operation depending on the key/button states. </summary>
    </member>
    <member name="F:System.Windows.DragDrop.PreviewQueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.DragDrop.QueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button states during a drag-and-drop operation, and enables the drop source to cancel the drag-and-drop operation depending on the key/button states. </summary>
    </member>
    <member name="F:System.Windows.DragDrop.QueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" />  attached event</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> attached event.</returns>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.DragEnter" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.DragLeave" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.DragOver" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.Drop" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.GiveFeedback" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewDragEnterHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewDragLeaveHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewDragOverHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDragOver" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewDropHandler(System.Windows.DependencyObject,System.Windows.DragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewDrop" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewGiveFeedbackHandler(System.Windows.DependencyObject,System.Windows.GiveFeedbackEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemovePreviewQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="M:System.Windows.DragDrop.RemoveQueryContinueDragHandler(System.Windows.DependencyObject,System.Windows.QueryContinueDragEventHandler)">
      <summary>Removes a <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> event handler from a specified dependency object.</summary>
      <param name="element">The dependency object (a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />) from which to remove the event handler.</param>
      <param name="handler">A delegate that references the handler method to be removed</param>
    </member>
    <member name="T:System.Windows.DragDropEffects">
      <summary>Specifies the effects of a drag-and-drop operation.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.None">
      <summary>The drop target does not accept the data.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.Copy">
      <summary>The data is copied to the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.Move">
      <summary>The data from the drag source is moved to the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.Link">
      <summary>The data from the drag source is linked to the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.Scroll">
      <summary>Scrolling is about to start or is currently occurring in the drop target.</summary>
    </member>
    <member name="F:System.Windows.DragDropEffects.All">
      <summary>The data is copied, removed from the drag source, and scrolled in the drop target.</summary>
    </member>
    <member name="T:System.Windows.DragDropKeyStates">
      <summary>Specifies the current state of the modifier keys (SHIFT, CTRL, and ALT), as well as the state of the mouse buttons.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.None">
      <summary>No modifier keys or mouse buttons are pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.LeftMouseButton">
      <summary>The left mouse button is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.RightMouseButton">
      <summary>The right mouse button is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.ShiftKey">
      <summary>The shift (SHIFT) key is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.ControlKey">
      <summary>The control (CTRL) key is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.MiddleMouseButton">
      <summary>The middle mouse button is pressed.</summary>
    </member>
    <member name="F:System.Windows.DragDropKeyStates.AltKey">
      <summary>The ALT key is pressed.</summary>
    </member>
    <member name="T:System.Windows.DragEventArgs">
      <summary>Contains arguments relevant to all drag-and-drop events (<see cref="E:System.Windows.DragDrop.DragEnter" />, <see cref="E:System.Windows.DragDrop.DragLeave" />, <see cref="E:System.Windows.DragDrop.DragOver" />, and <see cref="E:System.Windows.DragDrop.Drop" />).</summary>
    </member>
    <member name="P:System.Windows.DragEventArgs.AllowedEffects">
      <summary>Gets a member of the <see cref="T:System.Windows.DragDropEffects" /> enumeration that specifies which operations are allowed by the originator of the drag event.</summary>
      <returns>A member of the <see cref="T:System.Windows.DragDropEffects" /> enumeration that specifies which operations are allowed by the originator of the drag event.</returns>
    </member>
    <member name="P:System.Windows.DragEventArgs.Data">
      <summary>Gets a data object that contains the data associated with the corresponding drag event.</summary>
      <returns>A data object that contains the data associated with the corresponding drag event..</returns>
    </member>
    <member name="P:System.Windows.DragEventArgs.Effects">
      <summary>Gets or sets the target drop-and-drop operation.</summary>
      <returns>A member of the <see cref="T:System.Windows.DragDropEffects" /> enumeration specifying the target drag-and-drop operation.</returns>
    </member>
    <member name="M:System.Windows.DragEventArgs.GetPosition(System.Windows.IInputElement)">
      <summary>Returns a drop point that is relative to a specified <see cref="T:System.Windows.IInputElement" />.</summary>
      <returns>A drop point that is relative to the element specified in <paramref name="relativeTo" />.</returns>
      <param name="relativeTo">An <see cref="T:System.Windows.IInputElement" /> object for which to get a relative drop point.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="relativeTo" /> is null.</exception>
    </member>
    <member name="P:System.Windows.DragEventArgs.KeyStates">
      <summary>Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</summary>
      <returns>One or more members of the <see cref="T:System.Windows.DragDropKeyStates" /> flag enumeration.</returns>
    </member>
    <member name="T:System.Windows.DragEventHandler">
      <summary>Represents a method that will handle drag-and-drop routed events, for example <see cref="E:System.Windows.UIElement.DragEnter" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Duration">
      <summary>Represents the duration of time that a <see cref="T:System.Windows.Media.Animation.Timeline" /> is active.</summary>
    </member>
    <member name="M:System.Windows.Duration.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Duration" /> structure with the supplied <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="timeSpan">Represents the initial time interval of this duration.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="timeSpan" /> is initialized to a negative value.</exception>
    </member>
    <member name="M:System.Windows.Duration.Add(System.Windows.Duration)">
      <summary>Adds the value of the specified instance of <see cref="T:System.Windows.Duration" /> to the value of the current instance.</summary>
      <returns>If both instances of <see cref="T:System.Windows.Duration" /> have values, an instance of <see cref="T:System.Windows.Duration" /> that represents the combined values. Otherwise this method returns null.</returns>
      <param name="duration">An instance of <see cref="T:System.Windows.Duration" /> that represents the value of the current instance plus <paramref name="duration" />.</param>
    </member>
    <member name="P:System.Windows.Duration.Automatic">
      <summary>Gets a <see cref="T:System.Windows.Duration" /> value that is automatically determined.</summary>
      <returns>A <see cref="T:System.Windows.Duration" /> initialized to an automatic value.</returns>
    </member>
    <member name="M:System.Windows.Duration.Compare(System.Windows.Duration,System.Windows.Duration)">
      <summary>Compares one <see cref="T:System.Windows.Duration" /> value to another.</summary>
      <returns>If <paramref name="t1" /> is less than <paramref name="t2" />, a negative value that represents the difference. If <paramref name="t1" /> is equal to <paramref name="t2" />, zero. If <paramref name="t1" /> is greater than <paramref name="t2" />, a positive value that represents the difference.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Object)">
      <summary>Determines whether a specified object is equal to an instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>true if value is equal to the current instance of Duration; otherwise, false.</returns>
      <param name="value">Object to check for equality.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration)">
      <summary>Determines whether a specified <see cref="T:System.Windows.Duration" /> is equal to this instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>true if <paramref name="duration" /> is equal to the current instance of <see cref="T:System.Windows.Duration" />; otherwise, false.</returns>
      <param name="duration">Instance of <see cref="T:System.Windows.Duration" /> to check for equality.</param>
    </member>
    <member name="M:System.Windows.Duration.Equals(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether two instances of <see cref="T:System.Windows.Duration" /> are equal.</summary>
      <returns>true if <paramref name="t1" /> is equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">First instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">Second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="P:System.Windows.Duration.Forever">
      <summary>Gets a <see cref="T:System.Windows.Duration" /> value that represents an infinite interval.</summary>
      <returns>A <see cref="T:System.Windows.Duration" /> initialized to a forever value.</returns>
    </member>
    <member name="M:System.Windows.Duration.GetHashCode">
      <summary>Gets a hash code for this instance.</summary>
      <returns>A signed 32-bit integer hash code.</returns>
    </member>
    <member name="P:System.Windows.Duration.HasTimeSpan">
      <summary>Gets a value that indicates if this <see cref="T:System.Windows.Duration" /> represents a <see cref="T:System.TimeSpan" /> value.</summary>
      <returns>True if this Duration is a <see cref="T:System.TimeSpan" /> value; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Duration.op_Addition(System.Windows.Duration,System.Windows.Duration)">
      <summary>Adds two instances of <see cref="T:System.Windows.Duration" /> together.</summary>
      <returns>If both instances of <see cref="T:System.Windows.Duration" /> have <see cref="T:System.TimeSpan" /> values, this method returns the sum of those two values. If either value is set to <see cref="P:System.Windows.Duration.Automatic" />, the method returns <see cref="P:System.Windows.Duration.Automatic" />. If either value is set to <see cref="P:System.Windows.Duration.Forever" />, the method returns <see cref="P:System.Windows.Duration.Forever" />.If either <paramref name="t1" /> or <paramref name="t2" /> has no value, this method returns null.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to add.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to add.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Equality(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether two instances of <see cref="T:System.Windows.Duration" /> are equal.</summary>
      <returns>true if both instances of <see cref="T:System.Windows.Duration" /> have values and are equal, or if both instances of <see cref="T:System.Windows.Duration" /> are null. Otherwise, this method returns false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if one instance of <see cref="T:System.Windows.Duration" /> is greater than another.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_GreaterThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Duration" /> is greater than or equal to another instance.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Implicit(System.TimeSpan)~System.Windows.Duration">
      <summary>Implicitly creates a <see cref="T:System.Windows.Duration" /> from a given <see cref="T:System.TimeSpan" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Duration" />.</returns>
      <param name="timeSpan">
        <see cref="T:System.TimeSpan" /> from which an instance of <see cref="T:System.Windows.Duration" /> is implicitly created.</param>
      <exception cref="T:System.ArgumentException">Occurs when <see cref="T:System.TimeSpan" /> is negative.</exception>
    </member>
    <member name="M:System.Windows.Duration.op_Inequality(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if two instances of <see cref="T:System.Windows.Duration" /> are not equal.</summary>
      <returns>true if exactly one of <paramref name="t1" /> or <paramref name="t2" /> represent a value, or if they both represent values that are not equal; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThan(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if the value of one instance of <see cref="T:System.Windows.Duration" /> is less than the value of another instance.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_LessThanOrEqual(System.Windows.Duration,System.Windows.Duration)">
      <summary>Determines if the value of one instance of <see cref="T:System.Windows.Duration" /> is less than or equal to the value of another instance.</summary>
      <returns>true if both <paramref name="t1" /> and <paramref name="t2" /> have values and <paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
      <param name="t2">The second instance of <see cref="T:System.Windows.Duration" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Duration.op_Subtraction(System.Windows.Duration,System.Windows.Duration)">
      <summary>Subtracts the value of one instance of <see cref="T:System.Windows.Duration" /> from another.</summary>
      <returns>If both instances of <see cref="T:System.Windows.Duration" /> have values, an instance of <see cref="T:System.Windows.Duration" /> that represents the value of <paramref name="t1" /> minus <paramref name="t2" />. If <paramref name="t1" /> has a value of <see cref="P:System.Windows.Duration.Forever" /> and <paramref name="t2" /> has a value of <see cref="P:System.Windows.Duration.TimeSpan" />, this method returns <see cref="P:System.Windows.Duration.Forever" />. Otherwise this method returns null.</returns>
      <param name="t1">The first instance of <see cref="T:System.Windows.Duration" />.</param>
      <param name="t2">The instance of <see cref="T:System.Windows.Duration" /> to subtract.</param>
    </member>
    <member name="M:System.Windows.Duration.op_UnaryPlus(System.Windows.Duration)">
      <summary>Returns the specified instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>An instance of <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The instance of <see cref="T:System.Windows.Duration" /> to get.</param>
    </member>
    <member name="M:System.Windows.Duration.Plus(System.Windows.Duration)">
      <summary>Returns the specified instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>An instance of <see cref="T:System.Windows.Duration" />.</returns>
      <param name="duration">The instance of <see cref="T:System.Windows.Duration" /> to get.</param>
    </member>
    <member name="M:System.Windows.Duration.Subtract(System.Windows.Duration)">
      <summary>Subtracts the value of the specified instance of <see cref="T:System.Windows.Duration" /> from this instance.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Duration" /> whose value is the result of this instance minus the value of <paramref name="duration" />.</returns>
      <param name="duration">The instance of <see cref="T:System.Windows.Duration" /> to subtract from the current instance.</param>
    </member>
    <member name="P:System.Windows.Duration.TimeSpan">
      <summary>Gets the <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> value that this <see cref="T:System.Windows.Duration" /> represents.</returns>
      <exception cref="T:System.InvalidOperationException">Occurs if <see cref="T:System.Windows.Duration" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Duration.ToString">
      <summary>Converts an instance of <see cref="T:System.Windows.Duration" /> to a <see cref="T:System.String" /> representation.</summary>
      <returns>A <see cref="T:System.String" /> representation of this instance of <see cref="T:System.Windows.Duration" />.</returns>
    </member>
    <member name="T:System.Windows.DurationConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Duration" /> to and from other type representations.</summary>
    </member>
    <member name="M:System.Windows.DurationConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.DurationConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.DurationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if conversion from a given type to an instance of <see cref="T:System.Windows.Duration" /> is possible.</summary>
      <returns>true if <paramref name="t" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="td">Context information used for conversion.</param>
      <param name="t">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.DurationConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if conversion to a specified type is possible.</summary>
      <returns>true if <paramref name="destinationType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">Context information used for conversion.</param>
      <param name="destinationType">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.DurationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a given string value to an instance of <see cref="T:System.Windows.Duration" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Duration" />.</returns>
      <param name="td">Context information used for conversion.</param>
      <param name="cultureInfo">Cultural information that is respected during conversion.</param>
      <param name="value">String value to convert to an instance of <see cref="T:System.Windows.Duration" />.</param>
    </member>
    <member name="M:System.Windows.DurationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts an instance of <see cref="T:System.Windows.Duration" /> to another type.</summary>
      <returns>A new instance of the <paramref name="destinationType" />.</returns>
      <param name="context">Context information used for conversion.</param>
      <param name="cultureInfo">Cultural information that is respected during conversion.</param>
      <param name="value">Duration value to convert from.</param>
      <param name="destinationType">Type being evaluated for conversion.</param>
    </member>
    <member name="T:System.Windows.EventManager">
      <summary>Provides event-related utility methods that register routed events for class owners and add class handlers. </summary>
    </member>
    <member name="M:System.Windows.EventManager.GetRoutedEvents">
      <summary>Returns identifiers for routed events that have been registered to the event system. </summary>
      <returns>An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</returns>
    </member>
    <member name="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)">
      <summary>Finds all routed event identifiers for events that are registered with the provided owner type. </summary>
      <returns>An array of matching routed event identifiers if any match is found; otherwise, null.</returns>
      <param name="ownerType">The type to start the search with. Base classes are included in the search.</param>
    </member>
    <member name="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)">
      <summary>Registers a class handler for a particular routed event. </summary>
      <param name="classType">The type of the class that is declaring class handling.</param>
      <param name="routedEvent">The routed event identifier of the event to handle.</param>
      <param name="handler">A reference to the class handler implementation.</param>
    </member>
    <member name="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary> Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</summary>
      <param name="classType">The type of the class that is declaring class handling.</param>
      <param name="routedEvent">The routed event identifier of the event to handle.</param>
      <param name="handler">A reference to the class handler implementation.</param>
      <param name="handledEventsToo">true to invoke this class handler even if arguments of the routed event have been marked as handled; false to retain the default behavior of not invoking the handler on any marked-handled event.</param>
    </member>
    <member name="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)">
      <summary>Registers a new routed event with the Windows Presentation Foundation (WPF) event system. </summary>
      <returns>The identifier for the newly registered routed event. This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event. The routed event identifier is also used for other event system APIs.</returns>
      <param name="name">The name of the routed event. The name must be unique within the owner type and cannot be null or an empty string.</param>
      <param name="routingStrategy">The routing strategy of the event as a value of the enumeration.</param>
      <param name="handlerType">The type of the event handler. This must be a delegate type and cannot be null.</param>
      <param name="ownerType">The owner class type of the routed event. This cannot be null.</param>
    </member>
    <member name="T:System.Windows.EventPrivateKey">
      <summary>Provides unique identification for events whose handlers are stored into an internal hashtable. </summary>
    </member>
    <member name="M:System.Windows.EventPrivateKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.EventPrivateKey" /> class. </summary>
    </member>
    <member name="T:System.Windows.EventRoute">
      <summary>Represents the container for the route to be followed by a routed event. </summary>
    </member>
    <member name="M:System.Windows.EventRoute.#ctor(System.Windows.RoutedEvent)">
      <summary> Initializes an instance of the <see cref="T:System.Windows.EventRoute" /> class. </summary>
      <param name="routedEvent">The non-NULL event identifier to be associated with this event route.</param>
    </member>
    <member name="M:System.Windows.EventRoute.Add(System.Object,System.Delegate,System.Boolean)">
      <summary> Adds the specified handler for the specified target to the route. </summary>
      <param name="target">Specifies the target object of which the handler is to be added to the route.</param>
      <param name="handler">Specifies the handler to be added to the route.</param>
      <param name="handledEventsToo">Indicates whether or not the listener detects events that have already been handled.</param>
    </member>
    <member name="M:System.Windows.EventRoute.PeekBranchNode">
      <summary>Returns the top-most element on the event route stack at which two logical trees diverge.</summary>
      <returns>The top-most element on the event route stack at which two logical trees diverge.</returns>
    </member>
    <member name="M:System.Windows.EventRoute.PeekBranchSource">
      <summary>Returns the source for the top-most element on the event route stack at which two logical trees diverge.</summary>
      <returns>The source for the top-most element on the event route stack at which two logical trees diverge.</returns>
    </member>
    <member name="M:System.Windows.EventRoute.PopBranchNode">
      <summary>Returns the top-most node on the event route stack at which two logical trees diverge.</summary>
      <returns>The top-most node on the event route stack at which two logical trees diverge.</returns>
    </member>
    <member name="M:System.Windows.EventRoute.PushBranchNode(System.Object,System.Object)">
      <summary>Adds the top-most node to the event route stack at which two logical trees diverge.</summary>
      <param name="node">The top-most element on the event route stack at which two logical trees diverge.</param>
      <param name="source">The source for the top-most element on the event route stack at which two logical trees diverge.</param>
    </member>
    <member name="T:System.Windows.FlowDirection">
      <summary>Defines constants that specify the content flow direction for text and user interface (UI) elements. </summary>
    </member>
    <member name="F:System.Windows.FlowDirection.LeftToRight">
      <summary>Indicates that content should flow from left to right.</summary>
    </member>
    <member name="F:System.Windows.FlowDirection.RightToLeft">
      <summary>Indicates that content should flow from right to left.</summary>
    </member>
    <member name="T:System.Windows.FontCapitals">
      <summary>Describes the capital letter style for a <see cref="T:System.Windows.Documents.Typography" /> object.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.Normal">
      <summary>Capital letters render normally.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.AllSmallCaps">
      <summary>Both capital and lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.SmallCaps">
      <summary>Lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.AllPetiteCaps">
      <summary>Both capital and lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height. Petite capitals are smaller than small capitals.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.PetiteCaps">
      <summary>Lowercase letters are replaced with a glyph form of an uppercase letter with the same approximate height. Petite capitals are smaller than small capitals.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.Unicase">
      <summary>Capital letters display in unicase. Unicase fonts render both upper and lowercase letters in a mixture of upper and lowercase glyphs determined by the type designer.</summary>
    </member>
    <member name="F:System.Windows.FontCapitals.Titling">
      <summary>Glyph forms are substituted with a typographic form specifically designed for titles.</summary>
    </member>
    <member name="T:System.Windows.FontEastAsianLanguage">
      <summary>Provides a mechanism for the user to select font-specific versions of glyphs for a specified East Asian writing system or language. </summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Normal">
      <summary>No font-specific glyph versions are applied.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Jis78">
      <summary>Replaces default Japanese glyphs with the corresponding forms from the JIS78 specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Jis83">
      <summary>Replaces default Japanese glyphs with the corresponding forms from the JIS83 specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Jis90">
      <summary>Replaces default Japanese glyphs with the corresponding forms from the JIS90 specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Jis04">
      <summary>Replaces default Japanese glyphs with the corresponding forms from the JIS04 specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.HojoKanji">
      <summary>Replaces default glyphs with the corresponding forms from the Hojo Kanji specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.NlcKanji">
      <summary>Replaces default glyphs with the corresponding forms from the NLC Kanji specification.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Simplified">
      <summary>Replaces traditional Chinese or Japanese forms with their corresponding simplified forms.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.Traditional">
      <summary>Replaces simplified Chinese or Japanese forms with their corresponding traditional forms.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianLanguage.TraditionalNames">
      <summary>Replaces simplified Kanji forms with their corresponding traditional forms. This glyph set is explicitly limited to the traditional forms considered proper for use in personal names.</summary>
    </member>
    <member name="T:System.Windows.FontEastAsianWidths">
      <summary>Provides a mechanism for the user to select glyphs of different width styles.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Normal">
      <summary>Default width style.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Proportional">
      <summary>Replaces uniform width glyphs with proportionally spaced glyphs.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Full">
      <summary>Replaces uniform width glyphs with full width (usually em) glyphs.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Half">
      <summary>Replaces uniform width glyphs with half width (half em) glyphs.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Third">
      <summary>Replaces uniform width glyphs with one-third width (one-third em) glyphs.</summary>
    </member>
    <member name="F:System.Windows.FontEastAsianWidths.Quarter">
      <summary>Replaces uniform width glyphs with one-quarter width (one-quarter em) glyphs.</summary>
    </member>
    <member name="T:System.Windows.FontFraction">
      <summary>Describes the fraction style for a <see cref="T:System.Windows.Documents.Typography" /> object.</summary>
    </member>
    <member name="F:System.Windows.FontFraction.Normal">
      <summary>Default style is used.</summary>
    </member>
    <member name="F:System.Windows.FontFraction.Slashed">
      <summary>Slashed fraction style is used.</summary>
    </member>
    <member name="F:System.Windows.FontFraction.Stacked">
      <summary>Stacked fraction style is used.</summary>
    </member>
    <member name="T:System.Windows.FontNumeralAlignment">
      <summary>Describes the numeral alignment for a <see cref="T:System.Windows.Documents.Typography" /> object.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralAlignment.Normal">
      <summary>Default numeral alignment is used.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralAlignment.Proportional">
      <summary>Proportional width alignment is used.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralAlignment.Tabular">
      <summary>Tabular alignment is used.</summary>
    </member>
    <member name="T:System.Windows.FontNumeralStyle">
      <summary>Describes the numeral style for a <see cref="T:System.Windows.Documents.Typography" /> object.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralStyle.Normal">
      <summary>Default numeral style is used.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralStyle.Lining">
      <summary>Lining numeral style is used. Replaces default glyphs with numeric forms of even height.</summary>
    </member>
    <member name="F:System.Windows.FontNumeralStyle.OldStyle">
      <summary>Old style numeral style is used. Replaces default glyphs with a figure style that matches lowercase letters in height and color.</summary>
    </member>
    <member name="T:System.Windows.FontStretch">
      <summary>Describes the degree to which a font has been stretched compared to the normal aspect ratio of that font.</summary>
    </member>
    <member name="M:System.Windows.FontStretch.Compare(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStretch" /> objects.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the relationship between the two instances of <see cref="T:System.Windows.FontStretch" />.</returns>
      <param name="left">The first <see cref="T:System.Windows.FontStretch" /> object to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.FontStretch" /> object to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.Equals(System.Object)">
      <summary>Compares a <see cref="T:System.Object" /> with the current <see cref="T:System.Windows.FontStretch" /> object.</summary>
      <returns>true if two instances are equal; otherwise, false.</returns>
      <param name="obj">The instance of the <see cref="T:System.Object" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStretch.Equals(System.Windows.FontStretch)">
      <summary>Compares a <see cref="T:System.Windows.FontStretch" /> object with the current <see cref="T:System.Windows.FontStretch" /> object.</summary>
      <returns>true if two instances are equal; otherwise, false.</returns>
      <param name="obj">The instance of the <see cref="T:System.Windows.FontStretch" /> object to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStretch.FromOpenTypeStretch(System.Int32)">
      <summary>Creates a new instance of <see cref="T:System.Windows.FontStretch" /> that corresponds to the OpenType usStretchClass value. </summary>
      <returns>A new instance of <see cref="T:System.Windows.FontStretch" />.</returns>
      <param name="stretchValue">An integer value between one and nine that corresponds to the usStretchValue definition in the OpenType specification. </param>
    </member>
    <member name="M:System.Windows.FontStretch.GetHashCode">
      <summary>Retrieves the hash code for this object.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the hash code for the object.</returns>
    </member>
    <member name="M:System.Windows.FontStretch.op_Equality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStretch" /> for equality.</summary>
      <returns>true when the specified <see cref="T:System.Windows.FontStretch" /> objects are equal; otherwise, false.</returns>
      <param name="left">First instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">Second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_GreaterThan(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine if one instance is greater than the other.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">First instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">Second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_GreaterThanOrEqual(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine whether one instance is greater than or equal to the other.</summary>
      <returns>true if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_Inequality(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine inequality.</summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_LessThan(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine whether one instance is less than the other. </summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.op_LessThanOrEqual(System.Windows.FontStretch,System.Windows.FontStretch)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStretch" /> to determine whether one instance is less than or equal to the other.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStretch" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStretch.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.FontStretch.ToOpenTypeStretch">
      <summary>Returns a value that represents the OpenType usStretchClass for this <see cref="T:System.Windows.FontStretch" /> object. </summary>
      <returns>An integer value between 1 and 999 that corresponds to the usStretchClass definition in the OpenType specification.</returns>
    </member>
    <member name="M:System.Windows.FontStretch.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the current <see cref="T:System.Windows.FontStretch" /> object based on the current culture.</summary>
      <returns>A <see cref="T:System.String" /> value representation of the object.</returns>
    </member>
    <member name="T:System.Windows.FontStretchConverter">
      <summary>Converts instances of <see cref="T:System.Windows.FontStretch" /> to and from other type representations.</summary>
    </member>
    <member name="M:System.Windows.FontStretchConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FontStretchConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.FontStretchConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if conversion from a specified type to a <see cref="T:System.Windows.FontStretch" /> value is possible.</summary>
      <returns>true if <paramref name="t" /> can create a <see cref="T:System.Windows.FontStretch" />; otherwise, false.</returns>
      <param name="td">Context information of a type.</param>
      <param name="t">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.FontStretchConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.FontStretch" /> can be converted to a different type.</summary>
      <returns>true if the converter can convert <see cref="T:System.Windows.FontStretch" /> to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Context information of a type.</param>
      <param name="destinationType">The desired type that that this instance of <see cref="T:System.Windows.FontStretch" /> is being evaluated for conversion to.</param>
    </member>
    <member name="M:System.Windows.FontStretchConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.FontStretch" /> created from the converted <paramref name="value" />.</returns>
      <param name="td">Context information of a type.</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null or is not a valid type for conversion.</exception>
    </member>
    <member name="M:System.Windows.FontStretchConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.FontStretch" /> to a specified type.</summary>
      <returns>The object created from the converted instance of <see cref="T:System.Windows.FontStretch" />.</returns>
      <param name="context">Context information of a type.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The instance of <see cref="T:System.Windows.FontStretch" /> to convert.</param>
      <param name="destinationType">The type this instance of <see cref="T:System.Windows.FontStretch" /> is converted to.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null- or -<paramref name="value" /> is not an instance of <see cref="T:System.Windows.FontStretch" />- or -<paramref name="destinationType" /> is not a valid destination type.</exception>
    </member>
    <member name="T:System.Windows.FontStretches">
      <summary>Provides a set of static predefined <see cref="T:System.Windows.FontStretch" /> values.</summary>
    </member>
    <member name="P:System.Windows.FontStretches.Condensed">
      <summary>Specifies a condensed <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a condensed <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Expanded">
      <summary>Specifies an expanded <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an expanded <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraCondensed">
      <summary>Specifies an extra-condensed <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an extra-condensed <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.ExtraExpanded">
      <summary>Specifies an extra-expanded <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an extra-expanded <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Medium">
      <summary>Specifies a medium <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a medium <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.Normal">
      <summary>Specifies a normal <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a normal <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiCondensed">
      <summary>Specifies a semi-condensed <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a semi-condensed <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.SemiExpanded">
      <summary>Specifies a semi-expanded <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents a semi-expanded <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraCondensed">
      <summary>Specifies an ultra-condensed <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an ultra-condensed <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="P:System.Windows.FontStretches.UltraExpanded">
      <summary>Specifies an ultra-expanded <see cref="T:System.Windows.FontStretch" />.</summary>
      <returns>A value that represents an ultra-expanded <see cref="T:System.Windows.FontStretch" />.</returns>
    </member>
    <member name="T:System.Windows.FontStyle">
      <summary>Defines a structure that represents the style of a font face as normal, italic, or oblique.</summary>
    </member>
    <member name="M:System.Windows.FontStyle.Equals(System.Object)">
      <summary>Compares an <see cref="T:System.Object" /> with the current <see cref="T:System.Windows.FontStyle" /> instance for equality.</summary>
      <returns>true to show the two instances are equal; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Object" /> value that represents the <see cref="T:System.Windows.FontStyle" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStyle.Equals(System.Windows.FontStyle)">
      <summary>Compares a <see cref="T:System.Windows.FontStyle" /> with the current <see cref="T:System.Windows.FontStyle" /> instance for equality.</summary>
      <returns>true to show the two instances are equal; otherwise, false.</returns>
      <param name="obj">An instance of <see cref="T:System.Windows.FontStyle" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontStyle.GetHashCode">
      <summary>Retrieves the hash code for this object. </summary>
      <returns>A 32-bit hash code, which is a signed integer.</returns>
    </member>
    <member name="M:System.Windows.FontStyle.op_Equality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontStyle" /> for equality.</summary>
      <returns>true to show the specified <see cref="T:System.Windows.FontStyle" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStyle.op_Inequality(System.Windows.FontStyle,System.Windows.FontStyle)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontStyle" /> to determine inequality.</summary>
      <returns>false to show <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontStyle" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontStyle.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.FontStyle.ToString">
      <summary>Creates a <see cref="T:System.String" /> that represents the current <see cref="T:System.Windows.FontStyle" /> object and is based on the <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> property information.</summary>
      <returns>A <see cref="T:System.String" /> that represents the value of the <see cref="T:System.Windows.FontStyle" /> object, such as "Normal", "Italic", or "Oblique".</returns>
    </member>
    <member name="T:System.Windows.FontStyleConverter">
      <summary>Converts instances of <see cref="T:System.Windows.FontStyle" /> to and from other data types.  </summary>
    </member>
    <member name="M:System.Windows.FontStyleConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FontStyleConverter" />.</summary>
    </member>
    <member name="M:System.Windows.FontStyleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an object of the given type to an instance of <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>true if the converter can convert the provided type to an instance of <see cref="T:System.Windows.FontStyle" />; otherwise, false.</returns>
      <param name="td">Describes the context information of a type.</param>
      <param name="t">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.FontStyleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.FontStyle" /> can be converted to a different type.</summary>
      <returns>true if the converter can convert this instance of <see cref="T:System.Windows.FontStyle" />; otherwise, false.</returns>
      <param name="context">Context information of a type.</param>
      <param name="destinationType">The desired type that that this instance of <see cref="T:System.Windows.FontStyle" /> is being evaluated for conversion to.</param>
    </member>
    <member name="M:System.Windows.FontStyleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.FontStyle" /> created from the converted <paramref name="value" />.</returns>
      <param name="td">Context information of a type.</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is not a valid type for conversion.</exception>
    </member>
    <member name="M:System.Windows.FontStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.FontStyle" /> to a specified type.</summary>
      <returns>The object created from the converted instance of <see cref="T:System.Windows.FontStyle" />.</returns>
      <param name="context">Context information of a type.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The instance of <see cref="T:System.Windows.FontStyle" /> to convert.</param>
      <param name="destinationType">The type this instance of <see cref="T:System.Windows.FontStyle" /> is converted to. </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null-or-<paramref name="value" /> is not an instance of <see cref="T:System.Windows.FontStyle" />-or-<paramref name="destinationType" /> is not a valid destination type.</exception>
    </member>
    <member name="T:System.Windows.FontStyles">
      <summary>Provides a set of static predefined <see cref="T:System.Windows.FontStyle" /> values.</summary>
    </member>
    <member name="P:System.Windows.FontStyles.Italic">
      <summary>Specifies an italic <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>A value that represents an italic <see cref="T:System.Windows.FontStyle" />.</returns>
    </member>
    <member name="P:System.Windows.FontStyles.Normal">
      <summary>Specifies a normal <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>A value that represents a normal <see cref="T:System.Windows.FontStyle" />.</returns>
    </member>
    <member name="P:System.Windows.FontStyles.Oblique">
      <summary>Specifies an oblique <see cref="T:System.Windows.FontStyle" />.</summary>
      <returns>A value that represents an oblique <see cref="T:System.Windows.FontStyle" />.</returns>
    </member>
    <member name="T:System.Windows.FontVariants">
      <summary>Renders variant typographic glyph forms.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Normal">
      <summary>Default font behavior. Font scaling and positioning is normal.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Superscript">
      <summary>Replaces a default glyph with a superscript glyph. Superscript is commonly used for footnotes.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Subscript">
      <summary>Replaces a default glyph with a subscript glyph.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Ordinal">
      <summary>Replaces a default glyph with an ordinal glyph, or it may combine glyph substitution with positioning adjustments for proper placement. Ordinal forms are normally associated with numeric notation of an ordinal word, such as "1st" for "first."</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Inferior">
      <summary>Replaces a default glyph with an inferior glyph, or it may combine glyph substitution with positioning adjustments for proper placement. Inferior forms are typically used in chemical formulas or mathematical notation.</summary>
    </member>
    <member name="F:System.Windows.FontVariants.Ruby">
      <summary>Replaces a default glyph with a smaller Japanese Kana glyph. This is used to clarify the meaning of Kanji, which may be unfamiliar to the reader.</summary>
    </member>
    <member name="T:System.Windows.FontWeight">
      <summary>Refers to the density of a typeface, in terms of the lightness or heaviness of the strokes.</summary>
    </member>
    <member name="M:System.Windows.FontWeight.Compare(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontWeight" />.</summary>
      <returns>An <see cref="T:System.Int32" /> value that indicates the relationship between the two instances of <see cref="T:System.Windows.FontWeight" />. When the return value is less than zero, <paramref name="left" /> is less than <paramref name="right" />. When this value is zero, it indicates that both operands are equal. When the value is greater than zero, it indicates that <paramref name="left" /> is greater than <paramref name="right" />.</returns>
      <param name="left">The first <see cref="T:System.Windows.FontWeight" /> object to compare.</param>
      <param name="right">The second <see cref="T:System.Windows.FontWeight" /> object to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Windows.FontWeight" /> object is equal to a specified object.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontWeight.Equals(System.Windows.FontWeight)">
      <summary>Determines whether the current <see cref="T:System.Windows.FontWeight" /> object is equal to a specified <see cref="T:System.Windows.FontWeight" /> object.</summary>
      <returns>true if the two instances are equal; otherwise, false.</returns>
      <param name="obj">The instance of <see cref="T:System.Windows.FontWeight" /> to compare for equality.</param>
    </member>
    <member name="M:System.Windows.FontWeight.FromOpenTypeWeight(System.Int32)">
      <summary>Creates a new instance of <see cref="T:System.Windows.FontWeight" /> that corresponds to the OpenType usWeightClass value.</summary>
      <returns>A new instance of <see cref="T:System.Windows.FontWeight" />.</returns>
      <param name="weightValue">An integer value between 1 and 999 that corresponds to the usWeightClass definition in the OpenType specification.</param>
    </member>
    <member name="M:System.Windows.FontWeight.GetHashCode">
      <summary>Retrieves the hash code for this object.</summary>
      <returns>A 32-bit hash code, which is a signed integer.</returns>
    </member>
    <member name="M:System.Windows.FontWeight.op_Equality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Compares two instances of <see cref="T:System.Windows.FontWeight" /> for equality.</summary>
      <returns>true if the instances of <see cref="T:System.Windows.FontWeight" /> are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_GreaterThan(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine whether one instance is greater than the other.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_GreaterThanOrEqual(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine whether one instance is greater than or equal to the other.</summary>
      <returns>true if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_Inequality(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine inequality.</summary>
      <returns>false if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_LessThan(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine whether one instance is less than the other.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.op_LessThanOrEqual(System.Windows.FontWeight,System.Windows.FontWeight)">
      <summary>Evaluates two instances of <see cref="T:System.Windows.FontWeight" /> to determine whether one instance is less than or equal to the other.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.FontWeight" /> to compare.</param>
    </member>
    <member name="M:System.Windows.FontWeight.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="M:System.Windows.FontWeight.ToOpenTypeWeight">
      <summary>Returns a value that represents the OpenType usWeightClass for the <see cref="T:System.Windows.FontWeight" /> object.</summary>
      <returns>An integer value between 1 and 999 that corresponds to the usWeightClass definition in the OpenType specification.</returns>
    </member>
    <member name="M:System.Windows.FontWeight.ToString">
      <summary>Returns a text string that represents the value of the <see cref="T:System.Windows.FontWeight" /> object and is based on the <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> property information.</summary>
      <returns>A <see cref="T:System.String" /> that represents the value of the <see cref="T:System.Windows.FontWeight" /> object, such as "Light", "Normal", or "UltraBold".</returns>
    </member>
    <member name="T:System.Windows.FontWeightConverter">
      <summary>Converts instances of <see cref="T:System.Windows.FontWeight" /> to and from other data types.</summary>
    </member>
    <member name="M:System.Windows.FontWeightConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FontWeightConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.FontWeightConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an object of the given type to an instance of <see cref="T:System.Windows.FontWeight" />.</summary>
      <returns>true if the converter can convert the provided type to an instance of <see cref="T:System.Windows.FontWeight" />; otherwise, false.</returns>
      <param name="td">Context information of a type.</param>
      <param name="t">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.FontWeightConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.FontWeight" /> can be converted to a different type.</summary>
      <returns>true if the converter can convert this instance of <see cref="T:System.Windows.FontWeight" />; otherwise, false.</returns>
      <param name="context">Context information of a type.</param>
      <param name="destinationType">The desired type that that this instance of <see cref="T:System.Windows.FontWeight" /> is being evaluated for conversion to.</param>
    </member>
    <member name="M:System.Windows.FontWeightConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.FontWeight" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.FontWeight" /> created from the converted <paramref name="value" />.</returns>
      <param name="td">Context information of a type.</param>
      <param name="ci">
        <see cref="T:System.Globalization.CultureInfo" /> of the type being converted. </param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is not a valid type for conversion.</exception>
    </member>
    <member name="M:System.Windows.FontWeightConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.FontWeight" /> to a specified type.</summary>
      <returns>The object created from the converted instance of <see cref="T:System.Windows.FontWeight" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The instance of <see cref="T:System.Windows.FontWeight" /> to convert.</param>
      <param name="destinationType">The type this instance of <see cref="T:System.Windows.FontWeight" /> is converted to. </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null-or-<paramref name="value" /> i is not an instance of <see cref="T:System.Windows.FontWeight" />-or-<paramref name="destinationType" /> is not a valid destination type.</exception>
    </member>
    <member name="T:System.Windows.FontWeights">
      <summary>Provides a set of static predefined <see cref="T:System.Windows.FontWeight" /> values.</summary>
    </member>
    <member name="P:System.Windows.FontWeights.Black">
      <summary>Specifies a "Black" font weight.</summary>
      <returns>A value that represents a "Black" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Bold">
      <summary>Specifies a "Bold" font weight.</summary>
      <returns>A value that represents a "Bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.DemiBold">
      <summary>Specifies a "Demi-bold" font weight.</summary>
      <returns>A value that represents a "Demi-bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBlack">
      <summary>Specifies an "Extra-black" font weight.</summary>
      <returns>A value that represents an "Extra-black" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraBold">
      <summary>Specifies an "Extra-bold" font weight.</summary>
      <returns>A value that represents an "Extra-bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.ExtraLight">
      <summary>Specifies an "Extra-light" font weight.</summary>
      <returns>A value that represents an "Extra-light" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Heavy">
      <summary>Specifies a "Heavy" font weight.</summary>
      <returns>A value that represents a "Heavy" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Light">
      <summary>Specifies a "Light" font weight.</summary>
      <returns>A value that represents a "Light" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Medium">
      <summary>Specifies a "Medium" font weight.</summary>
      <returns>A value that represents a "Medium" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Normal">
      <summary>Specifies a "Normal" font weight.</summary>
      <returns>A value that represents a "Normal" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Regular">
      <summary>Specifies a "Regular" font weight.</summary>
      <returns>A value that represents a "Regular" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.SemiBold">
      <summary>Specifies a "Semi-bold" font weight.</summary>
      <returns>A value that represents a "Semi-bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.Thin">
      <summary>Specifies a "Thin" font weight.</summary>
      <returns>A value that represents a "Thin" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.UltraBlack">
      <summary>Specifies an "Ultra-black" font weight.</summary>
      <returns>A value that represents an "Ultra-black" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.UltraBold">
      <summary>Specifies an "Ultra-bold" font weight.</summary>
      <returns>A value that represents an "Ultra-bold" font weight.</returns>
    </member>
    <member name="P:System.Windows.FontWeights.UltraLight">
      <summary>Specifies an "Ultra-light" font weight.</summary>
      <returns>A value that represents an "Ultra-light" font weight.</returns>
    </member>
    <member name="T:System.Windows.FreezableCollection`1">
      <summary>Represents a collection of <see cref="T:System.Windows.DependencyObject" />, <see cref="T:System.Windows.Freezable" />, or <see cref="T:System.Windows.Media.Animation.Animatable" /> objects. <see cref="T:System.Windows.FreezableCollection`1" /> is itself an <see cref="T:System.Windows.Media.Animation.Animatable" /> type. </summary>
      <typeparam name="T">The type of collection. This type must be a <see cref="T:System.Windows.DependencyObject" /> or a derived class.  </typeparam>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.FreezableCollection`1" /> that is empty and has the default initial capacity.</summary>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FreezableCollection`1" /> class that contains the same elements as the specified collection.</summary>
      <param name="collection">The collection whose items should be added to the new <see cref="T:System.Windows.FreezableCollection`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.FreezableCollection`1" /> that is empty and has the specified initial capacity.</summary>
      <param name="capacity">A value that is greater than or equal to 0 that specifies the number of elements the new collection can initially store.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Add(`0)">
      <summary>Adds the specified object to the end of the <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <param name="value">The object to be added to the end of the <see cref="T:System.Windows.FreezableCollection`1" />. This value cannot be null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.FreezableCollection`1" /> is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Clear">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.FreezableCollection`1" /> and its contents, making deep copies. If this collection (or its contents) has animated dependency properties, the property’s base value is copied, not its current animated value.</summary>
      <returns>A modifiable copy of this collection and its contents. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> value is false.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone (deep copy) of the specified <see cref="T:System.Windows.FreezableCollection`1" /> using base (non-animated) property values.</summary>
      <param name="source">The <see cref="T:System.Windows.FreezableCollection`1" /> to copy.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CloneCurrentValue">
      <summary>Creates a modifiable copy of this <see cref="T:System.Windows.FreezableCollection`1" /> and its contents, making deep copies of this object's current values. If this object (or the objects it contains) contains animated dependency properties, their current animated values are copied.</summary>
      <returns>A modifiable clone of the collection and its contents. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.FreezableCollection`1" /> using current property values.</summary>
      <param name="source">The <see cref="T:System.Windows.FreezableCollection`1" /> to clone.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Contains(`0)">
      <summary>Determines whether this <see cref="T:System.Windows.FreezableCollection`1" /> contains the specified value.</summary>
      <returns>true if value is found in the <see cref="T:System.Windows.FreezableCollection`1" />; otherwise, false.</returns>
      <param name="value">The object to locate in this collection. This object may be null.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Windows.FreezableCollection`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Windows.FreezableCollection`1" />.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Windows.FreezableCollection`1" /> is greater than the available space from index to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.Count">
      <summary>Gets the number of elements contained by this <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>The number of elements contained by this <see cref="T:System.Windows.FreezableCollection`1" />.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.FreezeCore(System.Boolean)">
      <summary>Makes this <see cref="T:System.Windows.FreezableCollection`1" /> object unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this <see cref="T:System.Windows.FreezableCollection`1" /> can be made unmodifiable, or false if it cannot be made unmodifiable. If <paramref name="isChecking" /> is false, this method returns true if the if the specified <see cref="T:System.Windows.FreezableCollection`1" /> is now unmodifiable, or false if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true if the <see cref="T:System.Windows.FreezableCollection`1" /> should simply return whether it can be frozen. false if the <see cref="T:System.Windows.FreezableCollection`1" /> instance should actually freeze itself when this method is called.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.FreezableCollection`1" /> using base (non-animated) property values.</summary>
      <param name="source">The <see cref="T:System.Windows.FreezableCollection`1" /> to copy.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If this object has animated dependency properties, their current animated values are copied.</summary>
      <param name="source">The <see cref="T:System.Windows.FreezableCollection`1" /> to copy.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.GetEnumerator">
      <summary>Returns an enumerator for the entire <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>An enumerator for the entire <see cref="T:System.Windows.FreezableCollection`1" />.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Windows.FreezableCollection`1" />, if found; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Insert(System.Int32,`0)">
      <summary>Inserts the specified object into the <see cref="T:System.Windows.FreezableCollection`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.- or -<paramref name="index" /> is greater than <see cref="P:System.Windows.FreezableCollection`1.Count" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.FreezableCollection`1" /> is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true). </exception>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.- or -<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.FreezableCollection`1.Count" />.</exception>
      <exception cref="T:System.ArgumentException">The specified element is null.</exception>
      <exception cref="T:System.InvalidOperationException">Attempting to set an item in the collection when the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Remove(`0)">
      <summary>Removes the first occurrence of the specified object from the <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
      <returns>true if an occurrence of <paramref name="value" /> was found in the collection and removed; false if <paramref name="value" /> could not be found in the collection.</returns>
      <param name="value">The object to remove.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.FreezableCollection`1" /> is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the object at the specified zero-based index of the <see cref="T:System.Windows.FreezableCollection`1" />. </summary>
      <param name="index">The zero-based index of the object to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.- or -<paramref name="index" /> is greater than <see cref="P:System.Windows.FreezableCollection`1.Count" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.FreezableCollection`1" /> is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.FreezableCollection`1" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.FreezableCollection`1" />.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.FreezableCollection`1" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Windows.FreezableCollection`1" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Windows.FreezableCollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.FreezableCollection`1" />.</param>
    </member>
    <member name="E:System.Windows.FreezableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>For a description of this members, see <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="E:System.Windows.FreezableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>For a description of this members, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.Windows.FreezableCollection`1.Enumerator">
      <summary>Enumerates the members of a <see cref="T:System.Windows.FreezableCollection`1" />.</summary>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.Enumerator.Current">
      <summary>Gets a value that represents the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advanced to the next element in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position.</summary>
    </member>
    <member name="P:System.Windows.FreezableCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.FreezableCollection`1.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.GiveFeedbackEventArgs">
      <summary>Contains arguments for the <see cref="E:System.Windows.DragDrop.GiveFeedback" /> event.</summary>
    </member>
    <member name="P:System.Windows.GiveFeedbackEventArgs.Effects">
      <summary>Gets a value that indicates the effects of drag-and-drop operation.</summary>
      <returns>A member of the <see cref="T:System.Windows.DragDropEffects" /> enumeration that indicates the effects of the drag-and-drop operation.</returns>
    </member>
    <member name="P:System.Windows.GiveFeedbackEventArgs.UseDefaultCursors">
      <summary>Gets or sets a Boolean value indicating whether default cursor feedback behavior should be used for the associated drag-and-drop operation.</summary>
      <returns>A Boolean value that indicating whether default cursor feedback behavior should be used for the associated drag-and-drop operation. true to use default feedback cursor behavior; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.GiveFeedbackEventHandler">
      <summary>Represents a method that will handle the feedback routed event from in-process drag-and-drop operations, for instance <see cref="E:System.Windows.UIElement.GiveFeedback" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.IContentHost">
      <summary>This interface is implemented by layouts which host <see cref="T:System.Windows.ContentElement" />. </summary>
    </member>
    <member name="M:System.Windows.IContentHost.GetRectangles(System.Windows.ContentElement)">
      <summary>Returns a collection of bounding rectangles for a child element. </summary>
      <returns>A collection of bounding rectangles for a child element. </returns>
      <param name="child">The child element that the bounding rectangles are returned for.</param>
      <exception cref="T:System.ArgumentNullException">If child is null.</exception>
      <exception cref="T:System.ArgumentException">If the element is not a direct descendant (i.e. element must be a child of the <see cref="T:System.Windows.IContentHost" /> or a <see cref="T:System.Windows.ContentElement" /> which is a direct descendant  of the <see cref="T:System.Windows.IContentHost" />).</exception>
    </member>
    <member name="P:System.Windows.IContentHost.HostedElements">
      <summary>Gets an enumeration containing all descendant <see cref="T:System.Windows.ContentElement" />-derived classes, as well as all <see cref="T:System.Windows.UIElement" />-derived classes that are a direct descendant of the <see cref="T:System.Windows.IContentHost" /> or one of its descendant <see cref="T:System.Windows.ContentElement" /> classes. </summary>
      <returns>Enumeration containing all descendant <see cref="T:System.Windows.ContentElement" />-derived classes, as well as all <see cref="T:System.Windows.UIElement" />-derived classes that are a direct descendant of the <see cref="T:System.Windows.IContentHost" /> or one of its descendant <see cref="T:System.Windows.ContentElement" /> classes. In other words, elements for which the <see cref="T:System.Windows.IContentHost" /> creates a visual representation (<see cref="T:System.Windows.ContentElement" />-derived classes) or whose layout is driven by the <see cref="T:System.Windows.IContentHost" /> (the first-level descendant <see cref="T:System.Windows.UIElement" />-derived classes).</returns>
    </member>
    <member name="M:System.Windows.IContentHost.InputHitTest(System.Windows.Point)">
      <summary>Performs hit-testing for child elements.</summary>
      <returns>A descendant of <see cref="T:System.Windows.IInputElement" />, or NULL if no such element exists.</returns>
      <param name="point">Mouse coordinates relative to the ContentHost.</param>
    </member>
    <member name="M:System.Windows.IContentHost.OnChildDesiredSizeChanged(System.Windows.UIElement)">
      <summary> Called when a <see cref="T:System.Windows.UIElement" />-derived class which is hosted by a <see cref="T:System.Windows.IContentHost" /> changes its <see cref="P:System.Windows.UIElement.DesiredSize" />.</summary>
      <param name="child">Child element whose <see cref="P:System.Windows.UIElement.DesiredSize" /> has changed</param>
      <exception cref="T:System.ArgumentNullException">If child is null.</exception>
      <exception cref="T:System.ArgumentException">If child is not a direct descendant (i.e. child must be a child of the <see cref="T:System.Windows.IContentHost" /> or a <see cref="T:System.Windows.ContentElement" /> which is a direct descendant of the <see cref="T:System.Windows.IContentHost" />).</exception>
    </member>
    <member name="T:System.Windows.IDataObject">
      <summary>Provides a format-independent mechanism for transferring data.</summary>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.String)">
      <summary>Retrieves a data object in a specified format; the data format is specified by a string.</summary>
      <returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
      <param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.String,System.Boolean)">
      <summary>Retrieves a data object in a specified format, optionally converting the data to the specified format.</summary>
      <returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
      <param name="format">A string that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="autoConvert">true to attempt to automatically convert the data to the specified format; false for no data format conversion. If this parameter is false, the method returns data in the specified format if available, or null if the data is not available in the specified format.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetData(System.Type)">
      <summary>Retrieves a data object in a specified format; the data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>A data object with the data in the specified format, or null if the data is not available in the specified format.</returns>
      <param name="format">A <see cref="T:System.Type" /> object that specifies what format to retrieve the data as. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.String)">
      <summary>Checks to see whether the data is available in, or can be converted to, a specified format; the data format is specified by a string.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of pre-defined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.String,System.Boolean)">
      <summary>Checks to see whether the data is available in, or can be converted to, a specified format. A Boolean flag indicates whether to check if the data can be converted to the specified format, if it is not available in that format.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A string that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of pre-defined data formats.</param>
      <param name="autoConvert">false to only check for the specified format; true to also check whether or not data stored in this data object can be converted to the specified format.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetDataPresent(System.Type)">
      <summary>Checks to see whether the data is available in, or can be converted to, a specified format. The data format is specified by a <see cref="T:System.Type" /> object.</summary>
      <returns>true if the data is in, or can be converted to, the specified format; otherwise, false.</returns>
      <param name="format">A <see cref="T:System.Type" /> that specifies what format to check for. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
    </member>
    <member name="M:System.Windows.IDataObject.GetFormats">
      <summary>Returns a list of all formats that the data in this data object is stored in, or can be converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
    </member>
    <member name="M:System.Windows.IDataObject.GetFormats(System.Boolean)">
      <summary>Returns a list of all formats that the data in this data object is stored in. A Boolean flag indicates whether or not to also include formats that the data can be automatically converted to.</summary>
      <returns>An array of strings, with each string specifying the name of a format supported by this data object.</returns>
      <param name="autoConvert">true to retrieve all formats that data stored in this data object is stored in, or can be converted to; false to retrieve only formats that data stored in this data object is stored in (excluding formats that the data is not stored in, but can be automatically converted to).</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.Object)">
      <summary>Stores the specified data in this data object, automatically converting the data format from the source object type.</summary>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.String,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. The data format is specified by a string.</summary>
      <param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats" /> class for a set of pre-defined data formats.</param>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.String,System.Object,System.Boolean)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. This overload includes a Boolean flag to indicate whether the data may be converted to another format on retrieval.</summary>
      <param name="format">A string that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats" /> class for a set of pre-defined data formats.</param>
      <param name="data">The data to store in this data object.</param>
      <param name="autoConvert">true to allow the data to be converted to another format on retrieval; false to prohibit the data from being converted to another format on retrieval.</param>
    </member>
    <member name="M:System.Windows.IDataObject.SetData(System.Type,System.Object)">
      <summary>Stores the specified data in this data object, along with one or more specified data formats. The data format is specified by a <see cref="T:System.Type" /> class.</summary>
      <param name="format">A <see cref="T:System.Type" /> that specifies what format to store the data in. See the <see cref="T:System.Windows.DataFormats" /> class for a set of predefined data formats.</param>
      <param name="data">The data to store in this data object.</param>
    </member>
    <member name="T:System.Windows.IInputElement">
      <summary>Establishes the common events and also the event-related properties and methods for basic input processing by Windows Presentation Foundation (WPF) elements.</summary>
    </member>
    <member name="M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Adds a routed event handler for a specific routed event to an element. </summary>
      <param name="routedEvent">The identifier for the routed event that is being handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
    </member>
    <member name="M:System.Windows.IInputElement.CaptureMouse">
      <summary>Attempts to force capture of the mouse to this element. </summary>
      <returns>true if the mouse is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.IInputElement.CaptureStylus">
      <summary>Attempts to force capture of the stylus to this element. </summary>
      <returns>true if the stylus is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.IInputElement.Focus">
      <summary>Attempts to focus the keyboard on this element. </summary>
      <returns>true if keyboard focus is moved to this element or already was on this element; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.Focusable">
      <summary>Gets or sets a value that indicates whether focus can be set to this element.</summary>
      <returns>true if the element can have focus set to it; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.IInputElement.GotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element.</summary>
    </member>
    <member name="E:System.Windows.IInputElement.GotMouseCapture">
      <summary>Occurs when the element captures the mouse. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.GotStylusCapture">
      <summary>Occurs when the element captures the stylus. </summary>
    </member>
    <member name="P:System.Windows.IInputElement.IsEnabled">
      <summary>Gets a value that indicates whether this element is enabled in the user interface (UI). </summary>
      <returns>true if the element is enabled; otherwise, false.     </returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsKeyboardFocused">
      <summary>Gets a value that indicates whether this element has keyboard focus. </summary>
      <returns>true if this element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsKeyboardFocusWithin">
      <summary>Gets a value that indicates whether keyboard focus is anywhere inside the element bounds, including if keyboard focus is inside the bounds of any visual child elements. </summary>
      <returns>true if keyboard focus is on the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsMouseCaptured">
      <summary>Gets a value that indicates whether the mouse is captured to this element. </summary>
      <returns>true if the element has mouse capture; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsMouseDirectlyOver">
      <summary>Gets a value that indicates whether the mouse pointer is over this element in the strictest hit testing sense. </summary>
      <returns>true if the mouse pointer is over this element; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsMouseOver">
      <summary>Gets a value that indicates whether the mouse pointer is located over this element (including visual children elements that are inside its bounds). </summary>
      <returns>true if the mouse pointer is over the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsStylusCaptured">
      <summary>Gets a value that indicates whether the stylus is captured to this element. </summary>
      <returns>true if the element has stylus capture; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsStylusDirectlyOver">
      <summary>Gets a value that indicates whether the stylus is over this element in the strictest hit testing sense. </summary>
      <returns>true if the stylus is over the element; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.IInputElement.IsStylusOver">
      <summary>Gets a value that indicates whether the stylus is located over this element (or over visual child elements that are inside its bounds). </summary>
      <returns>true if the stylus cursor is over the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.IInputElement.KeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.KeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.LostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.LostMouseCapture">
      <summary>Occurs when this element loses mouse capture. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.LostStylusCapture">
      <summary>Occurs when this element loses stylus capture. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseEnter">
      <summary>Occurs when the mouse pointer enters the bounds of this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.MouseWheel">
      <summary>Occurs when the mouse wheel moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewGotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewKeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewKeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewLostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewMouseWheel">
      <summary>Occurs when the mouse wheel moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusButtonDown">
      <summary>Occurs when the stylus button is pressed down while the stylus is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusButtonUp">
      <summary>Occurs when the stylus button is released while the stylus is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusDown">
      <summary>Occurs when the stylus touches the digitizer while over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusInAirMove">
      <summary>Occurs when the stylus moves over an element, but without touching the digitizer. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusMove">
      <summary>Occurs when the stylus moves while the stylus is over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusSystemGesture">
      <summary>Occurs when one of several stylus gestures are detected, for example, <see cref="F:System.Windows.Input.SystemGesture.Tap" /> or <see cref="F:System.Windows.Input.SystemGesture.Drag" />.</summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewStylusUp">
      <summary>Occurs when the stylus is raised off the digitizer while over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.PreviewTextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)">
      <summary>Raises the routed event that is specified by the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property within the provided <see cref="T:System.Windows.RoutedEventArgs" />.</summary>
      <param name="e">An instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class that contains the identifier for the event to raise. </param>
    </member>
    <member name="M:System.Windows.IInputElement.ReleaseMouseCapture">
      <summary>Releases the mouse capture, if this element holds the capture. </summary>
    </member>
    <member name="M:System.Windows.IInputElement.ReleaseStylusCapture">
      <summary>Releases the stylus capture, if this element holds the capture. </summary>
    </member>
    <member name="M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Removes all instances of the specified routed event handler from this element. </summary>
      <param name="routedEvent">Identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from this element's event handler collection.</param>
    </member>
    <member name="E:System.Windows.IInputElement.StylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the stylus is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusButtonUp">
      <summary>Occurs when the stylus button is released while the stylus is over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusDown">
      <summary>Occurs when the stylus touches the digitizer while over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusEnter">
      <summary>Occurs when the stylus cursor enters the bounds of the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusInAirMove">
      <summary>Occurs when the stylus moves over an element, but without touching the digitizer. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusLeave">
      <summary>Occurs when the stylus cursor leaves the bounds of the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusMove">
      <summary>Occurs when the stylus cursor moves over the element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusSystemGesture">
      <summary>Occurs when one of several stylus gestures are detected, for example, <see cref="F:System.Windows.Input.SystemGesture.Tap" /> or <see cref="F:System.Windows.Input.SystemGesture.Drag" />. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.StylusUp">
      <summary>Occurs when the stylus is raised off the digitizer while over this element. </summary>
    </member>
    <member name="E:System.Windows.IInputElement.TextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="T:System.Windows.KeySplineConverter">
      <summary>Converts instances of other types to and from a <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
    </member>
    <member name="M:System.Windows.KeySplineConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.KeySplineConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.KeySplineConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Media.Animation.KeySpline" />.  </summary>
      <returns>true if the type can be converted to a <see cref="T:System.Windows.Media.Animation.KeySpline" />; otherwise, false.</returns>
      <param name="typeDescriptor">Describes the context information of a type.</param>
      <param name="destinationType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.KeySplineConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether an instance of a <see cref="T:System.Windows.Media.Animation.KeySpline" /> can be converted to a different type. </summary>
      <returns>true if this <see cref="T:System.Windows.Media.Animation.KeySpline" /> can be converted to <paramref name="destinationType" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Media.Animation.KeySpline" /> is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.KeySplineConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.KeySpline" /> created from converting <paramref name="value" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="cultureInfo">Cultural information to respect during conversion.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Media.Animation.KeySpline" />.</exception>
    </member>
    <member name="M:System.Windows.KeySplineConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Attempts to convert a <see cref="T:System.Windows.Media.Animation.KeySpline" /> to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Animation.KeySpline" />.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="cultureInfo">Cultural information to respect during conversion.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Animation.KeySpline" /> to convert.</param>
      <param name="destinationType">The type to convert this <see cref="T:System.Windows.Media.Animation.KeySpline" /> to.</param>
      <exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" /> is null or is not a <see cref="T:System.Windows.Media.Animation.KeySpline" />, or if the <paramref name="destinationType" /> is not one of the valid types for conversion.</exception>
    </member>
    <member name="T:System.Windows.KeyTimeConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Media.Animation.KeyTime" /> to and from other types.</summary>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.KeyTimeConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Media.Animation.KeyTime" />. </summary>
      <returns>true if this type can be converted; otherwise, false.</returns>
      <param name="typeDescriptorContext">Contextual information required for conversion.</param>
      <param name="type">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if a given type can be converted to an instance of <see cref="T:System.Windows.Media.Animation.KeyTime" />. </summary>
      <returns>true if this type can be converted; otherwise, false.</returns>
      <param name="typeDescriptorContext">Contextual information required for conversion.</param>
      <param name="type">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a given object to an instance of <see cref="T:System.Windows.Media.Animation.KeyTime" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.KeyTime" />, based on the supplied <paramref name="value" />.</returns>
      <param name="typeDescriptorContext">Context information required for conversion.</param>
      <param name="cultureInfo">Cultural information that is respected during conversion.</param>
      <param name="value">The object being converted to an instance of <see cref="T:System.Windows.Media.Animation.KeyTime" />.</param>
    </member>
    <member name="M:System.Windows.KeyTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Animation.KeyTime" /> to another type.</summary>
      <returns>A new object, based on <paramref name="value" />.</returns>
      <param name="typeDescriptorContext">Context information required for conversion.</param>
      <param name="cultureInfo">Cultural information that is respected during conversion.</param>
      <param name="value">
        <see cref="T:System.Windows.Media.Animation.KeyTime" /> value to convert from.</param>
      <param name="destinationType">Type being evaluated for conversion.</param>
    </member>
    <member name="T:System.Windows.LineBreakCondition">
      <summary>Describes the breaking condition around an inline object.</summary>
    </member>
    <member name="F:System.Windows.LineBreakCondition.BreakDesired">
      <summary>Break if not prohibited by another object.</summary>
    </member>
    <member name="F:System.Windows.LineBreakCondition.BreakPossible">
      <summary>Break if allowed by another object.</summary>
    </member>
    <member name="F:System.Windows.LineBreakCondition.BreakRestrained">
      <summary>Break always prohibited unless the other object is set to <see cref="F:System.Windows.LineBreakCondition.BreakAlways" />.</summary>
    </member>
    <member name="F:System.Windows.LineBreakCondition.BreakAlways">
      <summary>Break is always allowed.</summary>
    </member>
    <member name="T:System.Windows.LocalizabilityAttribute">
      <summary>Specifies the localization attributes for a binary XAML (BAML) class or class member.</summary>
    </member>
    <member name="M:System.Windows.LocalizabilityAttribute.#ctor(System.Windows.LocalizationCategory)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.LocalizabilityAttribute" /> class with a specified localization category.</summary>
      <param name="category">The localization category.</param>
    </member>
    <member name="P:System.Windows.LocalizabilityAttribute.Category">
      <summary>Gets the category setting of the localization attribute's targeted value.</summary>
      <returns>The category setting of the localization attribute.</returns>
    </member>
    <member name="P:System.Windows.LocalizabilityAttribute.Modifiability">
      <summary>Gets or sets the modifiability setting of the localization attribute's targeted value.</summary>
      <returns>The modifiability setting of the localization attribute.</returns>
    </member>
    <member name="P:System.Windows.LocalizabilityAttribute.Readability">
      <summary>Gets or sets the readability setting of the localization attribute's targeted value.</summary>
      <returns>The readability setting of the localization attribute.</returns>
    </member>
    <member name="T:System.Windows.LocalizationCategory">
      <summary>Specifies the category value of a <see cref="T:System.Windows.LocalizabilityAttribute" /> for a binary XAML (BAML) class or class member.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.None">
      <summary>Resource does not belong to a standard category.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Text">
      <summary>For a lengthy piece of text.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Title">
      <summary>For a single line of text, such as text used for a title.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Label">
      <summary>A <see cref="T:System.Windows.Controls.Label" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Button">
      <summary>A <see cref="T:System.Windows.Controls.Button" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.CheckBox">
      <summary>A <see cref="T:System.Windows.Controls.CheckBox" /> or related control. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.ComboBox">
      <summary>A <see cref="T:System.Windows.Controls.ComboBox" /> or related control such as <see cref="T:System.Windows.Controls.ComboBoxItem" />. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.ListBox">
      <summary>A <see cref="T:System.Windows.Controls.ListBox" /> or related control such as <see cref="T:System.Windows.Controls.ListBoxItem" />. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Menu">
      <summary>A <see cref="T:System.Windows.Controls.Menu" /> or related control such as <see cref="T:System.Windows.Controls.MenuItem" />. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.RadioButton">
      <summary>A <see cref="T:System.Windows.Controls.RadioButton" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.ToolTip">
      <summary>A <see cref="T:System.Windows.Controls.ToolTip" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Hyperlink">
      <summary>A <see cref="T:System.Windows.Documents.Hyperlink" /> or related control.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.TextFlow">
      <summary>For panels that can contain text.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.XmlData">
      <summary>
            XML data. </summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Font">
      <summary>Font-related data such as font name, style, or size.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Inherit">
      <summary>Inherits its category from a parent node.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.Ignore">
      <summary>Do not localize this resource. This does not apply to any child nodes that might exist.</summary>
    </member>
    <member name="F:System.Windows.LocalizationCategory.NeverLocalize">
      <summary>Do not localize this resource, or any child nodes whose category is set to Inherit.</summary>
    </member>
    <member name="T:System.Windows.Modifiability">
      <summary>Specifies the modifiability value of a <see cref="T:System.Windows.LocalizabilityAttribute" /> for a binary XAML (BAML) class or class member.</summary>
    </member>
    <member name="F:System.Windows.Modifiability.Unmodifiable">
      <summary>Targeted value is not modifiable by localizers.</summary>
    </member>
    <member name="F:System.Windows.Modifiability.Modifiable">
      <summary>Targeted value is modifiable by localizers.</summary>
    </member>
    <member name="F:System.Windows.Modifiability.Inherit">
      <summary>Targeted value modifiability is inherited from its parent node.</summary>
    </member>
    <member name="T:System.Windows.PresentationSource">
      <summary>Provides an abstract base for classes that present content from another technology as part of an interoperation scenario. In addition, this class provides static methods for working with these sources, as well as the basic visual-layer presentation architecture.</summary>
    </member>
    <member name="M:System.Windows.PresentationSource.#ctor">
      <summary>Provides initialization for base class values when called by the constructor of a derived class. </summary>
    </member>
    <member name="M:System.Windows.PresentationSource.AddSource">
      <summary>Adds a <see cref="T:System.Windows.PresentationSource" /> derived class instance to the list of known presentation sources.</summary>
    </member>
    <member name="M:System.Windows.PresentationSource.AddSourceChangedHandler(System.Windows.IInputElement,System.Windows.SourceChangedEventHandler)">
      <summary>Adds a handler for the SourceChanged event to the provided element.</summary>
      <param name="element">The element to add the handler to.</param>
      <param name="handler">The hander implementation to add.</param>
    </member>
    <member name="M:System.Windows.PresentationSource.ClearContentRenderedListeners">
      <summary>Sets the list of listeners for the <see cref="E:System.Windows.PresentationSource.ContentRendered" /> event to null. </summary>
    </member>
    <member name="P:System.Windows.PresentationSource.CompositionTarget">
      <summary>Gets the visual target for the visuals being presented in the source. </summary>
      <returns>A visual target (instance of a <see cref="T:System.Windows.Media.CompositionTarget" /> derived class).</returns>
    </member>
    <member name="E:System.Windows.PresentationSource.ContentRendered">
      <summary>Occurs when content is rendered and ready for user interaction. </summary>
    </member>
    <member name="P:System.Windows.PresentationSource.CurrentSources">
      <summary>Returns a list of sources. </summary>
      <returns>A list of weak references. </returns>
    </member>
    <member name="M:System.Windows.PresentationSource.FromDependencyObject(System.Windows.DependencyObject)">
      <summary>Returns the source in which a provided <see cref="T:System.Windows.DependencyObject" /> is presented.</summary>
      <returns>The <see cref="T:System.Windows.PresentationSource" /> in which the dependency object is being presented.</returns>
      <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject" /> to find the source for.</param>
    </member>
    <member name="M:System.Windows.PresentationSource.FromVisual(System.Windows.Media.Visual)">
      <summary>Returns the source in which a provided <see cref="T:System.Windows.Media.Visual" /> is presented.</summary>
      <returns>The <see cref="T:System.Windows.PresentationSource" /> in which the visual is being presented, or null if <paramref name="visual" /> is disposed.</returns>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> to find the source for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visual" /> is null.</exception>
    </member>
    <member name="M:System.Windows.PresentationSource.GetCompositionTargetCore">
      <summary>When overridden in a derived class, returns a visual target for the given source. </summary>
      <returns>Returns a <see cref="T:System.Windows.Media.CompositionTarget" /> that is target for rendering the visual.</returns>
    </member>
    <member name="P:System.Windows.PresentationSource.IsDisposed">
      <summary>When overridden in a derived class, gets a value that declares whether the object is disposed. </summary>
      <returns>true if the object is disposed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.PresentationSource.RemoveSource">
      <summary>Removes a <see cref="T:System.Windows.PresentationSource" /> derived class instance from the list of known presentation sources.</summary>
    </member>
    <member name="M:System.Windows.PresentationSource.RemoveSourceChangedHandler(System.Windows.IInputElement,System.Windows.SourceChangedEventHandler)">
      <summary>Removes a handler for the SourceChanged event from the provided element.</summary>
      <param name="e">The element to remove the handler from.</param>
      <param name="handler">The handler implementation to remove.</param>
    </member>
    <member name="M:System.Windows.PresentationSource.RootChanged(System.Windows.Media.Visual,System.Windows.Media.Visual)">
      <summary>Provides notification that the root <see cref="T:System.Windows.Media.Visual" /> has changed. </summary>
      <param name="oldRoot">The old root <see cref="T:System.Windows.Media.Visual" />.</param>
      <param name="newRoot">The new root <see cref="T:System.Windows.Media.Visual" />.</param>
    </member>
    <member name="P:System.Windows.PresentationSource.RootVisual">
      <summary>When overridden in a derived class, gets or sets the root visual being presented in the source. </summary>
      <returns>The root visual.</returns>
    </member>
    <member name="T:System.Windows.QueryContinueDragEventArgs">
      <summary>Contains arguments for the <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> event.</summary>
    </member>
    <member name="P:System.Windows.QueryContinueDragEventArgs.Action">
      <summary>Gets or sets the current status of the associated drag-and-drop operation.</summary>
      <returns>A member of the <see cref="T:System.Windows.DragAction" /> enumeration indicating the current status of the associated drag-and-drop operation.</returns>
    </member>
    <member name="P:System.Windows.QueryContinueDragEventArgs.EscapePressed">
      <summary>Gets a Boolean value indicating whether the ESC key has been pressed.</summary>
      <returns>A Boolean value indicating whether the ESC key has been pressed. true if the ESC was pressed; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.QueryContinueDragEventArgs.KeyStates">
      <summary>Gets a flag enumeration indicating the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</summary>
      <returns>One or more members of the <see cref="T:System.Windows.DragDropKeyStates" /> flag enumeration.</returns>
    </member>
    <member name="T:System.Windows.QueryContinueDragEventHandler">
      <summary>Represents a method that will handle the routed events that enables a drag-and-drop operation to be canceled by the drag source, for example <see cref="E:System.Windows.UIElement.QueryContinueDrag" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Readability">
      <summary>Specifies the readability value of a <see cref="T:System.Windows.LocalizabilityAttribute" /> for a binary XAML (BAML) class or class member.</summary>
    </member>
    <member name="F:System.Windows.Readability.Unreadable">
      <summary>Targeted value is not readable.</summary>
    </member>
    <member name="F:System.Windows.Readability.Readable">
      <summary>Targeted value is readable text.</summary>
    </member>
    <member name="F:System.Windows.Readability.Inherit">
      <summary>Targeted value readability is inherited from its parent node.</summary>
    </member>
    <member name="T:System.Windows.RoutedEvent">
      <summary>Represents and identifies a routed event and declares its characteristics.</summary>
    </member>
    <member name="M:System.Windows.RoutedEvent.AddOwner(System.Type)">
      <summary>Associates another owner class with this routed event, and enables routing of the event and handling on this class.  </summary>
      <returns>The identifier field for the event. This return value should be used to set a public static read-only field that will store the identifier for the representation of the routed event on the owning class. This field must be accessible because it will be required to attach any instance handlers for the event when using the <see cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" /> utility method.</returns>
      <param name="ownerType">The type of the class where the routed event is added.</param>
    </member>
    <member name="P:System.Windows.RoutedEvent.HandlerType">
      <summary>Gets the handler type of the routed event. </summary>
      <returns>The handler type of the routed event.</returns>
    </member>
    <member name="P:System.Windows.RoutedEvent.Name">
      <summary>Gets the identifying name of the routed event. </summary>
      <returns>The name of the routed event.</returns>
    </member>
    <member name="P:System.Windows.RoutedEvent.OwnerType">
      <summary>Gets the registered owner type of the routed event. </summary>
      <returns>The owner type of the routed event.</returns>
    </member>
    <member name="P:System.Windows.RoutedEvent.RoutingStrategy">
      <summary>Gets the routing strategy of the routed event. </summary>
      <returns>One of the enumeration values. The default is the enumeration default, <see cref="F:System.Windows.RoutingStrategy.Bubble" />.</returns>
    </member>
    <member name="M:System.Windows.RoutedEvent.ToString">
      <summary>Returns the string representation of this <see cref="T:System.Windows.RoutedEvent" />.</summary>
      <returns>A string representation for this object, which is identical to the value returned by <see cref="P:System.Windows.RoutedEvent.Name" />.</returns>
    </member>
    <member name="T:System.Windows.RoutedEventArgs">
      <summary>Contains state information and event data associated with a routed event. </summary>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class. </summary>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class, using the supplied routed event identifier. </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class.</param>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class, using the supplied routed event identifier, and providing the opportunity to declare a different source for the event. </summary>
      <param name="routedEvent">The routed event identifier for this instance of the <see cref="T:System.Windows.RoutedEventArgs" /> class.</param>
      <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the <see cref="P:System.Windows.RoutedEventArgs.Source" /> property.</param>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.Handled">
      <summary>Gets or sets a value that indicates the present state of the event handling for a routed event as it travels the route. </summary>
      <returns>If setting, set to true if the event is to be marked handled; otherwise false. If reading this value, true indicates that either a class handler, or some instance handler along the route, has already marked this event handled. false.indicates that no such handler has marked the event handled.The default value is false.</returns>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>When overridden in a derived class, provides a way to invoke event handlers in a type-specific way, which can increase efficiency over the base implementation.</summary>
      <param name="genericHandler">The generic handler / delegate implementation to be invoked.</param>
      <param name="genericTarget">The target on which the provided handler should be invoked.</param>
    </member>
    <member name="M:System.Windows.RoutedEventArgs.OnSetSource(System.Object)">
      <summary>When overridden in a derived class, provides a notification callback entry point whenever the value of the <see cref="P:System.Windows.RoutedEventArgs.Source" /> property of an instance changes.</summary>
      <param name="source">The new value that <see cref="P:System.Windows.RoutedEventArgs.Source" /> is being set to.</param>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.OriginalSource">
      <summary>Gets the original reporting source as determined by pure hit testing, before any possible <see cref="P:System.Windows.RoutedEventArgs.Source" /> adjustment by a parent class.</summary>
      <returns>The original reporting source, before any possible <see cref="P:System.Windows.RoutedEventArgs.Source" /> adjustment made by class handling, which may have been done to flatten composited element trees.</returns>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.RoutedEvent">
      <summary>Gets or sets the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> associated with this <see cref="T:System.Windows.RoutedEventArgs" /> instance. </summary>
      <returns>The identifier for the event that has been invoked.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to change the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />   value while the event is being routed.</exception>
    </member>
    <member name="P:System.Windows.RoutedEventArgs.Source">
      <summary>Gets or sets a reference to the object that raised the event. </summary>
      <returns>The object that raised the event.</returns>
    </member>
    <member name="T:System.Windows.RoutedEventHandler">
      <summary>Represents the method that will handle various routed events that do not have specific event data beyond the data that is common for all routed events. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Windows.RoutedEventHandlerInfo">
      <summary>Provides special handling information to inform event listeners whether specific handlers should be invoked.</summary>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.Equals(System.Object)">
      <summary>Determines whether the specified object is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</summary>
      <returns>true if the specified object is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />; otherwise, false.</returns>
      <param name="obj">The object to compare to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</param>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.Equals(System.Windows.RoutedEventHandlerInfo)">
      <summary>Determines whether the specified <see cref="T:System.Windows.RoutedEventHandlerInfo" /> is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.RoutedEventHandlerInfo" /> is equivalent to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />; otherwise, false.</returns>
      <param name="handlerInfo">The <see cref="T:System.Windows.RoutedEventHandlerInfo" /> to compare to the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</param>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Windows.RoutedEventHandlerInfo" />.</returns>
    </member>
    <member name="P:System.Windows.RoutedEventHandlerInfo.Handler">
      <summary>Gets the event handler.</summary>
      <returns>The event handler.</returns>
    </member>
    <member name="P:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo">
      <summary>Gets a value that indicates whether the event handler is invoked when the routed event is marked handled.</summary>
      <returns>true if the event handler is invoked when the routed event is marked handled; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.op_Equality(System.Windows.RoutedEventHandlerInfo,System.Windows.RoutedEventHandlerInfo)">
      <summary>Determines whether the specified objects are equivalent.</summary>
      <returns>true if the objects are equivalent; otherwise, false.</returns>
      <param name="handlerInfo1">The first object to compare.</param>
      <param name="handlerInfo2">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.RoutedEventHandlerInfo.op_Inequality(System.Windows.RoutedEventHandlerInfo,System.Windows.RoutedEventHandlerInfo)">
      <summary>Determines whether the specified objects are not equivalent.</summary>
      <returns>true if the objects are not equivalent; otherwise, false.</returns>
      <param name="handlerInfo1">The first object to compare.</param>
      <param name="handlerInfo2">The second object to compare.</param>
    </member>
    <member name="T:System.Windows.RoutingStrategy">
      <summary>Indicates the routing strategy of a routed event. </summary>
    </member>
    <member name="F:System.Windows.RoutingStrategy.Tunnel">
      <summary>The routed event uses a tunneling strategy, where the event instance routes downwards through the tree, from root to source element. </summary>
    </member>
    <member name="F:System.Windows.RoutingStrategy.Bubble">
      <summary>The routed event uses a bubbling strategy, where the event instance routes upwards through the tree, from event source to root. </summary>
    </member>
    <member name="F:System.Windows.RoutingStrategy.Direct">
      <summary>The routed event does not route through an element tree, but does support other routed event capabilities such as class handling, <see cref="T:System.Windows.EventTrigger" /> or <see cref="T:System.Windows.EventSetter" />. </summary>
    </member>
    <member name="T:System.Windows.SizeChangedInfo">
      <summary>Report the specifics of a value change involving a <see cref="T:System.Windows.Size" />. This is used as a parameter in <see cref="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> overrides.</summary>
    </member>
    <member name="M:System.Windows.SizeChangedInfo.#ctor(System.Windows.UIElement,System.Windows.Size,System.Boolean,System.Boolean)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.SizeChangedInfo" /> class. </summary>
      <param name="element">The element where the size is being changed.</param>
      <param name="previousSize">The previous size, before the change.</param>
      <param name="widthChanged">true if the Width component of the size changed.</param>
      <param name="heightChanged">true if the Height component of the size changed.</param>
    </member>
    <member name="P:System.Windows.SizeChangedInfo.HeightChanged">
      <summary>Gets a value indicating whether this <see cref="T:System.Windows.SizeChangedInfo" />  reports a size change that includes a significant change to the Height component. </summary>
      <returns>true if there is a significant Height component change; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.SizeChangedInfo.NewSize">
      <summary>Gets the new size being reported. </summary>
      <returns>The new size.</returns>
    </member>
    <member name="P:System.Windows.SizeChangedInfo.PreviousSize">
      <summary> Gets the previous size of the size-related value being reported as changed. </summary>
      <returns>The previous size.</returns>
    </member>
    <member name="P:System.Windows.SizeChangedInfo.WidthChanged">
      <summary> Gets a value that declares whether the Width component of the size changed. </summary>
      <returns>true if the width changed; otherwise, false. </returns>
    </member>
    <member name="T:System.Windows.SizeToContent">
      <summary>Specifies how a window will automatically size itself to fit the size of its content. Used by the <see cref="P:System.Windows.Window.SizeToContent" /> property.</summary>
    </member>
    <member name="F:System.Windows.SizeToContent.Manual">
      <summary>Specifies that a window will not automatically set its size to fit the size of its content. Instead, the size of a window is determined by other properties, including <see cref="P:System.Windows.FrameworkElement.Width" />, <see cref="P:System.Windows.FrameworkElement.Height" />, <see cref="P:System.Windows.FrameworkElement.MaxWidth" />, <see cref="P:System.Windows.FrameworkElement.MaxHeight" />, <see cref="P:System.Windows.FrameworkElement.MinWidth" />, and <see cref="P:System.Windows.FrameworkElement.MinHeight" />. See WPF Windows Overview.</summary>
    </member>
    <member name="F:System.Windows.SizeToContent.Width">
      <summary>Specifies that a window will automatically set its width to fit the width of its content, but not the height.</summary>
    </member>
    <member name="F:System.Windows.SizeToContent.Height">
      <summary>Specifies that a window will automatically set its height to fit the height of its content, but not the width.</summary>
    </member>
    <member name="F:System.Windows.SizeToContent.WidthAndHeight">
      <summary>Specifies that a window will automatically set both its width and height to fit the width and height of its content.</summary>
    </member>
    <member name="T:System.Windows.SourceChangedEventArgs">
      <summary>Provides data for the SourceChanged event, used for interoperation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Windows.SourceChangedEventArgs.#ctor(System.Windows.PresentationSource,System.Windows.PresentationSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SourceChangedEventArgs" /> class, using supplied information for the old and new sources. </summary>
      <param name="oldSource">The old <see cref="T:System.Windows.PresentationSource" /> that this handler is being notified about.</param>
      <param name="newSource">The new <see cref="T:System.Windows.PresentationSource" /> that this handler is being notified about.</param>
    </member>
    <member name="M:System.Windows.SourceChangedEventArgs.#ctor(System.Windows.PresentationSource,System.Windows.PresentationSource,System.Windows.IInputElement,System.Windows.IInputElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.SourceChangedEventArgs" /> class, using supplied information for the old and new sources, the element that this change effects, and the previous reported parent of that element. </summary>
      <param name="oldSource">The old <see cref="T:System.Windows.PresentationSource" /> that this handler is being notified about.</param>
      <param name="newSource">The new <see cref="T:System.Windows.PresentationSource" /> that this handler is being notified about.</param>
      <param name="element">The element whose parent changed causing the source to change.</param>
      <param name="oldParent">The old parent of the element whose parent changed causing the source to change.</param>
    </member>
    <member name="P:System.Windows.SourceChangedEventArgs.Element">
      <summary>Gets the element whose parent change causing the presentation source information to change. </summary>
      <returns>The element that is reporting the change.</returns>
    </member>
    <member name="P:System.Windows.SourceChangedEventArgs.NewSource">
      <summary>Gets the new source involved in this source change. </summary>
      <returns>The new <see cref="T:System.Windows.PresentationSource" />.</returns>
    </member>
    <member name="P:System.Windows.SourceChangedEventArgs.OldParent">
      <summary>Gets the previous parent of the element whose parent change causing the presentation source information to change. </summary>
      <returns>The previous parent element source.</returns>
    </member>
    <member name="P:System.Windows.SourceChangedEventArgs.OldSource">
      <summary>Gets the old source involved in this source change. </summary>
      <returns>The old <see cref="T:System.Windows.PresentationSource" />.</returns>
    </member>
    <member name="T:System.Windows.SourceChangedEventHandler">
      <summary>Represents the method that will handle the "SourceChanged" event on specific listener elements.</summary>
      <param name="sender">The object where the event is raised, and the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.StrokeCollectionConverter">
      <summary>Converts a <see cref="T:System.Windows.Ink.StrokeCollection" /> to a string.</summary>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.StrokeCollectionConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.StrokeCollectionConverter" /> can convert an object of a specified type to a <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>true if the <see cref="T:System.Windows.StrokeCollectionConverter" /> can convert an object of type <paramref name="sourceType" /> to a <see cref="T:System.Windows.Ink.StrokeCollection" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides the format context.</param>
      <param name="sourceType">The <see cref="T:System.Type" /> to convert from.</param>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.StrokeCollectionConverter" /> can convert a <see cref="T:System.Windows.Ink.StrokeCollection" /> to the specified type.</summary>
      <returns>true if the <see cref="T:System.Windows.StrokeCollectionConverter" /> can convert a <see cref="T:System.Windows.Ink.StrokeCollection" /> to the <paramref name="sourceType" />; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides the format context.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert to.</param>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> converted from <paramref name="value" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Windows.Ink.StrokeCollection" /> to a string.</summary>
      <returns>An object that represents the specified <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
    </member>
    <member name="M:System.Windows.StrokeCollectionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context. </summary>
      <returns>false in all cases.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
    </member>
    <member name="T:System.Windows.TextAlignment">
      <summary>Specifies whether the text in the object is left-aligned, right-aligned, centered, or justified.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Left">
      <summary>Default. Text is aligned to the left.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Right">
      <summary>Text is aligned to the right.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Center">
      <summary>Text is centered.</summary>
    </member>
    <member name="F:System.Windows.TextAlignment.Justify">
      <summary>Text is justified.</summary>
    </member>
    <member name="T:System.Windows.TextDataFormat">
      <summary>Specifies the data format of the text data.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.Text">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Text" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.UnicodeText">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.UnicodeText" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.Rtf">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Rtf" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.Html">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Html" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.CommaSeparatedValue">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.CommaSeparatedValue" /> data format.</summary>
    </member>
    <member name="F:System.Windows.TextDataFormat.Xaml">
      <summary>Specifies that the text data is in the <see cref="F:System.Windows.DataFormats.Xaml" /> data format.</summary>
    </member>
    <member name="T:System.Windows.TextDecoration">
      <summary>Represents a text decoration, which a visual ornamentation that is added to text (such as an underline).</summary>
    </member>
    <member name="M:System.Windows.TextDecoration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecoration" /> class.</summary>
    </member>
    <member name="M:System.Windows.TextDecoration.#ctor(System.Windows.TextDecorationLocation,System.Windows.Media.Pen,System.Double,System.Windows.TextDecorationUnit,System.Windows.TextDecorationUnit)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecoration" /> class with the specified <see cref="P:System.Windows.TextDecoration.Location" />, <see cref="P:System.Windows.TextDecoration.Pen" />, <see cref="P:System.Windows.TextDecoration.PenOffset" />, <see cref="P:System.Windows.TextDecoration.PenOffsetUnit" />, and <see cref="P:System.Windows.TextDecoration.PenThicknessUnit" /> values.  </summary>
      <param name="location">The location of the text decoration.</param>
      <param name="pen">The <see cref="T:System.Windows.Media.Pen" /> used to draw the text decoration. If this value is null, the text decoration color matches the text color to which it is applied, and the text decoration's thickness is set to the font's recommended thickness.</param>
      <param name="penOffset">The vertical displacement from the text decoration's location. A negative value moves the decoration lower, while a positive value moves the decoration higher.</param>
      <param name="penOffsetUnit">The units used to interpret the value of <paramref name="penOffset" />.</param>
      <param name="penThicknessUnit">The units used to interpret the value of the <see cref="P:System.Windows.Media.Pen.Thickness" /> for the <paramref name="pen" />.</param>
    </member>
    <member name="M:System.Windows.TextDecoration.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.TextDecoration" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.TextDecoration.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.TextDecoration" /> object, making deep copies of this object's current values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property value is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property value is true.</returns>
    </member>
    <member name="P:System.Windows.TextDecoration.Location">
      <summary>Gets or sets the vertical location at which the text decoration is drawn.  </summary>
      <returns>The vertical location at which the text decoration is drawn.</returns>
    </member>
    <member name="F:System.Windows.TextDecoration.LocationProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.Location" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.TextDecoration.Location" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.TextDecoration.Pen">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Pen" /> used to draw the text decoration.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Pen" /> used to draw the text decoration. If this value is null, the decoration color matches the text to which it is applied and the decoration's thickness is set to the font's recommended thickness.</returns>
    </member>
    <member name="P:System.Windows.TextDecoration.PenOffset">
      <summary>Gets or sets the text decoration's offset from its <see cref="P:System.Windows.TextDecoration.Location" />.  </summary>
      <returns>The text decoration's offset from its <see cref="P:System.Windows.TextDecoration.Location" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.TextDecoration.PenOffsetProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.PenOffset" /> dependency property. </summary>
      <returns>The identifier for the  <see cref="P:System.Windows.TextDecoration.PenOffset" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.TextDecoration.PenOffsetUnit">
      <summary>Gets the units in which the <see cref="P:System.Windows.TextDecoration.PenOffset" /> value is expressed.  </summary>
      <returns>The units in which the <see cref="P:System.Windows.TextDecoration.PenOffset" /> value is expressed. The default is <see cref="F:System.Windows.TextDecorationUnit.FontRecommended" />.</returns>
    </member>
    <member name="F:System.Windows.TextDecoration.PenOffsetUnitProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.PenOffsetUnit" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.TextDecoration.PenOffsetUnit" /> dependency property. </returns>
    </member>
    <member name="F:System.Windows.TextDecoration.PenProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.Pen" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.TextDecoration.Pen" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.TextDecoration.PenThicknessUnit">
      <summary>Gets the units in which the <see cref="P:System.Windows.Media.Pen.Thickness" /> of the text decoration's <see cref="P:System.Windows.TextDecoration.Pen" /> is expressed.  </summary>
      <returns>The units in which the <see cref="P:System.Windows.Media.Pen.Thickness" /> of the text decoration's <see cref="P:System.Windows.TextDecoration.Pen" /> is expressed. The default is <see cref="F:System.Windows.TextDecorationUnit.FontRecommended" />.</returns>
    </member>
    <member name="F:System.Windows.TextDecoration.PenThicknessUnitProperty">
      <summary>Identifies the <see cref="P:System.Windows.TextDecoration.PenThicknessUnit" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.TextDecoration.PenThicknessUnit" /> dependency property. </returns>
    </member>
    <member name="T:System.Windows.TextDecorationCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.TextDecoration" /> instances.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.#ctor">
      <summary>Initializes a new <see cref="T:System.Windows.TextDecorationCollection" /> instance that is empty.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.TextDecoration})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecorationCollection" /> class by specifying an enumerator.</summary>
      <param name="collection">An enumerator of type <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.#ctor(System.Int32)">
      <summary>Initializes a new <see cref="T:System.Windows.TextDecorationCollection" /> instance that is empty and has the specified initial capacity.</summary>
      <param name="capacity">The number of elements that the new collection is initially capable of storing.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Add(System.Collections.Generic.IEnumerable{System.Windows.TextDecoration})">
      <summary>Adds a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to the collection.</summary>
      <param name="textDecorations">A generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.Windows.TextDecoration" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Add(System.Windows.TextDecoration)">
      <summary>Inserts the specified <see cref="T:System.Windows.TextDecoration" /> object into the collection.</summary>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to insert.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.TextDecoration" /> objects from the <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.TextDecorationCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.TextDecorationCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Contains(System.Windows.TextDecoration)">
      <summary>Determines if the <see cref="T:System.Windows.TextDecorationCollection" /> contains the specified <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>true if <paramref name="value" /> is in the collection; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to locate.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.CopyTo(System.Windows.TextDecoration[],System.Int32)">
      <summary>Copies the <see cref="T:System.Windows.TextDecoration" /> objects in the collection into an array of <see cref="T:System.Windows.TextDecorationCollection" />, starting at the specified index position.</summary>
      <param name="array">The destination array.</param>
      <param name="index">The zero-based index position where copying begins.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.TextDecoration" /> objects in the <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An enumerator that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.IndexOf(System.Windows.TextDecoration)">
      <summary>Returns the index of the specified <see cref="T:System.Windows.TextDecoration" /> object within the collection. </summary>
      <returns>The zero-based index of <paramref name="value" />, if found; otherwise -1;</returns>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to locate.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Insert(System.Int32,System.Windows.TextDecoration)">
      <summary>Inserts the specified <see cref="T:System.Windows.TextDecoration" /> object at the specified index position in the collection.</summary>
      <param name="index">The zero-based index position to insert the object.</param>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to insert.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.TextDecoration" /> object at the specified index position.</summary>
      <returns>The <see cref="T:System.Windows.TextDecoration" /> object at the <paramref name="index" /> position.</returns>
      <param name="index">The zero-based index position of the object to get or set.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Remove(System.Windows.TextDecoration)">
      <summary>Removes the specified <see cref="T:System.Windows.TextDecoration" /> object from the collection.</summary>
      <returns>true if <paramref name="value" /> was successfully deleted; otherwise false.</returns>
      <param name="value">The <see cref="T:System.Windows.TextDecoration" /> object to remove.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Windows.TextDecoration" /> object from the collection at the specified index.</summary>
      <param name="index">The zero-based index position from where to delete the object.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>true if the <see cref="T:System.Windows.TextDecorationCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Windows.TextDecorationCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.TextDecorationCollection" />.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the collection.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.TextDecorationCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.TextEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the collection.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the collection at the specified index.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the collection has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Windows.TextDecorationCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the <see cref="T:System.Windows.TextDecorationCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the collection.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.TextDecorationCollection" />.</param>
    </member>
    <member name="T:System.Windows.TextDecorationCollection.Enumerator">
      <summary>Enumerates <see cref="T:System.Windows.TextDecoration" /> items in a <see cref="T:System.Windows.TextDecoration" />.</summary>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.Enumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current <see cref="T:System.Windows.TextDecoration" /> in the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advanced to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.TextDecorationCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this members, see <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.TextDecorationCollection.Enumerator.System#IDisposable#Dispose">
      <summary>For a description of this members, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="T:System.Windows.TextDecorationCollectionConverter">
      <summary>Converts instances of <see cref="T:System.Windows.TextDecorationCollection" /> from other data types.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.TextDecorationCollectionConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this converter can convert an object of the given type to an instance of <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
      <returns>true if the converter can convert the provided type to an instance of <see cref="T:System.Windows.TextDecorationCollection" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.TextDecorationCollection" /> can be converted to a different type.</summary>
      <returns>false is always returned because the <see cref="T:System.Windows.TextDecorationCollection" /> cannot be converted to another type.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.FontWeight" /> created from the converted <paramref name="input" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted. </param>
      <param name="input">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Occurs if <paramref name="input" /> is null or is not a valid type for conversion.</exception>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.ConvertFromString(System.String)">
      <summary>Attempts to convert a specified string to an instance of <see cref="T:System.Windows.TextDecorationCollection" />.</summary>
      <returns>The instance of <see cref="T:System.Windows.TextDecorationCollection" /> created from the converted <paramref name="text" />.</returns>
      <param name="text">The <see cref="T:System.String" /> to be converted into the <see cref="T:System.Windows.TextDecorationCollection" /> object.</param>
    </member>
    <member name="M:System.Windows.TextDecorationCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.TextDecorationCollection" /> to a specified type.</summary>
      <returns>null is always returned because <see cref="T:System.Windows.TextDecorationCollection" /> cannot be converted to any other type.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The instance of <see cref="T:System.Windows.TextDecorationCollection" /> to convert.</param>
      <param name="destinationType">The type this instance of <see cref="T:System.Windows.TextDecorationCollection" /> is converted to.</param>
    </member>
    <member name="T:System.Windows.TextDecorationLocation">
      <summary>Specifies the vertical position of a <see cref="T:System.Windows.TextDecoration" /> object.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationLocation.Underline">
      <summary>The vertical position of an underline. This is the default value.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationLocation.OverLine">
      <summary>The vertical position of an overline.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationLocation.Strikethrough">
      <summary>The vertical position of a strikethrough.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationLocation.Baseline">
      <summary>The vertical position of a baseline.</summary>
    </member>
    <member name="T:System.Windows.TextDecorations">
      <summary>Provides a set of static predefined text decorations.</summary>
    </member>
    <member name="P:System.Windows.TextDecorations.Baseline">
      <summary>Specifies a baseline <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>A value that represents a baseline <see cref="T:System.Windows.TextDecoration" />.</returns>
    </member>
    <member name="P:System.Windows.TextDecorations.OverLine">
      <summary>Specifies an overline <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>A value that represents an overline <see cref="T:System.Windows.TextDecoration" />.</returns>
    </member>
    <member name="P:System.Windows.TextDecorations.Strikethrough">
      <summary>Specifies a strikethrough <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>A value that represents a strikethrough <see cref="T:System.Windows.TextDecoration" />.</returns>
    </member>
    <member name="P:System.Windows.TextDecorations.Underline">
      <summary>Specifies an underline <see cref="T:System.Windows.TextDecoration" />.</summary>
      <returns>A value that represents an underline <see cref="T:System.Windows.TextDecoration" />.</returns>
    </member>
    <member name="T:System.Windows.TextDecorationUnit">
      <summary>Specifies the unit type of either a <see cref="T:System.Windows.TextDecoration" /> <see cref="P:System.Windows.TextDecoration.PenOffset" /> or a <see cref="P:System.Windows.TextDecoration.Pen" /> thickness value.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationUnit.FontRecommended">
      <summary>A unit value that is relative to the font used for the <see cref="T:System.Windows.TextDecoration" />. If the decoration spans multiple fonts, an average recommended value is calculated. This is the default value.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationUnit.FontRenderingEmSize">
      <summary>A unit value that is relative to the em size of the font. The value of the offset or thickness is equal to the offset or thickness value multiplied by the font em size.</summary>
    </member>
    <member name="F:System.Windows.TextDecorationUnit.Pixel">
      <summary>A unit value that is expressed in pixels.</summary>
    </member>
    <member name="T:System.Windows.TextMarkerStyle">
      <summary>Describes the appearance of a list item's bullet style.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.None">
      <summary>No marker is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Disc">
      <summary>A solid disc circle is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Circle">
      <summary>A hollow disc circle is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Square">
      <summary>A hollow square shape is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Box">
      <summary>A solid square box is displayed.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.LowerRoman">
      <summary>A lowercase Roman numeral is displayed, starting with the numeral i, for example, i, ii, iii, and iv. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.UpperRoman">
      <summary>An uppercase Roman numeral is displayed, starting with the numeral I, for example, I, II, III, and IV. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.LowerLatin">
      <summary>A lowercase ASCII character is displayed, starting with the letter a, for example, a, b, and c. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.UpperLatin">
      <summary>An uppercase ASCII character is displayed, starting with the letter A, for example, A, B, and C. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="F:System.Windows.TextMarkerStyle.Decimal">
      <summary>A decimal is displayed, starting with the number one, for example, 1, 2, and 3. The <see cref="T:System.Windows.TextMarkerStyle" /> is automatically incremented for each item added to the list.</summary>
    </member>
    <member name="T:System.Windows.TextTrimming">
      <summary>Describes how text is trimmed when it overflows the edge of its containing box.</summary>
    </member>
    <member name="F:System.Windows.TextTrimming.None">
      <summary>Text is not trimmed.</summary>
    </member>
    <member name="F:System.Windows.TextTrimming.CharacterEllipsis">
      <summary>Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.</summary>
    </member>
    <member name="F:System.Windows.TextTrimming.WordEllipsis">
      <summary>Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.</summary>
    </member>
    <member name="T:System.Windows.TextWrapping">
      <summary> Specifies whether text wraps when it reaches the edge of the containing box </summary>
    </member>
    <member name="F:System.Windows.TextWrapping.WrapWithOverflow">
      <summary> Line-breaking occurs if the line overflows beyond the available block width. However, a line may overflow beyond the block width if the line breaking algorithm cannot determine a line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed. </summary>
    </member>
    <member name="F:System.Windows.TextWrapping.NoWrap">
      <summary> No line wrapping is performed. </summary>
    </member>
    <member name="F:System.Windows.TextWrapping.Wrap">
      <summary> Line-breaking occurs if the line overflows beyond the available block width, even if the standard line breaking algorithm cannot determine any line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed. </summary>
    </member>
    <member name="T:System.Windows.UIElement">
      <summary>
        <see cref="T:System.Windows.UIElement" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics. </summary>
    </member>
    <member name="M:System.Windows.UIElement.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIElement" /> class. </summary>
    </member>
    <member name="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
    </member>
    <member name="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
      <param name="handledEventsToo">true to register the handler such that it is invoked even when  the routed event is marked handled in its event data; false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false.Do not routinely ask to rehandle a routed event. For more information, see Remarks.</param>
    </member>
    <member name="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
      <summary>Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement" /> event handler collection.</summary>
      <param name="route">The event route that handlers are added to.</param>
      <param name="e">The event data that is used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers. </param>
    </member>
    <member name="P:System.Windows.UIElement.AllowDrop">
      <summary>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  </summary>
      <returns>true if this element can be used as the target of a drag-and-drop operation; otherwise, false. The default value is false.     </returns>
    </member>
    <member name="F:System.Windows.UIElement.AllowDropProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AllowDrop" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
      <summary>Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.</summary>
      <param name="dp">The identifier for the property to animate.</param>
      <param name="clock">The animation clock that controls and declares the animation.</param>
    </member>
    <member name="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</summary>
      <param name="dp">The property to animate.</param>
      <param name="clock">The animation clock that controls and declares the animation.</param>
      <param name="handoffBehavior">A value of the enumeration. The default is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, which will stop any existing animation and replace with the new one.</param>
    </member>
    <member name="P:System.Windows.UIElement.AreAnyTouchesCaptured">
      <summary>Gets a value that indicates whether at least one touch is captured to this element. </summary>
      <returns>true if at least one touch is captured to this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin">
      <summary>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree. </summary>
      <returns>true if at least one touch is captured to this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element.</summary>
      <returns>true if at least one touch is pressed over this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.AreAnyTouchesOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree. </summary>
      <returns>true if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement.AreAnyTouchesOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.Arrange(System.Windows.Rect)">
      <summary>Positions child elements and determines a size for a <see cref="T:System.Windows.UIElement" />. Parent elements call this method from their <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update. </summary>
      <param name="finalRect">The final size that the parent computes for the child element, provided as a <see cref="T:System.Windows.Rect" /> instance.</param>
    </member>
    <member name="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)">
      <summary>Defines the template for WPF core-level arrange layout definition. </summary>
      <param name="finalRect">The final area within the parent that element should use to arrange itself and its child elements.</param>
    </member>
    <member name="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
      <summary>Starts an animation for a specified animated property on this element. </summary>
      <param name="dp">The property to animate, which is specified as a dependency property identifier.</param>
      <param name="animation">The timeline of the animation to start.</param>
    </member>
    <member name="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation. </summary>
      <param name="dp">The property to animate, which is specified as the dependency property identifier.</param>
      <param name="animation">The timeline of the animation to be applied.</param>
      <param name="handoffBehavior">A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</param>
    </member>
    <member name="P:System.Windows.UIElement.BitmapEffect">
      <summary>Gets or sets a bitmap effect that applies directly to the rendered content for this element.  </summary>
      <returns>The bitmap effect to apply.</returns>
    </member>
    <member name="P:System.Windows.UIElement.BitmapEffectInput">
      <summary> Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  </summary>
      <returns>The source for bitmap effects.</returns>
    </member>
    <member name="F:System.Windows.UIElement.BitmapEffectInputProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property.</summary>
      <returns>The <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> dependency property identifier.</returns>
    </member>
    <member name="F:System.Windows.UIElement.BitmapEffectProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement.BitmapEffect" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.CacheMode">
      <summary>Gets or sets a cached representation of the <see cref="T:System.Windows.UIElement" />. </summary>
      <returns>A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement.CacheModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.CacheMode" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.CaptureMouse">
      <summary>Attempts to force capture of the mouse to this element. </summary>
      <returns>true if the mouse is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement.CaptureStylus">
      <summary> Attempts to force capture of the stylus to this element. </summary>
      <returns>true if the stylus was successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)">
      <summary>Attempts to force capture of a touch to this element.</summary>
      <returns>true if the specified touch is captured to this element; otherwise, false.</returns>
      <param name="touchDevice">The device to capture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="P:System.Windows.UIElement.Clip">
      <summary>Gets or sets the geometry used to define the outline of the contents of an element.  </summary>
      <returns>The geometry to be used for clipping area sizing. The default is a null <see cref="T:System.Windows.Media.Geometry" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement.ClipProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Clip" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Clip" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.ClipToBounds">
      <summary>Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   </summary>
      <returns>true if the content should be clipped; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.ClipToBoundsProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.ClipToBounds" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.CommandBindings">
      <summary>Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element. A <see cref="T:System.Windows.Input.CommandBinding" /> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</summary>
      <returns>The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</returns>
    </member>
    <member name="P:System.Windows.UIElement.DesiredSize">
      <summary>Gets the size that this element computed during the measure pass of the layout process. </summary>
      <returns>The computed size, which becomes the desired size for the arrange pass.</returns>
    </member>
    <member name="E:System.Windows.UIElement.DragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.DragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.DragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.UIElement.DragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.DragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.DragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.DragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.DragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.Drop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.DropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.Drop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.Drop" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Effect">
      <summary>Gets or sets the bitmap effect to apply to the <see cref="T:System.Windows.UIElement" />. </summary>
      <returns>An <see cref="T:System.Windows.Media.Effects.Effect" /> that represents the bitmap effect. </returns>
    </member>
    <member name="F:System.Windows.UIElement.EffectProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Effect" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Effect" /> dependency property. </returns>
    </member>
    <member name="M:System.Windows.UIElement.Focus">
      <summary>Attempts to set focus to this element. </summary>
      <returns>true if keyboard focus and logical focus were set to this element; false if only logical focus was set to this element, or if the call to this method did not force the focus to change.</returns>
    </member>
    <member name="P:System.Windows.UIElement.Focusable">
      <summary>Gets or sets a value that indicates whether the element can receive focus.  </summary>
      <returns>true if the element is focusable; otherwise false. The default is false, but see Remarks.</returns>
    </member>
    <member name="E:System.Windows.UIElement.FocusableChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.Focusable" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.UIElement.FocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Focusable" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)">
      <summary>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation. </summary>
      <returns>The property value as if no animations are attached to the specified dependency property. </returns>
      <param name="dp">The dependency property to check.</param>
    </member>
    <member name="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)">
      <summary>Returns an alternative clipping geometry that represents the region that would be clipped if <see cref="P:System.Windows.UIElement.ClipToBounds" /> were set to true. </summary>
      <returns>The potential clipping geometry.</returns>
      <param name="layoutSlotSize">The available size provided by the element.</param>
    </member>
    <member name="M:System.Windows.UIElement.GetUIParentCore">
      <summary>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists. </summary>
      <returns>An object, if implementation of a derived class has an alternate parent connection to report.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GiveFeedback">
      <summary>Occurs when the input system reports an underlying drag-and-drop event that involves this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotFocus">
      <summary>Occurs when this element gets logical focus. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotMouseCapture">
      <summary>Occurs when this element captures the mouse. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotStylusCapture">
      <summary>Occurs when this element captures the stylus. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.GotTouchCapture">
      <summary>Occurs when a touch is captured to this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.GotTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement.HasAnimatedProperties">
      <summary>Gets a value indicating whether this element has any animated properties. </summary>
      <returns>true if this element has animations attached to any of its properties; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
      <summary>Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.GeometryHitTestResult" />). </summary>
      <returns>Results of the test, including the evaluated geometry.</returns>
      <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
    </member>
    <member name="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)">
      <summary> Implements <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> to supply base element hit testing behavior (returning <see cref="T:System.Windows.Media.HitTestResult" />). </summary>
      <returns>Results of the test, including the evaluated point.</returns>
      <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
    </member>
    <member name="P:System.Windows.UIElement.InputBindings">
      <summary> Gets the collection of input bindings associated with this element. </summary>
      <returns>The collection of input bindings.</returns>
    </member>
    <member name="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)">
      <summary> Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin. </summary>
      <returns>The element child that is located at the given position.</returns>
      <param name="point">The offset coordinates within this element.</param>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateArrange">
      <summary>Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <see cref="M:System.Windows.UIElement.UpdateLayout" />. </summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateMeasure">
      <summary>Invalidates the measurement state (layout) for the element. </summary>
    </member>
    <member name="M:System.Windows.UIElement.InvalidateVisual">
      <summary>Invalidates the rendering of the element, and forces a complete new layout pass. <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> is called after the layout cycle is completed. </summary>
    </member>
    <member name="P:System.Windows.UIElement.IsArrangeValid">
      <summary>Gets a value indicating whether the computed size and position of child elements in this element's layout are valid. </summary>
      <returns>true if the size and position of layout are valid; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsEnabled">
      <summary>Gets or sets a value indicating whether this element is enabled in the user interface (UI).  </summary>
      <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsEnabledChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsEnabled" /> property on this element changes. </summary>
    </member>
    <member name="P:System.Windows.UIElement.IsEnabledCore">
      <summary>Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement.IsEnabled" /> in derived classes. </summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsFocused">
      <summary>Gets a value that determines whether this element has logical focus.  </summary>
      <returns>true if this element has logical focus; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsFocused" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsHitTestVisible">
      <summary>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. </summary>
      <returns>true if this element could be returned as a hit test result from at least one point; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsHitTestVisibleChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property changes on this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.IsHitTestVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsHitTestVisible" />  dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsInputMethodEnabled">
      <summary>Gets a value indicating whether an input method system, such as an Input Method Editor (IME),  is enabled for processing the input to this element. </summary>
      <returns>true if an input method is active; otherwise, false. The default value of the underlying attached property is true; however, this will be influenced by the actual state of input methods at runtime.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsKeyboardFocused">
      <summary>Gets a value indicating whether this element has keyboard focus.  </summary>
      <returns>true if this element has keyboard focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsKeyboardFocusedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsKeyboardFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsKeyboardFocusWithin">
      <summary>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  </summary>
      <returns>true if keyboard focus is on the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged">
      <summary>Occurs when the value of the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsManipulationEnabled">
      <summary>Gets or sets a value that indicates whether manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>true if manipulation events are enabled on this <see cref="T:System.Windows.UIElement" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsManipulationEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMeasureValid">
      <summary>Gets a value indicating whether the current size returned by layout measure is valid. </summary>
      <returns>true if the measure pass of layout returned a valid and current value; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMouseCaptured">
      <summary>Gets a value indicating whether the mouse is captured to this element.  </summary>
      <returns>true if the element has mouse capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsMouseCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsMouseCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMouseCaptureWithin">
      <summary>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. </summary>
      <returns>true if this element or a contained element has mouse capture; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsMouseCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> changes on this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.IsMouseCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMouseDirectlyOver">
      <summary>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the mouse pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsMouseDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsMouseDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsMouseOver">
      <summary>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  </summary>
      <returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsMouseOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsMouseOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsStylusCaptured">
      <summary>Gets a value indicating whether the stylus is captured by this element.  </summary>
      <returns>true if the element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsStylusCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsStylusCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsStylusCaptureWithin">
      <summary>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. </summary>
      <returns>true if this element or a contained element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsStylusCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsStylusCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsStylusDirectlyOver">
      <summary>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the stylus pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsStylusDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsStylusDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsStylusOver">
      <summary> Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  </summary>
      <returns>true if stylus cursor is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.IsStylusOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsStylusOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement.IsVisible">
      <summary>Gets a value indicating whether this element is visible in the user interface (UI).  </summary>
      <returns>true if the element is visible; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement.IsVisibleChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement.IsVisible" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.IsVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement.IsVisible" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyDown">
      <summary>Occurs when a key is pressed while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.KeyUp">
      <summary>Occurs when a key is released while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LayoutUpdated">
      <summary>Occurs when the layout of the various visual elements associated with the current <see cref="T:System.Windows.Threading.Dispatcher" /> changes. </summary>
    </member>
    <member name="E:System.Windows.UIElement.LostFocus">
      <summary>Occurs when this element loses logical focus. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element,. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostMouseCapture">
      <summary>Occurs when this element loses mouse capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostStylusCapture">
      <summary>Occurs when this element loses stylus capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.LostTouchCapture">
      <summary>Occurs when this element loses a touch capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement.LostTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationBoundaryFeedback">
      <summary>Occurs when the manipulation encounters a boundary.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event.</summary>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationCompleted">
      <summary>Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationCompletedEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationDelta">
      <summary>Occurs when the input device changes position during a manipulation. </summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationDeltaEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationInertiaStarting">
      <summary>Occurs when the input device loses contact with the <see cref="T:System.Windows.UIElement" /> object during a manipulation and inertia begins.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationInertiaStartingEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationStarted">
      <summary>Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /> object.</summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationStartedEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.ManipulationStarting">
      <summary>Occurs when the manipulation processor is first created. </summary>
    </member>
    <member name="F:System.Windows.UIElement.ManipulationStartingEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.Measure(System.Windows.Size)">
      <summary>Updates the <see cref="P:System.Windows.UIElement.DesiredSize" /> of a <see cref="T:System.Windows.UIElement" />. Parent elements call this method from their own <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementations to form a recursive layout update. Calling this method constitutes the first pass (the "Measure" pass) of a layout update. </summary>
      <param name="availableSize">The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</param>
    </member>
    <member name="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)">
      <summary>When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content. </summary>
      <returns>The desired size of this element in layout.</returns>
      <param name="availableSize">The available size that the parent element can allocate for the child.</param>
    </member>
    <member name="E:System.Windows.UIElement.MouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseEnter">
      <summary>Occurs when the mouse pointer enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseMove">
      <summary>Occurs when the mouse pointer moves while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseUp">
      <summary>Occurs when any mouse button is released over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.MouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.MouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.MouseWheel" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)">
      <summary>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element. </summary>
      <returns>true if the requested traversal was performed; otherwise, false. </returns>
      <param name="request">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
      <summary>Provides class handling for when an access key that is meaningful for this element is invoked. </summary>
      <param name="e">The event data to the access key event. The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)">
      <summary>Supports layout behavior when a child element is resized. </summary>
      <param name="child">The child element that is being resized.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnCreateAutomationPeer">
      <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.GotFocus" /> routed event by using the event data provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.GotFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked just before the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement.LostFocus" /> routed event by using the event data that is provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.LostTouchCapture" /> routed event that occurs when this element loses a touch capture .</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</summary>
      <param name="e">The data for the event. </param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
      <summary>Called when the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event occurs.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.ManipulationStarting" /> routed event that occurs when the manipulation processor is first created. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" />  that contains the event data. </param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event that occurs when a touch presses this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)">
      <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing. </summary>
      <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>When overridden in a derived class, participates in rendering operations that are directed by the layout system. This method is invoked after layout update, and before rendering, if the element's <see cref="P:System.Windows.UIElement.RenderSize" /> has changed as a result of layout update. </summary>
      <param name="info">The packaged parameters (<see cref="T:System.Windows.SizeChangedInfo" />), which includes old and new sizes, and which dimension actually changes.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event that occurs when a touch presses inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this <see cref="T:System.Windows.UIElement" />. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event that occurs when a touch is released inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Invoked when the parent element of this <see cref="T:System.Windows.UIElement" /> reports a change to its underlying visual parent.</summary>
      <param name="oldParent">The previous parent. This may be provided as null if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</param>
    </member>
    <member name="P:System.Windows.UIElement.Opacity">
      <summary>Gets or sets the opacity factor applied to the entire <see cref="T:System.Windows.UIElement" /> when it is rendered in the user interface (UI).  </summary>
      <returns>The opacity factor. Default opacity is 1.0. Expected values are between 0.0 and 1.0.</returns>
    </member>
    <member name="P:System.Windows.UIElement.OpacityMask">
      <summary>Gets or sets an opacity mask, as a <see cref="T:System.Windows.Media.Brush" /> implementation that is applied to any alpha-channel masking for the rendered content of this element.  </summary>
      <returns>The brush to use for opacity masking.</returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityMaskProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.OpacityMask" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.UIElement.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Opacity" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement.PersistId">
      <summary>Gets a value that uniquely identifies this element. </summary>
      <returns>The unique identifier for this element.</returns>
    </member>
    <member name="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
      <summary>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</summary>
      <returns>The element that would have received focus if <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</returns>
      <param name="direction">The direction of the requested focus traversal.</param>
    </member>
    <member name="E:System.Windows.UIElement.PreviewDragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewDragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewDragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewDragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewDragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewDragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewDrop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewDropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewDrop" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewGiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewGiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewGotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewKeyDown">
      <summary>Occurs when a key is pressed while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewKeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewKeyUp">
      <summary>Occurs when a key is released while focus is on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewKeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewLostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseUp">
      <summary>Occurs when any mouse button is released while the mouse pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewMouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewMouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewQueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewQueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusDown">
      <summary>Occurs when the stylus touches the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusMove">
      <summary>Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewStylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewStylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> routed event. </returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewTextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewTextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewTextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewTouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewTouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewTouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewTouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.PreviewTouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.PreviewTouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.QueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.UIElement.QueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.QueryCursor">
      <summary>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position. </summary>
    </member>
    <member name="F:System.Windows.UIElement.QueryCursorEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.QueryCursor" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)">
      <summary>Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data). </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise. </param>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseAllTouchCaptures">
      <summary>Releases all captured touch devices from this element.</summary>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseMouseCapture">
      <summary> Releases the mouse capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseStylusCapture">
      <summary> Releases the stylus device capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
      <summary>Attempts to release the specified touch device from this element.</summary>
      <returns>true if the touch device is released; otherwise, false.</returns>
      <param name="touchDevice">The device to release. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary> Removes the specified routed event handler from this element. </summary>
      <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from the event handler collection on this element.</param>
    </member>
    <member name="P:System.Windows.UIElement.RenderSize">
      <summary>Gets (or sets, but see Remarks) the final render size of this element. </summary>
      <returns>The rendered size for this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransform">
      <summary>Gets or sets transform information that affects the rendering position of this element.  </summary>
      <returns>Describes the specifics of the desired render transform. The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</returns>
    </member>
    <member name="P:System.Windows.UIElement.RenderTransformOrigin">
      <summary>Gets or sets the center point of any possible render transform declared by <see cref="P:System.Windows.UIElement.RenderTransform" />, relative to the bounds of the element.  </summary>
      <returns>The value that declares the render transform. The default value is a <see cref="T:System.Windows.Point" /> with coordinates (0,0). </returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformOriginProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> dependency property identifier.</returns>
    </member>
    <member name="F:System.Windows.UIElement.RenderTransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.RenderTransform" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.ShouldSerializeCommandBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.CommandBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.UIElement.CommandBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement.ShouldSerializeInputBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement.InputBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.UIElement.InputBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.UIElement.SnapsToDevicePixels">
      <summary>Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  </summary>
      <returns>true if the element should render in accordance to device pixels; otherwise, false. The default as declared on <see cref="T:System.Windows.UIElement" /> is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement.SnapsToDevicePixelsProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusDown">
      <summary>Occurs when the stylus touches the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusEnter">
      <summary>Occurs when the stylus enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusLeave">
      <summary>Occurs when the stylus leaves the bounds of the element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusMove">
      <summary>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement.StylusPlugIns">
      <summary>Gets a collection of all stylus plug-in (customization) objects associated with this element. </summary>
      <returns>The collection of stylus plug-ins, as a specialized collection.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.StylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.StylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.StylusUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchEnter">
      <summary>Occurs when a touch moves from outside to inside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchEnter" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement.TouchesCaptured">
      <summary>Gets all touch devices that are captured to this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement.TouchesCapturedWithin">
      <summary>Gets all touch devices that are captured to this element or any child elements in its visual tree. </summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</returns>
    </member>
    <member name="P:System.Windows.UIElement.TouchesDirectlyOver">
      <summary>Gets all touch devices that are over this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement.TouchesOver">
      <summary>Gets all touch devices that are over this element or any child elements in its visual tree.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchLeave">
      <summary>Occurs when a touch moves from inside to outside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement.TouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement.TouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement.TouchUp" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)">
      <summary>Translates a point relative to this element to coordinates that are relative to the specified element. </summary>
      <returns>A point value, now relative to the target element rather than this source element.</returns>
      <param name="point">The point value, as relative to this element.</param>
      <param name="relativeTo">The element to translate the given point into.</param>
    </member>
    <member name="P:System.Windows.UIElement.Uid">
      <summary>Gets or sets the Uid for this element.  </summary>
      <returns>A string that the Uid for this element.</returns>
    </member>
    <member name="F:System.Windows.UIElement.UidProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Uid" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement.UpdateLayout">
      <summary>Ensures that all visual child elements of this element are properly updated for layout. </summary>
    </member>
    <member name="P:System.Windows.UIElement.Visibility">
      <summary>Gets or sets the user interface (UI) visibility of this element.  </summary>
      <returns>A value of the enumeration. The default value is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement.VisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement.Visibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.UIElement3D">
      <summary>
        <see cref="T:System.Windows.UIElement3D" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics. </summary>
    </member>
    <member name="M:System.Windows.UIElement3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.UIElement3D" /> class. </summary>
    </member>
    <member name="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
      <summary>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <paramref name="handledEventsToo" /> as true to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route. </summary>
      <param name="routedEvent">An identifier for the routed event to be handled.</param>
      <param name="handler">A reference to the handler implementation.</param>
      <param name="handledEventsToo">true to register the handler such that it is invoked even when the routed event is marked handled in its event data; false to register the handler with the default condition that it will not be invoked if the routed event is already marked handled. The default is false.Do not routinely ask to rehandle a routed event. For more information, see Remarks.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)">
      <summary>Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement3D" /> event handler collection.</summary>
      <param name="route">The event route that handlers are added to.</param>
      <param name="e">The event data that is used to add the handlers. This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers. </param>
    </member>
    <member name="P:System.Windows.UIElement3D.AllowDrop">
      <summary>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  </summary>
      <returns>true if this element can be used as the target of a drag-and-drop operation; otherwise, false. The default value is false.     </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AllowDropProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AllowDrop" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AllowDrop" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.AreAnyTouchesCaptured">
      <summary>Gets a value that indicates whether at least one touch is captured to this element.</summary>
      <returns>true if at least one touch is captured to this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AreAnyTouchesCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin">
      <summary>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</summary>
      <returns>true if at least one touch is captured to this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element.</summary>
      <returns>true if at least one touch is pressed over this element; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.AreAnyTouchesOver">
      <summary>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree. </summary>
      <returns>true if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, false. </returns>
    </member>
    <member name="F:System.Windows.UIElement3D.AreAnyTouchesOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.CaptureMouse">
      <summary>Attempts to force capture of the mouse to this element. </summary>
      <returns>true if the mouse is successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.CaptureStylus">
      <summary> Attempts to force capture of the stylus to this element. </summary>
      <returns>true if the stylus was successfully captured; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)">
      <summary>Attempts to force capture of a touch to this element.</summary>
      <returns>true if the specified touch is captured to this element; otherwise, false. </returns>
      <param name="touchDevice">The device to capture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="P:System.Windows.UIElement3D.CommandBindings">
      <summary>Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element. </summary>
      <returns>The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.DragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.DragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.DragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.DragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.DragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.DragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.DragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.DragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.DragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.DragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.DragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.DragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.Drop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.DropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.Drop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.Drop" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.Focus">
      <summary> Attempts to set the logical focus on this element. </summary>
      <returns>true if both logical and keyboard focus were set to this element; false if only logical focus was set.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.Focusable">
      <summary>Gets or sets a value that indicates whether the element can receive focus.  </summary>
      <returns>true if the element is focusable; otherwise false. The default is false, but see Remarks.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.FocusableChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.Focusable" /> property changes.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.FocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.Focusable" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.Focusable" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.GetUIParentCore">
      <summary>When overridden in a derived class, returns an alternative user interface (UI) parent for this element if no visual parent exists. </summary>
      <returns>An object, if implementation of a derived class has an alternate parent connection to report.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GiveFeedback">
      <summary>Occurs when the input system reports an underlying drag-and-drop event that involves this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotFocus">
      <summary>Occurs when this element gets logical focus. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotMouseCapture">
      <summary>Occurs when this element captures the mouse. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotStylusCapture">
      <summary>Occurs when this element captures the stylus. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.GotTouchCapture">
      <summary>Occurs when a touch is captured to this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.GotTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.InputBindings">
      <summary> Gets the collection of input bindings associated with this element. </summary>
      <returns>The collection of input bindings.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.InvalidateModel">
      <summary>Invalidates the model that represents the element.</summary>
    </member>
    <member name="P:System.Windows.UIElement3D.IsEnabled">
      <summary>Gets or sets a value indicating whether this element is enabled in the user interface (UI).  </summary>
      <returns>true if the element is enabled; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsEnabledChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> property on this element changes. </summary>
    </member>
    <member name="P:System.Windows.UIElement3D.IsEnabledCore">
      <summary>Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement3D.IsEnabled" /> in derived classes. </summary>
      <returns>true if the element is enabled; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsFocused">
      <summary>Gets a value that determines whether this element has logical focus.  </summary>
      <returns>true if this element has logical focus; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.IsFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsFocused" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsFocused" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsHitTestVisible">
      <summary>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. </summary>
      <returns>true if this element could be returned as a hit test result from at least one point; otherwise, false. The default value is true.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsHitTestVisibleChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property changes on this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsHitTestVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" />  dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsInputMethodEnabled">
      <summary>Gets a value indicating whether an input method system, such as an Input Method Editor (IME),  is enabled for processing the input to this element. </summary>
      <returns>true if an input method is active; otherwise, false. The default value of the underlying attached property is true; however, this will be influenced by the actual state of input methods at runtime.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsKeyboardFocused">
      <summary>Gets a value indicating whether this element has keyboard focus.  </summary>
      <returns>true if this element has keyboard focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsKeyboardFocusedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsKeyboardFocusWithin">
      <summary>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  </summary>
      <returns>true if keyboard focus is on the element or its child elements; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsMouseCaptured">
      <summary>Gets a value indicating whether the mouse is captured to this element.  </summary>
      <returns>true if the element has mouse capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsMouseCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsMouseCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsMouseCaptureWithin">
      <summary>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. </summary>
      <returns>true if this element or a contained element has mouse capture; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> property changes on this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsMouseCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsMouseDirectlyOver">
      <summary>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the mouse pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsMouseDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsMouseOver">
      <summary>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  </summary>
      <returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.IsMouseOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsStylusCaptured">
      <summary>Gets a value indicating whether the stylus is captured by this element.  </summary>
      <returns>true if the element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsStylusCapturedChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsStylusCapturedProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsStylusCaptureWithin">
      <summary>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. </summary>
      <returns>true if this element or a contained element has stylus capture; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsStylusCaptureWithinProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsStylusDirectlyOver">
      <summary>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  </summary>
      <returns>true if the stylus pointer is over the same element result as a hit test; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsStylusDirectlyOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsStylusOver">
      <summary> Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  </summary>
      <returns>true if stylus cursor is over the element or its child elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.IsStylusOverProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> dependency property.  </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> dependency property identifier.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.IsVisible">
      <summary>Gets a value indicating whether this element is visible in the user interface (UI). </summary>
      <returns>true if the element is visible; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.IsVisibleChanged">
      <summary>Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsVisible" /> property changes on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.IsVisibleProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.IsVisible" /> dependency property. </summary>
      <returns>The <see cref="P:System.Windows.UIElement3D.IsVisible" /> dependency property identifier.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.KeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.KeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.KeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.KeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.KeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.KeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostFocus">
      <summary>Occurs when this element loses logical focus. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostMouseCapture">
      <summary>Occurs when this element loses mouse capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostStylusCapture">
      <summary>Occurs when this element loses stylus capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostStylusCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.LostTouchCapture">
      <summary>Occurs when this element loses a touch capture. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.LostTouchCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseEnter">
      <summary>Occurs when the mouse pointer enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseMove">
      <summary>Occurs when the mouse pointer moves while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseUp">
      <summary>Occurs when any mouse button is released over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.MouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.MouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.MouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.MouseWheel" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)">
      <summary>Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element. </summary>
      <returns>true if the requested traversal was performed; otherwise, false. </returns>
      <param name="request">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)">
      <summary> Provides class handling for when an access key that is meaningful for this element is invoked. </summary>
      <param name="e">The event data to the access key event. The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnCreateAutomationPeer">
      <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.Drop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event by using the event data provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.GotFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked just before the <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" /> event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCapturedChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" /> event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event by using the event data that is provided. </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.LostFocus" /> event.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event that occurs when a touch presses this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event that occurs when a touch presses inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element. </summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event that occurs when a touch moves while inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)">
      <summary>Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event that occurs when a touch is released inside this element.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.OnUpdateModel">
      <summary>Participates in rendering operations when overridden in a derived class.</summary>
    </member>
    <member name="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Invoked when the parent element of this <see cref="T:System.Windows.UIElement3D" /> reports a change to its underlying visual parent.</summary>
      <param name="oldParent">The previous parent. This may be provided as null if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)">
      <summary>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</summary>
      <returns>The element that would have received focus if <see cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</returns>
      <param name="direction">The direction of the requested focus traversal.</param>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewDragEnter">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewDragEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewDragLeave">
      <summary>Occurs when the input system reports an underlying drag event with this element as the drag origin. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewDragLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewDragOver">
      <summary>Occurs when the input system reports an underlying drag event with this element as the potential drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewDragOverEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewDrop">
      <summary>Occurs when the input system reports an underlying drop event with this element as the drop target. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewDropEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewGiveFeedback">
      <summary>Occurs when a drag-and-drop operation is started. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewGiveFeedbackEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus">
      <summary>Occurs when the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewKeyDown">
      <summary>Occurs when a key is pressed while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewKeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewKeyUp">
      <summary>Occurs when a key is released while the keyboard is focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewKeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus">
      <summary>Occurs when the keyboard is no longer focused on this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseDown">
      <summary>Occurs when any mouse button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown">
      <summary>Occurs when the left mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp">
      <summary>Occurs when the left mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseMove">
      <summary>Occurs when the mouse pointer moves while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown">
      <summary>Occurs when the right mouse button is pressed while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp">
      <summary>Occurs when the right mouse button is released while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseUp">
      <summary>Occurs when any mouse button is released while the mouse pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewMouseWheel">
      <summary>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewMouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewQueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewQueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusDown">
      <summary>Occurs when the stylus touches the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusMove">
      <summary>Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewStylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewStylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> routed event. </returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewTextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewTextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewTouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewTouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewTouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewTouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.PreviewTouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.PreviewTouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.QueryContinueDrag">
      <summary>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.QueryContinueDragEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.QueryCursor">
      <summary>Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.QueryCursorEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.QueryCursor" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.QueryCursor" /> routed event.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)">
      <summary>Raises a specific routed event. The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data). </summary>
      <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise. </param>
    </member>
    <member name="M:System.Windows.UIElement3D.ReleaseAllTouchCaptures">
      <summary>Releases all captured touch devices from this element.</summary>
    </member>
    <member name="M:System.Windows.UIElement3D.ReleaseMouseCapture">
      <summary> Releases the mouse capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.UIElement3D.ReleaseStylusCapture">
      <summary> Releases the stylus device capture, if this element held the capture. </summary>
    </member>
    <member name="M:System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)">
      <summary>Attempts to release the specified touch device from this element.</summary>
      <returns>true if the touch device is released; otherwise, false.</returns>
      <param name="touchDevice">The device to release. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="touchDevice" /> is null.</exception>
    </member>
    <member name="M:System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
      <summary> Removes the specified routed event handler from this element. </summary>
      <param name="routedEvent">The identifier of the routed event for which the handler is attached.</param>
      <param name="handler">The specific handler implementation to remove from the event handler collection on this element.</param>
    </member>
    <member name="M:System.Windows.UIElement3D.ShouldSerializeCommandBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.UIElement3D.ShouldSerializeInputBindings">
      <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property on instances of this class.</summary>
      <returns>true if the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusButtonDown">
      <summary>Occurs when the stylus button is pressed while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusButtonDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusButtonUp">
      <summary>Occurs when the stylus button is released while the pointer is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusButtonUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusDown">
      <summary>Occurs when the stylus touches the digitizer while the stylus is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusDown" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusEnter">
      <summary>Occurs when the stylus enters the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusEnter" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusEnter" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusInAirMove">
      <summary>Occurs when the stylus moves over an element without actually touching the digitizer. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusInAirMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusInRange">
      <summary>Occurs when the stylus is close enough to the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusInRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusInRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusInRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusLeave">
      <summary>Occurs when the stylus leaves the bounds of the element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusLeave" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusMove">
      <summary>Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> is raised instead.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusMove" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusOutOfRange">
      <summary>Occurs when the stylus is too far from the digitizer to be detected, while over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusOutOfRangeEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusSystemGesture">
      <summary>Occurs when a user performs one of several stylus gestures.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusSystemGestureEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.StylusUp">
      <summary>Occurs when the user raises the stylus off the digitizer while it is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.StylusUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.StylusUp" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.StylusUp" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TextInput">
      <summary>Occurs when this element gets text in a device-independent manner. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TextInputEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TextInput" /> routed event. </summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TextInput" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchDown">
      <summary>Occurs when a finger touches the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchEnter">
      <summary>Occurs when a touch moves from outside to inside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.TouchesCaptured">
      <summary>Gets all touch devices that are captured to this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.TouchesCapturedWithin">
      <summary>Gets all touch devices that are captured to this element or any child elements in its visual tree. </summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.TouchesDirectlyOver">
      <summary>Gets all touch devices that are over this element.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.TouchesOver">
      <summary>Gets all touch devices that are over this element or any child elements in its visual tree.</summary>
      <returns>An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchLeave">
      <summary>Occurs when a touch moves from inside to outside the bounds of this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchMove">
      <summary>Occurs when a finger moves on the screen while the finger is over this element.</summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event.</returns>
    </member>
    <member name="E:System.Windows.UIElement3D.TouchUp">
      <summary>Occurs when a finger is raised off of the screen while the finger is over this element. </summary>
    </member>
    <member name="F:System.Windows.UIElement3D.TouchUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.UIElement3D.TouchUp" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.UIElement3D.Visibility">
      <summary>Gets or sets the user interface (UI) visibility of this element.  </summary>
      <returns>A value of the enumeration. The default value is <see cref="F:System.Windows.Visibility.Visible" />.</returns>
    </member>
    <member name="F:System.Windows.UIElement3D.VisibilityProperty">
      <summary>Identifies the <see cref="P:System.Windows.UIElement3D.Visibility" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.UIElement3D.Visibility" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.UIPropertyMetadata">
      <summary> Provides property metadata for non-framework properties that do have rendering/user interface impact at the core level. </summary>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class. </summary>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified default value for the property.</summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified PropertyChanged callback. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified default value and callbacks. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</param>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified default value and callbacks, and a Boolean used to disable animations on the property. </summary>
      <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
      <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</param>
      <param name="isAnimationProhibited">Set to true to prevent the property system from animating the property that this metadata is applied to. Such properties will raise run time exceptions if animations of them are attempted. The default is false.</param>
    </member>
    <member name="M:System.Windows.UIPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.UIPropertyMetadata" /> class, with the specified PropertyChanged callback.</summary>
      <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    </member>
    <member name="P:System.Windows.UIPropertyMetadata.IsAnimationProhibited">
      <summary> Gets or sets a value declaring whether animations should be disabled on the dependency property where the containing metadata instance is applied. </summary>
      <returns>true indicates that animations are disallowed; false indicates that animations are allowed. The default is false (animations allowed).</returns>
    </member>
    <member name="T:System.Windows.Visibility">
      <summary>Specifies the display state of an element. </summary>
    </member>
    <member name="F:System.Windows.Visibility.Visible">
      <summary>Display the element.</summary>
    </member>
    <member name="F:System.Windows.Visibility.Hidden">
      <summary>Do not display the element, but reserve space for the element in layout.</summary>
    </member>
    <member name="F:System.Windows.Visibility.Collapsed">
      <summary>Do not display the element, and do not reserve space for it in layout.</summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperties">
      <summary>Provides a means of getting or setting the value of the associated properties of the instance of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> element. </summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AcceleratorKey">
      <summary>Gets or sets the accelerator key for the specified element.</summary>
      <returns>The accelerator key for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AccessKey">
      <summary>Gets or sets the access key for the specified element.</summary>
      <returns>The access key for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AccessKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.AutomationId">
      <summary>Gets or set the string that uniquely identifies the specified element.</summary>
      <returns>The string that uniquely identifies the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.AutomationIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A string that contains the accelerator key.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAccessKey(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The access key for the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetAutomationId(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The UI Automation identifier for the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetHelpText(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A string containing the help text for the specified element. The string that is returned generally is the same text that is provided in the tooltip for the control.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsColumnHeader(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.IsColumnHeader" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A boolean that indicates whether the specified element is a <see cref="F:System.Windows.Automation.TablePattern.ColumnHeadersProperty" />.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A boolean that indicates whether the specified element is <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" />.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetIsRowHeader(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.IsRowHeader" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A boolean that indicates whether the specified element is a <see cref="F:System.Windows.Automation.TablePattern.RowHeadersProperty" />.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemStatus" /> of the given element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" /> of the given element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetLabeledBy(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The element that is targeted by the label. </returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.GetName(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>The name of the specified element.</returns>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> to check.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.HelpText">
      <summary>Gets or sets the help text for the specified element. The help text generally is the same text that is provided in the tooltip for the control.</summary>
      <returns>The help text for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.HelpTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsColumnHeader">
      <summary>Gets or sets a value indicating whether the specified element is a column header.</summary>
      <returns>true if the element is a column header; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsColumnHeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.IsColumnHeader" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsColumnHeader" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm">
      <summary>Gets or sets a value that indicates whether the specified element is required to be filled out on a form.</summary>
      <returns>true if the element is required to be filled out on a form; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.IsRowHeader">
      <summary>Gets or sets a value indicating whether the specified element is a row header.</summary>
      <returns>true if the element is a row header; otherwise, false.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.IsRowHeaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.IsRowHeader" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.IsRowHeader" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemStatus">
      <summary>Gets or sets a description of the status of an item within an element.</summary>
      <returns>The status of an item within an element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemStatusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.ItemType">
      <summary>Gets or sets a description of the type of the specified element.</summary>
      <returns>The type of the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.ItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.LabeledBy">
      <summary>Gets or sets the element that contains the text label for the specified element.</summary>
      <returns>The element that contains the text label for the specified element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.LabeledByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationProperties.Name">
      <summary>Gets or sets the name of the element.</summary>
      <returns>The name of the element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationProperties.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property. </returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAcceleratorKey(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The accelerator key value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAccessKey(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.AccessKey" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The access key value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetAutomationId(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The UI Automation identifier value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetHelpText(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The help text value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsColumnHeader(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.IsColumnHeader" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The value to set; true if the element is meant to be a column header, otherwise false</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsRequiredForForm(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.IsRequiredForForm" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The value to set; true if the element is meant to be required to be filled out on a form, otherwise false.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetIsRowHeader(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.IsRowHeader" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The value to set; true if the element is meant to be a row header, otherwise false.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemStatus(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The item status value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetItemType(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The item type value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetLabeledBy(System.Windows.DependencyObject,System.Windows.UIElement)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.LabeledBy" /> attached property.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The labeled by value to set.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperties.SetName(System.Windows.DependencyObject,System.String)">
      <summary>Sets the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> attached property.</summary>
      <param name="element">The <see cref="T:System.Windows.DependencyObject" /> on which to set the property.</param>
      <param name="value">The name value to set.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationControlType">
      <summary>Specifies the <see cref="T:System.Windows.Automation.ControlType" /> that is exposed to the UI Automation client.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Button">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Button" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Calendar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Calendar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.CheckBox">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.CheckBox" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ComboBox">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ComboBox" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Edit">
      <summary>An <see cref="F:System.Windows.Automation.ControlType.Edit" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Hyperlink">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Hyperlink" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Image">
      <summary>An <see cref="F:System.Windows.Automation.ControlType.Image" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ListItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ListItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.List">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.List" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Menu">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Menu" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.MenuBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.MenuItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.MenuItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ProgressBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ProgressBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.RadioButton">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.RadioButton" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ScrollBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ScrollBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Slider">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Slider" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Spinner">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Spinner" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.StatusBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.StatusBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tab">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Tab" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TabItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.TabItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Text">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Text" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ToolBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.ToolTip">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.ToolTip" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Tree">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Tree" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TreeItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.TreeItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Custom">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Custom" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Group">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Group" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Thumb">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Thumb" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataGrid">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.DataGrid" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.DataItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.DataItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Document">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Document" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.SplitButton">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.SplitButton" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Window">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Window" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Pane">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Pane" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Header">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Header" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.HeaderItem">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.HeaderItem" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Table">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Table" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.TitleBar">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.TitleBar" /> control type.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationControlType.Separator">
      <summary>A <see cref="F:System.Windows.Automation.ControlType.Separator" /> control type.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationEvents">
      <summary>Specifies the event that is raised by the element through the associated <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipOpened">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipOpenedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.ToolTipClosed">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipClosedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuOpened">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.MenuOpenedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.MenuClosed">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.MenuClosedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AutomationFocusChanged">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationFocusChangedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked">
      <summary>
        <see cref="F:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementAddedToSelection">
      <summary>
        <see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementAddedToSelectionEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection">
      <summary>
        <see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementRemovedFromSelectionEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected">
      <summary>
        <see cref="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementSelectedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.SelectionPatternOnInvalidated">
      <summary>
        <see cref="F:System.Windows.Automation.SelectionPatternIdentifiers.InvalidatedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextSelectionChanged">
      <summary>
        <see cref="F:System.Windows.Automation.TextPatternIdentifiers.TextSelectionChangedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextChanged">
      <summary>
        <see cref="F:System.Windows.Automation.TextPatternIdentifiers.TextChangedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.AsyncContentLoaded">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.AsyncContentLoadedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.PropertyChanged">
      <summary>Used to raise a notification that a property has changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.StructureChanged">
      <summary>
        <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.StructureChangedEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InputReachedTarget">
      <summary>
        <see cref="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputReachedTargetEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InputReachedOtherElement">
      <summary>
        <see cref="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputReachedOtherElementEvent" />
      </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationEvents.InputDiscarded">
      <summary>
        <see cref="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputDiscardedEvent" />
      </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationOrientation">
      <summary>Specifies the direction in which a control can be laid out. </summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.None">
      <summary>The control doesn't have an orientation. An example of a control without an orientation is a <see cref="T:System.Windows.Controls.Button" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Horizontal">
      <summary>The control is laid out horizontally.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.AutomationOrientation.Vertical">
      <summary>The control is laid out horizontally.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.AutomationPeer">
      <summary>Provides a base class that exposes an element to UI Automation. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.#ctor">
      <summary>Provides initialization for base class values when they are called by the constructor of a derived class.</summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutomationPeer.EventsSource">
      <summary>Gets or sets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is reported to the automation client as a source for all the events that come from this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the source of events.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey">
      <summary>Gets the accelerator key combinations for the element that is associated with the UI Automation peer. </summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKeyCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The accelerator key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey">
      <summary>Gets the access key for the element that is associated with the automation peer.</summary>
      <returns>The string that contains the access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKeyCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The string that contains the access key.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType">
      <summary>Gets the control type for the element that is associated with the UI Automation peer.</summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The control type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId">
      <summary>Gets the <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> of the element that is associated with the automation peer.</summary>
      <returns>The identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationIdCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The string that contains the identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> object that represents the screen coordinates of the element that is associated with the automation peer.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangleCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren">
      <summary>Gets the collection of <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" /> elements that are represented in the UI Automation tree as immediate child elements of the automation peer.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName">
      <summary>Gets a name that is used with <see cref="T:System.Windows.Automation.Peers.AutomationControlType" />, to differentiate the control that is represented by this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />. </summary>
      <returns>The class name. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint">
      <summary>Gets a <see cref="T:System.Windows.Point" /> on the element that is associated with the automation peer that responds to a mouse click. </summary>
      <returns>A point in the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePointCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>A point within the clickable area of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText">
      <summary>Gets text that describes the functionality of the control that is associated with the automation peer. </summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpTextCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The help text.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetHostRawElementProviderCore">
      <summary>Tells UI Automation where in the UI Automation tree to place the hwnd being hosted by a Windows Presentation Foundation (WPF) element.</summary>
      <returns>This method returns the hosted hwnd to UI Automation for controls that host hwnds.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus">
      <summary>Gets text that conveys the visual status of the element that is associated with this automation peer. </summary>
      <returns>The status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType">
      <summary>Gets a string that describes what kind of item an object represents. </summary>
      <returns>The kind of item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetItemTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The kind of item.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.Controls.Label" /> that is targeted to the element. </summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.Controls.Label" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledByCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.Controls.Label" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType">
      <summary>Gets a human-readable localized string that represents the <see cref="T:System.Windows.Automation.Peers.AutomationControlType" /> value for the control that is associated with this automation peer.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlTypeCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLocalizedControlType" />.</summary>
      <returns>The type of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetName">
      <summary>Gets text that describes the element that is associated with this automation peer.</summary>
      <returns>The name.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetNameCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that contains the label.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation">
      <summary>Gets a value that indicates the explicit control orientation, if any.</summary>
      <returns>The orientation of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientationCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>The orientation of the control.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetParent">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that is the parent of this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The parent automation peer.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>When overridden in a derived class, gets the control pattern that is associated with the specified <see cref="T:System.Windows.Automation.Peers.PatternInterface" />.</summary>
      <returns>The object that implements the pattern interface; null if this peer does not support this interface.</returns>
      <param name="patternInterface">A value from the <see cref="T:System.Windows.Automation.Peers.PatternInterface" /> enumeration.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer currently has keyboard focus.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.InvalidatePeer">
      <summary>Triggers recalculation of the main properties of the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> and raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> notification to the Automation Client if the properties changed. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement">
      <summary>Gets a value that indicates whether the element that is associated with this automation peer contains data that is presented to the user.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true if the element is a content element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement">
      <summary>Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true if the element is a control; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled">
      <summary>Gets a value that indicates whether the element associated with this automation peer supports interaction.</summary>
      <returns>true if the element supports interaction; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabledCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the automation peer can receive and send events; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.AutomationPeer.IsHwndHost">
      <summary>Gets a value that indicates whether the element that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> hosts hwnds in Windows Presentation Foundation (WPF).</summary>
      <returns>true if the element that is associated with this <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> hosts hwnds in Windows Presentation Foundation (WPF); otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable">
      <summary>Gets a value that indicates whether the element can accept keyboard focus.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusableCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element can accept keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen">
      <summary>Gets a value that indicates whether an element is off the screen.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreenCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword">
      <summary>Gets a value that indicates whether the element contains sensitive content.</summary>
      <returns>true if the element contains sensitive content such as a password; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsPasswordCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>true if the element contains sensitive content; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm">
      <summary>Gets a value that indicates whether the element that is associated with this peer must be completed on a form.</summary>
      <returns>true if the element must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForFormCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>true if the element is must be completed; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>Gets a value that indicates whether UI Automation is listening for the specified event. </summary>
      <returns>A boolean that indicates whether UI Automation is listening for the event.</returns>
      <param name="eventId">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.PeerFromProvider(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Gets an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the specified <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> proxy.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</returns>
      <param name="provider">The class that implements <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ProviderFromPeer(System.Windows.Automation.Peers.AutomationPeer)">
      <summary>Gets the <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> for the specified <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</summary>
      <returns>The proxy.</returns>
      <param name="peer">The automation peer.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaiseAsyncContentLoadedEvent(System.Windows.Automation.AsyncContentLoadedEventArgs)">
      <summary>Called by the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> to raise the <see cref="F:System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent" /> event.</summary>
      <param name="args">The event data.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents)">
      <summary>Raises an automation event.</summary>
      <param name="eventId">The event identifier.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty,System.Object,System.Object)">
      <summary>Raises an event to notify the automation client of a changed property value.</summary>
      <param name="property">The property that changed.</param>
      <param name="oldValue">The previous value of the property.</param>
      <param name="newValue">The new value of the property.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.ResetChildrenCache">
      <summary>Synchronously resets the tree of child elements by calling <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus">
      <summary>Sets the keyboard focus on the element that is associated with this automation peer.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.AutomationPeer.SetFocusCore">
      <summary>When overridden in a derived class, is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.ContentElementAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.ContentElement" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.#ctor(System.Windows.ContentElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.CreatePeerForElement(System.Windows.ContentElement)">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> for the specified <see cref="T:System.Windows.ContentElement" />. </summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> for the specified <see cref="T:System.Windows.ContentElement" />.</returns>
      <param name="element">The <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.FromElement(System.Windows.ContentElement)">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> for the specified <see cref="T:System.Windows.ContentElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> for the specified <see cref="T:System.Windows.ContentElement" />, or null if the <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> has not been created by the <see cref="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.CreatePeerForElement(System.Windows.ContentElement)" /> method.</returns>
      <param name="element">The <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetAcceleratorKeyCore">
      <summary>Gets the accelerator key for the element associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>
        <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetAccessKeyCore">
      <summary>Gets the access key for the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for this <see cref="T:System.Windows.ContentElement" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetAutomationIdCore">
      <summary>Gets the string that uniquely identifies the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>A string containing the automation identifier.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetBoundingRectangleCore">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> representing the bounding rectangle of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The collection of child elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>
        <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetClickablePointCore">
      <summary>Gets a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The point that represents the clickable space that is on the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetHelpTextCore">
      <summary>Gets the string that describes the functionality of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The string that describes the functionality of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetItemStatusCore">
      <summary>Gets a string that conveys the visual status of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>A string containing the status.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetItemTypeCore">
      <summary>Gets a human-readable string that contains the type of the item that the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> represents. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The string that contains the item type.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetLabeledByCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the <see cref="T:System.Windows.Controls.Label" /> that is targeted to the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> for the element that is targeted by the <see cref="T:System.Windows.Controls.Label" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that contains the label.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetOrientationCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is laid out in a specific direction. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</summary>
      <returns>An object that implements the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> interface if <paramref name="patternInterface" /> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput" />; otherwise, null.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.HasKeyboardFocusCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> currently has keyboard input focus. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsContentElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is an element that contains data that is presented to the user. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsControlElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is something that the end user would understand as being interactive or as contributing to the logical structure of the control in the GUI. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsEnabledCore">
      <summary>Gets a value that indicates whether this automation peer can receive and send events to the associated element. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsEnabled" />.</summary>
      <returns>true if the automation peer can receive and send events; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsKeyboardFocusableCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> can accept keyboard focus. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsOffscreenCore">
      <summary>Gets a value that indicates whether <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is off of the screen. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsPasswordCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> contains protected content. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.IsRequiredForFormCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" /> is required to be filled out on a form. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.ContentElementAutomationPeer.Owner">
      <summary>Gets the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.ContentElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.ContentElementAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the <see cref="T:System.Windows.ContentElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.ContentElementAutomationPeer" />. Called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.GenericRootAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.Interop.HwndSource" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Pane" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.GetBoundingRectangleCore">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The bounding rectangle.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>A string that contains "Pane".</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GenericRootAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GenericRootAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that contains the label.</returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.HostedWindowWrapper">
      <summary>Exposes <see cref="T:System.Windows.Interop.HwndHost" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.HostedWindowWrapper.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.HostedWindowWrapper" /> class.</summary>
      <param name="hwnd">The pointer to the <see cref="T:System.Windows.Interop.HwndHost" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.HostedWindowWrapper" />.</param>
    </member>
    <member name="T:System.Windows.Automation.Peers.PatternInterface">
      <summary>Specifies the control pattern that <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)" /> returns.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Invoke">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Selection">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Value">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IValueProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.RangeValue">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Scroll">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IScrollProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ScrollItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ExpandCollapse">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Grid">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.GridItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.MultipleView">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Window">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IWindowProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.SelectionItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Dock">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IDockProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Table">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ITableProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.TableItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Toggle">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IToggleProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Transform">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ITransformProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.Text">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ITextProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.ItemContainer">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IItemContainerProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.VirtualizedItem">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.IVirtualizedItemProvider" /> control pattern interface.</summary>
    </member>
    <member name="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput">
      <summary>Value corresponding to the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> control pattern interface.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.UIElement3D" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.#ctor(System.Windows.UIElement3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> class. </summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.CreatePeerForElement(System.Windows.UIElement3D)">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement3D" />.</summary>
      <returns>A  <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement3D" />.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.FromElement(System.Windows.UIElement3D)">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement3D" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />, or null if the <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> was not created by the <see cref="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.CreatePeerForElement(System.Windows.UIElement3D)" /> method.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetAcceleratorKeyCore">
      <summary>Returns the accelerator key for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The accelerator key for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetAccessKeyCore">
      <summary>Returns the access key for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetAutomationControlTypeCore">
      <summary>Returns the control type for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetAutomationIdCore">
      <summary>Returns the string that uniquely identifies the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The string that uniquely identifies the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetBoundingRectangleCore">
      <summary>Returns the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetChildrenCore">
      <summary>Returns the collection of child elements of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements than correspond to the child elements of the <see cref="T:System.Windows.UIElement3D" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetClassNameCore">
      <summary>Returns the name of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>
        <see cref="F:System.String.Empty" /> in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetClickablePointCore">
      <summary>Returns a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The <see cref="T:System.Windows.Point" /> on the element that allows a click. The point values are (<see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" />) if the element is not both a <see cref="T:System.Windows.Interop.HwndSource" /> and a <see cref="T:System.Windows.PresentationSource" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetHelpTextCore">
      <summary>Returns the string that describes the functionality of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>A string that describes the functionality of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetItemStatusCore">
      <summary>Returns a string that communicates the status of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The status of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetItemTypeCore">
      <summary>Returns a human-readable string that represents the item type that the <see cref="T:System.Windows.UIElement3D" /> for this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>A string that represents the item type that the <see cref="T:System.Windows.UIElement3D" /> for this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetLabeledByCore">
      <summary>Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that targets the <see cref="T:System.Windows.UIElement3D" /> for this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that targets the <see cref="T:System.Windows.UIElement3D" /> for this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetNameCore">
      <summary>Returns the string that represents the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that represents the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetOrientationCore">
      <summary>Returns the orientation of the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>
        <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" /> in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Returns the control pattern for the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</summary>
      <returns>An object that implements the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> interface if <paramref name="patternInterface" /> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput" />; otherwise, null.</returns>
      <param name="patternInterface">One of the enumeration values.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.HasKeyboardFocusCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsContentElementCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsControlElementCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the <see cref="T:System.Windows.UIElement3D" /> as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsEnabledCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> can participate in hit testing or accept focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> can participate in hit testing or accept focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsKeyboardFocusableCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element can receive keyboard focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsOffscreenCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsPasswordCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.IsRequiredForFormCore">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>true if the <see cref="T:System.Windows.UIElement3D" /> is required to be completed on a form; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.UIElement3DAutomationPeer.Owner">
      <summary>Gets the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElement3DAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the <see cref="T:System.Windows.UIElement3D" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElement3DAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.UIElementAutomationPeer">
      <summary>Exposes <see cref="T:System.Windows.UIElement" /> types to UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.#ctor(System.Windows.UIElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> class.</summary>
      <param name="owner">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)">
      <summary>Creates a <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>A <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.FromElement(System.Windows.UIElement)">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> for the specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />, or  null if the <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> was not created by the <see cref="M:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement(System.Windows.UIElement)" /> method.</returns>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAcceleratorKeyCore">
      <summary>Gets the accelerator key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAcceleratorKey" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AcceleratorKey" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAcceleratorKey(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAccessKeyCore">
      <summary>Gets the access key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAccessKey" />.</summary>
      <returns>The access key for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAutomationControlTypeCore">
      <summary>Gets the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetAutomationIdCore">
      <summary>Gets the string that uniquely identifies the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationId" />.</summary>
      <returns>The <see cref="P:System.Windows.Automation.AutomationProperties.AutomationId" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetAutomationId(System.Windows.DependencyObject)" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetBoundingRectangleCore">
      <summary>Gets the <see cref="T:System.Windows.Rect" /> that represents the bounding rectangle of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetBoundingRectangle" />.</summary>
      <returns>The <see cref="T:System.Windows.Rect" /> that contains the coordinates of the element. Optionally, if the element is not both a <see cref="T:System.Windows.Interop.HwndSource" /> and a <see cref="T:System.Windows.PresentationSource" />, this method returns <see cref="P:System.Windows.Rect.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore">
      <summary>Gets the collection of child elements of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren" />.</summary>
      <returns>A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetClassNameCore">
      <summary>Gets the name of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
      <returns>An <see cref="F:System.String.Empty" /> string.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetClickablePointCore">
      <summary>Gets a <see cref="T:System.Windows.Point" /> that represents the clickable space that is on the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint" />.</summary>
      <returns>The <see cref="T:System.Windows.Point" /> on the element that allows a click. The point values are (<see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" />) if the element is not both a <see cref="T:System.Windows.Interop.HwndSource" /> and a <see cref="T:System.Windows.PresentationSource" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetHelpTextCore">
      <summary>Gets the string that describes the functionality of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetHelpText" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.HelpText" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetHelpText(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetItemStatusCore">
      <summary>Gets a string that communicates the visual status of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemStatus" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemStatus" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemStatus(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetItemTypeCore">
      <summary>Gets a human-readable string that contains the item type that the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> represents. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetItemType" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.ItemType" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetItemType(System.Windows.DependencyObject)" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetLabeledByCore">
      <summary>Gets the <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted to the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetLabeledBy" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for the element that is targeted to the <see cref="T:System.Windows.UIElement" /> for this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetNameCore">
      <summary>Gets the text label of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName" />.</summary>
      <returns>The string that contains the <see cref="P:System.Windows.Automation.AutomationProperties.Name" /> that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetName(System.Windows.DependencyObject)" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetOrientationCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is laid out in a specific direction. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetOrientation" />.</summary>
      <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationOrientation.None" /> enumeration value.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>Gets the control pattern for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</summary>
      <returns>An object that implements the <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" /> interface if <paramref name="patternInterface" /> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.SynchronizedInput" />; otherwise, null.</returns>
      <param name="patternInterface">A value from the enumeration.</param>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.HasKeyboardFocusCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> currently has keyboard input focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.HasKeyboardFocus" />.</summary>
      <returns>true if the element has keyboard input focus; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsContentElementCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is an element that contains data that is presented to the user. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsContentElement" />.</summary>
      <returns>true.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsControlElementCore">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is understood by the end user as interactive. Optionally, the user might understand the <see cref="T:System.Windows.UIElement" /> as contributing to the logical structure of the control in the GUI. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElement" />.</summary>
      <returns>true.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsEnabledCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>A boolean that contains the value of <see cref="P:System.Windows.UIElement.IsEnabled" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsKeyboardFocusableCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> can accept keyboard focus. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsKeyboardFocusable" />.</summary>
      <returns>true if the element is focusable by the keyboard; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsOffscreenCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is off the screen. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsOffscreen" />.</summary>
      <returns>true if the element is not on the screen; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsPasswordCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> contains protected content. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsPassword" />.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.IsRequiredForFormCore">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" /> is required to be completed on a form. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsRequiredForForm" />.</summary>
      <returns>A boolean that contains the value that is returned by <see cref="M:System.Windows.Automation.AutomationProperties.GetIsRequiredForForm(System.Windows.DependencyObject)" />, if it's set; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.UIElementAutomationPeer.Owner">
      <summary>Gets the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</summary>
      <returns>The <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.UIElementAutomationPeer.SetFocusCore">
      <summary>Sets the keyboard input focus on the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.SetFocus" />.</summary>
    </member>
    <member name="T:System.Windows.Documents.ContentPosition">
      <summary>Abstract class that represents the position of content. This position is content specific.  </summary>
    </member>
    <member name="M:System.Windows.Documents.ContentPosition.#ctor">
      <summary>Call this constructor as the initializer of a derived class' constructor, in order to properly initialize a class derived from <see cref="T:System.Windows.Documents.ContentPosition" />. </summary>
    </member>
    <member name="F:System.Windows.Documents.ContentPosition.Missing">
      <summary>Static representation of a non-existent ContentPosition. </summary>
    </member>
    <member name="T:System.Windows.Documents.DocumentPage">
      <summary>Represents a document page produced by a paginator.  </summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.#ctor(System.Windows.Media.Visual)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPage" /> class by using the specified <see cref="T:System.Windows.Media.Visual" />. </summary>
      <param name="visual">The visual representation of the page.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.#ctor(System.Windows.Media.Visual,System.Windows.Size,System.Windows.Rect,System.Windows.Rect)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPage" /> class by using the specified <see cref="T:System.Windows.Media.Visual" /> and box sizes. </summary>
      <param name="visual">The visual representation of the page.</param>
      <param name="pageSize">The size of the page, including margins, as it will be after any cropping.</param>
      <param name="bleedBox">The area for print production-related bleeds, registration marks, and crop marks that may appear on the physical sheet outside the logical page boundaries.</param>
      <param name="contentBox">The area of the page within the margins.</param>
    </member>
    <member name="P:System.Windows.Documents.DocumentPage.BleedBox">
      <summary>When overridden in a derived class, gets the area for print production-related bleeds, registration marks, and crop marks that may appear on the physical sheet outside the logical page boundaries. </summary>
      <returns>A <see cref="T:System.Windows.Rect" /> representing the size and location of the bleed box area. </returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentPage.ContentBox">
      <summary>When overridden in a derived class, gets the area of the page within the margins.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> representing the area of the page, not including the margins. </returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Windows.Documents.DocumentPage" />. </summary>
    </member>
    <member name="F:System.Windows.Documents.DocumentPage.Missing">
      <summary>Represents a missing page. This property is static and read only. </summary>
      <returns>A <see cref="T:System.Windows.Documents.DocumentPage" /> with all its size properties set to zero.</returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.OnPageDestroyed(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DocumentPage.PageDestroyed" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Documents.DocumentPage.PageDestroyed">
      <summary>Occurs when the <see cref="P:System.Windows.Documents.DocumentPage.Visual" /> that depicts the <see cref="T:System.Windows.Documents.DocumentPage" /> is destroyed and can no longer be used for display.</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.SetBleedBox(System.Windows.Rect)">
      <summary>Sets the dimensions and location of the <see cref="P:System.Windows.Documents.DocumentPage.BleedBox" />. </summary>
      <param name="bleedBox">An object that specifies the size and location of a rectangle.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.SetContentBox(System.Windows.Rect)">
      <summary>Sets the dimension and location of the <see cref="P:System.Windows.Documents.DocumentPage.ContentBox" />. </summary>
      <param name="contentBox">An object that specifies the size and location of a rectangle.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.SetSize(System.Windows.Size)">
      <summary>Sets the <see cref="P:System.Windows.Documents.DocumentPage.Size" /> of the physical page as it will be after any cropping. </summary>
      <param name="size">The size of the page.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPage.SetVisual(System.Windows.Media.Visual)">
      <summary>Sets the <see cref="P:System.Windows.Documents.DocumentPage.Visual" /> that depicts the page.</summary>
      <param name="visual">The visual representation of the page.</param>
    </member>
    <member name="P:System.Windows.Documents.DocumentPage.Size">
      <summary>When overridden in a derived class, gets the actual size of a page as it will be following any cropping. </summary>
      <returns>A <see cref="T:System.Windows.Size" /> representing the height and width of the page.</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentPage.Visual">
      <summary>When overridden in a derived class, gets the visual representation of the page. </summary>
      <returns>A <see cref="T:System.Windows.Media.Visual" /> depicting the page. </returns>
    </member>
    <member name="T:System.Windows.Documents.DocumentPaginator">
      <summary>Provides an abstract base class that supports creation of multiple-page elements from a single document.</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DocumentPaginator" /> class. </summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.CancelAsync(System.Object)">
      <summary>Cancels a previous <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync" /> or <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync" /> operation.</summary>
      <param name="userState">The original <paramref name="userState" /> passed to <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync" />, <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync" />, or <see cref="Overload:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync" /> that identifies the asynchronous task to cancel.</param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCount">
      <summary>Forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> with the new total, and sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid" /> to true.</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync">
      <summary>Asynchronously, forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> with the new total, and sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid" /> to true.</summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync(System.Object)">
      <summary>Asynchronously, forces a pagination of the content, updates <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> with the new total, sets <see cref="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid" /> to true. </summary>
      <param name="userState">A unique identifier for the asynchronous task.</param>
    </member>
    <member name="E:System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted">
      <summary>Occurs when a <see cref="Overload:System.Windows.Documents.DocumentPaginator.ComputePageCountAsync" /> operation has finished. </summary>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.GetPage(System.Int32)">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Windows.Documents.DocumentPage" /> for the specified page number.</summary>
      <returns>The <see cref="T:System.Windows.Documents.DocumentPage" /> for the specified <paramref name="pageNumber" />, or <see cref="F:System.Windows.Documents.DocumentPage.Missing" /> if the page does not exist.</returns>
      <param name="pageNumber">The zero-based page number of the document page that is needed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pageNumber" /> is negative.</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32)">
      <summary>Asynchronously returns (through the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event) the <see cref="T:System.Windows.Documents.DocumentPage" /> for the specified page number.</summary>
      <param name="pageNumber">The zero-based page number of the document page that is needed.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pageNumber" /> is negative.</exception>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)">
      <summary>Asynchronously returns (through the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event) the <see cref="T:System.Windows.Documents.DocumentPage" /> for the specified page number and assigns the specified ID to the asynchronous task.</summary>
      <param name="pageNumber">The zero-based page number of the <see cref="T:System.Windows.Documents.DocumentPage" /> to get.</param>
      <param name="userState">A unique identifier for the asynchronous task.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pageNumber" /> is negative.</exception>
    </member>
    <member name="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted">
      <summary>Occurs when <see cref="Overload:System.Windows.Documents.DocumentPaginator.GetPageAsync" /> has completed.</summary>
    </member>
    <member name="P:System.Windows.Documents.DocumentPaginator.IsPageCountValid">
      <summary>When overridden in a derived class, gets a value indicating whether <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> is the total number of pages. </summary>
      <returns>true if pagination is complete and <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> is the total number of pages; otherwise, false, if pagination is in process and <see cref="P:System.Windows.Documents.DocumentPaginator.PageCount" /> is the number of pages currently formatted (not the total).This value may revert to false, after being true, if <see cref="P:System.Windows.Documents.DocumentPaginator.PageSize" /> or content changes; because those events would force a repagination.</returns>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.OnComputePageCountCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.ComputePageCountCompleted" /> event. </summary>
      <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.OnGetPageCompleted(System.Windows.Documents.GetPageCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Documents.GetPageCompletedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Documents.DocumentPaginator.OnPagesChanged(System.Windows.Documents.PagesChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DocumentPaginator.PagesChanged" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Documents.PagesChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="P:System.Windows.Documents.DocumentPaginator.PageCount">
      <summary>When overridden in a derived class, gets a count of the number of pages currently formatted</summary>
      <returns>A count of the number of pages that have been formatted.</returns>
    </member>
    <member name="E:System.Windows.Documents.DocumentPaginator.PagesChanged">
      <summary>Occurs when the document content is changed.</summary>
    </member>
    <member name="P:System.Windows.Documents.DocumentPaginator.PageSize">
      <summary>When overridden in a derived class, gets or sets the suggested width and height of each page.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> representing the width and height of each page.</returns>
    </member>
    <member name="P:System.Windows.Documents.DocumentPaginator.Source">
      <summary>When overridden in a derived class, returns the element being paginated.</summary>
      <returns>An <see cref="T:System.Windows.Documents.IDocumentPaginatorSource" /> representing the element being paginated.</returns>
    </member>
    <member name="T:System.Windows.Documents.DynamicDocumentPaginator">
      <summary>Provides an abstract base class that supports automatic background pagination and tracking content positions across repaginations in addition to the methods and properties of its own base class.</summary>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.DynamicDocumentPaginator" /> class. </summary>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetObjectPosition(System.Object)">
      <summary>When overridden in a derived class, returns a <see cref="T:System.Windows.Documents.ContentPosition" /> for the specified <see cref="T:System.Object" />.</summary>
      <returns>The <see cref="T:System.Windows.Documents.ContentPosition" /> of the given object.</returns>
      <param name="value">The object to return the <see cref="T:System.Windows.Documents.ContentPosition" /> of.</param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumber(System.Windows.Documents.ContentPosition)">
      <summary>When overridden in a derived class, returns the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition" />.</summary>
      <returns>An <see cref="T:System.Int32" /> representing zero-based page number where the specified <paramref name="contentPosition" /> appears.</returns>
      <param name="contentPosition">The content position whose page number is needed.</param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)">
      <summary>Asynchronously, returns (through the This method raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event) the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition" />.</summary>
      <param name="contentPosition">The content position whose page number is needed.</param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition,System.Object)">
      <summary>Asynchronously, returns (through the This method raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event) the zero-based page number of the specified <see cref="T:System.Windows.Documents.ContentPosition" />.</summary>
      <param name="contentPosition">The content position element to return the page number of.</param>
      <param name="userState">A unique identifier for the asynchronous task.</param>
    </member>
    <member name="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted">
      <summary>Occurs when <see cref="Overload:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync" /> has completed.</summary>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.GetPagePosition(System.Windows.Documents.DocumentPage)">
      <summary>When overridden in a derived class, gets the position of the specified page in the document's content.</summary>
      <returns>A <see cref="T:System.Windows.Documents.ContentPosition" /> representing the position of <paramref name="page" />. </returns>
      <param name="page">The page whose position is needed.</param>
    </member>
    <member name="P:System.Windows.Documents.DynamicDocumentPaginator.IsBackgroundPaginationEnabled">
      <summary>Gets or sets a value indicating whether pagination is performed automatically in the background in response to certain events, such as a change in page size.</summary>
      <returns>true if background pagination is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnGetPageNumberCompleted(System.Windows.Documents.GetPageNumberCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Documents.GetPageNumberCompletedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnPaginationCompleted(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Documents.DynamicDocumentPaginator.OnPaginationProgress(System.Windows.Documents.PaginationProgressEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Documents.PaginationProgressEventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationCompleted">
      <summary>Occurs when all document content has been paginated.</summary>
    </member>
    <member name="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress">
      <summary>Occurs when one or more content pages have been paginated.</summary>
    </member>
    <member name="T:System.Windows.Documents.GetPageCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event. </summary>
    </member>
    <member name="M:System.Windows.Documents.GetPageCompletedEventArgs.#ctor(System.Windows.Documents.DocumentPage,System.Int32,System.Exception,System.Boolean,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.GetPageCompletedEventArgs" /> class. </summary>
      <param name="page">The <see cref="T:System.Windows.Documents.DocumentPage" /> for the requested <paramref name="pageNumber" />.</param>
      <param name="pageNumber">The <paramref name="pageNumber" /> parameter passed to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />.</param>
      <param name="error">The exception that occurred during the asynchronous operation; or NULL if there were no errors.</param>
      <param name="cancelled">true if the asynchronous operation was canceled; otherwise, false.</param>
      <param name="userState">The unique <paramref name="userState" /> parameter passed to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />.</param>
    </member>
    <member name="P:System.Windows.Documents.GetPageCompletedEventArgs.DocumentPage">
      <summary>Gets the <see cref="T:System.Windows.Documents.DocumentPage" /> for the page specified in the call to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />. </summary>
      <returns>The document page for the page specified in the call to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.GetPageCompletedEventArgs.PageNumber">
      <summary>Gets the page number passed to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />. </summary>
      <returns>The page number passed to <see cref="M:System.Windows.Documents.DocumentPaginator.GetPageAsync(System.Int32,System.Object)" />.</returns>
    </member>
    <member name="T:System.Windows.Documents.GetPageCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DocumentPaginator.GetPageCompleted" /> event of a <see cref="T:System.Windows.Documents.FixedDocument" /> or other classes implementing <see cref="T:System.Windows.Documents.DocumentPaginator" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Documents.GetPageNumberCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event.</summary>
    </member>
    <member name="M:System.Windows.Documents.GetPageNumberCompletedEventArgs.#ctor(System.Windows.Documents.ContentPosition,System.Int32,System.Exception,System.Boolean,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.GetPageNumberCompletedEventArgs" /> class.</summary>
      <param name="contentPosition">The <paramref name="contentPosition" /> parameter passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</param>
      <param name="pageNumber">The page number where the <paramref name="contentPosition" /> appears.</param>
      <param name="error">The exception that occurred during the asynchronous operation; or NULL if there were no errors.</param>
      <param name="cancelled">true if the asynchronous operation was canceled; otherwise, false.</param>
      <param name="userState">The unique <paramref name="userState" /> parameter passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</param>
    </member>
    <member name="P:System.Windows.Documents.GetPageNumberCompletedEventArgs.ContentPosition">
      <summary>Gets the <see cref="T:System.Windows.Documents.ContentPosition" /> passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</summary>
      <returns>The content position passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</returns>
    </member>
    <member name="P:System.Windows.Documents.GetPageNumberCompletedEventArgs.PageNumber">
      <summary>Gets the page number for the <see cref="T:System.Windows.Documents.ContentPosition" /> passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</summary>
      <returns>The page number (zero-based) for the <see cref="T:System.Windows.Documents.ContentPosition" /> passed to <see cref="M:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberAsync(System.Windows.Documents.ContentPosition)" />.</returns>
    </member>
    <member name="T:System.Windows.Documents.GetPageNumberCompletedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.GetPageNumberCompleted" /> event of a <see cref="T:System.Windows.Documents.FixedDocument" />, or <see cref="T:System.Windows.Documents.FlowDocument" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Documents.IDocumentPaginatorSource">
      <summary>Defines the source object that performs actual content pagination.</summary>
    </member>
    <member name="P:System.Windows.Documents.IDocumentPaginatorSource.DocumentPaginator">
      <summary>When implemented in a derived class, gets the object that performs content pagination.</summary>
      <returns>The object that performs the actual content pagination.</returns>
    </member>
    <member name="T:System.Windows.Documents.PagesChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Documents.DocumentPaginator.PagesChanged" /> event. </summary>
    </member>
    <member name="M:System.Windows.Documents.PagesChangedEventArgs.#ctor(System.Int32,System.Int32)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Documents.PagesChangedEventArgs" /> class. </summary>
      <param name="start">The page number (zero-based) of first page that changed.</param>
      <param name="count">The number of continuous pages that changed.</param>
    </member>
    <member name="P:System.Windows.Documents.PagesChangedEventArgs.Count">
      <summary> Gets the number of continuous pages that changed. </summary>
      <returns>The number of continuous pages that changed.</returns>
    </member>
    <member name="P:System.Windows.Documents.PagesChangedEventArgs.Start">
      <summary> Gets the page number of the first page that changed. </summary>
      <returns>The page number (zero-based) of first page that changed.</returns>
    </member>
    <member name="T:System.Windows.Documents.PagesChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DocumentPaginator.PagesChanged" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Documents.PaginationProgressEventArgs">
      <summary> Provides data for the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress" /> event. </summary>
    </member>
    <member name="M:System.Windows.Documents.PaginationProgressEventArgs.#ctor(System.Int32,System.Int32)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Documents.PaginationProgressEventArgs" /> class. </summary>
      <param name="start">The page number (zero-based) of first page paginated.</param>
      <param name="count">The number of continuous pages paginated.</param>
    </member>
    <member name="P:System.Windows.Documents.PaginationProgressEventArgs.Count">
      <summary> Gets the number of continuous pages that were paginated. </summary>
      <returns>The number of continuous pages that were paginated.</returns>
    </member>
    <member name="P:System.Windows.Documents.PaginationProgressEventArgs.Start">
      <summary> Gets the page number of the first page that was paginated. </summary>
      <returns>The page number (zero-based) of first page that was paginated.</returns>
    </member>
    <member name="T:System.Windows.Documents.PaginationProgressEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Documents.DynamicDocumentPaginator.PaginationProgress" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Ink.ApplicationGesture">
      <summary>Specifies the available application-specific <paramref name="gesture" />.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.AllGestures">
      <summary>Recognizes all application-specific gestures.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ArrowDown">
      <summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ArrowLeft">
      <summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ArrowRight">
      <summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ArrowUp">
      <summary>Has no suggested semantic behavior or action. The arrow can be drawn in single stroke or in two strokes where one stroke is the line and the other is the arrow head. Do not use more than two strokes to draw the arrow.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Check">
      <summary>Has no suggested semantic behavior or action. The upward stroke must be twice as long as the smaller downward stroke.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ChevronDown">
      <summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ChevronLeft">
      <summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ChevronRight">
      <summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ChevronUp">
      <summary>Has no suggested semantic behavior or action. Both sides of the chevron must be drawn as equal as possible. The angle must be sharp and end in a point.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Circle">
      <summary>Has no suggested semantic behavior or action. The circle must be drawn in a single stroke without lifting the pen.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Curlicue">
      <summary>Has no suggested semantic behavior or action. Start the curlicue on the word you intend to cut.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DoubleCircle">
      <summary>Has no suggested semantic behavior or action. The two circles must overlap each other and be drawn in a single stroke without lifting the pen.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DoubleCurlicue">
      <summary>Has no suggested semantic behavior or action. Start the double-curlicue on the word you intend to copy.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DoubleTap">
      <summary>Signifies a mouse double-click. The two taps must be made quickly to result in the least amount of slippage and the least duration between taps. In addition, the taps must be as close to each other as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Down">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn as a single fast flick in the downward direction.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownLeft">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownLeftLong">
      <summary>Signifies pressing an ENTER key. This gesture must be drawn in a single stroke starting with the down stroke. The left stroke is about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownRight">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownRightLong">
      <summary>Signifies pressing the spacebar. This gesture must be drawn in a single stroke starting with the down stroke. The right stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.DownUp">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the down stroke. The two strokes must be as close to each other as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Exclamation">
      <summary>Has no suggested semantic behavior or action. The line must be drawn first and then the dot drawn quickly and as close to the line as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Left">
      <summary>Specifies a backspace. This gesture must be drawn as a single fast flick to the left.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.LeftDown">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides are as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.LeftRight">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides are as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.LeftUp">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the left stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.NoGesture">
      <summary>Recognizes no application-specific gestures.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Right">
      <summary>Signifies a space. This gesture must be drawn as a single fast flick to the right.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.RightDown">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the right stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.RightLeft">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the right stroke. The two strokes must be as close to each other as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.RightUp">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the right stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.ScratchOut">
      <summary>Erases content. This gesture must be drawn as a single stroke that has at least three back-and-forth motions.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.SemicircleLeft">
      <summary>Has no suggested semantic behavior or action. The semicircle must be drawn from left to right. The two ends of the semicircle should be as horizontally even as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.SemicircleRight">
      <summary>Has no suggested semantic behavior or action. The semicircle must be drawn from right to left. The two ends of the semicircle should be as horizontally even as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Square">
      <summary>Has no suggested semantic behavior or action. The square can be drawn in one or two strokes. In one stroke, draw the entire square without lifting the pen. In two strokes, draw three sides of the square and use another stroke to draw the remaining side. Do not use more than two strokes to draw the square.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Star">
      <summary>Has no suggested semantic behavior or action. The star must have exactly five points and be drawn in a single stroke without lifting the pen.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Tap">
      <summary>Signifies a mouse click. For the least amount of slippage, the tap must be made quickly.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Triangle">
      <summary>Has no suggested semantic behavior or action. The triangle must be drawn in a single stroke, without lifting the pen.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.Up">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn as a single fast flick in the upward direction.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpDown">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The two strokes must be as close to each other as possible.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpLeft">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpLeftLong">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The left stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpRight">
      <summary>Has no suggested semantic behavior or action. This gesture must be drawn in a single stroke starting with the up stroke. The two sides must be as equal in length as possible and at a right angle.</summary>
    </member>
    <member name="F:System.Windows.Ink.ApplicationGesture.UpRightLong">
      <summary>Signifies pressing a TAB key. This gesture must be drawn in a single stroke starting with the up stroke. The right stroke must be about twice as long as the up stroke, and the two strokes must be at a right angle.</summary>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributeIds">
      <summary>Contains a set of GUIDs that identify the properties in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> class.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.Color">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Color" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.DrawingFlags">
      <summary>Identifies the internal DrawingFlags property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.IsHighlighter">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.IsHighlighter" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.StylusHeight">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.StylusTip">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTip" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.StylusTipTransform">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributeIds.StylusWidth">
      <summary>Identifies the <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> property.</summary>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributes">
      <summary>Specifies the appearance of a <see cref="T:System.Windows.Ink.Stroke" /></summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> class. </summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)">
      <summary>Adds a custom property to the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</summary>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> to associate with the custom property.</param>
      <param name="propertyData">The value of the custom property. <paramref name="propertyData" /> must be of type <see cref="T:System.Char" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> or an array of these data types; however it cannot be an array of type <see cref="T:System.String" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyData" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is an empty <see cref="T:System.Guid" />.-or-<paramref name="propertyData" /> is not one of the allowed data types listed in the Parameters section.</exception>
    </member>
    <member name="E:System.Windows.Ink.DrawingAttributes.AttributeChanged">
      <summary>Occurs when a property in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object changes.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.Clone">
      <summary>Copies the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</summary>
      <returns>A copy of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Color">
      <summary>Gets or sets the color of a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The color of a <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)">
      <summary>Returns a value that indicates whether the specified property data identifier is in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</summary>
      <returns>true if the specified property data identifier is in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object; otherwise, false.</returns>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> to locate in the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object .</param>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes" /> object is equal to the current <see cref="T:System.Windows.Ink.DrawingAttributes" /> object. </summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare to the current <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</param>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.FitToCurve">
      <summary>Gets or sets a value that indicates whether Bezier smoothing is used to render the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>true to use Bezier smoothing to render the <see cref="T:System.Windows.Ink.Stroke" />; otherwise false. The default is false.</returns>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.GetHashCode"></member>
    <member name="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)">
      <summary>Gets the value of the custom property associated with the specified <see cref="T:System.Guid" />.</summary>
      <returns>The value of the custom property associated with the specified <see cref="T:System.Guid" />.</returns>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> associated with the custom property to get.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is not associated with a custom property of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</exception>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds">
      <summary>Returns the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>An array of type <see cref="T:System.Guid" /> that represents the property data identifiers.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Height">
      <summary>Gets or sets the height of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The value that indicates the height of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> property is less than <see cref="F:System.Double.Epsilon" /> or <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.IgnorePressure">
      <summary>Gets or sets a value that indicates whether the thickness of a rendered <see cref="T:System.Windows.Ink.Stroke" /> changes according the amount of pressure applied.</summary>
      <returns>true to indicate that the thickness of the stroke is uniform; false to indicate that the thickness of a rendered <see cref="T:System.Windows.Ink.Stroke" /> increases when pressure is increased. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.IsHighlighter">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke" /> looks like a highlighter.</summary>
      <returns>true to render the <see cref="T:System.Windows.Ink.Stroke" /> as a highlighter; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributes.MaxHeight">
      <summary>Specifies the largest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributes.MaxWidth">
      <summary>Specifies the largest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributes.MinHeight">
      <summary>Specifies the smallest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> property.</summary>
    </member>
    <member name="F:System.Windows.Ink.DrawingAttributes.MinWidth">
      <summary>Specifies the smallest value allowed for the <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> property.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> that contains the event data. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Occurs when any <see cref="T:System.Windows.Ink.DrawingAttributes" /> property changes.</summary>
      <param name="e">EventArgs</param>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes" /> objects are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="first">The first <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare.</param>
      <param name="second">The second <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare.</param>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Ink.DrawingAttributes" /> objects are not equal.</summary>
      <returns>true if the objects are not equal; otherwise, false.</returns>
      <param name="first">The first <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare.</param>
      <param name="second">The second <see cref="T:System.Windows.Ink.DrawingAttributes" /> object to compare.</param>
    </member>
    <member name="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged">
      <summary>Occurs when property data is added or removed from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)">
      <summary>Removes the custom property associated with the specified <see cref="T:System.Guid" />.</summary>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> associated with the custom property to remove.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is not associated with a custom property of the <see cref="T:System.Windows.Ink.DrawingAttributes" /> object.</exception>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.StylusTip">
      <summary>Gets or sets the shape of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>One of the <see cref="T:System.Windows.Ink.StylusShape" /> values.</returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Matrix" /> that specifies the transformation to perform on the stylus' tip.</summary>
      <returns>A <see cref="T:System.Windows.Media.Matrix" /> that specifies the transformation to perform on the stylus' tip.</returns>
      <exception cref="T:System.ArgumentException">The matrix set to <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> is not an invertible matrix.-or-The <see cref="P:System.Windows.Media.Matrix.OffsetX" /> or <see cref="P:System.Windows.Media.Matrix.OffsetY" /> property of the matrix is not zero.</exception>
    </member>
    <member name="E:System.Windows.Ink.DrawingAttributes.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when the value of any <see cref="T:System.Windows.Ink.DrawingAttributes" /> property has changed.</summary>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributes.Width">
      <summary>Gets or sets the width of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The width of the stylus used to draw the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> property is less than <see cref="F:System.Double.Epsilon" /> or <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced" /> event.</summary>
    </member>
    <member name="M:System.Windows.Ink.DrawingAttributesReplacedEventArgs.#ctor(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs" /> class. </summary>
      <param name="newDrawingAttributes">The new <see cref="T:System.Windows.Ink.DrawingAttributes" />.</param>
      <param name="previousDrawingAttributes">The old <see cref="T:System.Windows.Ink.DrawingAttributes" />.</param>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributesReplacedEventArgs.NewDrawingAttributes">
      <summary>Gets the new <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
      <returns>The new <see cref="T:System.Windows.Ink.DrawingAttributes" />. </returns>
    </member>
    <member name="P:System.Windows.Ink.DrawingAttributesReplacedEventArgs.PreviousDrawingAttributes">
      <summary>Gets the old <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
      <returns>The old <see cref="T:System.Windows.Ink.DrawingAttributes" />.</returns>
    </member>
    <member name="T:System.Windows.Ink.DrawingAttributesReplacedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Controls.InkCanvas.DefaultDrawingAttributesReplaced" /> event of an <see cref="T:System.Windows.Controls.InkCanvas" />.  </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.EllipseStylusShape">
      <summary>Represents a stylus tip shaped like an ellipse.</summary>
    </member>
    <member name="M:System.Windows.Ink.EllipseStylusShape.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.EllipseStylusShape" /> class with the specified width and height. </summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:System.Windows.Ink.EllipseStylusShape.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.EllipseStylusShape" /> class with the specified width, height, and angle.</summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="rotation">The angle of the stylus shape.</param>
    </member>
    <member name="T:System.Windows.Ink.GestureRecognitionResult">
      <summary>Contains information about an ink gesture.</summary>
    </member>
    <member name="P:System.Windows.Ink.GestureRecognitionResult.ApplicationGesture">
      <summary>Gets the recognized ink gesture.</summary>
      <returns>The recognized ink gesture.</returns>
    </member>
    <member name="P:System.Windows.Ink.GestureRecognitionResult.RecognitionConfidence">
      <summary>Gets the level of confidence that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> has in the recognition of the gesture.</summary>
      <returns>One of the <see cref="T:System.Windows.Ink.RecognitionConfidence" /> levels.</returns>
    </member>
    <member name="T:System.Windows.Ink.GestureRecognizer">
      <summary>Recognizes ink gestures.</summary>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.GestureRecognizer" /> class. </summary>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ink.ApplicationGesture})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.GestureRecognizer" /> class. </summary>
      <param name="enabledApplicationGestures">An array of type <see cref="T:System.Windows.Ink.ApplicationGesture" /> that specifies the application gestures the <see cref="T:System.Windows.Ink.GestureRecognizer" /> will recognize.</param>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Windows.Ink.GestureRecognizer" />. </summary>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.GetEnabledGestures">
      <summary>Gets the gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> recognizes.</summary>
      <returns>An array of type <see cref="T:System.Windows.Ink.ApplicationGesture" /> that contains gestures the <see cref="T:System.Windows.Ink.GestureRecognizer" /> is set to recognize.</returns>
    </member>
    <member name="P:System.Windows.Ink.GestureRecognizer.IsRecognizerAvailable">
      <summary>Gets a Boolean that indicates whether the gesture recognizer is available on the user's system.</summary>
      <returns>true if the recognition component is available; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.Recognize(System.Windows.Ink.StrokeCollection)">
      <summary>Looks for gestures in the specified <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>An array of type <see cref="T:System.Windows.Ink.GestureRecognitionResult" /> that contains application gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> recognized.</returns>
      <param name="strokes">The <see cref="T:System.Windows.Ink.StrokeCollection" /> to search for gestures.</param>
    </member>
    <member name="M:System.Windows.Ink.GestureRecognizer.SetEnabledGestures(System.Collections.Generic.IEnumerable{System.Windows.Ink.ApplicationGesture})">
      <summary>Sets the application gestures that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> recognizes.</summary>
      <param name="applicationGestures">An array of type <see cref="T:System.Windows.Ink.ApplicationGesture" /> that specifies the application gestures you wish the <see cref="T:System.Windows.Ink.GestureRecognizer" /> to recognize.</param>
    </member>
    <member name="T:System.Windows.Ink.IncrementalHitTester">
      <summary>Dynamically performs hit testing on a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.AddPoint(System.Windows.Point)">
      <summary>Adds a <see cref="T:System.Windows.Point" /> to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="point">The <see cref="T:System.Windows.Point" /> to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="points">An array of type <see cref="T:System.Windows.Point" /> to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.AddPoints(System.Windows.Input.StylusPointCollection)">
      <summary>Adds the specified <see cref="T:System.Windows.Input.StylusPoint" /> objects to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="stylusPoints">A collection of <see cref="T:System.Windows.Input.StylusPoint" /> objects to add to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="points">The points to add</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalHitTester.EndHitTesting">
      <summary>Releases resources used by the <see cref="T:System.Windows.Ink.IncrementalHitTester" />. </summary>
    </member>
    <member name="P:System.Windows.Ink.IncrementalHitTester.IsValid">
      <summary>Gets whether the <see cref="T:System.Windows.Ink.IncrementalHitTester" /> is hit testing.</summary>
      <returns>true if the <see cref="T:System.Windows.Ink.IncrementalHitTester" /> is hit testing; otherwise, false. </returns>
    </member>
    <member name="T:System.Windows.Ink.IncrementalLassoHitTester">
      <summary>Dynamically hit tests a <see cref="T:System.Windows.Ink.Stroke" /> with a lasso.</summary>
    </member>
    <member name="M:System.Windows.Ink.IncrementalLassoHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Adds points to the <see cref="T:System.Windows.Ink.IncrementalHitTester" />.</summary>
      <param name="points"></param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalLassoHitTester.OnSelectionChanged(System.Windows.Ink.LassoSelectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event. </summary>
      <param name="eventArgs">Event data.</param>
    </member>
    <member name="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged">
      <summary>Occurs when the lasso path selects or unselects an ink <see cref="T:System.Windows.Ink.Stroke" />. </summary>
    </member>
    <member name="T:System.Windows.Ink.IncrementalStrokeHitTester">
      <summary>Dynamically hit tests a stroke with an eraser path.</summary>
    </member>
    <member name="M:System.Windows.Ink.IncrementalStrokeHitTester.AddPointsCore(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <param name="points">The points.</param>
    </member>
    <member name="M:System.Windows.Ink.IncrementalStrokeHitTester.OnStrokeHit(System.Windows.Ink.StrokeHitEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit" /> event.</summary>
      <param name="eventArgs">Event data.</param>
    </member>
    <member name="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit">
      <summary>Occurs when the <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" /> intersects an ink <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    </member>
    <member name="T:System.Windows.Ink.LassoSelectionChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event. </summary>
    </member>
    <member name="P:System.Windows.Ink.LassoSelectionChangedEventArgs.DeselectedStrokes">
      <summary>Gets the strokes that have been removed from lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event was raised. </summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that have been removed from the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event was raised. </returns>
    </member>
    <member name="P:System.Windows.Ink.LassoSelectionChangedEventArgs.SelectedStrokes">
      <summary>Gets the strokes that have been surrounded by the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event was raised.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that have been surrounded by the lasso path since the last time the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event was raised.</returns>
    </member>
    <member name="T:System.Windows.Ink.LassoSelectionChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Ink.IncrementalLassoHitTester.SelectionChanged" /> event of a <see cref="T:System.Windows.Ink.IncrementalLassoHitTester" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Ink.LassoSelectionChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.PropertyDataChangedEventArgs">
      <summary>Provides data for the PropertyDataChanged event.</summary>
    </member>
    <member name="M:System.Windows.Ink.PropertyDataChangedEventArgs.#ctor(System.Guid,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> class.</summary>
      <param name="propertyGuid">The <see cref="T:System.Guid" /> of the custom property which changed.</param>
      <param name="newValue">The new custom property object.</param>
      <param name="previousValue">The previous custom property object.</param>
    </member>
    <member name="P:System.Windows.Ink.PropertyDataChangedEventArgs.NewValue">
      <summary>Gets the new custom property object. </summary>
    </member>
    <member name="P:System.Windows.Ink.PropertyDataChangedEventArgs.PreviousValue">
      <summary>Gets the previous custom property object.</summary>
    </member>
    <member name="P:System.Windows.Ink.PropertyDataChangedEventArgs.PropertyGuid">
      <summary>Gets the <see cref="T:System.Guid" /> of the custom property which changed.</summary>
    </member>
    <member name="T:System.Windows.Ink.PropertyDataChangedEventHandler">
      <summary>Represents the method that handles the PropertyDataChanged event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e"></param>
    </member>
    <member name="T:System.Windows.Ink.RecognitionConfidence">
      <summary>Specifies the confidence level that the <see cref="T:System.Windows.Ink.GestureRecognizer" /> determines for a particular ink gesture.</summary>
    </member>
    <member name="F:System.Windows.Ink.RecognitionConfidence.Strong">
      <summary>Indicates strong confidence in the recognition result.</summary>
    </member>
    <member name="F:System.Windows.Ink.RecognitionConfidence.Intermediate">
      <summary>Indicates intermediate confidence in the recognition result.</summary>
    </member>
    <member name="F:System.Windows.Ink.RecognitionConfidence.Poor">
      <summary>Indicates poor confidence in the recognition result.</summary>
    </member>
    <member name="T:System.Windows.Ink.RectangleStylusShape">
      <summary>Represents a rectangular stylus tip.</summary>
    </member>
    <member name="M:System.Windows.Ink.RectangleStylusShape.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.RectangleStylusShape" /> class with the specified width and height.</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:System.Windows.Ink.RectangleStylusShape.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.RectangleStylusShape" /> class with the specified width, height, and angle.</summary>
      <param name="width"></param>
      <param name="height"></param>
      <param name="rotation"></param>
    </member>
    <member name="T:System.Windows.Ink.Stroke">
      <summary>Represents a single ink stroke.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class. </summary>
      <param name="stylusPoints">A <see cref="T:System.Windows.Input.StylusPointCollection" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPoints" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoints" /> is empty..</exception>
    </member>
    <member name="M:System.Windows.Ink.Stroke.#ctor(System.Windows.Input.StylusPointCollection,System.Windows.Ink.DrawingAttributes)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.Stroke" /> class. </summary>
      <param name="stylusPoints">A <see cref="T:System.Windows.Input.StylusPointCollection" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <param name="drawingAttributes">A <see cref="T:System.Windows.Ink.DrawingAttributes" /> object that specifies the appearance of the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylusPoints" /> is null.-or-<paramref name="drawingAtrributes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stylusPoints" /> is empty.</exception>
    </member>
    <member name="M:System.Windows.Ink.Stroke.AddPropertyData(System.Guid,System.Object)">
      <summary>Adds a custom property to the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <param name="propertyDataId">The unique identifier for the property.</param>
      <param name="propertyData">The value of the custom property. <paramref name="propertyData" /> must be of type <see cref="T:System.Char" />, <see cref="T:System.Byte" />,<see cref="T:System.Int16" />,,<see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" />  or an array of these data types, except <see cref="T:System.String" />, which is not allowed.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="propertyData" /> argument is not one of the allowed data types listed in the Parameters section.</exception>
    </member>
    <member name="M:System.Windows.Ink.Stroke.Clone">
      <summary>Returns a deep copy of the existing <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>The new <see cref="T:System.Windows.Ink.Stroke" /> object.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.ContainsPropertyData(System.Guid)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke" /> object contains the specified custom property.</summary>
      <returns>Returns true if the custom property exists; otherwise, returns false.</returns>
      <param name="propertyDataId">The unique identifier for the property.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.Draw(System.Windows.Media.DrawingContext)">
      <summary>Renders the <see cref="T:System.Windows.Ink.Stroke" /> object based upon the specified <see cref="T:System.Windows.Media.DrawingContext" />.</summary>
      <param name="context"></param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.Draw(System.Windows.Media.DrawingContext,System.Windows.Ink.DrawingAttributes)">
      <summary>Renders the <see cref="T:System.Windows.Ink.Stroke" /> object based upon the specified <see cref="T:System.Windows.Media.DrawingContext" /> and <see cref="T:Microsoft.Ink.DrawingAttributes" />.</summary>
      <param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext" /> object onto which the stroke will be rendered.</param>
      <param name="drawingAttributes">The <see cref="T:Microsoft.Ink.DrawingAttributes" /> object defining the attributes of the stroke that is drawn.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.DrawCore(System.Windows.Media.DrawingContext,System.Windows.Ink.DrawingAttributes)">
      <summary>Renders the <see cref="T:System.Windows.Ink.Stroke" /> on the specified <see cref="T:System.Windows.Media.DrawingContext" /> using the specified <see cref="T:Microsoft.Ink.DrawingAttributes" />.</summary>
      <param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext" /> object onto which the stroke will be rendered.</param>
      <param name="drawingAttributes">The <see cref="T:Microsoft.Ink.DrawingAttributes" /> object defining the attributes of the stroke that is drawn.</param>
    </member>
    <member name="P:System.Windows.Ink.Stroke.DrawingAttributes">
      <summary>Gets or sets the <see cref="T:System.Windows.Ink.DrawingAttributes" /> for the <see cref="T:System.Windows.Ink.Stroke" /> object. </summary>
      <exception cref="T:System.ArgumentNullException">The set value is null.</exception>
    </member>
    <member name="E:System.Windows.Ink.Stroke.DrawingAttributesChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.DrawingAttributes" /> associated with the <see cref="T:System.Windows.Ink.Stroke" /> object change. </summary>
    </member>
    <member name="E:System.Windows.Ink.Stroke.DrawingAttributesReplaced">
      <summary>Occurs when the drawing attributes of a <see cref="T:System.Windows.Ink.Stroke" /> object are replaced.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetBezierStylusPoints">
      <summary>Returns the stylus points the <see cref="T:System.Windows.Ink.Stroke" /> uses when <see cref="P:System.Windows.Ink.DrawingAttributes.FitToCurve" /> is true.</summary>
      <returns>A <see cref="T:System.Windows.Input.StylusPointCollection" /> that contains the stylus points along the spine of a <see cref="T:System.Windows.Ink.Stroke" /> when <see cref="P:System.Windows.Ink.DrawingAttributes.FitToCurve" /> is true</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetBounds">
      <summary>Retrieves the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> structure defining the bounding box for the <see cref="T:System.Windows.Ink.Stroke" /> object.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetClipResult(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are within the specified bounds.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains copies of the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are within the specified bounds.</returns>
      <param name="lassoPoints">The points that specify the line which defines where to clip.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetClipResult(System.Windows.Rect)">
      <summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are within the specified rectangle.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains copies of the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are within the bounds of <paramref name="bounds" />.</returns>
      <param name="bounds">A <see cref="T:System.Windows.Rect" /> that specifies the area to clip.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are outside the specified bounds.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are outside the specified bounds.</returns>
      <param name="lassoPoints">An array of type <see cref="T:System.Windows.Point" /> that specifies the area to erase.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
      <summary>Returns the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> after it is dissected by the designated path using the specified <see cref="T:System.Windows.Ink.StylusShape" />.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains copies of the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> after it is dissected by the specified path.</returns>
      <param name="eraserPath">An array of type <see cref="T:System.Windows.Point" /> that specifies the path that dissects the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape" /> that specifies the shape of the eraser.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetEraseResult(System.Windows.Rect)">
      <summary>Returns segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are outside the specified rectangle.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the segments of the current <see cref="T:System.Windows.Ink.Stroke" /> that are outside the bounds of the specified <see cref="T:System.Windows.Rect" />.</returns>
      <param name="bounds">A <see cref="T:System.Windows.Rect" /> that specifies the area to erase.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetGeometry">
      <summary>Gets the <see cref="T:System.Windows.Media.Geometry" /> of the current <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetGeometry(System.Windows.Ink.DrawingAttributes)">
      <summary>Gets the <see cref="T:System.Windows.Media.Geometry" /> of the current <see cref="T:System.Windows.Ink.Stroke" /> using the specified <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that represents the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
      <param name="drawingAttributes">The <see cref="T:System.Windows.Ink.DrawingAttributes" /> that determines the <see cref="T:System.Windows.Media.Geometry" /> of the <see cref="T:System.Windows.Ink.Stroke" />.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetPropertyData(System.Guid)">
      <summary>Retrieves the property data for the specified GUID.</summary>
      <returns>An object containing the property data.</returns>
      <param name="propertyDataId">The unique identifier for the property.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is not associated with a custom property of the <see cref="T:System.Windows.Ink.Stroke" />.</exception>
    </member>
    <member name="M:System.Windows.Ink.Stroke.GetPropertyDataIds">
      <summary>Retrieves the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <returns>An array of <see cref="T:System.Guid" /> objects.</returns>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Windows.Ink.Stroke" /> is within the specified bounds.</summary>
      <returns>true if the current stroke is within the specified bounds; otherwise false.</returns>
      <param name="lassoPoints">An array of type <see cref="T:System.Windows.Point" /> that represents the bounds of the area to hit test.</param>
      <param name="percentageWithinLasso">The percentage of the length of the <see cref="T:System.Windows.Ink.Stroke" />, that must be in <paramref name="lassoPoints" /> for the <see cref="T:System.Windows.Ink.Stroke" /> to be considered hit.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
      <summary>Returns whether the specified path intersects the <see cref="T:System.Windows.Ink.Stroke" /> using the specified <see cref="T:System.Windows.Ink.StylusShape" />.</summary>
      <returns>true if <paramref name="stylusShape" /> intersects the current stroke; otherwise, false.</returns>
      <param name="path">The path that <paramref name="stylusShape" /> follows for hit testing</param>
      <param name="stylusShape">The shape of <paramref name="path" /> with which to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Point)">
      <summary>Returns a value that indicates whether current <see cref="T:System.Windows.Ink.Stroke" /> intersects the specified point.</summary>
      <returns>true if <paramref name="point" /> intersects the current stroke; otherwise, false.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Point,System.Double)">
      <summary>Returns a value that indicates whether current <see cref="T:System.Windows.Ink.Stroke" /> intersects the specified area.</summary>
      <returns>true if the specified area intersects the current stroke; otherwise, false.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> that defines the center of the area to hit test.</param>
      <param name="diameter">The diameter of the area to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.HitTest(System.Windows.Rect,System.Int32)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Windows.Ink.Stroke" /> is within the bounds of the specified rectangle.</summary>
      <returns>true if the current stroke is within the bounds of <paramref name="bounds" />; otherwise false.</returns>
      <param name="bounds"></param>
      <param name="percentageWithinBounds">The percentage of the length of the <see cref="T:System.Windows.Ink.Stroke" />, that must be in <paramref name="percentageWithinBounds" /> for the <see cref="T:System.Windows.Ink.Stroke" /> to be considered hit..</param>
    </member>
    <member name="E:System.Windows.Ink.Stroke.Invalidated">
      <summary>Occurs when the appearance of the <see cref="T:System.Windows.Ink.Stroke" /> changes.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnDrawingAttributesChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.DrawingAttributesChanged" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnDrawingAttributesReplaced(System.Windows.Ink.DrawingAttributesReplacedEventArgs)">
      <summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.DrawingAttributesReplaced" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.Ink.DrawingAttributesReplacedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnInvalidated(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.Stroke.Invalidated" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Occurs when any <see cref="T:System.Windows.Ink.Stroke" /> property changes.</summary>
      <param name="e"></param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Allows derived classes to modify the default behavior of the <see cref="E:System.Windows.Ink.Stroke.PropertyDataChanged" /> event.</summary>
      <param name="e">The <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnStylusPointsChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.Stroke.StylusPointsChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Windows.Ink.Stroke.OnStylusPointsReplaced(System.Windows.Ink.StylusPointsReplacedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Ink.StylusPointsReplacedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Ink.Stroke.PropertyDataChanged">
      <summary>Occurs when the custom properties on a <see cref="T:System.Windows.Ink.Stroke" /> object changes.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.RemovePropertyData(System.Guid)">
      <summary>Deletes a custom property from the <see cref="T:System.Windows.Ink.Stroke" /> object.</summary>
      <param name="propertyDataId">The unique identifier for the property.</param>
    </member>
    <member name="P:System.Windows.Ink.Stroke.StylusPoints">
      <summary>Returns the stylus points of the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The <see cref="T:System.Windows.Input.StylusPointCollection" /> that contains the stylus points that represent the current <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="E:System.Windows.Ink.Stroke.StylusPointsChanged">
      <summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.StylusPoints" /> property changes.</summary>
    </member>
    <member name="E:System.Windows.Ink.Stroke.StylusPointsReplaced">
      <summary>Occurs when the <see cref="P:System.Windows.Ink.Stroke.StylusPoints" /> property is assigned a new <see cref="T:System.Windows.Input.StylusPointCollection" />.</summary>
    </member>
    <member name="E:System.Windows.Ink.Stroke.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when the value of any <see cref="T:System.Windows.Ink.Stroke" /> property has changed.</summary>
    </member>
    <member name="M:System.Windows.Ink.Stroke.Transform(System.Windows.Media.Matrix,System.Boolean)">
      <summary>Performs a transformation based upon the specified <see cref="T:System.Windows.Media.Matrix" /> object.</summary>
      <param name="transformMatrix">The <see cref="T:System.Windows.Media.Matrix" /> object defining the transformation.</param>
      <param name="applyToStylusTip">true to apply the transformation to the tip of the stylus; otherwise, false.</param>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Ink.Stroke" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Ink.Stroke})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollection" /> class that contains the specified strokes. </summary>
      <param name="strokes">The strokes to add to the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.#ctor(System.IO.Stream)">
      <summary>Initializes a <see cref="T:System.Windows.Ink.StrokeCollection" /> from the specified <see cref="T:System.IO.Stream" /> of Ink Serialized Format (ISF).</summary>
      <param name="stream">A stream that contains ink data.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Add(System.Windows.Ink.StrokeCollection)">
      <summary>Adds the specified strokes to the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="strokes">The <see cref="T:System.Windows.Ink.StrokeCollection" /> to add to the collection.</param>
      <exception cref="T:System.ArgumentException">A <see cref="T:System.Windows.Ink.Stroke" /> in <paramref name="strokes" /> is already a member of the <see cref="T:System.Windows.Ink.StrokeCollection" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strokes" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.AddPropertyData(System.Guid,System.Object)">
      <summary>Adds a custom property to the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> to associate with the custom property.</param>
      <param name="propertyData">The value of the custom property. <paramref name="propertyData" /> must be of type <see cref="T:System.Char" />, <see cref="T:System.Byte" />,<see cref="T:System.Int16" />,,<see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> or an array of these data types, except <see cref="T:System.String" />, which is not allowed.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is an empty <see cref="T:System.Guid" />.-or-<paramref name="propertyData" /> is not one of the allowed data types listed in the Parameters section.</exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.ClearItems">
      <summary>Clears all strokes from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Clip(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Removes all strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" /> that are outside the bounds of the specified <see cref="T:System.Drawing.Point" /> array.</summary>
      <param name="lassoPoints">An array of type <see cref="T:System.Drawing.Point" /> that specifies the area to be clipped.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Clip(System.Windows.Rect)">
      <summary>Replaces all strokes that are clipped by the specified rectangle with new strokes that do not extend beyond the specified rectangle.  </summary>
      <param name="bounds">A <see cref="T:System.Windows.Rect" /> that specifies the area to be clipped.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Clone">
      <summary>Copies the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>A copy of the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.ContainsPropertyData(System.Guid)">
      <summary>Returns whether the specified custom property identifier is in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>true if the specified custom property identifier is in the <see cref="T:System.Windows.Ink.StrokeCollection" />; otherwise, false.</returns>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> to locate in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Draw(System.Windows.Media.DrawingContext)">
      <summary>Draws the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="context">The <see cref="T:System.Windows.Media.DrawingContext" /> on which to draw the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Collections.Generic.IEnumerable{System.Windows.Point})">
      <summary>Removes the ink that is within the bounds of the specified area.</summary>
      <param name="lassoPoints">An array of type <see cref="T:System.Drawing.Point" /> that specifies the area to be erased.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
      <summary>Replaces all strokes that are clipped by the region created by the specified <see cref="T:System.Windows.Ink.StylusShape" /> along the specified path with new Strokes that are not clipped by the region.</summary>
      <param name="eraserPath">An array of type <see cref="T:System.Windows.Point" /> that specifies the path to be erased.</param>
      <param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape" /> that specifies the shape of the eraser.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Erase(System.Windows.Rect)">
      <summary>Replaces all strokes that are clipped by the specified rectangle with new strokes that do not enter the bounds of the specified rectangle. </summary>
      <param name="bounds"></param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetBounds">
      <summary>Returns the bounds of the strokes in the collection.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that contains the bounds of the strokes in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetIncrementalLassoHitTester(System.Int32)">
      <summary>Creates an <see cref="T:System.Windows.Ink.IncrementalLassoHitTester" /> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection" /> with a lasso (freehand) path.</summary>
      <returns>An <see cref="T:System.Windows.Ink.IncrementalLassoHitTester" /> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
      <param name="percentageWithinLasso">The minimum percentage of each <see cref="T:System.Windows.Ink.Stroke" /> that must be contained within the lasso for it to be considered hit.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetIncrementalStrokeHitTester(System.Windows.Ink.StylusShape)">
      <summary>Creates an <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" /> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection" /> with an erasing path.</summary>
      <returns>An <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" /> that hit tests the <see cref="T:System.Windows.Ink.StrokeCollection" />.</returns>
      <param name="eraserShape">A <see cref="T:System.Windows.Ink.StylusShape" /> that specifies the tip of the stylus.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetPropertyData(System.Guid)">
      <summary>Returns the value of the custom property associated with the specified <see cref="T:System.Guid" />.</summary>
      <returns>The value of the custom property associated with the specified <see cref="T:System.Guid" />.</returns>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> associated with the custom property to get.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyDataId" /> is not associated with a custom property of the <see cref="T:System.Windows.Ink.StrokeCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.GetPropertyDataIds">
      <summary>Returns the GUIDs of any custom properties associated with the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>An array of type <see cref="T:System.Guid" /> that represent the custom property identifiers.</returns>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32)">
      <summary>Returns a collection of strokes that have at least the specified percentage of length within the specified area.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that has strokes with at least the specified percentage within the <see cref="T:System.Windows.Point" /> array.</returns>
      <param name="lassoPoints">An array of type <see cref="T:System.Windows.Point" /> that represents the bounds of the area to be hit tested.</param>
      <param name="percentageWithinLasso">The acceptable length of the <see cref="T:System.Windows.Ink.Stroke" />, as a percentage, for <paramref name="lassoPoints" /> to contain.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lassoPoints" /> is null.-or-<paramref name="percentageWithinLasso" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lassoPoints" /> contains an empty array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="percentageWithinLasso" /> is less than 0 or greater than 100.</exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Ink.StylusShape)">
      <summary>Returns a collection of strokes that intersect with the specified path.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> of strokes that intersect with <paramref name="path" />.</returns>
      <param name="path">An array to type <see cref="T:System.Windows.Point" /> that represents the path to be hit tested.</param>
      <param name="stylusShape">The <see cref="T:System.Windows.Ink.StylusShape" /> that specifies the shape of <paramref name="eraserPath" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Point)">
      <summary>Returns a collection of strokes that intersect the specified point.</summary>
      <returns>A collection of <see cref="T:System.Windows.Ink.Stroke" /> objects that intersect the specified point.</returns>
      <param name="point">The point to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Point,System.Double)">
      <summary>Returns a collection of strokes that intersect the specified area.</summary>
      <returns>A collection of <see cref="T:System.Windows.Ink.Stroke" /> objects that intersect the specified point.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> to hit test.</param>
      <param name="diameter">The size of the area around the <see cref="T:System.Windows.Point" /> to hit test.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.HitTest(System.Windows.Rect,System.Int32)">
      <summary>Returns a collection of strokes that have at least the specified percentage of length within the specified rectangle.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that has strokes with at least the specified percentage within the <see cref="T:System.Windows.Rect" />.</returns>
      <param name="bounds">A <see cref="T:System.Windows.Rect" /> that specifies the bounds to be hit tested.</param>
      <param name="percentageWithinBounds">The minimum required length of a Stroke that must exist within bounds for it to be considered hit.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.IndexOf(System.Windows.Ink.Stroke)">
      <summary>Returns the index of the specified <see cref="T:System.Windows.Ink.Stroke" /> in the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>The index of the stroke.</returns>
      <param name="stroke">The stroke whose position is required.</param>
    </member>
    <member name="F:System.Windows.Ink.StrokeCollection.InkSerializedFormat">
      <summary>Represents the native persistence format for ink data.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.InsertItem(System.Int32,System.Windows.Ink.Stroke)">
      <summary>Inserts a stroke into the <see cref="T:System.Windows.Ink.StrokeCollection" /> at the specified index.</summary>
      <param name="index"></param>
      <param name="stroke"></param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Occurs when any <see cref="T:System.Windows.Ink.StrokeCollection" /> property changes.</summary>
      <param name="e">Event data.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.StrokeCollection.PropertyDataChanged" /> event. </summary>
      <param name="e"></param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.OnStrokesChanged(System.Windows.Ink.StrokeCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged" /> event. </summary>
      <param name="e">A <see cref="T:System.Windows.Ink.StrokeCollectionChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="E:System.Windows.Ink.StrokeCollection.PropertyDataChanged">
      <summary>Occurs when custom property is added or removed from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Remove(System.Windows.Ink.StrokeCollection)">
      <summary>Removes the specified strokes from the collection.</summary>
      <param name="strokes"></param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.RemoveItem(System.Int32)">
      <summary>Removes the stroke at the specified index from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="index">The specified index.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.RemovePropertyData(System.Guid)">
      <summary>Removes the custom property associated with the specified <see cref="T:System.Guid" />.</summary>
      <param name="propertyDataId">The <see cref="T:System.Guid" /> associated with the custom property to remove.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Replace(System.Windows.Ink.Stroke,System.Windows.Ink.StrokeCollection)">
      <summary>Replaces the specified <see cref="T:System.Windows.Ink.Stroke" /> with the specified <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="strokeToReplace">The <see cref="T:System.Windows.Ink.Stroke" /> to replace.</param>
      <param name="strokesToReplaceWith">The source <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="strokesToReplace" /> is empty.-or-<paramref name="strokesToReplaceWith" /> is empty.-or-A <see cref="T:System.Windows.Ink.Stroke" /> in <paramref name="strokesToReplaceWith" /> is already in <paramref name="strokesToReplace" />. </exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Replace(System.Windows.Ink.StrokeCollection,System.Windows.Ink.StrokeCollection)">
      <summary>Replaces the specified <see cref="T:System.Windows.Ink.StrokeCollection" /> with a new <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <param name="strokesToReplace">The destination <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <param name="strokesToReplaceWith">The source <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="strokesToReplace" /> is empty.-or-<paramref name="strokesToReplaceWith" /> is empty.-or-A <see cref="T:System.Windows.Ink.Stroke" /> in <paramref name="strokesToReplaceWith" /> is already in <paramref name="strokesToReplace." />-or-The strokes in <paramref name="strokesToReplaceWith" /> are not continuous. </exception>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Save(System.IO.Stream)">
      <summary>Saves the <see cref="T:System.Windows.Ink.StrokeCollection" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which to save the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Save(System.IO.Stream,System.Boolean)">
      <summary>Saves the <see cref="T:System.Windows.Ink.StrokeCollection" /> to the specified <see cref="T:System.IO.Stream" /> and compresses it, when specified.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which to save the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <param name="compress">true to compress the <see cref="T:System.Windows.Ink.StrokeCollection" />; otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.SetItem(System.Int32,System.Windows.Ink.Stroke)">
      <summary>Replaces the stroke at the specified index.</summary>
      <param name="index"></param>
      <param name="stroke"></param>
    </member>
    <member name="E:System.Windows.Ink.StrokeCollection.StrokesChanged">
      <summary>Occurs when a <see cref="T:System.Windows.Ink.Stroke" /> in the collection changes. </summary>
    </member>
    <member name="E:System.Windows.Ink.StrokeCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Occurs when the <see cref="T:System.Windows.Ink.StrokeCollection" /> changes.</summary>
    </member>
    <member name="E:System.Windows.Ink.StrokeCollection.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when the value of any <see cref="T:System.Windows.Ink.StrokeCollection" /> property has changed.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollection.Transform(System.Windows.Media.Matrix,System.Boolean)">
      <summary>Modifies each of the <see cref="P:System.Windows.Ink.Stroke.StylusPoints" /> and optionally the <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> for each stroke in the <see cref="T:System.Windows.Ink.StrokeCollection" /> according to the specified <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="transformMatrix">A <see cref="T:System.Windows.Media.Matrix" /> which specifies the transformation to perform on the <see cref="T:System.Windows.Ink.StrokeCollection" />.</param>
      <param name="applyToStylusTip">true to apply the transformation to the tip of the stylus; otherwise, false.</param>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollectionChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged" /> event.</summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeCollectionChangedEventArgs.#ctor(System.Windows.Ink.StrokeCollection,System.Windows.Ink.StrokeCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StrokeCollectionChangedEventArgs" /> class. </summary>
      <param name="added">A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the added strokes.</param>
      <param name="removed">A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the removed strokes.</param>
    </member>
    <member name="P:System.Windows.Ink.StrokeCollectionChangedEventArgs.Added">
      <summary>Gets the strokes that have been added to the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the added strokes.</returns>
    </member>
    <member name="P:System.Windows.Ink.StrokeCollectionChangedEventArgs.Removed">
      <summary>Gets the strokes that have been removed from the <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the removed strokes. </returns>
    </member>
    <member name="T:System.Windows.Ink.StrokeCollectionChangedEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Windows.Ink.StrokeCollection.StrokesChanged" /> event of a <see cref="T:System.Windows.Ink.StrokeCollection" />.  </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Windows.Ink.StrokeCollectionChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.StrokeHitEventArgs">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit" /> event of a <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" />. </summary>
    </member>
    <member name="M:System.Windows.Ink.StrokeHitEventArgs.GetPointEraseResults">
      <summary>Returns the strokes that are a result of the eraser path erasing a stroke.</summary>
      <returns>A <see cref="T:System.Windows.Ink.StrokeCollection" /> that contains the strokes that are created after the eraser path erases part of <see cref="P:System.Windows.Ink.StrokeHitEventArgs.HitStroke" />.</returns>
    </member>
    <member name="P:System.Windows.Ink.StrokeHitEventArgs.HitStroke">
      <summary>Gets the <see cref="T:System.Windows.Ink.Stroke" /> that is intersected by the eraser path.</summary>
      <returns>The <see cref="T:System.Windows.Ink.Stroke" /> that is intersected by the eraser path.</returns>
    </member>
    <member name="T:System.Windows.Ink.StrokeHitEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.IncrementalStrokeHitTester.StrokeHit" /> event of a <see cref="T:System.Windows.Ink.IncrementalStrokeHitTester" />. </summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Ink.StrokeHitEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.StylusPointsReplacedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced" /> event.  </summary>
    </member>
    <member name="M:System.Windows.Ink.StylusPointsReplacedEventArgs.#ctor(System.Windows.Input.StylusPointCollection,System.Windows.Input.StylusPointCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Ink.StylusPointsReplacedEventArgs" /> class. </summary>
      <param name="newStylusPoints">The new <see cref="T:System.Windows.Input.StylusPointCollection" /> for the <see cref="T:System.Windows.Ink.Stroke" />.</param>
      <param name="previousStylusPoints">The replaced <see cref="T:System.Windows.Input.StylusPointCollection" />.</param>
    </member>
    <member name="P:System.Windows.Ink.StylusPointsReplacedEventArgs.NewStylusPoints">
      <summary>Gets the new <see cref="T:System.Windows.Input.StylusPointCollection" /> for the <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <returns>The new <see cref="T:System.Windows.Input.StylusPointCollection" /> for the <see cref="T:System.Windows.Ink.Stroke" />.</returns>
    </member>
    <member name="P:System.Windows.Ink.StylusPointsReplacedEventArgs.PreviousStylusPoints">
      <summary>Gets the replaced <see cref="T:System.Windows.Input.StylusPointCollection" />.</summary>
      <returns>The replaced <see cref="T:System.Windows.Input.StylusPointCollection" />.</returns>
    </member>
    <member name="T:System.Windows.Ink.StylusPointsReplacedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Ink.Stroke.StylusPointsReplaced" /> event of a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Windows.Ink.StylusPointsReplacedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Ink.StylusShape">
      <summary>Represents the tip of a stylus.</summary>
    </member>
    <member name="P:System.Windows.Ink.StylusShape.Height">
      <summary>Gets the height of the stylus.</summary>
      <returns>The height of the stylus.</returns>
    </member>
    <member name="P:System.Windows.Ink.StylusShape.Rotation">
      <summary>Gets the angle of the stylus.</summary>
      <returns>The angle of the stylus.</returns>
    </member>
    <member name="P:System.Windows.Ink.StylusShape.Width">
      <summary>Gets the width of the stylus. </summary>
      <returns>The width of the stylus.</returns>
    </member>
    <member name="T:System.Windows.Ink.StylusTip">
      <summary>Specifies the tip to be used to draw a <see cref="T:System.Windows.Ink.Stroke" />.</summary>
    </member>
    <member name="F:System.Windows.Ink.StylusTip.Rectangle">
      <summary>Represents a rectangle-shaped tip.</summary>
    </member>
    <member name="F:System.Windows.Ink.StylusTip.Ellipse">
      <summary>Represents an ellipse-shaped tip.</summary>
    </member>
    <member name="T:System.Windows.Input.AccessKeyEventArgs">
      <summary>Provides information for access keys events. </summary>
    </member>
    <member name="P:System.Windows.Input.AccessKeyEventArgs.IsMultiple">
      <summary>Gets a value that indicates whether other elements are invoked by the key. </summary>
      <returns>true if other elements are invoked; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Input.AccessKeyEventArgs.Key">
      <summary>Gets the access keys that was pressed. </summary>
      <returns>The access key.</returns>
    </member>
    <member name="T:System.Windows.Input.AccessKeyManager">
      <summary>Maintains the registration of all access keys and the handling of interop keyboard commands between Windows Forms, Win32, and Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed">
      <summary>Occurs when the access key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.AccessKeyManager.AccessKeyPressedEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> routed event. </summary>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.AddAccessKeyPressedHandler(System.Windows.DependencyObject,System.Windows.Input.AccessKeyPressedEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.IsKeyRegistered(System.Object,System.String)">
      <summary>Indicates whether the specified key is registered as an access keys in the specified scope.</summary>
      <returns>true if the key is registered; otherwise, false.</returns>
      <param name="scope">The presentation source to query for <paramref name="key" />.</param>
      <param name="key">The key to query.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.ProcessKey(System.Object,System.String,System.Boolean)">
      <summary>Processes the specified access keys as if a <see cref="E:System.Windows.UIElement.KeyDown" /> event for the key was passed to the <see cref="T:System.Windows.Input.AccessKeyManager" />. </summary>
      <returns>true if there are more keys that match; otherwise, false.</returns>
      <param name="scope">The scope for the access key.</param>
      <param name="key">The access key.</param>
      <param name="isMultiple">Indicates if <paramref name="key" /> has multiple matches.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.Register(System.String,System.Windows.IInputElement)">
      <summary>Associates the specified access keys with the specified element.</summary>
      <param name="key">The access key.</param>
      <param name="element">The element to associate <paramref name="key" /> with.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.RemoveAccessKeyPressedHandler(System.Windows.DependencyObject,System.Windows.Input.AccessKeyPressedEventHandler)">
      <summary>Removes the specified <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> event handler from the specified object.</summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyManager.Unregister(System.String,System.Windows.IInputElement)">
      <summary>Disassociates the specified access keys from the specified element.</summary>
      <param name="key">The access key.</param>
      <param name="element">The element from which to disassociate <paramref name="key" />.</param>
    </member>
    <member name="T:System.Windows.Input.AccessKeyPressedEventArgs">
      <summary>Provides data for the <see cref="T:System.Windows.Input.AccessKeyManager" /> routed event.</summary>
    </member>
    <member name="M:System.Windows.Input.AccessKeyPressedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.AccessKeyEventArgs" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.AccessKeyPressedEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.AccessKeyPressedEventArgs" /> class with the specified access key.</summary>
      <param name="key">The access key.</param>
    </member>
    <member name="M:System.Windows.Input.AccessKeyPressedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="P:System.Windows.Input.AccessKeyPressedEventArgs.Key">
      <summary>Gets a string representation of the access key that was pressed </summary>
      <returns>The access key.</returns>
    </member>
    <member name="P:System.Windows.Input.AccessKeyPressedEventArgs.Scope">
      <summary>Gets the scope for the element that raised this event. </summary>
      <returns>The element's scope.</returns>
    </member>
    <member name="P:System.Windows.Input.AccessKeyPressedEventArgs.Target">
      <summary> Gets or sets the target for the event. </summary>
      <returns>The element that raised this event.</returns>
    </member>
    <member name="T:System.Windows.Input.AccessKeyPressedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> attached event.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.ApplicationCommands">
      <summary>Provides a standard set of application related commands.</summary>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.CancelPrint">
      <summary>Gets the value that represents the Cancel Print command.</summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextCancel Print</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Close">
      <summary>Gets the value that represents the Close command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+XShift+DeleteUI TextClose</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.ContextMenu">
      <summary>Gets the value that represents the Context Menu command. </summary>
      <returns>The command.Default ValuesKey GestureShift+F10AppsMouse GestureA Mouse Gesture is not attached to this command, but most applications follow the convention of using the Right Click gesture to invoke the context menu.UI TextContext Menu</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Copy">
      <summary>Gets the value that represents the Copy command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+CShift+DeleteUI TextCopy</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.CorrectionList">
      <summary> Gets the value that represents the Correction List command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextCorrection List</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Cut">
      <summary> Gets the value that represents the Cut command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+XShift+DeleteUI TextCut</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Delete">
      <summary> Gets the value that represents the Delete command. </summary>
      <returns>The command.Default ValuesKey GestureDelUI TextDelete</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Find">
      <summary> Gets the value that represents the Find command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+FUI TextFind</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Help">
      <summary> Gets the value that represents the Help command. </summary>
      <returns>The command.Default ValuesKey GestureF1UI TextHelp</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.New">
      <summary> Gets the value that represents the New command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+NUI TextNew</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.NotACommand">
      <summary>Represents a command which is always ignored.</summary>
      <returns>The command.</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Open">
      <summary> Gets the value that represents the Open command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+OUI TextOpen</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Paste">
      <summary> Gets the value that represents the Paste command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+VShift+InsertUI TextPaste</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Print">
      <summary> Gets the value that represents the Print command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+PUI TextPrint</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.PrintPreview">
      <summary> Gets the value that represents the Print Preview command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+F2UI TextPrint Preview</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Properties">
      <summary>Gets the value that represents the Properties command. </summary>
      <returns>The command.Default ValuesKey GestureF4UI TextProperties</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Redo">
      <summary> Gets the value that represents the Redo command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+YUI TextRedo</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Replace">
      <summary> Gets the value that represents the Replace command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+HUI TextReplace</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Save">
      <summary> Gets the value that represents the Save command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+SUI TextSave</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.SaveAs">
      <summary> Gets the value that represents the Save As command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+HUI TextSave As</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.SelectAll">
      <summary>Gets the value that represents the Select All command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+AUI TextSelect All</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Stop">
      <summary> Gets the value that represents the Stop command. </summary>
      <returns>The command.Default ValuesKey GestureEscUI TextStop</returns>
    </member>
    <member name="P:System.Windows.Input.ApplicationCommands.Undo">
      <summary>Gets the value that represents the Undo command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl-ZUI TextUndo</returns>
    </member>
    <member name="T:System.Windows.Input.CanExecuteRoutedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> routed events.</summary>
    </member>
    <member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Windows.Input.RoutedCommand" /> associated with this event can be executed on the command target.</summary>
      <returns>true if the event can be executed on the command target; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
      <summary>Gets the command associated with this event.</summary>
      <returns>The command. Unless the command is a custom command, this is generally a <see cref="T:System.Windows.Input.RoutedCommand" />. There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting">
      <summary>Determines whether the input routed event that invoked the command should continue to route through the element tree.</summary>
      <returns>true if the routed event should continue to route through element tree; otherwise, false.   The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
      <summary>Gets the command specific data.</summary>
      <returns>The command data.  The default value is null.</returns>
    </member>
    <member name="T:System.Windows.Input.CanExecuteRoutedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</summary>
      <param name="sender">The command target that is invoking the handler.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.CaptureMode">
      <summary>Specifies the mouse capture policies. </summary>
    </member>
    <member name="F:System.Windows.Input.CaptureMode.None">
      <summary>No mouse capture.  Mouse input goes to the element under the mouse.</summary>
    </member>
    <member name="F:System.Windows.Input.CaptureMode.Element">
      <summary>Mouse capture is applied to a single element.  Mouse input goes to the captured element.</summary>
    </member>
    <member name="F:System.Windows.Input.CaptureMode.SubTree">
      <summary>Mouse capture is applied to a subtree of elements.  If the mouse is over a child of the element with capture, mouse input is sent to the child element.  Otherwise, mouse input is sent to the element with mouse capture.</summary>
    </member>
    <member name="T:System.Windows.Input.CommandBinding">
      <summary>Binds a <see cref="T:System.Windows.Input.RoutedCommand" /> to the event handlers that implement the command. </summary>
    </member>
    <member name="M:System.Windows.Input.CommandBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" />.</summary>
      <param name="command">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event handler.</summary>
      <param name="command">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</param>
      <param name="executed">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> even handlers.</summary>
      <param name="command">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</param>
      <param name="executed">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
      <param name="canExecute">The handler for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
    </member>
    <member name="E:System.Windows.Input.CommandBinding.CanExecute">
      <summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the command target.</summary>
    </member>
    <member name="P:System.Windows.Input.CommandBinding.Command">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this <see cref="T:System.Windows.Input.CommandBinding" />. </summary>
      <returns>The command associated with this binding.</returns>
    </member>
    <member name="E:System.Windows.Input.CommandBinding.Executed">
      <summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandBinding.PreviewCanExecute">
      <summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the current command target.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandBinding.PreviewExecuted">
      <summary>Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</summary>
    </member>
    <member name="T:System.Windows.Input.CommandBindingCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBindingCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.#ctor(System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBindingCollection" /> class using the items in the specified <see cref="T:System.Collections.IList" />.</summary>
      <param name="commandBindings">The collection whose items are copied to the new <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Add(System.Windows.Input.CommandBinding)">
      <summary>Adds the specified <see cref="T:System.Windows.Input.CommandBinding" /> to this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <returns>0, if the operation was successful (note that this is not the index of the added item).</returns>
      <param name="commandBinding">The binding to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="commandBinding" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.AddRange(System.Collections.ICollection)">
      <summary>Adds the items of the specified <see cref="T:System.Collections.ICollection" /> to the end of this <see cref="T:System.Windows.Input.CommandBindingCollection" />. </summary>
      <param name="collection">The collection of items to add to the end of this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
      <exception cref="T:System.NotSupportedException">Any of the items in the collection to add are null.</exception>
      <exception cref="T:System.NotSupportedException">The collection to add is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Clear">
      <summary>Removes all items from this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Contains(System.Windows.Input.CommandBinding)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.CommandBinding" /> is in this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.Input.CommandBinding" /> is in the collection; otherwise, false.</returns>
      <param name="commandBinding">The binding to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.CopyTo(System.Windows.Input.CommandBinding[],System.Int32)">
      <summary>Copies all of the items in the <see cref="T:System.Windows.Input.CommandBindingCollection" /> to the specified one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="commandBindings">The array into which the collection is copied.</param>
      <param name="index">The index position in <paramref name="commandBindings" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="commandBindings" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Input.CommandBinding" /> items in this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <returns>The number of bindings in the collection.</returns>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates through this <see cref="T:System.Windows.Input.CommandBindingCollection" />. </summary>
      <returns>The enumerator for this collection.</returns>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.IndexOf(System.Windows.Input.CommandBinding)">
      <summary>Searches for the first occurrence of the specified <see cref="T:System.Windows.Input.CommandBinding" /> in this <see cref="T:System.Windows.Input.CommandBindingCollection" />. </summary>
      <returns>The index of the first occurrence of <paramref name="value" />, if found; otherwise, -1.</returns>
      <param name="value">The binding to locate in the collection. </param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Insert(System.Int32,System.Windows.Input.CommandBinding)">
      <summary>Inserts the specified <see cref="T:System.Windows.Input.CommandBinding" /> into this <see cref="T:System.Windows.Input.CommandBindingCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="commandBinding" /></param>
      <param name="commandBinding">The binding to insert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="commandBinding" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.IsFixedSize">
      <summary>Gets a value indicating whether this <see cref="T:System.Windows.Input.CommandBindingCollection" /> has a fixed size. </summary>
      <returns>true if the collection has a fixed size; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.IsReadOnly">
      <summary>Gets a value indicating whether this <see cref="T:System.Windows.Input.CommandBindingCollection" /> is read-only. </summary>
      <returns>true if the collection is read-only; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to this <see cref="T:System.Windows.Input.CommandBindingCollection" /> is synchronized (thread-safe). </summary>
      <returns>true if the collection is thread-safe; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.CommandBinding" /> at the specified index. </summary>
      <returns>The binding at the specified index.</returns>
      <param name="index">The position in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.Remove(System.Windows.Input.CommandBinding)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Input.CommandBinding" /> from this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <param name="commandBinding">The binding to remove.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Windows.Input.CommandBinding" /> at the specified index of this <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Input.CommandBinding" /> to remove.</param>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="commandBinding">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Input.CommandBindingCollection" />; otherwise, false.</returns>
      <param name="key">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.TextEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="P:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Input.CommandBindingCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="commandBinding">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Input.CommandBindingCollection" />.</param>
    </member>
    <member name="T:System.Windows.Input.CommandManager">
      <summary>Provides command related utility methods that register <see cref="T:System.Windows.Input.CommandBinding" /> and <see cref="T:System.Windows.Input.InputBinding" /> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</summary>
      <param name="element">The element to attach <paramref name="handler" /> to.</param>
      <param name="handler">The can execute handler.  </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element. </summary>
      <param name="element">The element to attach <paramref name="handler" /> to.</param>
      <param name="handler">The executed handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</summary>
      <param name="element">The element to attach <paramref name="handler" /> to.</param>
      <param name="handler">The can execute handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</summary>
      <param name="element">The element to attach <paramref name="handler" /> to.</param>
      <param name="handler">The can execute handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Input.CommandManager.CanExecute">
      <summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> event was not handled.</summary>
    </member>
    <member name="F:System.Windows.Input.CommandManager.CanExecuteEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.CanExecute" /> attached event.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandManager.Executed">
      <summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> event was not handled.</summary>
    </member>
    <member name="F:System.Windows.Input.CommandManager.ExecutedEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.Executed" /> attached event.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
      <summary>Forces the <see cref="T:System.Windows.Input.CommandManager" /> to raise the <see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /> event.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandManager.PreviewCanExecute">
      <summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called.</summary>
    </member>
    <member name="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> attached event.</summary>
    </member>
    <member name="E:System.Windows.Input.CommandManager.PreviewExecuted">
      <summary>Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called.</summary>
    </member>
    <member name="F:System.Windows.Input.CommandManager.PreviewExecutedEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> attached event.</summary>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
      <summary>Registers a <see cref="T:System.Windows.Input.CommandBinding" /> with the specified type. </summary>
      <param name="type">The class with which to register <paramref name="commandBinding" />.</param>
      <param name="commandBinding">The command binding to register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="commandBinding" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
      <summary>Registers the specified <see cref="T:System.Windows.Input.InputBinding" /> with the specified type. </summary>
      <param name="type">The type to register <paramref name="inputBinding" /> with.</param>
      <param name="inputBinding">The input binding to register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="inputBinding" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</summary>
      <param name="element">The element to remove <paramref name="handler" /> from.</param>
      <param name="handler">The can execute handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</summary>
      <param name="element">The element to remove <paramref name="handler" /> from.</param>
      <param name="handler">The executed handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</summary>
      <param name="element">The element to remove <paramref name="handler" /> from.</param>
      <param name="handler">The can execute handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
      <summary>Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</summary>
      <param name="element">The element to remove <paramref name="handler" /> from.</param>
      <param name="handler">The executed handler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Input.CommandManager.RequerySuggested">
      <summary>Occurs when the <see cref="T:System.Windows.Input.CommandManager" /> detects conditions that might change the ability of a command to execute.</summary>
    </member>
    <member name="T:System.Windows.Input.ComponentCommands">
      <summary>Provides a standard set of component-related commands, which have predefined key input gestures and <see cref="P:System.Windows.Input.RoutedUICommand.Text" /> properties.</summary>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionDown">
      <summary>Gets the value that represents the Extend Selection Down command. </summary>
      <returns>The command.Default ValuesKey GestureShift+DownUI TextExtend Selection Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionLeft">
      <summary>Gets the value that represents the Extend Selection Left command. </summary>
      <returns>The command.Default ValuesKey GestureShift+LeftUI TextExtend Selection Left</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionRight">
      <summary>Gets the value that represents the Extend Selection Right command. </summary>
      <returns>The command.Default ValuesKey GestureShift+RightUI TextExtend Selection Right</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ExtendSelectionUp">
      <summary>Gets the value that represents the Extend Selection Up command. </summary>
      <returns>The command.Default ValuesKey GestureShift+UpUI TextExtend Selection Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveDown">
      <summary>Gets the value that represents the Move Down command. </summary>
      <returns>The command.Default ValuesKey GestureDownUI TextMove Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusBack">
      <summary>Gets the value that represents the Move Focus Back command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+LeftUI TextMove Focus Back</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusDown">
      <summary>Gets the value that represents the Move Focus Down command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+DownUI TextMove Focus Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusForward">
      <summary>Gets the value that represents the Move Focus Forward command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+RightUI TextMove Focus Forward</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusPageDown">
      <summary>Gets the value that represents the Move Focus Page Down command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+PageDownUI TextMove Focus Page Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusPageUp">
      <summary>Gets the value that represents the Move Focus Page Up command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+PageUpUI TextMove Focus Page Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveFocusUp">
      <summary>Gets the value that represents the Move Focus Up command. </summary>
      <returns>The command.Default ValuesKey GestureCtrl+UpUI TextMove Focus Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveLeft">
      <summary>Gets the value that represents the Move Left command. </summary>
      <returns>The command.Default ValuesKey GestureLeftUI TextMove Left</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveRight">
      <summary>Gets the value that represents the Move Right command. </summary>
      <returns>The command.Default ValuesKey GestureRightUI TextMove Right</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveToEnd">
      <summary>Gets the value that represents the Move To End command. </summary>
      <returns>The command.Default ValuesKey GestureEndUI TextMove To End</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveToHome">
      <summary>Gets the value that represents the Move To Home command. </summary>
      <returns>The command.Default ValuesKey GestureHomeUI TextMove To Home</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveToPageDown">
      <summary>Gets the value that represents the Move To Page Down command. </summary>
      <returns>The command.Default ValuesKey GesturePageDownUI TextMove To Page Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveToPageUp">
      <summary>Gets the value that represents the Move To Page Up command. </summary>
      <returns>The command.Default ValuesKey GesturePageUpUI TextMove To Page Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.MoveUp">
      <summary>Gets the value that represents the Move Up command. </summary>
      <returns>The command.Default ValuesKey GestureUpUI TextMove Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollByLine">
      <summary>Gets the value that represents the Scroll By Line command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture definedUI TextScroll By Line</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollPageDown">
      <summary>Gets the value that represents the Scroll Page Down command. </summary>
      <returns>The command.Default ValuesKey GesturePageDownUI TextScroll Page Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollPageLeft">
      <summary>Gets the value that represents the Scroll Page Left command.</summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextScroll Page Left</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollPageRight">
      <summary>Gets the value that represents the Scroll Page Right command.</summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextScroll Page Right</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.ScrollPageUp">
      <summary>Gets the value that represents the Scroll Page Up command. </summary>
      <returns>The command.Default ValuesKey GesturePageUpUI TextScroll Page Up</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.SelectToEnd">
      <summary>Gets the value that represents the Select To End command. </summary>
      <returns>The command.Default ValuesKey GestureShift+EndUI TextSelect To End</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.SelectToHome">
      <summary>Gets the value that represents the Select To Home command. </summary>
      <returns>The command.Default ValuesKey GestureShift+HomeUI TextSelect To Home</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.SelectToPageDown">
      <summary>Gets the value that represents the Select To Page Down command. </summary>
      <returns>The command.Default ValuesKey GestureShift+PageDownUI TextSelect To Page Down</returns>
    </member>
    <member name="P:System.Windows.Input.ComponentCommands.SelectToPageUp">
      <summary>Gets the value that represents the Select To Page Up command. </summary>
      <returns>The command.Default ValuesKey GestureShift+PageUpUI TextSelect To Page Up</returns>
    </member>
    <member name="T:System.Windows.Input.Cursor">
      <summary>Represents the image used for the mouse pointer.</summary>
    </member>
    <member name="M:System.Windows.Input.Cursor.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Cursor" /> class from the specified <see cref="T:System.IO.Stream" />. </summary>
      <param name="cursorStream">The <see cref="T:System.IO.Stream" /> that contains the cursor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursorStream" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.Cursor.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Cursor" /> class from the specified .ani or a .cur file. </summary>
      <param name="cursorFile">The file that contains the cursor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cursorFile" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cursorFile" /> is not an .ani or .cur file name.</exception>
    </member>
    <member name="M:System.Windows.Input.Cursor.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Windows.Input.Cursor" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.Cursor.ToString">
      <summary>Returns the string representation of the <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The name of the cursor.</returns>
    </member>
    <member name="T:System.Windows.Input.CursorConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.Cursor" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.CursorConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.Cursor" />, using the specified context.</summary>
      <returns>true if <paramref name="sourceType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.Cursor" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if <paramref name="destinationType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.Cursor" />, using the specified context.</summary>
      <returns>The converted object, or null if <paramref name="value" /> is an empty string.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted</exception>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.Cursor" /> to the specified type, using the specified context.</summary>
      <returns>The converted object, or an empty string if <paramref name="value" /> is null.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Gets a collection of standard cursor values, using the specified context.</summary>
      <returns>A collection that holds a standard set of valid values.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    </member>
    <member name="M:System.Windows.Input.CursorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determines whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
      <returns>Always returns true.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    </member>
    <member name="T:System.Windows.Input.Cursors">
      <summary>Defines a set of default cursors. </summary>
    </member>
    <member name="P:System.Windows.Input.Cursors.AppStarting">
      <summary>Gets the <see cref="T:System.Windows.Input.Cursor" /> that appears when an application is starting. </summary>
      <returns>The AppStarting cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Arrow">
      <summary>Gets the Arrow <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The arrow cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ArrowCD">
      <summary>Gets the arrow with a compact disk <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The arrowCd cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Cross">
      <summary>Gets the crosshair <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The Crosshair cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Hand">
      <summary>Gets a hand <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The hand cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Help">
      <summary>Gets a help <see cref="T:System.Windows.Input.Cursor" /> which is a combination of an arrow and a question mark. </summary>
      <returns>The help cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.IBeam">
      <summary>Gets an I-beam <see cref="T:System.Windows.Input.Cursor" />, which is used to show where the text cursor appears when the mouse is clicked. </summary>
      <returns>The IBeam cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.No">
      <summary>Gets a <see cref="T:System.Windows.Input.Cursor" /> with which indicates that a particular region is invalid for a given operation.</summary>
      <returns>The No cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.None">
      <summary>Gets a special cursor that is invisible. </summary>
      <returns>The none cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Pen">
      <summary>Gets a pen <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The pen cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollAll">
      <summary>Gets the scroll all <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The scroll all cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollE">
      <summary>Gets the scroll east <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A scroll east cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollN">
      <summary>Gets the scroll north <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A scroll north cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollNE">
      <summary>Gets the scroll northeast cursor.</summary>
      <returns>A scroll northeast <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollNS">
      <summary>Gets the scroll north/south cursor.</summary>
      <returns>A scroll north/south <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollNW">
      <summary>Gets a scroll northwest cursor.</summary>
      <returns>The scroll northwest <see cref="T:System.Windows.Input.Cursor" />.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollS">
      <summary>Gets the scroll south <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The scroll south cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollSE">
      <summary>Gets a south/east scrolling <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>The south/east scrolling cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollSW">
      <summary>Gets the scroll southwest <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The scroll southwest cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollW">
      <summary>Gets the scroll west <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>The scroll west cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.ScrollWE">
      <summary>Gets a west/east scrolling <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A west/east scrolling cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeAll">
      <summary>Gets a four-headed sizing <see cref="T:System.Windows.Input.Cursor" />, which consists of four joined arrows that point north, south, east, and west.  </summary>
      <returns>A four-headed sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNESW">
      <summary>Gets a two-headed northeast/southwest sizing <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A two-headed northeast/southwest sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNS">
      <summary>Gets a two-headed north/south sizing <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A two-headed north/south sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeNWSE">
      <summary>Gets a two-headed northwest/southeast sizing <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A two-headed northwest/southwest sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.SizeWE">
      <summary>Gets a two-headed west/east sizing <see cref="T:System.Windows.Input.Cursor" />.</summary>
      <returns>A two-headed west/east sizing cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.UpArrow">
      <summary>Gets an up arrow <see cref="T:System.Windows.Input.Cursor" />, which is typically used to identify an insertion point.  </summary>
      <returns>An up arrow cursor.</returns>
    </member>
    <member name="P:System.Windows.Input.Cursors.Wait">
      <summary>Specifies a wait (or hourglass) <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>A wait cursor.</returns>
    </member>
    <member name="T:System.Windows.Input.CursorType">
      <summary>Specifies the built in cursor types. </summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.None">
      <summary>A value indicating that no cursor should be displayed.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.No">
      <summary>No cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Arrow">
      <summary>A standard arrow cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.AppStarting">
      <summary>A standard arrow with small hourglass cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Cross">
      <summary>A crosshair cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Help">
      <summary>A help cursor. </summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.IBeam">
      <summary>A text I-Beam cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeAll">
      <summary>A cursor with arrows pointing north, south, east, and west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeNESW">
      <summary>A cursor with arrows pointing northeast and southwest.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeNS">
      <summary>A cursor with arrows pointing north and south.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeNWSE">
      <summary>A cursor with arrows pointing northwest and southeast.  </summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.SizeWE">
      <summary>A cursor with arrows pointing west and east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.UpArrow">
      <summary>A vertical arrow cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Wait">
      <summary>An hourglass cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Hand">
      <summary>A hand cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.Pen">
      <summary>A pen cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollNS">
      <summary>A scrolling cursor with arrows pointing north and south.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollWE">
      <summary>A scrolling cursor with arrows pointing west and east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollAll">
      <summary>A scrolling cursor with arrows pointing north, south, east, and west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollN">
      <summary>A scrolling cursor with an arrow pointing north.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollS">
      <summary>A scrolling cursor with an arrow pointing south.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollW">
      <summary>A scrolling cursor with an arrow pointing west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollE">
      <summary>A scrolling cursor with an arrow pointing east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollNW">
      <summary>A scrolling cursor with arrows pointing north and west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollNE">
      <summary>A scrolling cursor with arrows pointing north and east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollSW">
      <summary>A scrolling cursor with arrows pointing south and west.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ScrollSE">
      <summary>A scrolling cursor with arrows pointing south and east.</summary>
    </member>
    <member name="F:System.Windows.Input.CursorType.ArrowCD">
      <summary>An arrow cd cursor.</summary>
    </member>
    <member name="T:System.Windows.Input.ExecutedRoutedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Input.CommandManager.Executed" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> routed events.</summary>
    </member>
    <member name="P:System.Windows.Input.ExecutedRoutedEventArgs.Command">
      <summary>Gets the command that was invoked.</summary>
      <returns>The command associated with this event.  </returns>
    </member>
    <member name="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter">
      <summary>Gets data parameter of the command.</summary>
      <returns>The command-specific data. The default value is null.</returns>
    </member>
    <member name="T:System.Windows.Input.ExecutedRoutedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> routed events, as well as related attached events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.FocusManager">
      <summary>Provides a set of static methods, attached properties, and events for determining and setting focus scopes and for setting the focused element within the scope. </summary>
    </member>
    <member name="P:System.Windows.Input.FocusManager.FocusedElement">
      <summary>Determines whether the element this property is attached to has logical focus.</summary>
      <returns>The element with logical focus. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Input.FocusManager.FocusedElementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.FocusManager.FocusedElement" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.FocusManager.FocusedElement" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)">
      <summary>Gets the element with logical focus within the specified focus scope.</summary>
      <returns>The element in the specified focus scope with logical focus.</returns>
      <param name="element">The element with logical focus in the specified focus scope.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)">
      <summary>Determines the closest ancestor of the specified element that has <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> set to true.</summary>
      <returns>The focus scope for the specified element.</returns>
      <param name="element">The element to get the closest focus scope for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)">
      <summary>Determines whether the specified <see cref="T:System.Windows.DependencyObject" /> is a focus scope.</summary>
      <returns>true if <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> is set to true on the specified element; otherwise, false.</returns>
      <param name="element">The element from which to read the attached property.</param>
    </member>
    <member name="F:System.Windows.Input.FocusManager.GotFocusEvent">
      <summary>Identifies the GotFocus<see cref="T:System.Windows.RoutedEvent" />.</summary>
    </member>
    <member name="P:System.Windows.Input.FocusManager.IsFocusScope">
      <summary>Determines whether the element this property is attached to is a focus scope.</summary>
      <returns>true if the element is a focus scope; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Input.FocusManager.IsFocusScopeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> attached property.</returns>
    </member>
    <member name="F:System.Windows.Input.FocusManager.LostFocusEvent">
      <summary>Identifies the LostFocus<see cref="T:System.Windows.RoutedEvent" />.</summary>
    </member>
    <member name="M:System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)">
      <summary>Sets logical focus on the specified element.</summary>
      <param name="element">The focus scope in which to make the specified element the <see cref="P:System.Windows.Input.FocusManager.FocusedElement" />.</param>
      <param name="value">The element to give logical focus to.</param>
    </member>
    <member name="M:System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the specified <see cref="T:System.Windows.DependencyObject" /> as a focus scope. </summary>
      <param name="element">The element to make a focus scope.</param>
      <param name="value">true if <paramref name="element" /> is a focus scope; otherwise, false.</param>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Defines a command.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Defines the method that determines whether the command can execute in its current state.</summary>
      <returns>true if this command can be executed; otherwise, false.</returns>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Occurs when changes occur that affect whether or not the command should execute.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Defines the method to be called when the command is invoked.</summary>
      <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="T:System.Windows.Input.ICommandSource">
      <summary>Defines an object that knows how to invoke a command.</summary>
    </member>
    <member name="P:System.Windows.Input.ICommandSource.Command">
      <summary>Gets the command that will be executed when the command source is invoked.</summary>
      <returns>The command that will be executed when the command source is invoked.</returns>
    </member>
    <member name="P:System.Windows.Input.ICommandSource.CommandParameter">
      <summary>Represents a user defined data value that can be passed to the command when it is executed.</summary>
      <returns>The command specific data.</returns>
    </member>
    <member name="P:System.Windows.Input.ICommandSource.CommandTarget">
      <summary>The object that the command is being executed on.</summary>
      <returns>The object that the command is being executed on.</returns>
    </member>
    <member name="T:System.Windows.Input.IInputLanguageSource">
      <summary>Defines necessary facilities for an object that intends to behave as an input language source.</summary>
    </member>
    <member name="P:System.Windows.Input.IInputLanguageSource.CurrentInputLanguage">
      <summary>Gets or sets the current input language for this input language source object.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the current input language for this input language source object.</returns>
    </member>
    <member name="M:System.Windows.Input.IInputLanguageSource.Initialize">
      <summary>Initializes an input language source object.</summary>
    </member>
    <member name="P:System.Windows.Input.IInputLanguageSource.InputLanguageList">
      <summary>Gets a list of input languages supported by this input language source object.</summary>
      <returns>An enumerable object that represents the list of input languages supported by this input language source object.</returns>
    </member>
    <member name="M:System.Windows.Input.IInputLanguageSource.Uninitialize">
      <summary>Un-initializes an input language source object.</summary>
    </member>
    <member name="T:System.Windows.Input.IManipulator">
      <summary>Provides the position of input that is needed to create a manipulation. "</summary>
    </member>
    <member name="M:System.Windows.Input.IManipulator.GetPosition(System.Windows.IInputElement)">
      <summary>Returns the position of the <see cref="T:System.Windows.Input.IManipulator" /> object.</summary>
      <returns>The position of the <see cref="T:System.Windows.Input.IManipulator" /> object.</returns>
      <param name="relativeTo">The element to use as the frame of reference for calculating the position of the <see cref="T:System.Windows.Input.IManipulator" />.</param>
    </member>
    <member name="P:System.Windows.Input.IManipulator.Id">
      <summary>Gets or sets a unique identifier for the object.</summary>
      <returns>A unique identifier for the object.</returns>
    </member>
    <member name="M:System.Windows.Input.IManipulator.ManipulationEnded(System.Boolean)">
      <summary>Called when the Manipulation ends</summary>
      <param name="cancel">true if the manipulation is canceled; otherwise, false.</param>
    </member>
    <member name="E:System.Windows.Input.IManipulator.Updated">
      <summary>Occurs when the <see cref="T:System.Windows.Input.IManipulator" /> object changes position.</summary>
    </member>
    <member name="T:System.Windows.Input.ImeConversionModeValues">
      <summary>Describes a mode of input conversion to be performed by an input method.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Native">
      <summary>The input method uses a native character (Hiragana, Hangul, Chinese) conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Katakana">
      <summary>The input method uses Katakana conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.FullShape">
      <summary>The input method uses full-shape conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Roman">
      <summary>The input method uses Roman character conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.CharCode">
      <summary>The input method uses character code conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.NoConversion">
      <summary>The input method will not perform any input conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Eudc">
      <summary>The input method uses EUDC (end user defined character) conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Symbol">
      <summary>The input method uses symbol conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Fixed">
      <summary>The input method uses fixed conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.Alphanumeric">
      <summary>The input method uses alphanumeric conversion mode.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeConversionModeValues.DoNotCare">
      <summary>The input method does not care what input conversion method is used; the actual conversion method is indeterminate.</summary>
    </member>
    <member name="T:System.Windows.Input.ImeSentenceModeValues">
      <summary>Specifies the mode of sentence conversion performed by an input method.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.None">
      <summary>The input method does not perform any sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.PluralClause">
      <summary>The input method uses plural clause sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.SingleConversion">
      <summary>The input method uses single Kanji/Hanja sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.Automatic">
      <summary>The input method uses the sentence conversion method automatically.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.PhrasePrediction">
      <summary>The input method uses phrase prediction sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.Conversation">
      <summary>The input method uses conversation-style sentence conversion.</summary>
    </member>
    <member name="F:System.Windows.Input.ImeSentenceModeValues.DoNotCare">
      <summary>The input method does not care what sentence conversion method is used; the actual sentence conversion mode is indeterminate.</summary>
    </member>
    <member name="T:System.Windows.Input.InertiaExpansionBehavior">
      <summary>Controls the deceleration of a resizing manipulation during inertia.</summary>
    </member>
    <member name="M:System.Windows.Input.InertiaExpansionBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InertiaExpansionBehavior" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InertiaExpansionBehavior.DesiredDeceleration">
      <summary>Gets or sets the rate that resizing slows in device-independent units (1/96th inch per unit) per square milliseconds.</summary>
      <returns>The rate that resizing slows in device-independent units (1/96th inch per unit) per square milliseconds. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to infinity.-or-The property is set to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Input.InertiaExpansionBehavior.DesiredExpansion">
      <summary>Gets or sets the amount the element resizes at the end of inertia.</summary>
      <returns>The amount the element resizes at the end of inertia. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InertiaExpansionBehavior.InitialRadius">
      <summary>Gets or sets the initial average radius.</summary>
      <returns>The initial average radius.</returns>
    </member>
    <member name="P:System.Windows.Input.InertiaExpansionBehavior.InitialVelocity">
      <summary>Gets or sets the initial rate the element resizes at the start of inertia.</summary>
      <returns>The initial rate the element resizes at the start of inertia.</returns>
    </member>
    <member name="T:System.Windows.Input.InertiaRotationBehavior">
      <summary>Controls the deceleration of a rotation manipulation during inertia.</summary>
    </member>
    <member name="M:System.Windows.Input.InertiaRotationBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InertiaRotationBehavior" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration">
      <summary>Gets or sets the rate the rotation slows in degrees per squared millisecond.</summary>
      <returns>The rate the rotation slows in degrees per squared millisecond. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to infinity.-or-The property is set to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Input.InertiaRotationBehavior.DesiredRotation">
      <summary>Gets or sets the rotation, in degrees, at the end of the inertial movement.</summary>
      <returns>The rotation, in degrees, at the end of the inertial movement. The default is <see cref="F:System.Double.NaN" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InertiaRotationBehavior.InitialVelocity">
      <summary>Gets or sets the initial rate of the rotation at the start of the inertia phase.</summary>
      <returns>The initial rate of the rotation at the start of the inertia phase.</returns>
    </member>
    <member name="T:System.Windows.Input.InertiaTranslationBehavior">
      <summary>Controls deceleration on a translation manipulation during inertia.</summary>
    </member>
    <member name="M:System.Windows.Input.InertiaTranslationBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InertiaTranslationBehavior" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InertiaTranslationBehavior.DesiredDeceleration">
      <summary>Gets or sets the rate the linear movement slows in device-independent units (1/96th inch per unit) per squared millisecond.</summary>
      <returns>The rate the linear movement slows in device-independent units (1/96th inch per unit) per squared millisecond.  The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to infinity.-or-The property is set to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Input.InertiaTranslationBehavior.DesiredDisplacement">
      <summary>Gets or sets the linear movement of the manipulation at the end of inertia.</summary>
      <returns>The linear movement of the manipulation at the end of inertia. The default is <see cref="F:System.Double.NaN" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to infinity.-or-The property is set to <see cref="F:System.Double.NaN" />.</exception>
    </member>
    <member name="P:System.Windows.Input.InertiaTranslationBehavior.InitialVelocity">
      <summary>Gets or sets the initial rate of linear movement at the start of the inertia phase.</summary>
      <returns>The initial rate of linear movement at the start of the inertia phase.</returns>
    </member>
    <member name="T:System.Windows.Input.InputBinding">
      <summary>Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command. The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBinding.#ctor">
      <summary>Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</summary>
      <param name="command">The command to associate with <paramref name="gesture" />.</param>
      <param name="gesture">The input gesture to associate with <paramref name="command" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> or <paramref name="gesture" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)">
      <summary>Copies the base (non-animated) values of the properties of the specified object.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Copies the current values of the properties of the specified object.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="P:System.Windows.Input.InputBinding.Command">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding. </summary>
      <returns>The associated command.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputBinding.CommandParameter">
      <summary>Gets or sets the command-specific data for a particular command.</summary>
      <returns>The command-specific data. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Input.InputBinding.CommandParameterProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</returns>
    </member>
    <member name="F:System.Windows.Input.InputBinding.CommandProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBinding.CommandTarget">
      <summary>Gets or sets the target element of the command.</summary>
      <returns>The target of the command. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Input.InputBinding.CommandTargetProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBinding.CreateInstanceCore">
      <summary>Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</summary>
      <returns>The new object.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBinding.Gesture">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding. </summary>
      <returns>The associated gesture. The default is null.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="T:System.Windows.Input.InputBindingCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Input.InputBinding" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputBindingCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.#ctor(System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputBindingCollection" /> class using the items in the specified <see cref="T:System.Collections.IList" />.  </summary>
      <param name="inputBindings">The collection whose items are copied to the new <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Add(System.Windows.Input.InputBinding)">
      <summary>Adds the specified <see cref="T:System.Windows.Input.InputBinding" /> to this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <returns>Always returns 0. This deviates from the standard <see cref="T:System.Collections.IList" /> implementation for Add, which should return the index where the new item was added to the collection.</returns>
      <param name="inputBinding">The binding to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputBinding" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.AddRange(System.Collections.ICollection)">
      <summary>Adds the items of the specified <see cref="T:System.Collections.ICollection" /> to the end of this <see cref="T:System.Windows.Input.InputBindingCollection" /></summary>
      <param name="collection">The collection of items to add to the end of this <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Clear">
      <summary>Removes all items from this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Contains(System.Windows.Input.InputBinding)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.InputBinding" /> is in this <see cref="T:System.Windows.Input.InputBindingCollection" /></summary>
      <returns>true if the specified <see cref="T:System.Windows.Input.InputBinding" /> is in the collection; otherwise, false.</returns>
      <param name="key">The binding to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.CopyTo(System.Windows.Input.InputBinding[],System.Int32)">
      <summary>Copies all of the items in the <see cref="T:System.Windows.Input.InputBindingCollection" /> to the specified one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="inputBindings">The array into which the collection is copied.</param>
      <param name="index">The index position in <paramref name="inputBindings" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBindings" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Input.InputBinding" /> items in this collection. </summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates through this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <returns>The enumerator for this collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.IndexOf(System.Windows.Input.InputBinding)">
      <summary>Searches for the first occurrence of the specified <see cref="T:System.Windows.Input.InputBinding" /> in his <see cref="T:System.Windows.Input.InputBindingCollection" />.</summary>
      <returns>The index of the first occurrence of <paramref name="value" />, if found; otherwise, –1.</returns>
      <param name="value">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Insert(System.Int32,System.Windows.Input.InputBinding)">
      <summary>Inserts the specified <see cref="T:System.Windows.Input.InputBinding" /> into this <see cref="T:System.Windows.Input.InputBindingCollection" /> at the specified index. </summary>
      <param name="index">The zero-based index at which to insert <paramref name="inputBinding" />.</param>
      <param name="inputBinding">The binding to insert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputBinding" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.IsFixedSize">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputBindingCollection" /> has a fixed size. </summary>
      <returns>true if the collection has a fixed size; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.IsReadOnly">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputBindingCollection" /> is read-only. </summary>
      <returns>true if the collection is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.IsSynchronized">
      <summary>Gets a value indicating whether access to this <see cref="T:System.Windows.Input.InputBindingCollection" /> is synchronized (thread-safe). </summary>
      <returns>true if the collection is thread safe; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.InputBinding" /> at the specified index. </summary>
      <returns>The <see cref="T:System.Windows.Input.InputBinding" /> at the specified index.</returns>
      <param name="index">The position in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.Remove(System.Windows.Input.InputBinding)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Input.InputBinding" /> from this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <param name="inputBinding">The binding to remove.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Windows.Input.InputBinding" /> at the specified index of this <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Input.InputBinding" /> to remove.</param>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Input.InputBindingCollection" />. </summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Input.InputBindingCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="inputBinding">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Input.InputBindingCollection" />; otherwise, false.</returns>
      <param name="key">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.TextEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="P:System.Windows.Input.InputBindingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Input.InputBindingCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="inputBinding">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Input.InputBindingCollection" />.</param>
    </member>
    <member name="T:System.Windows.Input.InputDevice">
      <summary>Abstract class that describes an input devices. </summary>
    </member>
    <member name="M:System.Windows.Input.InputDevice.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputDevice" /> class. </summary>
    </member>
    <member name="P:System.Windows.Input.InputDevice.ActiveSource">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Windows.PresentationSource" /> that is reporting input for this device.</summary>
      <returns>The source that is reporting input for this device.</returns>
    </member>
    <member name="P:System.Windows.Input.InputDevice.Target">
      <summary>When overridden in a derived class, gets the element that receives input from this device.</summary>
      <returns>The element that receives input.</returns>
    </member>
    <member name="T:System.Windows.Input.InputEventArgs">
      <summary>Provides data for input related events. </summary>
    </member>
    <member name="M:System.Windows.Input.InputEventArgs.#ctor(System.Windows.Input.InputDevice,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputEventArgs" /> class. </summary>
      <param name="inputDevice">The input device to associate with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
    </member>
    <member name="P:System.Windows.Input.InputEventArgs.Device">
      <summary>Gets the input device that initiated this event.</summary>
      <returns>The input device associated with this event.</returns>
    </member>
    <member name="M:System.Windows.Input.InputEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="P:System.Windows.Input.InputEventArgs.Timestamp">
      <summary>Gets the time when this event occurred. </summary>
      <returns>The timestamp.</returns>
    </member>
    <member name="T:System.Windows.Input.InputEventHandler">
      <summary>Represents the method that handles input related routed events. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.InputGesture">
      <summary>Abstract class that describes input device gestures.</summary>
    </member>
    <member name="M:System.Windows.Input.InputGesture.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputGesture" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.InputGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
      <summary>When overridden in a derived class, determines whether the specified <see cref="T:System.Windows.Input.InputGesture" /> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs" /> object.</summary>
      <returns>true if the gesture matches the input; otherwise, false.</returns>
      <param name="targetElement">The target of the command.</param>
      <param name="inputEventArgs">The input event data to compare this gesture to.</param>
    </member>
    <member name="T:System.Windows.Input.InputGestureCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Input.InputGesture" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputGestureCollection" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.#ctor(System.Collections.IList)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputGestureCollection" /> class using the elements in the specified <see cref="T:System.Collections.IList" />. </summary>
      <param name="inputGestures">The collection whose elements are copied to the new <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Add(System.Windows.Input.InputGesture)">
      <summary>Adds the specified <see cref="T:System.Windows.Input.InputGesture" /> to this <see cref="T:System.Windows.Input.InputGestureCollection" />. </summary>
      <returns>0, if the operation was successful (note that this is not the index of the added item).  </returns>
      <param name="inputGesture">The gesture to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">the collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">the gesture is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.AddRange(System.Collections.ICollection)">
      <summary>Adds the elements of the specified <see cref="T:System.Collections.ICollection" /> to the end of this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <param name="collection">The collection of items to add to the end of this <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
      <exception cref="T:System.NotSupportedException">Any of the items in the collection to add are null.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">The collection to add is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Clear">
      <summary>Removes all elements from the <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read only.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Contains(System.Windows.Input.InputGesture)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.InputGesture" /> is in the collection. </summary>
      <returns>true if the gesture is in the collection; otherwise, false.</returns>
      <param name="key">The gesture to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.CopyTo(System.Windows.Input.InputGesture[],System.Int32)">
      <summary>Copies all of the items in the <see cref="T:System.Windows.Input.InputGestureCollection" /> to the specified one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="inputGestures">An array into which the collection is copied.</param>
      <param name="index">The index position in the <paramref name="inputGestures" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputGestures" /> is a null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Input.InputGesture" /> items in this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <returns>The number of gestures in the collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates through this <see cref="T:System.Windows.Input.InputGestureCollection" />. </summary>
      <returns>The enumerator for this collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.IndexOf(System.Windows.Input.InputGesture)">
      <summary>Searches for the first occurrence of the specified <see cref="T:System.Windows.Input.InputGesture" /> in this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <returns>The index of the first occurrence of <paramref name="value" />, if found; otherwise, -1. </returns>
      <param name="value">The gesture to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Insert(System.Int32,System.Windows.Input.InputGesture)">
      <summary> Inserts the specified <see cref="T:System.Windows.Input.InputGesture" /> into this <see cref="T:System.Windows.Input.InputGestureCollection" /> at the specified index.</summary>
      <param name="index">Index at which to insert <paramref name="inputGesture" />.</param>
      <param name="inputGesture">The gesture to insert.</param>
      <exception cref="T:System.NotSupportedException">the collection is read-only.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputGesture" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.IsFixedSize">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputGestureCollection" /> has a fixed size. </summary>
      <returns>true if the collection has a fixed size; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.IsReadOnly">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputGestureCollection" /> is read-only.  The default value is false.</summary>
      <returns>true if the collection read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.IsSynchronized">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Input.InputGestureCollection" /> is synchronized (thread safe). </summary>
      <returns>true if the collection is thread-safe; otherwise, false.  The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.Item(System.Int32)">
      <summary>Gets or set the <see cref="T:System.Windows.Input.InputGesture" /> at the specified index. </summary>
      <returns>The gesture at the specified index.</returns>
      <param name="index">The position in the collection.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Remove(System.Windows.Input.InputGesture)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Input.InputGesture" /> from this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <param name="inputGesture">The gesture to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">The gesture is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.RemoveAt(System.Int32)">
      <summary>Removes the specified <see cref="T:System.Windows.Input.InputGesture" /> at the specified index of this <see cref="T:System.Windows.Input.InputGestureCollection" />.</summary>
      <param name="index">The zero-based index of the gesture to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.</exception>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.Seal">
      <summary>Sets this <see cref="T:System.Windows.Input.InputGestureCollection" /> to read-only. </summary>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to this <see cref="T:System.Windows.Input.InputGestureCollection" />. </summary>
      <returns>The object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="inputGesture">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Input.InputGestureCollection" />; otherwise, false.</returns>
      <param name="key">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.TextEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="P:System.Windows.Input.InputGestureCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Input.InputGestureCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="inputGesture">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Input.InputGestureCollection" />.</param>
    </member>
    <member name="T:System.Windows.Input.InputLanguageChangedEventArgs">
      <summary>Contains arguments associated with the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged" /> event.</summary>
    </member>
    <member name="M:System.Windows.Input.InputLanguageChangedEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputLanguageChangedEventArgs" /> class.</summary>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing a new current input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</param>
    </member>
    <member name="T:System.Windows.Input.InputLanguageChangingEventArgs">
      <summary>Contains arguments associated with the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging" /> event.</summary>
    </member>
    <member name="M:System.Windows.Input.InputLanguageChangingEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputLanguageChangingEventArgs" /> class.</summary>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing a new current input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</param>
    </member>
    <member name="P:System.Windows.Input.InputLanguageChangingEventArgs.Rejected">
      <summary>Gets or sets a value that indicates whether the initiated change of input language should be accepted or rejected.</summary>
      <returns>true to reject the initiated change of input language; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Input.InputLanguageEventArgs">
      <summary>Provides a base class for arguments for events dealing with a change in input language.</summary>
    </member>
    <member name="M:System.Windows.Input.InputLanguageEventArgs.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Initializes base class values for a new instance of a deriving class.</summary>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing a new current input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</param>
    </member>
    <member name="P:System.Windows.Input.InputLanguageEventArgs.NewLanguage">
      <summary>Gets a <see cref="T:System.Globalization.CultureInfo" /> object representing the new current input language.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the new current input language.</returns>
    </member>
    <member name="P:System.Windows.Input.InputLanguageEventArgs.PreviousLanguage">
      <summary>Gets a <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous current input language.</returns>
    </member>
    <member name="T:System.Windows.Input.InputLanguageEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged" /> and <see cref="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging" /> events.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.InputLanguageManager">
      <summary>Provides facilities for managing input languages in Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.AvailableInputLanguages">
      <summary>Gets an enumerator for currently available input languages.</summary>
      <returns>An enumerator for currently available input languages, or null if no input languages are available.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.Current">
      <summary>Gets the input language manager associated with the current context.</summary>
      <returns>An <see cref="T:System.Windows.Input.InputLanguageManager" /> object associated with the current context.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.CurrentInputLanguage">
      <summary>Gets or sets the current input language.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the currently selected input language.  This property may not be set to null.The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.GetInputLanguage(System.Windows.DependencyObject)">
      <summary>Returns the value of the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" />  attached property for a specified dependency object.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the input language for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the input language.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.GetRestoreInputLanguage(System.Windows.DependencyObject)">
      <summary>Returns the value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" />  attached property for a specified dependency object.</summary>
      <returns>The current value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" /> for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.InputLanguage">
      <summary>Gets or sets the preferred input language for the associated dependency object.</summary>
      <returns>A <see cref="T:System.Globalization.CultureInfo" /> object representing the preferred input language for the associated dependency object.This property has no default value.</returns>
    </member>
    <member name="E:System.Windows.Input.InputLanguageManager.InputLanguageChanged">
      <summary>Occurs when a change of input language is completed.</summary>
    </member>
    <member name="E:System.Windows.Input.InputLanguageManager.InputLanguageChanging">
      <summary>Occurs when a change of input language is initiated.</summary>
    </member>
    <member name="F:System.Windows.Input.InputLanguageManager.InputLanguageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" />  attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.RegisterInputLanguageSource(System.Windows.Input.IInputLanguageSource)">
      <summary>Registers an input language source with the <see cref="T:System.Windows.Input.InputLanguageManager" />.</summary>
      <param name="inputLanguageSource">An object that specifies the input language to register.  This object must implement the <see cref="T:System.Windows.Input.IInputLanguageSource" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="inputLanguageSource" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.ReportInputLanguageChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Report the completion of a change of input language to the <see cref="T:System.Windows.Input.InputLanguageManager" />.</summary>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the new input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous input language.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="newLanguageId" /> or <paramref name="previousLanguageId" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.ReportInputLanguageChanging(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
      <summary>Report the initiation of a change of input language to the <see cref="T:System.Windows.Input.InputLanguageManager" />.</summary>
      <returns>true to indicate that the reported change of input language was accepted; otherwise, false.</returns>
      <param name="newLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the new input language.</param>
      <param name="previousLanguageId">A <see cref="T:System.Globalization.CultureInfo" /> object representing the previous input language.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="newLanguageId" /> or <paramref name="previousLanguageId" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage">
      <summary>Gets or sets a value that indicates whether or not the previously active input language should be restored when the associated dependency object looses the input focus.</summary>
      <returns>true to restore the previously selected input language; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="F:System.Windows.Input.InputLanguageManager.RestoreInputLanguageProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" />  attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" /> attached property.</returns>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.SetInputLanguage(System.Windows.DependencyObject,System.Globalization.CultureInfo)">
      <summary>Sets the value of the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" /> attached property on the specified dependency object.</summary>
      <param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" /> attached property.</param>
      <param name="inputLanguage">A <see cref="T:System.Globalization.CultureInfo" /> object representing the new value for the <see cref="P:System.Windows.Input.InputLanguageManager.InputLanguage" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputLanguageManager.SetRestoreInputLanguage(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" /> dependency property on the specified dependency object.</summary>
      <param name="target">The dependency object for which to set the value of <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" />.</param>
      <param name="restore">A Boolean value to set the <see cref="P:System.Windows.Input.InputLanguageManager.RestoreInputLanguage" /> attached property to.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Input.InputManager">
      <summary>Manages all the input systems in Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="P:System.Windows.Input.InputManager.Current">
      <summary>Gets the <see cref="T:System.Windows.Input.InputManager" /> associated with the current thread.</summary>
      <returns>The input manager. </returns>
    </member>
    <member name="E:System.Windows.Input.InputManager.EnterMenuMode">
      <summary>Occurs when a control enters menu mode by calling the <see cref="M:System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)" /> method. </summary>
    </member>
    <member name="E:System.Windows.Input.InputManager.HitTestInvalidatedAsync">
      <summary>Occurs when the result of a hit-test may have changed. </summary>
    </member>
    <member name="P:System.Windows.Input.InputManager.InputProviders">
      <summary>Gets a collection of <see cref="P:System.Windows.Input.InputManager.InputProviders" /> registered with the <see cref="T:System.Windows.Input.InputManager" />. </summary>
      <returns>The collection of input provides.</returns>
    </member>
    <member name="P:System.Windows.Input.InputManager.IsInMenuMode">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Interop.ComponentDispatcher" /> is in menu mode. </summary>
      <returns>true if this <see cref="T:System.Windows.Interop.ComponentDispatcher" /> is in menu mode; otherwise, false. </returns>
    </member>
    <member name="E:System.Windows.Input.InputManager.LeaveMenuMode">
      <summary>Occurs when a control leaves menu mode by calling the <see cref="M:System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)" /> method.</summary>
    </member>
    <member name="P:System.Windows.Input.InputManager.MostRecentInputDevice">
      <summary>Gets a value that represents the input device associated with the most recent input event. </summary>
      <returns>The input device.</returns>
    </member>
    <member name="M:System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)">
      <summary>Called by components to leave menu mode.</summary>
      <param name="menuSite">The menu to leave. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="menuSite" /> is null.</exception>
    </member>
    <member name="E:System.Windows.Input.InputManager.PostNotifyInput">
      <summary>Occurs after the <see cref="E:System.Windows.Input.InputManager.PreNotifyInput" /> handlers have finished processing the input and the corresponding Windows Presentation Foundation (WPF) events have been raised. </summary>
    </member>
    <member name="E:System.Windows.Input.InputManager.PostProcessInput">
      <summary>Occurs after the <see cref="E:System.Windows.Input.InputManager.PreNotifyInput" /> handlers have finished processing the input.</summary>
    </member>
    <member name="E:System.Windows.Input.InputManager.PreNotifyInput">
      <summary>Occurs when the <see cref="E:System.Windows.Input.InputManager.PreProcessInput" /> handlers have finished processing the input, if the input was not canceled. </summary>
    </member>
    <member name="E:System.Windows.Input.InputManager.PreProcessInput">
      <summary>Occurs when the <see cref="T:System.Windows.Input.InputManager" /> starts to process the input item.</summary>
    </member>
    <member name="P:System.Windows.Input.InputManager.PrimaryKeyboardDevice">
      <summary>Gets the primary keyboard device. </summary>
      <returns>The keyboard device.</returns>
    </member>
    <member name="P:System.Windows.Input.InputManager.PrimaryMouseDevice">
      <summary>Gets the primary mouse device. </summary>
      <returns>The mouse device.</returns>
    </member>
    <member name="M:System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)">
      <summary>Processes the specified input synchronously. </summary>
      <returns>true if all input events were handled; otherwise, false.</returns>
      <param name="input">The input to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)">
      <summary>Called by components to enter menu mode. </summary>
      <param name="menuSite">The menu to enter. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="menuSite" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Input.InputMethod">
      <summary>Provides facilities for managing and interacting with the Text Services Framework, which provides support for alternate text input methods such as speech and handwriting.</summary>
    </member>
    <member name="P:System.Windows.Input.InputMethod.CanShowConfigurationUI">
      <summary>Gets a value that indicates whether or not this input method can display configuration user interface (UI).</summary>
      <returns>true if configuration UI can be displayed; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.CanShowRegisterWordUI">
      <summary>Gets a value that indicates whether this input method can display word registration user interface (UI). </summary>
      <returns>true if word registration UI can be displayed; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.Current">
      <summary>Gets a reference to any currently active input method associated with the current context.</summary>
      <returns>A reference to an <see cref="T:System.Windows.Input.InputMethod" /> object associated with the current context, or null if there is no active input method.This property has no default value.</returns>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetInputScope(System.Windows.DependencyObject)">
      <summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.InputScope" />  attached property for a specified dependency object.</summary>
      <returns>An <see cref="T:System.Windows.Input.InputScope" /> object representing the current input scope for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the input scope.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetIsInputMethodEnabled(System.Windows.DependencyObject)">
      <summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" />  attached property for a specified dependency object.</summary>
      <returns>The current value of <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetIsInputMethodSuspended(System.Windows.DependencyObject)">
      <summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended" />  attached property for a specified dependency object.</summary>
      <returns>The current value of <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended" /> for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetPreferredImeConversionMode(System.Windows.DependencyObject)">
      <summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" />  attached property for a specified dependency object.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues" /> enumeration specifying the current <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetPreferredImeSentenceMode(System.Windows.DependencyObject)">
      <summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode" />  attached property for a specified dependency object.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.ImeSentenceModeValues" /> enumeration specifying the current <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode" /> for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.GetPreferredImeState(System.Windows.DependencyObject)">
      <summary>Returns the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" />  attached property for a specified dependency object.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.InputMethodState" /> enumeration specifying the current <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> for the specified dependency object.</returns>
      <param name="target">The dependency object for which to retrieve the value of <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" />.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputMethod.HandwritingState">
      <summary>Gets or sets the current state of handwriting input for this input method.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.InputMethodState" /> enumeration specifying the current input method state for handwriting input.The default value is <see cref="F:System.Windows.Input.InputMethodState.Off" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.ImeConversionMode">
      <summary>Gets or sets the current conversion mode for the input method editor associated with this input method.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues" /> enumeration specifying the conversion mode.The default value is <see cref="F:System.Windows.Input.ImeConversionModeValues.Alphanumeric" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.ImeSentenceMode">
      <summary>Gets or sets the current sentence mode for the input method editor associated with this input method.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.ImeSentenceModeValues" /> enumerations specifying the sentence mode.The default value is <see cref="F:System.Windows.Input.ImeSentenceModeValues.None" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.ImeState">
      <summary>Gets or sets the current state of the input method editor associated with this input method.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.InputMethodState" /> enumeration specifying the state of the input method editor associated with this input method.The default value is <see cref="F:System.Windows.Input.InputMethodState.Off" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.InputScope">
      <summary>Gets or sets the input scope for a specified dependency object.</summary>
      <returns>An <see cref="T:System.Windows.Input.InputScope" /> object representing the input scope for a specified dependency object.The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.InputScopeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.InputScope" /> attached property.</summary>
      <returns>The identifier for the InputScope attached property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.IsInputMethodEnabled">
      <summary>Gets or sets a value that indicates whether this input method is enabled.</summary>
      <returns>true if this input method is enabled; otherwise, false.The default value is true.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.IsInputMethodEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.</summary>
      <returns>The identifier for the IsInputMethodEnabled attached property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.IsInputMethodSuspended">
      <summary>Gets or sets a value that indicates whether this input method is suspended.</summary>
      <returns>true if this input method is suspended; otherwise, false.The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.IsInputMethodSuspendedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended" /> attached property.</summary>
      <returns>The identifier for the IsInputMethodSuspended attached property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.MicrophoneState">
      <summary>Gets or sets the current state of microphone input for this input method.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.InputMethodState" /> enumeration specifying the current input method state for microphone input.The default value is <see cref="F:System.Windows.Input.InputMethodState.Off" />.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.PreferredImeConversionMode">
      <summary>Gets or sets a preferred <see cref="T:System.Windows.Input.ImeConversionModeValues" /> value for a specified dependency object.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues" /> specifying the preferred conversion mode for a specified dependency object.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.PreferredImeConversionModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property.</summary>
      <returns>The identifier for the PreferredImeConversionMode attached property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode">
      <summary>Gets or sets a preferred <see cref="T:System.Windows.Input.ImeSentenceModeValues" /> value for a specified dependency object.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.ImeSentenceModeValues" /> specifying the preferred sentence mode for a specified dependency object.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.PreferredImeSentenceModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode" /> attached property.</summary>
      <returns>The identifier for the PreferredImeSentenceMode attached property.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethod.PreferredImeState">
      <summary>Gets or sets a preferred input method state for a specified dependency object.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.InputMethodState" /> specifying the preferred input method editor state for a specified dependency object.</returns>
    </member>
    <member name="F:System.Windows.Input.InputMethod.PreferredImeStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property.</summary>
      <returns>The identifier for the PreferredImeState attached property.</returns>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetInputScope(System.Windows.DependencyObject,System.Windows.Input.InputScope)">
      <summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.InputScope" /> attached property on the specified dependency object.</summary>
      <param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.InputScope" /> attached property.</param>
      <param name="value">An <see cref="T:System.Windows.Input.InputScope" /> object representing the new value for the <see cref="P:System.Windows.Input.InputMethod.InputScope" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetIsInputMethodEnabled(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property on the specified dependency object.</summary>
      <param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.</param>
      <param name="value">The new value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodEnabled" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetIsInputMethodSuspended(System.Windows.DependencyObject,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended" /> attached property on the specified dependency object.</summary>
      <param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended" /> attached property.</param>
      <param name="value">The new value for the <see cref="P:System.Windows.Input.InputMethod.IsInputMethodSuspended" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetPreferredImeConversionMode(System.Windows.DependencyObject,System.Windows.Input.ImeConversionModeValues)">
      <summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property on the specified dependency object.</summary>
      <param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property.</param>
      <param name="value">A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues" /> enumeration representing the new value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeConversionMode" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetPreferredImeSentenceMode(System.Windows.DependencyObject,System.Windows.Input.ImeSentenceModeValues)">
      <summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode" /> attached property on the specified dependency object.</summary>
      <param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode" /> attached property.</param>
      <param name="value">A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues" /> enumeration representing the new value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeSentenceMode" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.SetPreferredImeState(System.Windows.DependencyObject,System.Windows.Input.InputMethodState)">
      <summary>Sets the value of the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property on the specified dependency object.</summary>
      <param name="target">The dependency object on which to set the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property.</param>
      <param name="value">A member of the <see cref="T:System.Windows.Input.ImeConversionModeValues" /> enumeration representing the new value for the <see cref="P:System.Windows.Input.InputMethod.PreferredImeState" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">Raised when <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputMethod.ShowConfigureUI">
      <summary>Displays configuration user interface (UI) associated with the currently active keyboard text service.</summary>
    </member>
    <member name="M:System.Windows.Input.InputMethod.ShowConfigureUI(System.Windows.UIElement)">
      <summary>Displays configuration user interface (UI) associated with the currently active keyboard text service, using a specified <see cref="T:System.Windows.UIElement" /> as the parent element for the configuration UI.</summary>
      <param name="element">A <see cref="T:System.Windows.UIElement" /> that will be used as the parent element for the configuration UI.  This parameter can be null.</param>
    </member>
    <member name="M:System.Windows.Input.InputMethod.ShowRegisterWordUI">
      <summary>Displays word registration user interface (UI) associated with the currently active keyboard text service.</summary>
    </member>
    <member name="M:System.Windows.Input.InputMethod.ShowRegisterWordUI(System.String)">
      <summary>Displays word registration user interface (UI) associated with the currently active keyboard text service.  Accepts a specified string as the default value to register.</summary>
      <param name="registeredText">A string that specifies a value to register.</param>
    </member>
    <member name="M:System.Windows.Input.InputMethod.ShowRegisterWordUI(System.Windows.UIElement,System.String)">
      <summary>Displays word registration user interface (UI) associated with the currently active keyboard text service.  Accepts a specified string as the default value to register, and a specified <see cref="T:System.Windows.UIElement" /> as the parent element for the configuration UI.</summary>
      <param name="element">A <see cref="T:System.Windows.UIElement" /> that will be used as the parent element for the word registration UI.  This parameter can be null.</param>
      <param name="registeredText">A string that specifies a value to register.</param>
    </member>
    <member name="P:System.Windows.Input.InputMethod.SpeechMode">
      <summary>Gets or sets the speech mode for this input method.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.SpeechMode" /> enumeration specifying the current speech mode.The default value is <see cref="F:System.Windows.Input.SpeechMode.Indeterminate" />.</returns>
    </member>
    <member name="E:System.Windows.Input.InputMethod.StateChanged">
      <summary>Occurs when the input method state (represented by the <see cref="P:System.Windows.Input.InputMethod.ImeState" /> property) changes.</summary>
    </member>
    <member name="T:System.Windows.Input.InputMethodState">
      <summary> Describes the state of an <see cref="T:System.Windows.Input.InputMethod" />.</summary>
    </member>
    <member name="F:System.Windows.Input.InputMethodState.Off">
      <summary>The input method is off.</summary>
    </member>
    <member name="F:System.Windows.Input.InputMethodState.On">
      <summary>The input method is on.</summary>
    </member>
    <member name="F:System.Windows.Input.InputMethodState.DoNotCare">
      <summary>The input method is in an indeterminate state.</summary>
    </member>
    <member name="T:System.Windows.Input.InputMethodStateChangedEventArgs">
      <summary>Contains arguments associated with the <see cref="E:System.Windows.Input.InputMethod.StateChanged" /> event.</summary>
    </member>
    <member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsHandwritingStateChanged">
      <summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.HandwritingState" /> property changed.</summary>
      <returns>true if the <see cref="P:System.Windows.Input.InputMethod.HandwritingState" /> property changed; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsImeConversionModeChanged">
      <summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.ImeConversionMode" /> property changed.</summary>
      <returns>true if the <see cref="P:System.Windows.Input.InputMethod.ImeConversionMode" /> property changed; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsImeSentenceModeChanged">
      <summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.ImeSentenceMode" /> property changed.</summary>
      <returns>true if the <see cref="P:System.Windows.Input.InputMethod.ImeSentenceMode" /> property changed; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsImeStateChanged">
      <summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.ImeState" /> property changed.</summary>
      <returns>true if the <see cref="P:System.Windows.Input.InputMethod.ImeState" /> property changed; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsMicrophoneStateChanged">
      <summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.MicrophoneState" /> property changed.</summary>
      <returns>true if the <see cref="P:System.Windows.Input.InputMethod.MicrophoneState" /> property changed; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputMethodStateChangedEventArgs.IsSpeechModeChanged">
      <summary>Gets a value that indicates whether or not the <see cref="P:System.Windows.Input.InputMethod.SpeechMode" /> property changed.</summary>
      <returns>true if the <see cref="P:System.Windows.Input.InputMethod.SpeechMode" /> property changed; otherwise, false.This property has no default value.</returns>
    </member>
    <member name="T:System.Windows.Input.InputMethodStateChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.InputMethod.StateChanged" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.InputMode">
      <summary>Specifies the possible values for the input mode. </summary>
    </member>
    <member name="F:System.Windows.Input.InputMode.Foreground">
      <summary>The input was provided when the application was in the foreground. </summary>
    </member>
    <member name="F:System.Windows.Input.InputMode.Sink">
      <summary>The input was provided when the application was not in the foreground.</summary>
    </member>
    <member name="T:System.Windows.Input.InputScope">
      <summary>Represents information related to the scope of data provided by an input method.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScope" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.InputScope.Names">
      <summary>Gets or sets the input scope name.</summary>
      <returns>A member of the <see cref="T:System.Windows.Input.InputScopeName" /> enumeration specifying a name for this input scope.The default value is <see cref="F:System.Windows.Input.InputScopeNameValue.Default" />.</returns>
      <exception cref="T:System.ArgumentException">Raised when an attempt is made to set this property to any value other than a valid member of the <see cref="T:System.Windows.Input.InputScopeName" /> enumeration.</exception>
    </member>
    <member name="P:System.Windows.Input.InputScope.PhraseList">
      <summary>Gets a collection of phrases to be used as suggested input patterns by input processors.</summary>
      <returns>An object containing a collection of phrases to be used as suggested input patterns by input processors.  This object implements the <see cref="T:System.Collections.IList" /> interface.This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.InputScope.RegularExpression">
      <summary>Gets or sets a regular expression to be used as a suggested text input pattern by input processors.</summary>
      <returns>A string that defines a regular expression to be used as a suggested text input pattern by input processors.This property has no default value.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
    </member>
    <member name="P:System.Windows.Input.InputScope.SrgsMarkup">
      <summary>Gets or sets a string that specifies any Speech Recognition Grammar Specification (SRGS) markup to be used as a suggested input pattern by input processors.</summary>
      <returns>A string that specifies any SRGS markup to be used as a suggested input pattern by input processors.This property has no default value.</returns>
      <exception cref="T:System.ArgumentNullException">Raised when an attempt is made to set this property to null.</exception>
    </member>
    <member name="T:System.Windows.Input.InputScopeConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.InputScope" /> to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an <see cref="T:System.Windows.Input.InputScope" /> object can be converted from an object of a specified type.</summary>
      <returns>true if <paramref name="sourceType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">An object that describes any type descriptor context.  This object must implement the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> interface.  This parameter may be null.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> to check for conversion compatibility.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an <see cref="T:System.Windows.Input.InputScope" /> object can be converted to an object of a specified type.</summary>
      <returns>true if <paramref name="destinationType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">An object that describes any type descriptor context.  This object must implement the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> interface.  This parameter may be null.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> to check for conversion compatibility.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a source object (string) into an <see cref="T:System.Windows.Input.InputScope" /> object.</summary>
      <returns>An <see cref="T:System.Windows.Input.InputScope" /> object converted from the specified source object.</returns>
      <param name="context">An object that describes any type descriptor context.  This object must implement the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> interface.  This parameter may be null.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object containing any cultural context for the conversion.  This parameter may be null.</param>
      <param name="source">A source object to convert from.  This object must be a string.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts an <see cref="T:System.Windows.Input.InputScope" /> object into a specified object type (string).</summary>
      <returns>A new object of the specified type (string) converted from the given <see cref="T:System.Windows.Input.InputScope" /> object.</returns>
      <param name="context">An object that describes any type descriptor context.  This object must implement the <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> interface.  This parameter may be null.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object containing any cultural context for the conversion.  This parameter may be null.</param>
      <param name="value">An object to convert from.  This object must be of type <see cref="T:System.Windows.Input.InputScope" />.</param>
      <param name="destinationType">A destination type to convert type.  This type must be string.</param>
    </member>
    <member name="T:System.Windows.Input.InputScopeName">
      <summary>Defines a name for text input patterns.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeName" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeName.#ctor(System.Windows.Input.InputScopeNameValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeName" /> class with the specified <see cref="P:System.Windows.Input.InputScopeName.NameValue" />.</summary>
      <param name="nameValue">The input scope name which modifies how input from alternative input methods is interpreted.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeName.AddChild(System.Object)">
      <summary>Adds a child object to this <see cref="T:System.Windows.Input.InputScopeName" />.</summary>
      <param name="value">The object to be added as the child of this <see cref="T:System.Windows.Input.InputScopeName" />.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeName.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Input.InputScopeName" />.</summary>
      <param name="name">The text added to the <see cref="T:System.Windows.Input.InputScopeName" />.</param>
    </member>
    <member name="P:System.Windows.Input.InputScopeName.NameValue">
      <summary>Gets or sets the input scope name value which modifies how input from alternative input methods is interpreted.</summary>
      <returns>The input scope name value which modifies how input from alternative input methods is interpreted.</returns>
    </member>
    <member name="T:System.Windows.Input.InputScopeNameConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Input.InputScopeName" /> to and from other data types.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopeNameConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Indicates whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Input.InputScopeName" />.</summary>
      <returns>true if <paramref name="sourceType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The source <see cref="T:System.Type" /> that is being queried for conversion support.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether instances of <see cref="T:System.Windows.Input.InputScopeName" /> can be converted to the specified type.</summary>
      <returns>true if <paramref name="destinationType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type this <see cref="T:System.Windows.Input.InputScopeName" /> is being evaluated to be converted to.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Windows.Input.InputScopeName" />.</summary>
      <returns>The <see cref="T:System.Windows.Input.InputScopeName" /> created from converting <paramref name="source" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="source">The object being converted.</param>
    </member>
    <member name="M:System.Windows.Input.InputScopeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified <see cref="T:System.Windows.Input.InputScopeName" /> to the specified type.</summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Input.InputScopeName" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The <see cref="T:System.Windows.Input.InputScopeName" /> to convert.</param>
      <param name="destinationType">The type to convert the <see cref="T:System.Windows.Input.InputScopeName" /> to.</param>
    </member>
    <member name="T:System.Windows.Input.InputScopeNameValue">
      <summary>Specifies the input scope name which modifies how input from alternative input methods is interpreted.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Default">
      <summary>The default handling of input commands.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Url">
      <summary>The text input pattern for a Uniform Resource Locator (URL).</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.FullFilePath">
      <summary>The text input pattern for the full path of a file.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.FileName">
      <summary>The text input pattern for a file name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.EmailUserName">
      <summary>The text input pattern for an email user name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.EmailSmtpAddress">
      <summary>The text input pattern for a Simple Mail Transfer Protocol (SMTP) email address.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.LogOnName">
      <summary>The text input pattern for a log on name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalFullName">
      <summary>The text input pattern for a person's full name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalNamePrefix">
      <summary>The text input pattern for the prefix of a person's name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalGivenName">
      <summary>The text input pattern for a person's given name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalMiddleName">
      <summary>The text input pattern for a person's middle name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalSurname">
      <summary>The text input pattern for a person's surname.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PersonalNameSuffix">
      <summary>The text input pattern for the suffix of a person's name.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PostalAddress">
      <summary>The text input pattern for a postal address.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PostalCode">
      <summary>The text input pattern for a postal code.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressStreet">
      <summary>The text input pattern for a street address.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressStateOrProvince">
      <summary>The text input pattern for a state or province.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressCity">
      <summary>The text input pattern for a city address.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressCountryName">
      <summary>The text input pattern for the name of a country.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AddressCountryShortName">
      <summary>The text input pattern for the abbreviated name of a country.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.CurrencyAmountAndSymbol">
      <summary>The text input pattern for amount and symbol of currency.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.CurrencyAmount">
      <summary>The text input pattern for amount of currency.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Date">
      <summary>The text input pattern for a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateMonth">
      <summary>The text input pattern for the numeric month in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateDay">
      <summary>The text input pattern for the numeric day in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateYear">
      <summary>The text input pattern for the year in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateMonthName">
      <summary>The text input pattern for the name of the month in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.DateDayName">
      <summary>The text input pattern for the name of the day in a calendar date.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Digits">
      <summary>The text input pattern for digits.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Number">
      <summary>The text input pattern for a number.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.OneChar">
      <summary>The text input pattern for one character.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Password">
      <summary>The text input pattern for a password.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TelephoneNumber">
      <summary>The text input pattern for a telephone number.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TelephoneCountryCode">
      <summary>The text input pattern for a telephone country code.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TelephoneAreaCode">
      <summary>The text input pattern for a telephone area code.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TelephoneLocalNumber">
      <summary>The text input pattern for a telephone local number.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Time">
      <summary>The text input pattern for the time.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TimeHour">
      <summary>The text input pattern for the hour of the time.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.TimeMinorSec">
      <summary>The text input pattern for the minutes or seconds of time.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.NumberFullWidth">
      <summary>The text input pattern for a full-width number.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AlphanumericHalfWidth">
      <summary>The text input pattern for alphanumeric half-width characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.AlphanumericFullWidth">
      <summary>The text input pattern for alphanumeric full-width characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.CurrencyChinese">
      <summary>The text input pattern for Chinese currency.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Bopomofo">
      <summary>The text input pattern for the Bopomofo Mandarin Chinese phonetic transcription system.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Hiragana">
      <summary>The text input pattern for the Hiragana writing system.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.KatakanaHalfWidth">
      <summary>The text input pattern for half-width Katakana characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.KatakanaFullWidth">
      <summary>The text input pattern for full-width Katakana characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Hanja">
      <summary>The text input pattern for Hanja characters.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.PhraseList">
      <summary>The text input pattern for a phrase list.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.RegularExpression">
      <summary>The text input pattern for a regular expression.</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Srgs">
      <summary>The text input pattern for the Speech Recognition Grammar Specification (SRGS).</summary>
    </member>
    <member name="F:System.Windows.Input.InputScopeNameValue.Xml">
      <summary>The text input pattern for XML.</summary>
    </member>
    <member name="T:System.Windows.Input.InputScopePhrase">
      <summary>Represents a suggested input text pattern.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopePhrase.#ctor">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Input.InputScopePhrase.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.InputScopePhrase" /> class, taking a string specifying the <see cref="P:System.Windows.Input.InputScopePhrase.Name" /> of the input scope phrase.</summary>
      <param name="name">A string specifying the initial value for the <see cref="P:System.Windows.Input.InputScopePhrase.Name" /> property.  This value cannot be null.</param>
      <exception cref="T:System.ArgumentNullException">Raised if <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.InputScopePhrase.AddChild(System.Object)">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="value">An object to add as a child. </param>
    </member>
    <member name="M:System.Windows.Input.InputScopePhrase.AddText(System.String)">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="name">A string to add. </param>
    </member>
    <member name="P:System.Windows.Input.InputScopePhrase.Name">
      <summary>Gets or sets a descriptive name associated with the text input pattern for this <see cref="T:System.Windows.Input.InputScopePhrase" />.</summary>
      <returns>A string containing the descriptive name for this <see cref="T:System.Windows.Input.InputScopePhrase" />.</returns>
    </member>
    <member name="T:System.Windows.Input.InputType">
      <summary>Specifies the possible types of input being reported.</summary>
    </member>
    <member name="F:System.Windows.Input.InputType.Keyboard">
      <summary>Input was provided by a keyboard.</summary>
    </member>
    <member name="F:System.Windows.Input.InputType.Mouse">
      <summary>Input was provided by a mouse.</summary>
    </member>
    <member name="F:System.Windows.Input.InputType.Stylus">
      <summary>Input was provided by a stylus.</summary>
    </member>
    <member name="F:System.Windows.Input.InputType.Hid">
      <summary>Input was provided a Human Interface Device that was not a keyboard, a mouse, or a stylus.</summary>
    </member>
    <member name="F:System.Windows.Input.InputType.Text">
      <summary>Input was provided by text.</summary>
    </member>
    <member name="F:System.Windows.Input.InputType.Command">
      <summary>Input was provided by a command.</summary>
    </member>
    <member name="T:System.Windows.Input.KeyBinding">
      <summary>Binds a <see cref="T:System.Windows.Input.KeyGesture" /> to a <see cref="T:System.Windows.Input.RoutedCommand" /> (or another  <see cref="T:System.Windows.Input.ICommand" /> implementation).</summary>
    </member>
    <member name="M:System.Windows.Input.KeyBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyBinding" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyBinding" /> class using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="T:System.Windows.Input.Key" /> and <see cref="T:System.Windows.Input.ModifierKeys" /> which will be converted into a <see cref="T:System.Windows.Input.KeyGesture" />. </summary>
      <param name="command">The command to invoke.</param>
      <param name="key">The key to be associated with <paramref name="command" />.</param>
      <param name="modifiers">The modifiers to be associated with <paramref name="command" />.</param>
    </member>
    <member name="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyBinding" /> class using the specified <see cref="T:System.Windows.Input.ICommand" /> and <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
      <param name="command">The command to associate with <paramref name="gesture" />.</param>
      <param name="gesture">The key combination to associate with <paramref name="command" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> or <paramref name="gesture" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyBinding.CreateInstanceCore">
      <summary>Creates an instance of a <see cref="T:System.Windows.Input.KeyBinding" />.</summary>
      <returns>The new object.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyBinding.Gesture">
      <summary>Gets or sets the gesture associated with this <see cref="T:System.Windows.Input.KeyBinding" />. </summary>
      <returns>The key sequence. The default value is null.</returns>
      <exception cref="T:System.ArgumentException">the value <paramref name="gesture" /> is being set to is not a <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
    </member>
    <member name="P:System.Windows.Input.KeyBinding.Key">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.Key" /> of the <see cref="T:System.Windows.Input.KeyGesture" /> associated with this <see cref="T:System.Windows.Input.KeyBinding" />.</summary>
      <returns>The key part of the <see cref="T:System.Windows.Input.KeyGesture" />. The default value is <see cref="F:System.Windows.Input.Key.None" />.</returns>
    </member>
    <member name="F:System.Windows.Input.KeyBinding.KeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.KeyBinding.Key" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.KeyBinding.Key" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyBinding.Modifiers">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.ModifierKeys" /> of the <see cref="T:System.Windows.Input.KeyGesture" /> associated with this <see cref="T:System.Windows.Input.KeyBinding" />. </summary>
      <returns>The modifier keys of the <see cref="T:System.Windows.Input.KeyGesture" />.  The default value is <see cref="F:System.Windows.Input.ModifierKeys.None" />.</returns>
    </member>
    <member name="F:System.Windows.Input.KeyBinding.ModifiersProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.KeyBinding.Modifiers" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.KeyBinding.Modifiers" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Input.Keyboard">
      <summary>Represents the keyboard device. </summary>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be added.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.ClearFocus">
      <summary>Clears focus. </summary>
    </member>
    <member name="P:System.Windows.Input.Keyboard.DefaultRestoreFocusMode">
      <summary>Gets or sets the behavior of Windows Presentation Foundation (WPF) when restoring focus.</summary>
      <returns>An enumeration value that specifies the behavior of WPF when restoring focus. The default in <see cref="F:System.Windows.Input.RestoreFocusMode.Auto" />.</returns>
    </member>
    <member name="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
      <summary>Sets keyboard focus on the specified element.</summary>
      <returns>The element with keyboard focus.</returns>
      <param name="element">The element on which to set keyboard focus.</param>
    </member>
    <member name="P:System.Windows.Input.Keyboard.FocusedElement">
      <summary>Gets the element that has keyboard focus. </summary>
      <returns>The focused element.</returns>
    </member>
    <member name="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
      <summary>Gets the set of key states for the specified key.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Windows.Input.KeyStates" /> values.</returns>
      <param name="key">The specified key.</param>
    </member>
    <member name="E:System.Windows.Input.Keyboard.GotKeyboardFocus">
      <summary>Occurs when an element receives keyboard focus.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event.</returns>
    </member>
    <member name="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
      <summary>Determines whether the specified key is pressed. </summary>
      <returns>true if <paramref name="key" /> is in the down state; otherwise, false.</returns>
      <param name="key">The specified key.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
      <summary>Determines whether the specified key is toggled. </summary>
      <returns>true if <paramref name="key" /> is in the toggled state; otherwise, false.</returns>
      <param name="key">The specified key.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
      <summary>Determines whether the specified key is released. </summary>
      <returns>true if <paramref name="key" /> is in the up state; otherwise, false.</returns>
      <param name="key">The key to check.</param>
    </member>
    <member name="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus">
      <summary>Occurs when the keyboard input provider acquires focus.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Keyboard.KeyDown">
      <summary>Occurs when a key on the keyboard is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.KeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Keyboard.KeyUp">
      <summary>Occurs when a key on the keyboard is released. </summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.KeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Keyboard.LostKeyboardFocus">
      <summary>Occurs when an element loses keyboard focus.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event.</returns>
    </member>
    <member name="P:System.Windows.Input.Keyboard.Modifiers">
      <summary>Gets the set of <see cref="T:System.Windows.Input.ModifierKeys" /> that are currently pressed. </summary>
      <returns>A bitwise combination of the <see cref="T:System.Windows.Input.ModifierKeys" /> values.</returns>
    </member>
    <member name="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus">
      <summary>Occurs when an element is in the process of acquiring keyboard focus.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus">
      <summary>Occurs when the keyboard input provider is in the process of acquiring focus.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Keyboard.PreviewKeyDown">
      <summary>Occurs when a key on the keyboard is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Keyboard.PreviewKeyUp">
      <summary>Occurs when a key on the keyboard is released.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus">
      <summary>Occurs when an element is in the process of losing keyboard focus.</summary>
    </member>
    <member name="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" />  attached event.</returns>
    </member>
    <member name="P:System.Windows.Input.Keyboard.PrimaryDevice">
      <summary>Gets the primary keyboard input device. </summary>
      <returns>The device.</returns>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="M:System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler to be removed.</param>
    </member>
    <member name="T:System.Windows.Input.KeyboardDevice">
      <summary>Abstract class that represents a keyboard device. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyboardDevice.#ctor(System.Windows.Input.InputManager)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyboardDevice" /> class. </summary>
      <param name="inputManager">The input manager associated with this <see cref="T:System.Windows.Input.KeyboardDevice" />.</param>
    </member>
    <member name="P:System.Windows.Input.KeyboardDevice.ActiveSource">
      <summary>Gets the <see cref="T:System.Windows.PresentationSource" /> that is reporting input for this device. </summary>
      <returns>The source of input for this device.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyboardDevice.ClearFocus">
      <summary>Clears focus. </summary>
    </member>
    <member name="P:System.Windows.Input.KeyboardDevice.DefaultRestoreFocusMode">
      <summary>Gets or sets the behavior of Windows Presentation Foundation (WPF) when restoring focus.</summary>
      <returns>An enumeration value that specifies the behavior of WPF when restoring focus. The default in <see cref="F:System.Windows.Input.RestoreFocusMode.Auto" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyboardDevice.Focus(System.Windows.IInputElement)">
      <summary>Sets keyboard focus on the specified <see cref="T:System.Windows.IInputElement" />.</summary>
      <returns>The element that has keyboard focus.</returns>
      <param name="element">The element to move focus to.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</exception>
    </member>
    <member name="P:System.Windows.Input.KeyboardDevice.FocusedElement">
      <summary>Gets the element that has keyboard focus. </summary>
      <returns>The element with keyboard focus.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyboardDevice.GetKeyStates(System.Windows.Input.Key)">
      <summary>Gets the set of key states for the specified <see cref="T:System.Windows.Input.Key" />.</summary>
      <returns>The set of key states for the specified key.</returns>
      <param name="key">The key to check.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="key" /> is not a valid key.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardDevice.GetKeyStatesFromSystem(System.Windows.Input.Key)">
      <summary>When overridden in a derived class, obtains the <see cref="T:System.Windows.Input.KeyStates" /> for the specified <see cref="T:System.Windows.Input.Key" />.</summary>
      <returns>The set of key states for the specified key.</returns>
      <param name="key">The key to check.</param>
    </member>
    <member name="M:System.Windows.Input.KeyboardDevice.IsKeyDown(System.Windows.Input.Key)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.Key" /> is in the down state.</summary>
      <returns>true if <paramref name="key" /> is in the down state; otherwise, false.</returns>
      <param name="key">The key to check.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="key" /> is not a valid key.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardDevice.IsKeyToggled(System.Windows.Input.Key)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.Key" /> is in the toggled state.</summary>
      <returns>true if <paramref name="key" /> is in the toggled state; otherwise, false.</returns>
      <param name="key">The key to check.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="key" /> is not a valid key.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyboardDevice.IsKeyUp(System.Windows.Input.Key)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Input.Key" /> is in the up state.</summary>
      <returns>true if <paramref name="key" /> is in the up state; otherwise, false.</returns>
      <param name="key">The key to check.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="key" /> is not a valid key.</exception>
    </member>
    <member name="P:System.Windows.Input.KeyboardDevice.Modifiers">
      <summary>Gets the set of <see cref="T:System.Windows.Input.ModifierKeys" /> which are currently pressed.</summary>
      <returns>The set of modifier keys.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyboardDevice.Target">
      <summary>Gets the specified <see cref="T:System.Windows.IInputElement" /> that input from this device is sent to. </summary>
      <returns>The element that receives input.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyboardEventArgs">
      <summary>Provides data for keyboard-related events. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyboardEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyboardEventArgs" /> class. </summary>
      <param name="keyboard">The logical keyboard device associated with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
    </member>
    <member name="M:System.Windows.Input.KeyboardEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="P:System.Windows.Input.KeyboardEventArgs.KeyboardDevice">
      <summary>Gets the keyboard device associated with the input event. </summary>
      <returns>The logical keyboard device associated with the event.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyboardEventHandler">
      <summary>Represents the method that will handle keyboard-related routed events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.KeyboardFocusChangedEventArgs">
      <summary>Provides data for <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> and <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed events, as well as related attached and Preview events.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyboardFocusChangedEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Int32,System.Windows.IInputElement,System.Windows.IInputElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> class. </summary>
      <param name="keyboard">The logical keyboard device associated with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
      <param name="oldFocus">The element that previously had focus.</param>
      <param name="newFocus">The element that now has focus.</param>
    </member>
    <member name="M:System.Windows.Input.KeyboardFocusChangedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="P:System.Windows.Input.KeyboardFocusChangedEventArgs.NewFocus">
      <summary>Gets the element that focus has moved to.</summary>
      <returns>The element with focus.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyboardFocusChangedEventArgs.OldFocus">
      <summary>Gets the element that previously had focus. </summary>
      <returns>The previously focused element.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyboardFocusChangedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> and <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed events, as well as related attached and Preview events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs" /> class. </summary>
      <param name="keyboard">The logical keyboard device associated with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
      <param name="focusAcquired">true to indicate that interoperation focus was acquired; otherwise, false. </param>
    </member>
    <member name="P:System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs.FocusAcquired">
      <summary>Gets a value that indicates whether interoperation focus was acquired. </summary>
      <returns>true if interoperation focus was acquired; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Calls the type-specific handler on the target.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="T:System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /> event  </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Windows.Input.KeyEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyEventArgs" /> class. </summary>
      <param name="keyboard">The logical keyboard device associated with this event.</param>
      <param name="inputSource">The input source.</param>
      <param name="timestamp">The time when the input occurred.</param>
      <param name="key">The key referenced by the event.</param>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.DeadCharProcessedKey">
      <summary>Gets the key that is part of dead key composition to create a single combined character.</summary>
      <returns>The key that is part of dead key composition to create a single combined character.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.ImeProcessedKey">
      <summary>Gets the keyboard key referenced by the event, if the key will be processed by an Input Method Editor (IME). </summary>
      <returns>The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.InputSource">
      <summary>Gets the input source that provided this input. </summary>
      <returns>The input source.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.IsDown">
      <summary>Gets a value that indicates whether the key referenced by the event is in the down state. </summary>
      <returns>true if the key is down; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.IsRepeat">
      <summary>Gets a value that indicates whether the keyboard key referenced by the event is a repeated key. </summary>
      <returns>true if the key is repeated; otherwise, false.  There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.IsToggled">
      <summary>Gets a value that indicates whether the key referenced by the event is in the toggled state. </summary>
      <returns>true if the key is toggled; otherwise, false.  There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.IsUp">
      <summary>Gets a value that indicates whether the key referenced by the event is in the up state. </summary>
      <returns>true if the key is up; otherwise, false.  There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.Key">
      <summary>Gets the keyboard key associated with the event. </summary>
      <returns>The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.KeyStates">
      <summary>Gets the state of the keyboard key associated with this event. </summary>
      <returns>The state of the key.</returns>
    </member>
    <member name="P:System.Windows.Input.KeyEventArgs.SystemKey">
      <summary>Gets the keyboard key referenced by the event, if the key will be processed by the system. </summary>
      <returns>The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.KeyGesture">
      <summary>Defines a keyboard combination that can be used to invoke a command.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyGesture" /> class with the specified <see cref="T:System.Windows.Input.Key" />. </summary>
      <param name="key">The key associated with this gesture.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="key" /> is not a valid <see cref="T:System.Windows.Input.Key" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="key" /> is not a valid <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyGesture" /> class with the specified <see cref="T:System.Windows.Input.Key" /> and <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <param name="key">The key associated with the gesture.</param>
      <param name="modifiers">The modifier keys associated with the gesture.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="modifiers" /> is not a valid <see cref="T:System.Windows.Input.ModifierKeys" />-or-<paramref name="key" /> is not a valid <see cref="T:System.Windows.Input.Key" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="key" /> and <paramref name="modifiers" /> do not form a valid <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyGesture" /> class with the specified <see cref="T:System.Windows.Input.Key" />, <see cref="T:System.Windows.Input.ModifierKeys" />, and display string.</summary>
      <param name="key">The key associated with the gesture.</param>
      <param name="modifiers">The modifier keys associated with the gesture.</param>
      <param name="displayString">A string representation of the <see cref="T:System.Windows.Input.KeyGesture" />.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="modifiers" /> is not a valid <see cref="T:System.Windows.Input.ModifierKeys" />-or-<paramref name="key" /> is not a valid <see cref="T:System.Windows.Input.Key" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="displayString" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="key" /> and <paramref name="modifiers" /> do not form a valid <see cref="T:System.Windows.Input.KeyGesture" />.</exception>
    </member>
    <member name="P:System.Windows.Input.KeyGesture.DisplayString">
      <summary>Gets a string representation of this <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
      <returns>The display string for this <see cref="T:System.Windows.Input.KeyGesture" />. The default value is <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)">
      <summary>Returns a string that can be used to display the <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
      <returns>The string to display </returns>
      <param name="culture">The culture specific information.</param>
    </member>
    <member name="P:System.Windows.Input.KeyGesture.Key">
      <summary>Gets the key associated with this <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
      <returns>The key associated with the gesture.  The default value is <see cref="F:System.Windows.Input.Key.None" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
      <summary>Determines whether this <see cref="T:System.Windows.Input.KeyGesture" /> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs" /> object.</summary>
      <returns>true if the event data matches this <see cref="T:System.Windows.Input.KeyGesture" />; otherwise, false.</returns>
      <param name="targetElement">The target.</param>
      <param name="inputEventArgs">The input event data to compare this gesture to.</param>
    </member>
    <member name="P:System.Windows.Input.KeyGesture.Modifiers">
      <summary>Gets the modifier keys associated with this <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
      <returns>The modifier keys associated with the gesture. The default value is <see cref="F:System.Windows.Input.ModifierKeys.None" />.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyGestureConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.KeyGesture" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyGesture" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.KeyGesture" />, using the specified context. </summary>
      <returns>true if <paramref name="sourceType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.KeyGesture" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if <paramref name="destinationType" /> is type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.KeyGesture" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.KeyGesture" /> to the specified type, using the specified context.</summary>
      <returns>The converted object, or an empty string if <paramref name="value" /> is null.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="T:System.Windows.Input.KeyGestureValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyGestureValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.KeyGesture" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The gesture to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Input.KeyGesture" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.KeyGesture" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.KeyGestureValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.KeyGesture" /> to a <see cref="T:System.String" />.</summary>
      <returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.KeyGesture" />.</returns>
      <param name="value">The gesture to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Input.KeyStates">
      <summary>Specifies constants that define the state of a key.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyStates.None">
      <summary>The key is not pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyStates.Down">
      <summary>The key is pressed.</summary>
    </member>
    <member name="F:System.Windows.Input.KeyStates.Toggled">
      <summary>The key is toggled.</summary>
    </member>
    <member name="T:System.Windows.Input.Manipulation">
      <summary>Contains methods to get and update information about a manipulation.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulation.AddManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)">
      <summary>Associates a <see cref="T:System.Windows.Input.IManipulator" /> object with an element.</summary>
      <param name="element">The element with which to associate the manipulator.</param>
      <param name="manipulator">The object that provides the position of the input that creates or is added to a manipulation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.-or-<paramref name="manipulator" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> property on element is false.</exception>
    </member>
    <member name="M:System.Windows.Input.Manipulation.CompleteManipulation(System.Windows.UIElement)">
      <summary>Completes the active manipulation on the specified element.  When called, manipulation input is no longer tracked and inertia on the specified element stops.</summary>
      <param name="element">The element on which to complete manipulation.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.GetManipulationContainer(System.Windows.UIElement)">
      <summary>Gets the container that defines the coordinates for the manipulation.</summary>
      <returns>The container that defines the coordinate space.</returns>
      <param name="element">The element on which there is an active manipulation.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.GetManipulationMode(System.Windows.UIElement)">
      <summary>Gets the <see cref="T:System.Windows.Input.ManipulationModes" /> for the specified element.</summary>
      <returns>One of the enumeration values.</returns>
      <param name="element">The element for which to get the manipulation mode.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.GetManipulationPivot(System.Windows.UIElement)">
      <summary>Returns an object that describes the pivot for a single-point manipulation.</summary>
      <returns>An object that describes the pivot for a single-input manipulation.</returns>
      <param name="element">The element on which there is a manipulation.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.IsManipulationActive(System.Windows.UIElement)">
      <summary>Gets whether a manipulation is associated with the specified element.</summary>
      <returns>true if a manipulation is associated with the specified element; otherwise, false.</returns>
      <param name="element">The element to check.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.RemoveManipulator(System.Windows.UIElement,System.Windows.Input.IManipulator)">
      <summary>Disassociates a <see cref="T:System.Windows.Input.IManipulator" /> object with an element.</summary>
      <param name="element">The element with which to associate the manipulator.</param>
      <param name="manipulator">The object that provides the position of the input.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.SetManipulationContainer(System.Windows.UIElement,System.Windows.IInputElement)">
      <summary>Sets the element that defines the coordinates for the manipulation of the specified element/</summary>
      <param name="element">The element with which the manipulation is associated.</param>
      <param name="container">The container that defines the coordinate space.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.SetManipulationMode(System.Windows.UIElement,System.Windows.Input.ManipulationModes)">
      <summary>Sets the mode of manipulation for the specified element.</summary>
      <param name="element">The element on which to set the manipulation mode.</param>
      <param name="mode">The new manipulation mode.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.SetManipulationParameter(System.Windows.UIElement,System.Windows.Input.Manipulations.ManipulationParameters2D)">
      <summary>Adds parameters to the manipulation of the specified element.</summary>
      <param name="element">The element that has the manipulation to that the parameter is added to.</param>
      <param name="parameter">The parameter to add.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.SetManipulationPivot(System.Windows.UIElement,System.Windows.Input.ManipulationPivot)">
      <summary>Sets the pivot of the single-point manipulation of the specified element.</summary>
      <param name="element">The element that has an active manipulation.</param>
      <param name="pivot">An object that describes the pivot.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulation.StartInertia(System.Windows.UIElement)">
      <summary>Stops the manipulation and begins inertia on the specified element.</summary>
      <param name="element">The element on which to begin inertia.</param>
    </member>
    <member name="T:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event. </summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs.BoundaryFeedback">
      <summary>Gets the unused portion of the direct manipulation.</summary>
      <returns>The unused portion of the direct manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs.ManipulationContainer">
      <summary>Gets the container that the <see cref="P:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs.BoundaryFeedback" /> property is relative to.</summary>
      <returns>The container that the <see cref="P:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs.BoundaryFeedback" /> property is relative to.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs.Manipulators">
      <summary>Gets a collection of objects that represents the touch contacts for the manipulation.</summary>
      <returns>A collection of objects that represents the touch contacts for the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationCompletedEventArgs.Cancel">
      <summary>Cancels the manipulation and promotes touch to mouse events.</summary>
      <returns>true if touch was successfully promoted to mouse events, otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.FinalVelocities">
      <summary>Gets the velocities that are used for the manipulation.</summary>
      <returns>The velocities that are used for the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.IsInertial">
      <summary>Gets whether the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs during inertia.</summary>
      <returns>true if the <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> event occurs during inertia; false if the event occurs while the user has contact with the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.ManipulationContainer">
      <summary>Gets the container that defines the coordinates for the manipulation.</summary>
      <returns>The container that defines the coordinates for the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.ManipulationOrigin">
      <summary>Gets the point from which the manipulation originated.</summary>
      <returns>The point from which the manipulation originated.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.Manipulators">
      <summary>Gets a collection of objects that represents the touch contacts for the manipulation.</summary>
      <returns>A collection of objects that represents the touch contacts for the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation">
      <summary>Gets the total transformation that occurs during the current manipulation.</summary>
      <returns>The total transformation that occurs during the current manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationDelta">
      <summary>Contains transformation data that is accumulated when manipulation events occur.</summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationDelta.#ctor(System.Windows.Vector,System.Double,System.Windows.Vector,System.Windows.Vector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationDelta" /> class. </summary>
      <param name="translation">The linear motion of the manipulation in device-independent units (1/96th inch per unit).</param>
      <param name="rotation">The rotation of the manipulation in degrees.</param>
      <param name="scale">The amount the manipulation has resized as a multiplier.</param>
      <param name="expansion">The amount the manipulation has resized in .</param>
    </member>
    <member name="P:System.Windows.Input.ManipulationDelta.Expansion">
      <summary>Gets or sets the amount the manipulation has resized in .</summary>
      <returns>The amount the manipulation has resized in device-independent units (1/96th inch per unit).</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDelta.Rotation">
      <summary>Gets or sets the rotation of the manipulation in degrees.</summary>
      <returns>The rotation of the manipulation in degrees.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDelta.Scale">
      <summary>Gets or sets the amount the manipulation has resized as a multiplier.</summary>
      <returns>The amount the manipulation has resized.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDelta.Translation">
      <summary>Gets or sets the linear motion of the manipulation.</summary>
      <returns>The linear motion of the manipulation in device-independent units (1/96th inch per unit).</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationDeltaEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel">
      <summary>Cancels the manipulation and promotes touch to mouse events.</summary>
      <returns>true if touch is successfully promoted to mouse events, otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
      <summary>Completes the manipulation without inertia.</summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation">
      <summary>Gets the cumulated changes of the current manipulation.</summary>
      <returns>The cumulated changes of the current manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
      <summary>Gets the most recent changes of the current manipulation.</summary>
      <returns>The most recent changes of the current manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
      <summary>Gets whether the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs during inertia.</summary>
      <returns>true if the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs during inertia; false if the event occurs while the user has contact with the <see cref="T:System.Windows.UIElement" />.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer">
      <summary>Gets the container that defines the coordinates for the manipulation.</summary>
      <returns>The container that defines the coordinates for the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin">
      <summary>Gets the point from which the manipulation originated</summary>
      <returns>The point from which the manipulation originated</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.Manipulators">
      <summary>Gets a collection of objects that represents the touch contacts for the manipulation.</summary>
      <returns>A collection of objects that represents the touch contacts for the manipulation.</returns>
    </member>
    <member name="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
      <summary>Specifies the unused portion of the cumulative transform.</summary>
      <param name="unusedManipulation">The unused portion of the cumulative transform that the element did not use.</param>
    </member>
    <member name="M:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia">
      <summary>Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event.</summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationDeltaEventArgs.Velocities">
      <summary>Gets the rates of the most recent changes to the manipulation.</summary>
      <returns>The rates of the most recent changes to the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationInertiaStartingEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.Cancel">
      <summary>Cancels the manipulation and promotes touch to mouse events.</summary>
      <returns>true if touch was successfully promoted to mouse events, otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior">
      <summary>Get or sets the rate of slowdown of expansion inertial movement.</summary>
      <returns>The rate of slowdown of expansion inertial movement</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.InitialVelocities">
      <summary>Gets the rates of changes to the manipulation that occur before inertia starts.</summary>
      <returns>The rates of changes to the manipulation that occur before inertia starts.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationContainer">
      <summary>Gets the container that the <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" /> property is relative to.</summary>
      <returns>The container that the <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" /> property is relative to.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin">
      <summary>Gets or sets the point from which the manipulation originated.</summary>
      <returns>The point from which the manipulation originated</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.Manipulators">
      <summary>Gets a collection of objects that represents the touch contacts for the manipulation.</summary>
      <returns>A collection of objects that represents the touch contacts for the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior">
      <summary>Gets or sets the rate of slowdown of rotational inertial movement.</summary>
      <returns>The rate of slowdown of rotational inertial movement.</returns>
    </member>
    <member name="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.SetInertiaParameter(System.Windows.Input.Manipulations.InertiaParameters2D)">
      <summary>Specifies the behavior of a manipulation during inertia.</summary>
      <param name="parameter">The object that specifies the behavior of a manipulation during inertia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameter" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior">
      <summary>Gets and Sets the rate of slowdown of linear inertial movement.</summary>
      <returns>The rate of slowdown of linear inertial movement.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationModes">
      <summary>Specifies how manipulation events are interpreted.</summary>
    </member>
    <member name="F:System.Windows.Input.ManipulationModes.None">
      <summary>Manipulation events do not occur.</summary>
    </member>
    <member name="F:System.Windows.Input.ManipulationModes.TranslateX">
      <summary>A manipulation can translate an object horizontally.</summary>
    </member>
    <member name="F:System.Windows.Input.ManipulationModes.TranslateY">
      <summary>A manipulation can translate an object vertically.</summary>
    </member>
    <member name="F:System.Windows.Input.ManipulationModes.Translate">
      <summary>A manipulation can translate an object.</summary>
    </member>
    <member name="F:System.Windows.Input.ManipulationModes.Rotate">
      <summary>A manipulation can rotate an object.</summary>
    </member>
    <member name="F:System.Windows.Input.ManipulationModes.Scale">
      <summary>A manipulation can scale an object</summary>
    </member>
    <member name="F:System.Windows.Input.ManipulationModes.All">
      <summary>A manipulation can scale, translate, or rotate an object and can occur with one point of input.</summary>
    </member>
    <member name="T:System.Windows.Input.ManipulationPivot">
      <summary>Specifies how a rotation occurs with one point of user input.</summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationPivot.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationPivot" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationPivot.#ctor(System.Windows.Point,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationPivot" /> class with the specified point of a single-point manipulation. </summary>
      <param name="center">The center of a single-point manipulation.</param>
      <param name="radius">The area around the Pivot that is used to determine how much rotation and translation occurs when a single point of contact initiates the manipulation.</param>
    </member>
    <member name="P:System.Windows.Input.ManipulationPivot.Center">
      <summary>Gets or sets the center of a single-point manipulation.</summary>
      <returns>The center of a single-point manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationPivot.Radius">
      <summary>Gets or sets the area around the Pivot that is used to determine how much rotation and translation occurs when a single point of contact initiates the manipulation.</summary>
      <returns>The area around the Pivot that is used to determine how much rotation and translation occurs when a single point of contact initiates the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationStartedEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationStarted" /> event. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationStartedEventArgs.Cancel">
      <summary>Cancels the manipulation and promotes touch to mouse events.</summary>
      <returns>true if touch was successfully promoted to mouse events, otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Input.ManipulationStartedEventArgs.Complete">
      <summary>Completes the manipulation without inertia.</summary>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer">
      <summary>Gets the container that the <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" /> property is relative to.</summary>
      <returns>The container that the <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" /> property is relative to.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin">
      <summary>Gets the point from which the manipulation originated.</summary>
      <returns>The point from which the manipulation originated</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartedEventArgs.Manipulators">
      <summary>Gets a collection of objects that represents the touch contacts for the manipulation.</summary>
      <returns>A collection of objects that represents the touch contacts for the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.ManipulationStartingEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.UIElement.ManipulationStarting" />, event. </summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationStartingEventArgs.Cancel">
      <summary>Cancels the manipulation and promotes touch to mouse events.</summary>
      <returns>true if touch was successfully promoted to mouse events, otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled">
      <summary>Gets or sets whether one finger can start a manipulation.</summary>
      <returns>true one finger can start a manipulation; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer">
      <summary>Gets or sets the container that all manipulation events and calculations are relative to.</summary>
      <returns>The container that all manipulation events and calculations are relative to. The default is the element on which the event occurred.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartingEventArgs.Manipulators">
      <summary>Gets a collection of objects that represents the touch contacts for the manipulation.</summary>
      <returns>A collection of objects that represents the touch contacts for the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartingEventArgs.Mode">
      <summary>Gets or sets which types of manipulations are possible.</summary>
      <returns>One of the enumeration values. The default is <see cref="F:System.Windows.Input.ManipulationModes.All" />.</returns>
      <exception cref="T:System.ArgumentException">The property is set to a value other than one or more of the <see cref="T:System.Windows.Input.ManipulationModes" /> enumerations value</exception>
    </member>
    <member name="P:System.Windows.Input.ManipulationStartingEventArgs.Pivot">
      <summary>Gets or sets an object that describes the pivot for a single-point manipulation.</summary>
      <returns>An object that describes the pivot for a single-point manipulation.</returns>
    </member>
    <member name="M:System.Windows.Input.ManipulationStartingEventArgs.SetManipulationParameter(System.Windows.Input.Manipulations.ManipulationParameters2D)">
      <summary>Adds parameters to the current manipulation of the specified element.</summary>
      <param name="parameter">The parameter to add.</param>
    </member>
    <member name="T:System.Windows.Input.ManipulationVelocities">
      <summary>Describes the speed at which manipulations occurs.</summary>
    </member>
    <member name="M:System.Windows.Input.ManipulationVelocities.#ctor(System.Windows.Vector,System.Double,System.Windows.Vector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ManipulationVelocities" /> class. </summary>
      <param name="linearVelocity">The speed of linear motion in device-independent units (1/96th inch per unit) per millisecond.</param>
      <param name="angularVelocity">The speed of rotation in degrees per millisecond.</param>
      <param name="expansionVelocity">The rate at which the manipulation resized in device-independent units (1/96th inch per unit) per millisecond.</param>
    </member>
    <member name="P:System.Windows.Input.ManipulationVelocities.AngularVelocity">
      <summary>Gets or sets the speed of rotation.</summary>
      <returns>The speed of rotation in degrees per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationVelocities.ExpansionVelocity">
      <summary>Gets or sets the rate at which the manipulation resized. </summary>
      <returns>The rate at which the manipulation resized in device-independent units (1/96th inch per unit) per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.ManipulationVelocities.LinearVelocity">
      <summary>Gets or sets the speed of linear motion.</summary>
      <returns>The speed of linear motion in device-independent units (1/96th inch per unit) per millisecond.</returns>
    </member>
    <member name="T:System.Windows.Input.MediaCommands">
      <summary>Provides a standard set of media related commands.</summary>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.BoostBass">
      <summary>Gets the value that represents the Boost Base command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextBoost Bass</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.ChannelDown">
      <summary> Gets the value that represents the Channel Down command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextChannel Down</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.ChannelUp">
      <summary> Gets the value that represents the Channel Up command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextChannel Up</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.DecreaseBass">
      <summary> Gets the value that represents the Decrease Bass command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextDecrease Bass</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.DecreaseMicrophoneVolume">
      <summary> Gets the value that represents the Decrease Microphone Volume command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextDecrease Microphone Volume</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.DecreaseTreble">
      <summary> Gets the value that represents the Decrease Treble command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextDecrease Treble</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.DecreaseVolume">
      <summary> Gets the value that represents the Decrease Volume command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextDecrease Volume</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.FastForward">
      <summary> Gets the value that represents the Fast Forward command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextFast Forward</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.IncreaseBass">
      <summary> Gets the value that represents the Increase Bass command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextIncrease Bass</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.IncreaseMicrophoneVolume">
      <summary> Gets the value that represents the Increase Microphone Volume command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextIncrease Microphone Volume</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.IncreaseTreble">
      <summary> Gets the value that represents the Increase Treble command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextIncrease Treble</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.IncreaseVolume">
      <summary> Gets the value that represents the Increase Volume command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextIncrease Volume</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.MuteMicrophoneVolume">
      <summary> Gets the value that represents the Mute Microphone Volume command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextMute Microphone Volume</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.MuteVolume">
      <summary> Gets the value that represents the Mute Volume command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextMute Volume</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.NextTrack">
      <summary> Gets the value that represents the Next Track command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextNext Track</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Pause">
      <summary> Gets the value that represents the Pause command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextPause</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Play">
      <summary> Gets the value that represents the Play command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextPlay</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.PreviousTrack">
      <summary> Gets the value that represents the Previous Track command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextPrevious Track</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Record">
      <summary> Gets the value that represents the Record command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextRecord</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Rewind">
      <summary> Gets the value that represents the Rewind command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextRewind</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Select">
      <summary> Gets the value that represents the Select command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextSelect</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.Stop">
      <summary> Gets the value that represents the Stop command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextStop</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.ToggleMicrophoneOnOff">
      <summary> Gets the value that represents the Toggle Microphone On Off command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextToggle Microphone OnOff</returns>
    </member>
    <member name="P:System.Windows.Input.MediaCommands.TogglePlayPause">
      <summary> Gets the value that represents the Toggle Play Pause command. </summary>
      <returns>The command.Default ValuesKey GestureNo gesture defined.UI TextToggle Play Pause</returns>
    </member>
    <member name="T:System.Windows.Input.Mouse">
      <summary>Represents the mouse device to a specific thread.</summary>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddPreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.AddQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
      <summary>Adds a handler for the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)">
      <summary>Captures mouse input to the specified element. </summary>
      <returns>true if the element was able to capture the mouse; otherwise, false.</returns>
      <param name="element">The element to capture the mouse.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
      <summary>Captures mouse input to the specified element using the specified <see cref="T:System.Windows.Input.CaptureMode" />.</summary>
      <returns>true if the element was able to capture the mouse; otherwise, false.</returns>
      <param name="element">The element to capture the mouse.</param>
      <param name="captureMode">The capture policy to use.</param>
    </member>
    <member name="P:System.Windows.Input.Mouse.Captured">
      <summary>Gets the element that has captured the mouse. </summary>
      <returns>The element captured by the mouse.</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.DirectlyOver">
      <summary>Gets the element the mouse pointer is directly over.</summary>
      <returns>The element the mouse pointer is over.</returns>
    </member>
    <member name="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])">
      <summary>Retrieves up to 64 previous coordinates of the mouse pointer since the last mouse move event. </summary>
      <returns>The number of points returned.</returns>
      <param name="relativeTo">The elements <paramref name="points" /> are in relation to.</param>
      <param name="points">An array of objects.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)">
      <summary>Gets the position of the mouse relative to a specified element. </summary>
      <returns>The position of the mouse relative to the parameter <paramref name="relativeTo" />.</returns>
      <param name="relativeTo">The coordinate space in which to calculate the position of the mouse.</param>
    </member>
    <member name="E:System.Windows.Input.Mouse.GotMouseCapture">
      <summary>Occurs when an element captures the mouse.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.GotMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event.</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.LeftButton">
      <summary>Gets the state of the left button of the mouse.</summary>
      <returns>The state of the left mouse button.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.LostMouseCapture">
      <summary>Occurs when an element loses mouse capture.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.LostMouseCaptureEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.MiddleButton">
      <summary> Gets the state of the middle button of the mouse.</summary>
      <returns>The state of the middle mouse button.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseDown">
      <summary>Occurs when any mouse button is depressed. </summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseEnter">
      <summary>Occurs when the mouse pointer enters the boundaries of an element.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseEnterEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseLeave">
      <summary>Occurs when the mouse pointer leaves the boundaries of an element.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseLeaveEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseMove">
      <summary>Occurs when the mouse pointer moves.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseUp">
      <summary>Occurs when any mouse button is released. </summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.MouseWheel">
      <summary>Occurs when the mouse wheel is rotated.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine">
      <summary>Represents the number of units the mouse wheel is rotated to scroll one line. </summary>
      <returns>The units in one scroll line.</returns>
    </member>
    <member name="F:System.Windows.Input.Mouse.MouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event.</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.OverrideCursor">
      <summary>Gets or sets the cursor for the entire application. </summary>
      <returns>The override cursor or null if the <see cref="P:System.Windows.Input.Mouse.OverrideCursor" /> is not set.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseDown">
      <summary> Occurs when any mouse button is depressed. </summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseDownEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement">
      <summary>Occurs when the primary mouse button is pressed outside the element that is capturing mouse events. </summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseMove">
      <summary>Occurs when the mouse moves over an element.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseUp">
      <summary> Occurs when any mouse button is released. </summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseUpEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement">
      <summary>Occurs when the primary mouse button is released outside the element that is capturing mouse events.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.PreviewMouseWheel">
      <summary> Occurs when the mouse wheel rotates.  </summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event.</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.PrimaryDevice">
      <summary>Gets the primary mouse device. </summary>
      <returns>The device.</returns>
    </member>
    <member name="E:System.Windows.Input.Mouse.QueryCursor">
      <summary>Occurs when an element queries for the current mouse cursor.</summary>
    </member>
    <member name="F:System.Windows.Input.Mouse.QueryCursorEvent">
      <summary>Identifies the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event.</summary>
      <returns>The identifier for the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event.</returns>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.RemoveQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)">
      <summary>Removes a handler for the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event. </summary>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</param>
      <param name="handler">The event handler.</param>
    </member>
    <member name="P:System.Windows.Input.Mouse.RightButton">
      <summary> Gets the state of the right button. </summary>
      <returns>The state of the right mouse button.</returns>
    </member>
    <member name="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)">
      <summary>Sets the mouse pointer to the specified <see cref="T:System.Windows.Input.Cursor" />. </summary>
      <returns>true, if the cursor was set; otherwise, false.</returns>
      <param name="cursor">The cursor to set the mouse pointer to.</param>
    </member>
    <member name="M:System.Windows.Input.Mouse.Synchronize">
      <summary>Forces the mouse to resynchronize. </summary>
    </member>
    <member name="M:System.Windows.Input.Mouse.UpdateCursor">
      <summary> Forces the mouse cursor to be updated. </summary>
    </member>
    <member name="P:System.Windows.Input.Mouse.XButton1">
      <summary> Gets the state of the first extended button. </summary>
      <returns>The state of the first extended mouse button.</returns>
    </member>
    <member name="P:System.Windows.Input.Mouse.XButton2">
      <summary>Gets the state of the second extended button. </summary>
      <returns>The state of the second extended mouse button.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseAction">
      <summary>Specifies constants that define actions performed by the mouse.</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.None">
      <summary>No action. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.LeftClick">
      <summary>A left mouse button click.</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.RightClick">
      <summary>A right mouse button click. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.MiddleClick">
      <summary>A middle mouse button click.</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.WheelClick">
      <summary>A mouse wheel rotation. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.LeftDoubleClick">
      <summary>A left mouse button double-click.</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.RightDoubleClick">
      <summary>A right mouse button double-click.</summary>
    </member>
    <member name="F:System.Windows.Input.MouseAction.MiddleDoubleClick">
      <summary>A middle mouse button double-click.</summary>
    </member>
    <member name="T:System.Windows.Input.MouseActionConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.MouseAction" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseActionConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.MouseAction" />,using the specified context.</summary>
      <returns>true if this converter can perform the operation; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.MouseAction" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if this converter can perform the operation; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.MouseAction" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> does not map to a valid <see cref="T:System.Windows.Input.MouseAction" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Input.MouseActionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.MouseAction" /> to the specified type, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> does not map to a valid <see cref="T:System.Windows.Input.MouseAction" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.  </exception>
    </member>
    <member name="T:System.Windows.Input.MouseActionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.MouseAction" />.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseActionValueSerializer" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.MouseAction" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.MouseAction" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The modifier keys to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.MouseAction" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Input.MouseAction" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.MouseAction" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseActionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.MouseAction" /> to a <see cref="T:System.String" />.</summary>
      <returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.MouseAction" />.</returns>
      <param name="value">The key to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Input.MouseBinding">
      <summary>Binds a <see cref="T:System.Windows.Input.MouseGesture" /> to a <see cref="T:System.Windows.Input.RoutedCommand" /> (or another <see cref="T:System.Windows.Input.ICommand" /> implementation).</summary>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseBinding" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.MouseGesture)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseBinding" /> class, using the specified command and mouse gesture.</summary>
      <param name="command">The command associated with the gesture.</param>
      <param name="gesture">The gesture associated with the command.</param>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.CloneCore(System.Windows.Freezable)">
      <summary>Copies the base (non-animated) values of the properties of the specified object.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Copies the current values of the properties of the specified object.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.CreateInstanceCore">
      <summary>Creates an instance of an <see cref="T:System.Windows.Input.MouseBinding" />.</summary>
      <returns>The new object.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseBinding.Gesture">
      <summary>Gets or sets the gesture associated with this <see cref="T:System.Windows.Input.MouseBinding" />. </summary>
      <returns>The gesture.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Input.MouseBinding.Gesture" /> is set to null.</exception>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Creates the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Input.MouseBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Creates the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="P:System.Windows.Input.MouseBinding.MouseAction">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.MouseAction" /> associated with this <see cref="T:System.Windows.Input.MouseBinding" />.</summary>
      <returns>The mouse action.  The default is <see cref="F:System.Windows.Input.MouseAction.None" />.</returns>
    </member>
    <member name="F:System.Windows.Input.MouseBinding.MouseActionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Input.MouseBinding.MouseAction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Input.MouseBinding.MouseAction" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseButton">
      <summary>Defines values that specify the buttons on a mouse device. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.Left">
      <summary>The left mouse button. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.Middle">
      <summary>The middle mouse button. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.Right">
      <summary>The right mouse button. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.XButton1">
      <summary>The first extended mouse button. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseButton.XButton2">
      <summary>The second extended mouse button. </summary>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventArgs">
      <summary>Provides data for mouse button related events. </summary>
    </member>
    <member name="M:System.Windows.Input.MouseButtonEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.MouseButton)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> class by using the specified <see cref="T:System.Windows.Input.MouseDevice" />, timestamp, and <see cref="T:System.Windows.Input.MouseButton" />. </summary>
      <param name="mouse">The logical Mouse device associated with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
      <param name="button">The mouse button whose state is being described.</param>
    </member>
    <member name="M:System.Windows.Input.MouseButtonEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.MouseButton,System.Windows.Input.StylusDevice)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> class by using the specified <see cref="T:System.Windows.Input.MouseDevice" />, timestamp, <see cref="T:System.Windows.Input.MouseButton" />, and <see cref="T:System.Windows.Input.StylusDevice" />.  .</summary>
      <param name="mouse">The logical mouse device associated with this event.</param>
      <param name="timestamp">The time the event occurred.</param>
      <param name="button">The button associated with this event.</param>
      <param name="stylusDevice">The stylus device associated with this event.</param>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.ButtonState">
      <summary>Gets the state of the button associated with the event. </summary>
      <returns>The state the button is in.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.ChangedButton">
      <summary>Gets the button associated with the event. </summary>
      <returns>The button which was pressed.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseButtonEventArgs.ClickCount">
      <summary>Gets the number of times the button was clicked. </summary>
      <returns>The number of times the mouse button was clicked.</returns>
    </member>
    <member name="M:System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="T:System.Windows.Input.MouseButtonEventHandler">
      <summary>Represents the method that will handle mouse button related routed events, for example <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.MouseButtonState">
      <summary>Specifies the possible states of a mouse button. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseButtonState.Released">
      <summary>The button is released. </summary>
    </member>
    <member name="F:System.Windows.Input.MouseButtonState.Pressed">
      <summary>The button is pressed. </summary>
    </member>
    <member name="T:System.Windows.Input.MouseDevice">
      <summary>Represents a mouse device. </summary>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.ActiveSource">
      <summary>Gets the <see cref="T:System.Windows.PresentationSource" /> that is reporting input for this device.</summary>
      <returns>The source of input for this device.</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement)">
      <summary>Captures mouse events to the specified element. </summary>
      <returns>true if the element was able to capture the mouse; otherwise, false.</returns>
      <param name="element">The element to capture the mouse.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</exception>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)">
      <summary>Captures mouse input to the specified element using the specified <see cref="T:System.Windows.Input.CaptureMode" />.</summary>
      <returns>true if the element was able to capture the mouse; otherwise, false.</returns>
      <param name="element">The element to capture the mouse..</param>
      <param name="captureMode">The capture policy to use.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="element" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="captureMode" /> is not a valid <see cref="T:System.Windows.Input.CaptureMode" />.</exception>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.Captured">
      <summary>Gets the <see cref="T:System.Windows.IInputElement" /> that is captured by the mouse. </summary>
      <returns>The element which is captured by the mouse.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.DirectlyOver">
      <summary>Gets the element that the mouse pointer is directly over. </summary>
      <returns>The element the mouse pointer is over.</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetButtonState(System.Windows.Input.MouseButton)">
      <summary>Gets the state of the specified mouse button.</summary>
      <returns>The state of the button.</returns>
      <param name="mouseButton">The button which is being queried.</param>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetClientPosition">
      <summary>Calculates the position of the mouse pointer, in client coordinates.</summary>
      <returns>The position of the mouse pointer, in client coordinates.</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetClientPosition(System.Windows.PresentationSource)">
      <summary>Calculates the position of the mouse pointer, in client coordinates, in the specified <see cref="T:System.Windows.PresentationSource" />.</summary>
      <returns>The position of the mouse pointer, in client coordinates, in the specified <see cref="T:System.Windows.PresentationSource" />.</returns>
      <param name="presentationSource">The source in which to obtain the mouse position.</param>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetPosition(System.Windows.IInputElement)">
      <summary>Gets the position of the mouse relative to a specified element.</summary>
      <returns>The position of the mouse relative to the parameter <paramref name="relativeTo" />.</returns>
      <param name="relativeTo">The frame of reference in which to calculate the position of the mouse.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="relativeTo" /> is null or is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />. </exception>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.GetScreenPosition">
      <summary>Calculates the screen position of the mouse pointer.</summary>
      <returns>The position of the mouse pointer.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.LeftButton">
      <summary>Gets the state of the left mouse button of this mouse device. </summary>
      <returns>The state of the button.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.MiddleButton">
      <summary> The state of the middle button of this mouse device. </summary>
      <returns>The state of the button.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.OverrideCursor">
      <summary>Gets or sets the cursor for the entire application. </summary>
      <returns>The override cursor or null if <see cref="P:System.Windows.Input.MouseDevice.OverrideCursor" /> is not set.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.RightButton">
      <summary>Gets the state of the right button of this mouse device. </summary>
      <returns>The state of the button.</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.SetCursor(System.Windows.Input.Cursor)">
      <summary>Sets the mouse pointer to the specified <see cref="T:System.Windows.Input.Cursor" /></summary>
      <returns>true if the mouse cursor is set; otherwise, false.</returns>
      <param name="cursor">The cursor to set the mouse pointer to.</param>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.Synchronize">
      <summary>Forces the mouse to resynchronize. </summary>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.Target">
      <summary>Gets the <see cref="T:System.Windows.IInputElement" /> that the input from this mouse device is sent to. </summary>
      <returns>The element that receives the input.</returns>
    </member>
    <member name="M:System.Windows.Input.MouseDevice.UpdateCursor">
      <summary>Forces the mouse cursor to update. </summary>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.XButton1">
      <summary>Gets the state of the first extended button on this mouse device. </summary>
      <returns>The state of the button.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseDevice.XButton2">
      <summary>Gets the state of the second extended button of this mouse device. </summary>
      <returns>The state of the button.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseEventArgs">
      <summary>Provides data for mouse related routed events that do not specifically involve mouse buttons or the mouse wheel, for example <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseEventArgs" /> class using the specified <see cref="T:System.Windows.Input.MouseDevice" /> and timestamp </summary>
      <param name="mouse">The mouse device associated with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.StylusDevice)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseEventArgs" /> class using the specified <see cref="T:System.Windows.Input.MouseDevice" />, timestamp, and <see cref="T:System.Windows.Input.StylusDevice" />.</summary>
      <param name="mouse">The mouse device associated with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
      <param name="stylusDevice">The logical stylus device associated with this event.</param>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.IInputElement)">
      <summary>Returns the position of the mouse pointer relative to the specified element.</summary>
      <returns>The x- and y-coordinates of the mouse pointer position relative to the specified object.</returns>
      <param name="relativeTo">The element to use as the frame of reference for calculating the position of the mouse pointer.</param>
    </member>
    <member name="M:System.Windows.Input.MouseEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.LeftButton">
      <summary>Gets the current state of the left mouse button.</summary>
      <returns>The current state of the left mouse button, which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> or <see cref="F:System.Windows.Input.MouseButtonState.Released" />.  There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.MiddleButton">
      <summary>Gets the current state of the middle mouse button.</summary>
      <returns>The current state of the middle mouse button, which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> or <see cref="F:System.Windows.Input.MouseButtonState.Released" />. There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.MouseDevice">
      <summary>Gets the mouse device associated with this event. </summary>
      <returns>The mouse device associated with this event.  There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.RightButton">
      <summary>Gets the current state of the right mouse button.</summary>
      <returns>The current state of the right mouse button, which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> or <see cref="F:System.Windows.Input.MouseButtonState.Released" />.  There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.StylusDevice">
      <summary>Gets the stylus device associated with this event.</summary>
      <returns>The stylus associated with this event.  There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.XButton1">
      <summary>Gets the current state of the first extended mouse button.</summary>
      <returns>The current state of the first extended mouse button, which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> or <see cref="F:System.Windows.Input.MouseButtonState.Released" />.  There is no default value.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseEventArgs.XButton2">
      <summary>Gets the state of the second extended mouse button.</summary>
      <returns>The current state of the second extended mouse button, which is either <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> or <see cref="F:System.Windows.Input.MouseButtonState.Released" />.  There is no default value.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseEventHandler">
      <summary>Represents the method that will handle mouse related routed events that do not specifically involve mouse buttons or the mouse wheel; for example, <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.MouseGesture">
      <summary>Defines a mouse input gesture that can be used to invoke a command.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGesture.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseGesture" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseGesture" /> class using the specified <see cref="T:System.Windows.Input.MouseAction" />.</summary>
      <param name="mouseAction">The action associated with this gesture.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="mouseAction" /> is not a valid <see cref="T:System.Windows.Input.MouseAction" /> value.</exception>
    </member>
    <member name="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseGesture" /> class using the specified <see cref="T:System.Windows.Input.MouseAction" /> and <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <param name="mouseAction">The action associated with this gesture.</param>
      <param name="modifiers">The modifiers associated with this gesture.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="mouseAction" /> is not a valid <see cref="T:System.Windows.Input.MouseAction" /> value-or-<paramref name="modifiers" /> is not a valid <see cref="T:System.Windows.Input.ModifierKeys" /> value.</exception>
    </member>
    <member name="M:System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
      <summary>Determines whether <see cref="T:System.Windows.Input.MouseGesture" /> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs" /> object.</summary>
      <returns>true if the event data matches this <see cref="T:System.Windows.Input.MouseGesture" />; otherwise, false.</returns>
      <param name="targetElement">The target.</param>
      <param name="inputEventArgs">The input event data to compare with this gesture.</param>
    </member>
    <member name="P:System.Windows.Input.MouseGesture.Modifiers">
      <summary>Gets or sets the modifier keys associated with this <see cref="T:System.Windows.Input.MouseGesture" />.</summary>
      <returns>The modifier keys associated with this gesture. The default value is <see cref="F:System.Windows.Input.ModifierKeys.None" />.</returns>
    </member>
    <member name="P:System.Windows.Input.MouseGesture.MouseAction">
      <summary>Gets or sets the <see cref="T:System.Windows.Input.MouseAction" /> associated with this gesture. </summary>
      <returns>The mouse action associated with this gesture. The default value is <see cref="F:System.Windows.Input.MouseAction.None" />.</returns>
    </member>
    <member name="T:System.Windows.Input.MouseGestureConverter">
      <summary>Converts a <see cref="T:System.Windows.Input.MouseGesture" /> object to and from other types.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseGestureConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.MouseGesture" />, using the specified context.</summary>
      <returns>true if <paramref name="sourceType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Windows.Input.MouseGesture" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if <paramref name="destinationType" /> is of type <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.MouseGesture" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="source">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> cannot be converter.</exception>
    </member>
    <member name="M:System.Windows.Input.MouseGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Windows.Input.MouseGesture" /> to the specified type, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="T:System.Windows.Input.MouseGestureValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseGestureValueSerializer" /> class. </summary>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <returns>Always returns true.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.Windows.Input.ModifierKeys" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The modifier keys to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Input.ModifierKeys" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.Windows.Input.ModifierKeys" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Input.MouseGestureValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Input.ModifierKeys" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.Windows.Input.ModifierKeys" />.</returns>
      <param name="value">The key to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Input.MouseWheelEventArgs">
      <summary>Provides data for various events that report changes to the mouse wheel delta value of a mouse device.</summary>
    </member>
    <member name="M:System.Windows.Input.MouseWheelEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> class. </summary>
      <param name="mouse">The mouse device associated with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
      <param name="delta">The amount the wheel has changed.</param>
    </member>
    <member name="P:System.Windows.Input.MouseWheelEventArgs.Delta">
      <summary>Gets a value that indicates the amount that the mouse wheel has changed.</summary>
      <returns>The amount the wheel has changed. This value is positive if the mouse wheel is rotated in an upward direction (away from the user) or negative if the mouse wheel is rotated in a downward direction (toward the user).  </returns>
    </member>
    <member name="M:System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
      <summary>Invokes event handlers in a type-specific way, which can increase event system efficiency.</summary>
      <param name="genericHandler">The generic handler to call in a type-specific way.</param>
      <param name="genericTarget">The target to call the handler on.</param>
    </member>
    <member name="T:System.Windows.Input.MouseWheelEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.UIElement.MouseWheel" /> and <see cref="E:System.Windows.ContentElement.MouseWheel" /> routed events, as well as related attached and Preview events. </summary>
      <param name="sender">The object where the event handler is attached.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.NavigationCommands">
      <summary>Provides a standard set of navigation-related commands.</summary>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.BrowseBack">
      <summary>Gets the value that represents the Browse Back command. </summary>
      <returns>The routed UI command.Default ValuesKey GestureALT+LEFTUI TextBack</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.BrowseForward">
      <summary>Gets the value that represents the Browse Forward command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureALT+RIGHTUI TextForward</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.BrowseHome">
      <summary>Gets the value that represents the Browse Home command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureALT+HOMEUI TextHome</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.BrowseStop">
      <summary>Gets the value that represents the Browse Stop command. </summary>
      <returns>The routed UI command.Default ValuesKey GestureALT+ESCUI TextStop</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.DecreaseZoom">
      <summary>Gets the value that represents the Decrease Zoom command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextDecrease Zoom</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.Favorites">
      <summary>Gets the value that represents the Favorites command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureCTRL+IUI TextFavorites</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.FirstPage">
      <summary>Gets the value that represents the First Page command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextFirst Page</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.GoToPage">
      <summary>Gets the value that represents the Go To Page command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextGo To Page</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.IncreaseZoom">
      <summary>Gets the value that represents the Increase Zoom command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextIncrease Zoom</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.LastPage">
      <summary>Gets the value that represents the Last Page command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextLast Page</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.NavigateJournal">
      <summary>Gets the value that represents the Navigate Journal command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextNavigation Journal</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.NextPage">
      <summary>Gets the value that represents the Next Page command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextNext Page</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.PreviousPage">
      <summary>Gets the value that represents the Previous Page command. </summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextPrevious Page</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.Refresh">
      <summary>Gets the value that represents the Refresh command. </summary>
      <returns>The routed UI command.Default ValuesKey GestureF5UI TextRefresh</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.Search">
      <summary>Gets the value that represents the Search command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureF3UI TextSearch</returns>
    </member>
    <member name="P:System.Windows.Input.NavigationCommands.Zoom">
      <summary>Gets the value that represents the Zoom command.</summary>
      <returns>The routed UI command.Default ValuesKey GestureN/AUI TextZoom</returns>
    </member>
    <member name="T:System.Windows.Input.NotifyInputEventArgs">
      <summary>Provides data for raw input being processed by the <see cref="P:System.Windows.Input.NotifyInputEventArgs.InputManager" />. </summary>
    </member>
    <member name="P:System.Windows.Input.NotifyInputEventArgs.InputManager">
      <summary>Gets the input manager processing the input event. </summary>
      <returns>The input manager.</returns>
    </member>
    <member name="P:System.Windows.Input.NotifyInputEventArgs.StagingItem">
      <summary>Gets the staging area input item being processed by the input manager. </summary>
      <returns>The staging area.</returns>
    </member>
    <member name="T:System.Windows.Input.NotifyInputEventHandler">
      <summary>Represents the method that will handle <see cref="E:System.Windows.Input.InputManager.PreNotifyInput" /> and <see cref="E:System.Windows.Input.InputManager.PostNotifyInput" /> events. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.PreProcessInputEventArgs">
      <summary>Provides data for preprocess input events. </summary>
    </member>
    <member name="M:System.Windows.Input.PreProcessInputEventArgs.Cancel">
      <summary>Cancels the processing of the input event. </summary>
    </member>
    <member name="P:System.Windows.Input.PreProcessInputEventArgs.Canceled">
      <summary>Determines whether processing of the input event was canceled. </summary>
      <returns>true if the processing was canceled; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Input.PreProcessInputEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.InputManager.PreProcessInput" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="T:System.Windows.Input.ProcessInputEventArgs">
      <summary>Provides data for postprocess input events. </summary>
    </member>
    <member name="M:System.Windows.Input.ProcessInputEventArgs.PeekInput">
      <summary>Gets, but does not pop, the input event on the top of the staging area stack.</summary>
      <returns>The input event that is on the top of the staging area stack. </returns>
    </member>
    <member name="M:System.Windows.Input.ProcessInputEventArgs.PopInput">
      <summary>Removes the input event off the top of the staging area stack. </summary>
      <returns>The input event that was on the top of the staging area stack. This will be null if the staging area is empty.</returns>
    </member>
    <member name="M:System.Windows.Input.ProcessInputEventArgs.PushInput(System.Windows.Input.InputEventArgs,System.Windows.Input.StagingAreaInputItem)">
      <summary>Puts the specified input event onto the top of the specified staging area stack. </summary>
      <returns>The staging area input item that wraps the specified input.</returns>
      <param name="input">The input event to put on the staging area stack.</param>
      <param name="promote">An existing staging area item to promote the state from.</param>
    </member>
    <member name="M:System.Windows.Input.ProcessInputEventArgs.PushInput(System.Windows.Input.StagingAreaInputItem)">
      <summary>Puts the specified input event onto the top of the staging area stack. </summary>
      <returns>The staging area input item.</returns>
      <param name="input">The input event to put o