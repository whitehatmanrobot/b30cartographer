
VIDEO_FORMAT_IMAGE_SIZE_640_480{\v VIDEO_FORMAT_IMAGE_SIZE_640_480}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_IMAGE_SIZE_64_48{\v VIDEO_FORMAT_IMAGE_SIZE_64_48}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_IMAGE_SIZE_80_60{\v VIDEO_FORMAT_IMAGE_SIZE_80_60}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_IMAGE_SIZE_96_64{\v VIDEO_FORMAT_IMAGE_SIZE_96_64}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_INTELH261{\v VIDEO_FORMAT_INTELH261}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_INTELH263{\v VIDEO_FORMAT_INTELH263}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_IV32{\v VIDEO_FORMAT_IV32}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_MRLE{\v VIDEO_FORMAT_MRLE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_MSH261{\v VIDEO_FORMAT_MSH261}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_MSH263{\v VIDEO_FORMAT_MSH263}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_MSVC{\v VIDEO_FORMAT_MSVC}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_16{\v VIDEO_FORMAT_NUM_COLORS_16}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_16777216{\v VIDEO_FORMAT_NUM_COLORS_16777216}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_256{\v VIDEO_FORMAT_NUM_COLORS_256}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_65536{\v VIDEO_FORMAT_NUM_COLORS_65536}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_I420{\v VIDEO_FORMAT_NUM_COLORS_I420}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_IYUV{\v VIDEO_FORMAT_NUM_COLORS_IYUV}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_M261{\v VIDEO_FORMAT_NUM_COLORS_M261}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_M263{\v VIDEO_FORMAT_NUM_COLORS_M263}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_UYVY{\v VIDEO_FORMAT_NUM_COLORS_UYVY}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_YUY2{\v VIDEO_FORMAT_NUM_COLORS_YUY2}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_COLORS_YVU9{\v VIDEO_FORMAT_NUM_COLORS_YVU9}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_NUM_IMAGE_SIZE{\v VIDEO_FORMAT_NUM_IMAGE_SIZE}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_UNKNOWN{\v VIDEO_FORMAT_UNKNOWN}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_VDEC{\v VIDEO_FORMAT_VDEC}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEO_FORMAT_YVU9{\v VIDEO_FORMAT_YVU9}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMCameraControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::Get{\v CTAPIVCap__Get}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetRange{\v CTAPIVCap__GetRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::Set{\v CTAPIVCap__Set}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMCameraControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMCrossbar methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMCrossbar structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMVfwCaptureDialogs methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CVfWCapDev::HasDialog{\v CVfWCapDev__HasDialog}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CVfWCapDev::SendDriverMessage{\v CVfWCapDev__SendDriverMessage}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CVfWCapDev::ShowDialog{\v CVfWCapDev__ShowDialog}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMVfwCaptureDialogs structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMVideoControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetCaps{\v CTAPIBasePin__GetCaps}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetCurrentActualFrameRate{\v CTAPIBasePin__GetCurrentActualFrameRate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetFrameRateList{\v CTAPIBasePin__GetFrameRateList}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetMaxAvailableFrameRate{\v CTAPIBasePin__GetMaxAvailableFrameRate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetMode{\v CTAPIBasePin__GetMode}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::SetMode{\v CTAPIBasePin__SetMode}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetCaps{\v CTAPIVCap__GetCaps}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetCurrentActualFrameRate{\v CTAPIVCap__GetCurrentActualFrameRate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetFrameRateList{\v CTAPIVCap__GetFrameRateList}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetMaxAvailableFrameRate{\v CTAPIVCap__GetMaxAvailableFrameRate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetMode{\v CTAPIVCap__GetMode}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::SetMode{\v CTAPIVCap__SetMode}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMVideoControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
VideoControlFlags{\v VideoControlFlags}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMVideoProcAmp methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::Get{\v CTAPIVCap__Get_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetRange{\v CTAPIVCap__GetRange_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::Set{\v CTAPIVCap__Set_1}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMVideoProcAmp structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IBitrateControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IBitrateControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ICPUControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetCurrentCPULoad{\v CTAPIBasePin__GetCurrentCPULoad}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetCurrentProcessingTime{\v CTAPIBasePin__GetCurrentProcessingTime}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetMaxCPULoad{\v CTAPIBasePin__GetMaxCPULoad}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetMaxCPULoadRange{\v CTAPIBasePin__GetMaxCPULoadRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetMaxProcessingTime{\v CTAPIBasePin__GetMaxProcessingTime}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetMaxProcessingTimeRange{\v CTAPIBasePin__GetMaxProcessingTimeRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::SetMaxCPULoad{\v CTAPIBasePin__SetMaxCPULoad}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::SetMaxProcessingTime{\v CTAPIBasePin__SetMaxProcessingTime}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ICPUControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IFrameRateControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetCurrentFrameRate{\v CTAPIBasePin__GetCurrentFrameRate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetMaxFrameRate{\v CTAPIBasePin__GetMaxFrameRate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::GetMaxFrameRateRange{\v CTAPIBasePin__GetMaxFrameRateRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIBasePin::SetMaxFrameRate{\v CTAPIBasePin__SetMaxFrameRate}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IFrameRateControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IH245EncoderCommand methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IH245EncoderCommand structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
VIDEOFASTUPDATEGOB_S{\v VIDEOFASTUPDATEGOB_S}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEOFASTUPDATEMB_S{\v VIDEOFASTUPDATEMB_S}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VIDEONOTDECODEDMBS_S{\v VIDEONOTDECODEDMBS_S}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IH245VideoCapability methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::FindIDByRange{\v CTAPIVCap__FindIDByRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetFormatTable{\v CTAPIVCap__GetFormatTable}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetH245VersionID{\v CTAPIVCap__GetH245VersionID}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetLocalFormat{\v CTAPIVCap__GetLocalFormat}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetNegotiatedLimitProperty{\v CTAPIVCap__GetNegotiatedLimitProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::IntersectFormats{\v CTAPIVCap__IntersectFormats}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::ReleaseFormatTable{\v CTAPIVCap__ReleaseFormatTable}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::ReleaseNegotiatedCapability{\v CTAPIVCap__ReleaseNegotiatedCapability}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::SetIDBase{\v CTAPIVCap__SetIDBase}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IH245VideoCapability structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 INetworkStats methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::GetChannelErrors{\v CCapturePin__GetChannelErrors}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::GetChannelErrorsRange{\v CCapturePin__GetChannelErrorsRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::GetPacketLossRate{\v CCapturePin__GetPacketLossRate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::GetPacketLossRateRange{\v CCapturePin__GetPacketLossRateRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::SetChannelErrors{\v CCapturePin__SetChannelErrors}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::SetPacketLossRate{\v CCapturePin__SetPacketLossRate}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 INetworkStats structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IProgressiveRefinement methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::doContinuousIndependentProgressions{\v CCapturePin__doContinuousIndependentProgressions}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::doContinuousProgressions{\v CCapturePin__doContinuousProgressions}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::doOneIndependentProgression{\v CCapturePin__doOneIndependentProgression}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::doOneProgression{\v CCapturePin__doOneProgression}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::progressiveRefinementAbortContinuous{\v CCapturePin__progressiveRefinementAbortContinuous}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCapturePin::progressiveRefinementAbortOne{\v CCapturePin__progressiveRefinementAbortOne}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IProgressiveRefinement structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IRTPPDControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IRTPPDControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IVideoDeviceControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetCurrentDevice{\v CTAPIVCap__GetCurrentDevice}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetDeviceInfo{\v CTAPIVCap__GetDeviceInfo}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::GetNumDevices{\v CTAPIVCap__GetNumDevices}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVCap::SetCurrentDevice{\v CTAPIVCap__SetCurrentDevice}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IVideoDeviceControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Modules\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
BasePin.cpp{\v BasePin.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
BasePin.h{\v BasePin.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Bitrate.cpp{\v Bitrate.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CameraC.cpp{\v CameraC.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CameraCP.cpp{\v CameraCP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CameraCP.h{\v CameraCP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CameraCS.cpp{\v CameraCS.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Capture.cpp{\v Capture.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Capture.h{\v Capture.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CaptureP.cpp{\v CaptureP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CaptureP.h{\v CaptureP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Convert.cpp{\v Convert.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPUC.cpp{\v CPUC.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPUCP.cpp{\v CPUCP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPUCP.h{\v CPUCP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
DevEnum.cpp{\v DevEnum.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
DevEnum.h{\v DevEnum.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Device.cpp{\v Device.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
DeviceP.cpp{\v DeviceP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
DeviceV.cpp{\v DeviceV.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
DeviceW.cpp{\v DeviceW.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Formats.cpp{\v Formats.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Formats.h{\v Formats.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
FpsRate.cpp{\v FpsRate.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
H245VidC.cpp{\v H245VidC.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
H245VidE.cpp{\v H245VidE.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
KSEditor.cpp{\v KSEditor.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
KSEditor.h{\v KSEditor.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
NetStatP.cpp{\v NetStatP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
NetStatP.h{\v NetStatP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
NetStats.cpp{\v NetStats.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Overlay.cpp{\v Overlay.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Overlay.h{\v Overlay.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Precomp.h{\v Precomp.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Preview.cpp{\v Preview.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Preview.h{\v Preview.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PreviewP.cpp{\v PreviewP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PreviewP.h{\v PreviewP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProcAmp.cpp{\v ProcAmp.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProcAmpP.cpp{\v ProcAmpP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProcAmpP.h{\v ProcAmpP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProgRef.cpp{\v ProgRef.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProgRefP.cpp{\v ProgRefP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProgRefP.h{\v ProgRefP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
RtpPd.cpp{\v RtpPd.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
RtpPd.h{\v RtpPd.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
RtpPdP.cpp{\v RtpPdP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
RtpPdP.h{\v RtpPdP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAPIVCap.cpp{\v TAPIVCap.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAPIVCap.h{\v TAPIVCap.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Thunk.c{\v Thunk.c_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Thunk.c{\v Thunk.c}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VfWDlgs.cpp{\v VfWDlgs.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VidCtrl.cpp{\v VidCtrl.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
WDMDialg.cpp{\v WDMDialg.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
WDMDialg.h{\v WDMDialg.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
WrkrThd.cpp{\v WrkrThd.cpp}\par 

\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module BasePin.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIBasePin}
 class methods 
used to implement the TAPI base output pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module BasePin.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CTAPIBasePin}
 class methods 
used to implement the TAPI base output pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Bitrate.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BITRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIBasePin}
 class methods 
used to implement the output pin bitrate control.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CameraC.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERAC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVCap}
 
class methods used to implement the {\b IAMCameraControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This class does everything in software. When the same kind of 
services are supported in the capture device, use them.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CameraCP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CCameraControlProperty}
 
class used to implement a property page to test the DShow interface 
{\b IAMCameraControl}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IAMCameraControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CameraCP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CCameraControlProperty}
 
class used to implement a property page to test the DShow interface 
{\b IAMCameraControl}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IAMCameraControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CameraCS.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIBasePin}
 class methods 
used to implement the software-only camera control functions.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Capture.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTURE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CCapturePin}
 class methods 
used to implement the video capture output pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Capture.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTURE.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CCapturePin}
 class methods 
used to implement the video capture output pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CaptureP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source ile for the {\b CCaptureProperty}
 
class used to implement a property page to test the new TAPI internal 
interfaces {\b IBitrateControl}, {\b IFrameRateControl}, and dynamic 
format changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b IBitrateControl}, 
{\b IFrameRateControl}, and dynamic format change implementation. This 
code is only compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CaptureP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CCaptureProperty}
 
class used to implement a property page to test the new TAPI internal 
interfaces {\b IBitrateControl}, {\b IFrameRateControl}, and dynamic 
format changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b IBitrateControl}, 
{\b IFrameRateControl}, and dynamic format change implementation. This 
code is only compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Convert.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CONVERT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CPreviewPin}
 class methods 
used to implement the video capture and preview pin format conversion 
routines.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Merge the two ScaleDIB methods\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CPUC.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIBasePin}
 class methods 
used to implement CPU control.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CPUCP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source ile for the {\b CCPUCProperty}
 
class used to implement a property page to test the new TAPI internal 
interface {\b ICPUControl}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Output Pins {\b ICPUControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CPUCP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CCPUCProperty}
 
class used to implement a property page to test the new TAPI internal 
interfaces {\b ICPUControl}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Output Pins {\b ICPUControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module DevEnum.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVENUM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVCap}
 class methods 
used to implement the {\b IVideoDeviceControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Checked in code should always have the following line commented 
#define WDM_DEVICES_ONLY 1\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module DevEnum.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVENUM.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Our Devenum exports.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Device.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CCapDev}
 
base class used to communicate with the capture device.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module DeviceP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CDeviceProperties}
 
class used to implement a property page to test the {\b IAMVfwCaptureDialogs} 
and {\b IVideoDeviceControl} interfaces.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IVideoDeviceControl} 
and {\b IAMVfwCaptureDialogs} implementations. This code is only compiled 
if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module DeviceV.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CVfWCapDev}
 
base class used to communicate with a VfW capture device.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module DeviceW.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CWDMCapDev}
 
base class used to communicate with a WDM capture device.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove this before checkin! 
#define DUMP_DRIVER_CHARACTERISTICS 1\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Formats.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIBasePin}
 
class methods used to implement the video capture and preview output 
pin format manipulation methods. This includes the {\b IAMStreamConfig} 
interface methods.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Formats.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CCapturePin}
 and {\b CPreviewPin}
 
class methods used to implement the video capture and preview output 
pin format manipulations. This includes the {\b IAMStreamConfig} 
interface methods.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 That'a whole lot of static data. Do this dynamically whenever 
appropriate.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Switch to the new format definition when done with the decoder\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Document this structure\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Document this structure\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Document this structure\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Document this structure\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Why isn't this 33333?\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module FpsRate.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FPSRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIBasePin}
 and {\b CPreviewPin}
 
class methods used to implement the video capture and preview output 
pins frame rate control methods.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module H245VidC.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVCap}
 class methods 
used to implement the {\b IH245VideoCapability} TAPI inteface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module H245VidE.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CCapturePin}
 class methods 
used to implement the video capture output pin H.245 encoder command 
methods.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module KSEditor.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CKSPropertyEditor}
 
class used to implement behavior of a single property to be displayed 
in a property page.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the Ks interface handlers. This code is only 
compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module KSEditor.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CKSPropertyEditor}
 
class used to implement behavior of a single property to be displayed 
in a property page.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the Ks interface handlers. This code is only 
compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module NetStatP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CNetworkStatsProperty}
 
class used to implement a property page to test the new TAPI internal 
interface {\b INetworkStats}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b INetworkStats} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module NetStatP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CNetworkStatsProperty}
 
class used to implement a property page to test the new TAPI internal 
interface {\b INetworkStats}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b INetworkStats} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module NetStats.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CCapturePin}
 class methods 
used to implement the video capture output pin network statistics 
methods.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Overlay.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b COverlayPin}
 class methods 
used to implement the video overlay pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Overlay.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b COverlayPin}
 class methods 
used to implement the video overlay output pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Precomp.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PRECOMP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Master header file.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Preview.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CPreviewPin}
 class methods 
used to implement the video capture preview pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Preview.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEW.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CPreviewPin}
 class methods 
used to implement the video preview output pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module PreviewP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CPreviewProperty}
 
class used to implement a property page to test the new TAPI internal 
interface {\b IFrameRateControl} and dynamic format changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Preview Pin {\b IFrameRateControl}, 
and dynamic format change implementation. This code is only compiled 
if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module PreviewP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CPreviewProperty}
 
class used to implement a property page to test the new TAPI internal 
interface {\b IFrameRateControl} and dynamic format changes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Preview Pin {\b IFrameRateControl}, 
and dynamic format change implementation. This code is only compiled 
if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProcAmp.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVCap}
 
class methods used to implement the {\b IAMVideoProcAmp} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProcAmpP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CProcAmpProperty}
 
class used to implement a property page to test the DShow interface 
{\b IAMVideoProcAmp}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IAMVideoProcAmp} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProcAmpP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CProcAmpProperty}
 
class used to implement a property page to test the DShow interface 
{\b IAMVideoProcAmp}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IAMVideoProcAmp} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProgRef.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREF.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CCapturePin}
 class methods 
used to implement the video capture output pin progressive refinement 
methods.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Understand how to make this work on a still-pin\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProgRefP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CProgRefProperties}
 
class used to implement a property page to test the new TAPI internal 
interface {\b IProgressiveRefinement}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b IProgressiveRefinement} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProgRefP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CProgRefProperties}
 
class used to implement a property page to test the new TAPI internal 
interface {\b IProgressiveRefinement}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b IProgressiveRefinement} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module RtpPd.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CRtpPdPin}
 class methods 
used to implement the RTP packetization descriptor pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module RtpPd.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CRtpPdPin}
 class methods 
used to implement the RTP packetization descriptor output pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module RtpPdP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CRtpPdProperty}
 
class used to implement a property page to test the new TAPI internal 
interfaces {\b IRTPPDControl}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Rtp Pd Output Pins {\b IRTPPDControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module RtpPdP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CRtpPdProperty}
 
class used to implement a property page to test the new TAPI internal 
interfaces {\b IRTPPDControl}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Rtp Pd Output Pins {\b IRTPPDControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module TAPIVCap.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b VCfWCapture}
 
class used to implement the TAPI VfW Capture Source filter.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module TAPIVCap.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b VCfWCapture}
 
class used to implement the TAPI VfW Capture Source filter.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Thunk.c\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDEO.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the VfW video API.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Thunk.c\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for thunking to 16-bit code without using 
the thunk compiler.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module VfWDlgs.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VFWDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CVfWCapDev}
 
class methods used to implement the {\b IAMVfwCaptureDialogs} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module VidCtrl.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVCap}
 
class methods used to implement the {\b IAMVideoControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module WDMDialg.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for {\b CWDMDialog}
 class used to display 
video settings and camera controls dialog for WDM devices.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code is based on the VfW to WDM mapper code written by 
FelixA and E-zu Wu. The original code can be found on 
\\redrum\\slmro\\proj\\wdm10\\src\\image\\vfw\\win9x\\raytube.\par 

Documentation by George Shaw on kernel streaming can be found in 
\\popcorn\\razzle1\\src\\spec\\ks\\ks.doc.\par 

WDM streaming capture is discussed by Jay Borseth in 
\\blues\\public\\jaybo\\WDMVCap.doc.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module WDMDialg.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Include file for {\b CWDMDialog}
 class used to display 
video settings and camera controls dialog for WDM devices.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code is based on the VfW to WDM mapper code written by 
FelixA and E-zu Wu. The original code can be found on 
\\redrum\\slmro\\proj\\wdm10\\src\\image\\vfw\\win9x\\raytube.\par 

Documentation by George Shaw on kernel streaming can be found in 
\\popcorn\\razzle1\\src\\spec\\ks\\ks.doc.\par 

WDM streaming capture is discussed by Jay Borseth in 
\\blues\\public\\jaybo\\WDMVCap.doc.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module WrkrThd.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVCap}
 class methods 
used to implement the video capture worker thread.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCameraControlProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class runs a property page to test 
the TAPI VfW Capture Filter {\b IAMCameraControl} implementation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::CCameraControlProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCameraControlProperties}{\b ::CCameraControlProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CCameraControlProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a Network Statistics 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::m_Controls[NUM_CAMERA_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCameraControlProperty * CCameraControlProperties::m_Controls[NUM_CAMERA_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of camera control properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IAMCameraControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CCameraControlProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::m_pIAMCameraControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IAMCameraControl * CCameraControlProperties::m_pIAMCameraControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IAMCameraControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CCameraControlProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CCameraControlProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::~CCameraControlProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCameraControlProperties}{\b ::~CCameraControlProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for camera control property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCameraControlProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single camera control property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::CCameraControlProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCameraControlProperty}{\b ::CCameraControlProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , IAMCameraControl*} {\i pInterface}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for camera control property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
a pointer to the {\b IAMCameraControl} interface.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property progress bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInterface}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b IAMCameraControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CCameraControlProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IAMCameraControl * CCameraControlProperty::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IAMCameraControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IAMCameraControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::~CCameraControlProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCameraControlProperty}{\b ::~CCameraControlProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for camera control property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapDev::CCapDev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCapDev}{\b ::CCapDev(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the constructor 
for the {\b CCapDev}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapDev::GetFormatsFromRegistry\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapDev}{\b ::GetFormatsFromRegistry(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve from the registry the list of formats supported by the 
capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 If this is a QuickCam device you may have to use a hardcoded 
palette instead of the one provided by the device\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapDev::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapDev}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IAMVfWCaptureDialogs}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapDev::ProfileCaptureDevice\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapDev}{\b ::ProfileCaptureDevice(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine the list of formats supported by the capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If there is no entry for the VfW capture device in the list 
maintained by the TAPI MSP Video Capture filter, the TAPI MSP Video 
Capture filter will first query the capture device for its current 
video capture format, and save this information in case the following 
steps result in a crash.\par 

Then, the TAPI MSP Video Capture filter applies a set of preferred 
formats on the capture device using SendDriverMessage with the 
DVM_FORMAT message. For each applied format, the TAPI MSP Video 
Capture filter will not only verify the return code of the 
SendDriverMessage, but also query back the current format to make 
sure the set format operation really succeeded. If the capture device 
fails one of the two previous steps, the TAPI MSP Video Capture 
filter will assume that the format is not supported. Once the TAPI 
MSP Video Capture filter is done with the entire list of preferred 
formats and no crash occurred, the list of video formats supported by 
the capture device is added to the list maintained by the TAPI MSP 
Video Capture filter.\par 

As soon as the enumeration process succeeds for one "small" (128x96 
or 160x120), one "medium" (176x144 or 160x120), one "large" (352x288 
or 320x240) and one "very large" size (704x576 or 640x480), the TAPI 
MSP Video Capture filter stops the enumeration process and adds the 
resulting list of formats to its database. The TAPI MSP Video Capture 
filter will test the previous sizes for I420, IYUV, YUY2, UYVY, YVU9, 
RGB16, RGB24, RGB8, and RGB4 formats, in this described order.\par 

The device will also be marked as a frame-grabbing device in the TAPI 
MSP Video Capture filter device database.\par 

If there is an entry for the VfW capture device in the list maintained 
by the TAPI MSP Video Capture filter, the TAPI MSP Video Capture 
filter first verifies if the information contained is a complete list 
of supported formats, or only a default format. The entry will only 
contain a default format if the capture device did not support any of 
the preferred formats, or a crash occurred during the enumeration process.\par 

If there is only a default format stored for the VfW capture device, 
the TAPI MSP Video Capture filter will build a list of media types that 
can be built from the default format using black-banding and/or cropping. 
If the default format is in a compressed format, the TAPI MSP Video 
Capture filter will try and locate and ICM driver that can do the 
decompression from the compressed format to RGB.\par 

If the device supports a list of formats from the preferred list of 
formats, the TAPI MSP Video Capture filter will use this list to 
advertise the capabilities of the capture device.\par 

In all cases (VfW and WDM capture devices, Videoconferencing 
Accelerators), the TAPI MSP Video Capture filter won't query the 
device for capabilities but always use the list of formats stored in 
its database for this capture device.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 VCMSTRM.cpp does some weird shit with the name - probably due to bogus device 
Repro this code\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 For now, get all the formats supported 
break;\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapDev::~CCapDev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCapDev}{\b ::~CCapDev(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CCapDev}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCapturePin}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the video capture output pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTURE.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::CCapturePin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::CCapturePin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
constructorfor the {\b CCapturePin}
 object\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTURE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 With WDM, these numbers need to come from the device\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::CreateCapturePin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CCapturePin*} {\b CCapturePin}{\b ::CreateCapturePin(}{\b CTAPIVCap*} {\i pCaptureFilter}{\b , CCapturePin**} {\i ppCapturePin}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This helper 
function creates a video output pin for capture.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTURE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCaptureFilter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the owner 
filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppCapturePin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that address of a pointer 
to a {\b CCapturePin}
 object to receive the a pointer to the newly 
created pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::doContinuousIndependentProgressions\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::doContinuousIndependentProgressions(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to command the compressed still-image output pin to 
begin an independent progressive refinement sequence several Intra 
pictures.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREF.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::doContinuousProgressions\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::doContinuousProgressions(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to command the compressed still-image output pin to 
begin producing progressive refinement sequences for several pictures.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREF.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::doOneIndependentProgression\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::doOneIndependentProgression(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to command the compressed still-image output pin to begin 
an independent progressive refinement sequence for one Intra picture.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREF.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::doOneProgression\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::doOneProgression(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to command the compressed still-image output pin to 
begin producing a progressive refinement sequence for one picture.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREF.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::GetChannelErrors\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::GetChannelErrors(}{\b CHANNELERRORS_S*} {\i pChannelErrors}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to supply to the network sink filter the error channel 
conditions an output pin is currently setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pChannelErrors}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
structure to receive error channel conditions.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::GetChannelErrorsRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::GetChannelErrorsRange(}{\b CHANNELERRORS_S*} {\i pMin}{\b , CHANNELERRORS_S*} {\i pMax}{\b , CHANNELERRORS_S*} {\i pSteppingDelta}{\b , CHANNELERRORS_S*} {\i pDefault}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve support, minimum, maximum, and default values 
for the channel error conditions an output pin may be setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum values of 
channel error conditions an output pin maybe setup for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum values of 
channel error conditions an output pin may be setup for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping 
delta values of channel error conditions an output pin may be setup for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default values 
of channel error conditions an output pin may be setup for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::GetPacketLossRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::GetPacketLossRate(}{\b LPDWORD} {\i pdwPacketLossRate}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to supply to the network sink filter the packet loss rate 
channel conditions an output pin is currently setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwPacketLossRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD to 
receive the packet loss rate of the channel an audio output pin is 
currently setup for, in multiples of 10-6.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::GetPacketLossRateRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::GetPacketLossRateRange(}{\b LPDWORD} {\i pdwMin}{\b , LPDWORD} {\i pdwMax}{\b , LPDWORD} {\i pdwSteppingDelta}{\b , LPDWORD} {\i pdwDefault}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve support, minimum, maximum, and default values 
for the packet loss rate conditions an output pin may be setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum packet loss rate 
an output pin may be setup for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum packet loss rate 
an output pin may be setup for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta 
values of packet loss rate an output pin may be setup for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default packet loss 
rate an output pin is setup for.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::GetPages\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::GetPages(}{\b CAUUID*} {\i pPages}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method Fills a counted 
array of GUID values where each GUID specifies the CLSID of each 
property page that can be displayed in the property sheet for this 
object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTURE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_OUTOFMEMORY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocation failed\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a caller-allocated CAUUID 
structure that must be initialized and filled before returning. The 
pElems field in the CAUUID structure is allocated by the callee with 
CoTaskMemAlloc and freed by the caller with CoTaskMemFree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Make sure this is effectively freed at some point\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::m_pCaptureFilter\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CTAPIVCap* CCapturePin::m_pCaptureFilter}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reference to the 
parent capture filter.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Supports IPin. Never created by COM, so no CreateInstance or entry 
in global FactoryTemplate table. Only ever created by a {\b CTAPIVCap}
 
object and returned via the EnumPins interface\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IAMStreamConfig}, 
{\b IAMStreamControl}, {\b ICPUControl}, {\b IFrameRateControl}, 
{\b IBitrateControl}, {\b INetworkStats}, {\b IH245EncoderCommand} 
and {\b IProgressiveRefinement}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTURE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::progressiveRefinementAbortContinuous\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::progressiveRefinementAbortContinuous(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to command the compressed still-image output pin to 
terminate a progressive refinement sequence for all pictures.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREF.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::progressiveRefinementAbortOne\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::progressiveRefinementAbortOne(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to command the compressed still-image output pin to 
terminate a progressive refinement sequence for the current picture.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREF.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::SetChannelErrors\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::SetChannelErrors(}{\b CHANNELERRORS_S*} {\i pChannelErrors}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to inform the compressed output pin of the error channel 
conditions.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pChannelErrors}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the error channel 
conditions.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::SetPacketLossRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::SetPacketLossRate(}{\b DWORD} {\i dwPacketLossRate}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to inform an output pin of the channel packet loss rate.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_CONNECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Pin not connected yet\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwPacketLossRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the packet loss rate of the 
channel in multiples of 10-6.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::videoFastUpdateGOB\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::videoFastUpdateGOB(}{\b DWORD} {\i dwFirstGOB}{\b , DWORD} {\i dwNumberOfGOBs}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the compressed video output pin to 
perform a fast update of one or more GOBs.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFirstGOB}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the first GOB to be 
updated. This value is only valid between 0 and 17.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwNumberOfGOBs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of GOBs to be 
updated. This value is only valid between 1 and 18.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::videoFastUpdateMB\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::videoFastUpdateMB(}{\b DWORD} {\i dwFirstGOB}{\b , DWORD} {\i dwFirstMB}{\b , DWORD} {\i dwNumberOfMBs}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the compressed video output pin to 
perform a fast update of one or more GOBs.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFirstGOB}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the first GOB to be 
updated and is only relative to H.263. This value is only valid 
between 0 and 255.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFirstMB}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the first MB to be 
updated and is only relative to H.261. This value is only valid 
between 1 and 8192.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwNumberOfMBs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of MBs to be updated. 
This value is only valid between 1 and 8192.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::videoFastUpdatePicture\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::videoFastUpdatePicture(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the compressed video output pin to enter 
the fast-update picture mode at its earliest opportunity.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::videoNotDecodedMBs\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::videoNotDecodedMBs(}{\b DWORD} {\i dwFirstMB}{\b , DWORD} {\i dwNumberOfMBs}{\b , DWORD} {\i dwTemporalReference}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to indicate to the compressed video output pin that a 
set of MBs has been received with errors and that any MB in the 
specified set has been treated as not coded.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFirstMB}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the first MB 
treated as not coded. This value is only valid between 1 and 8192.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwNumberOfMBs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of MBs treated as not 
coded. This value is only valid between 1 and 8192.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwTemporalReference}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the temporal reference of 
the picture containing not decoded MBs. This value is only valid 
between 0 and 255.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::videoSendSyncEveryGOB\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCapturePin}{\b ::videoSendSyncEveryGOB(}{\b BOOL} {\i fEnable}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the compressed video output pin to use 
sync for every GOB as defined in H.263.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fEnable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If set to TRUE, specifies that the video 
output pin should use sync for every GOB; if set to FALSE, specifies 
that the video output pin should decide the frequency of GOB syncs on 
its own.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCapturePin::~CCapturePin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCapturePin}{\b ::~CCapturePin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CCapturePin}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTURE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCaptureProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements a property page 
to test the new TAPI internal interfaces {\b IBitrateControl} and 
{\b IFrameRateControl}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::CCaptureProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCaptureProperties}{\b ::CCaptureProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CCaptureProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a TAPI Capture Pin 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::InitialRangeScan\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperties}{\b ::InitialRangeScan(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the list of supported formats on the pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::m_Controls[NUM_CAPTURE_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCaptureProperty* CCaptureProperties::m_Controls[NUM_CAPTURE_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of capture properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b IBitrateControl}, 
{\b IFrameRateControl}, and dynamic format change implementation. This 
code is only compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CCaptureProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IFrameRateControl* CCaptureProperties::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IFrameRateControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IBitrateControl* CCaptureProperties::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IBitrateControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the current media format used by the pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::OnFormatChanged\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperties}{\b ::OnFormatChanged(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the format selected by the user.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CCaptureProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CCaptureProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperties::~CCaptureProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCaptureProperties}{\b ::~CCaptureProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for the capture pin property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCaptureProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single capture property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::CCaptureProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCaptureProperty}{\b ::CCaptureProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , IBitrateControl*} {\i pIBitrateControl}{\b , IFrameRateControl*} {\i pIFrameRateControl}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for bitrate and frame rate property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
pointers to the {\b IBitrateControl} and {\b IFrameRateControl} interfaces.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIBitrateControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b IBitrateControl} interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIFrameRateControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b IFrameRateControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::GetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperty}{\b ::GetAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CCaptureProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::m_pIBitrateControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IBitrateControl* CCaptureProperty::m_pIBitrateControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IBitrateControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::m_pIFrameRateControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IFrameRateControl* CCaptureProperty::m_pIFrameRateControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IFrameRateControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b IBitrateControl}, 
{\b IFrameRateControl}, and dynamic format change implementation. This 
code is only compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCaptureProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCaptureProperty::~CCaptureProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCaptureProperty}{\b ::~CCaptureProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for capture property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAPTUREP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCPUCProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements a property page 
to test the new TAPI internal interfaces {\b ICPUControl}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::CCPUCProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCPUCProperties}{\b ::CCPUCProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CCPUCProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a TAPI CPU Control 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::m_Controls[NUM_CPUC_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCPUCProperty* CCPUCProperties::m_Controls[NUM_CPUC_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of CPU control properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Output Pins {\b ICPUControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CCPUCProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ICPUControl* CCPUCProperties::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b ICPUControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CCPUCProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CCPUCProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperties::~CCPUCProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCPUCProperties}{\b ::~CCPUCProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for the capture pin property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCPUCProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single CPU control property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::CCPUCProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCPUCProperty}{\b ::CCPUCProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , ICPUControl*} {\i pICPUControl}{\b , IFrameRateControl*} {\i pIFrameRateControl}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for bitrate and frame rate property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
pointers to the {\b ICPUControl} and {\b IFrameRateControl} interfaces.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pICPUControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b ICPUControl} interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIFrameRateControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b IFrameRateControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::GetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperty}{\b ::GetAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CCPUCProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::m_pICPUControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ICPUControl* CCPUCProperty::m_pICPUControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b ICPUControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Output Pins {\b ICPUControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCPUCProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCPUCProperty::~CCPUCProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCPUCProperty}{\b ::~CCPUCProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for CPU control property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUCP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CDeviceProperties::CDeviceProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CDeviceProperties}{\b ::CDeviceProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CDeviceProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CDeviceProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a Capture Device 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CDeviceProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CDeviceProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CDeviceProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CDeviceProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CDeviceProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CDeviceProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CDeviceProperties::~CDeviceProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CDeviceProperties}{\b ::~CDeviceProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for capture device property page. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CKSPropertyEditor}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements behavior of a single 
property to be displayed in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::CKSPropertyEditor\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CKSPropertyEditor}{\b ::CKSPropertyEditor(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for Ks property objects.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
progress bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::GetAutoHWnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b CKSPropertyEditor}{\b ::GetAutoHWnd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helper method to allow 
the property page code to access the auto window (private member) of 
a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the auto window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::GetEditHWnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b CKSPropertyEditor}{\b ::GetEditHWnd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helper method to allow 
the property page code to access the Target window (private member) of 
a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the Target window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::GetProgressHWnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b CKSPropertyEditor}{\b ::GetProgressHWnd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helper method to allow 
the property page code to access the progress bar window (private member) of 
a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the progress window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::GetTrackbarHWnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b CKSPropertyEditor}{\b ::GetTrackbarHWnd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helper method to allow 
the property page code to access the slide bar window (private member) of 
a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the slide bar window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::HasChanged\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CKSPropertyEditor}{\b ::HasChanged(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This member tests for a 
change in value.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if value has changed.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::Init\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::Init(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This initializes the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 TRUE on success, FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_Active\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CKSPropertyEditor::m_Active}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE after all KS property  values have been initialized\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_CurrentValue\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CKSPropertyEditor::m_CurrentValue}\par
\pard\plain \sa160\sl240 \fs21\lang1033 KS property current value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_DefaultValue\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CKSPropertyEditor::m_DefaultValue}\par
\pard\plain \sa160\sl240 \fs21\lang1033 KS property default value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_hDlg\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CKSPropertyEditor::m_hDlg}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Parent dialog\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_hWndDefault\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CKSPropertyEditor::m_hWndDefault}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Default dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_hWndEdit\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CKSPropertyEditor::m_hWndEdit}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Target dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_hWndMax\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CKSPropertyEditor::m_hWndMax}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Maximum dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_hWndMin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CKSPropertyEditor::m_hWndMin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Minimum dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_hWndProgress\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CKSPropertyEditor::m_hWndProgress}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the progress bar\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_hWndStep\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CKSPropertyEditor::m_hWndStep}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Stepping Delta dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_hWndTrackbar\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CKSPropertyEditor::m_hWndTrackbar}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the slide bar\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDDefaultControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDDefaultControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Default dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDEditControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDEditControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Target dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDLabel\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDLabel}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the property label\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDMaxControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDMaxControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Maximum dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDMinControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDMinControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Minimum dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDProgressControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDProgressControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the progress bar\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDProperty\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDProperty}\par
\pard\plain \sa160\sl240 \fs21\lang1033 KS property ID\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDStepControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDStepControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Stepping Delta dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_IDTrackbarControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CKSPropertyEditor::m_IDTrackbarControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the slide bar\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_Max\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CKSPropertyEditor::m_Max}\par
\pard\plain \sa160\sl240 \fs21\lang1033 KS property maximum value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_Min\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CKSPropertyEditor::m_Min}\par
\pard\plain \sa160\sl240 \fs21\lang1033 KS property minimum value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_OriginalValue\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CKSPropertyEditor::m_OriginalValue}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Backup of the original value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::m_SteppingDelta\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CKSPropertyEditor::m_SteppingDelta}\par
\pard\plain \sa160\sl240 \fs21\lang1033 KS property stepping delta\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::OnApply\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CKSPropertyEditor}{\b ::OnApply(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This member function is 
called by the framework when the user chooses the OK or the Apply Now 
button. When the framework calls this member function, changes made on 
all property pages in the property sheet are accepted, the property 
sheet retains focus.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::OnAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::OnAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Gets the status of the 
checkbox.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::OnDefault\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::OnDefault(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resets the position of the 
slide bar and updates the content of the Target windows after the user 
pressed the Default button.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if Active, FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::OnEdit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::OnEdit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads the content of the 
Target window and updates the postion of the slider after the user 
has messed with the Target edit control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::OnScroll\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::OnScroll(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads the position of the 
slide bar and updates the content of the Target windows after the user 
has messed with the slide bar.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if Active, FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::UpdateAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::UpdateAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Updates the auto checkbox\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::UpdateEditBox\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::UpdateEditBox(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Updates the content of 
the Target window after user has moved the slide bar.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::UpdateProgress\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::UpdateProgress(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Updates the position of 
the progress bar.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::UpdateTrackbar\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CKSPropertyEditor}{\b ::UpdateTrackbar(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Updates the position of 
the slide bar after user has messed with the Target window.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CKSPropertyEditor::~CKSPropertyEditor\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CKSPropertyEditor}{\b ::~CKSPropertyEditor(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Destructor for this class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/KSEDITOR.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CNetworkStatsProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements a property page 
to test the new TAPI internal interface {\b INetworkStats}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::CNetworkStatsProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CNetworkStatsProperties}{\b ::CNetworkStatsProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CNetworkStatsProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a Network Statistics 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::m_Controls[NUM_NETWORKSTATS_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CNetworkStatsProperty * CNetworkStatsProperties::m_Controls[NUM_NETWORKSTATS_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of network statistics properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the {\b INetworkStats} Ks interface handler. This 
code is only compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CNetworkStatsProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::m_pINetworkStats\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b INetworkStats * CNetworkStatsProperties::m_pINetworkStats}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b INetworkStats} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CNetworkStatsProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CNetworkStatsProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperties::~CNetworkStatsProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CNetworkStatsProperties}{\b ::~CNetworkStatsProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for network statistics property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CNetworkStatsProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single network statistics property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::CNetworkStatsProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CNetworkStatsProperty}{\b ::CNetworkStatsProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , INetworkStats*} {\i pInterface}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for network statistics property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
a pointer to the {\b INetworkStats} interface.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property progress bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInterface}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b INetworkStats} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::GetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperty}{\b ::GetAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CNetworkStatsProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b INetworkStats * CNetworkStatsProperty::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b INetworkStats} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the {\b INetworkStats} Ks interface handler. This 
code is only compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CNetworkStatsProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CNetworkStatsProperty::~CNetworkStatsProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CNetworkStatsProperty}{\b ::~CNetworkStatsProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for network statistics property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/NETSTATP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class COverlayPin}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the video overlay output pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::Active\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::Active(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from stopped to 
either paused or running.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::ActivePause\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::ActivePause(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from running to 
paused mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::ActiveRun\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::ActiveRun(}{\b REFERENCE_TIME} {\i tStart}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from paused to 
running mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i tStart}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ???.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::CheckMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::CheckMediaType(}{\b CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine if the pin can support a specific media type.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::COverlayPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::COverlayPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
constructorfor the {\b COverlayPin}
 object\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::CreateOverlayPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b COverlayPin*} {\b COverlayPin}{\b ::CreateOverlayPin(}{\b CTAPIVCap*} {\i pCaptureFilter}{\b , HRESULT *} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
helper function creates an output pin for overlay preview.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the preview pin.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCaptureFilter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the owner 
filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the return error code.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::DecideAllocator\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::DecideAllocator(}{\b IMemInputPin*} {\i pPin}{\b , IMemAllocator**} {\i ppAlloc}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to negotiate the allocator to use.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the IPin interface 
of the connecting pin.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppAlloc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the negotiated 
IMemAllocator interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Validate iIndex too\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::DecideBufferSize\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::DecideBufferSize(}{\b IMemAllocator*} {\i pAlloc}{\b , ALLOCATOR_PROPERTIES*} {\i ppropInputRequest}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the number and size of buffers required for transfer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAlloc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the allocator 
assigned to the transfer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppropInputRequest}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b ALLOCATOR_PROPERTIES} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Validate iIndex too\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::GetFormat\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::GetFormat(}{\b AM_MEDIA_TYPE**} {\i ppmt}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve the current media type on a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppmt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to an 
{\b AM_MEDIA_TYPE} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::GetMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::GetMediaType(}{\b int} {\i iPosition}{\b , CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves one 
of the media types supported by the pin, which is used by enumerators.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_S_NO_MORE_ITEMS\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 End of the list of media types has been reached\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a position in the media type list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type at 
the {\i iPosition} position in the list of supported media types.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Validate against the largest number of media types we support\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::GetNumberOfCapabilities\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::GetNumberOfCapabilities(}{\b int*} {\i piCount}{\b , int*} {\i piSize}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the number of stream capabilities structures.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i piCount}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an int to receive the 
number of {\b VIDEO_STREAM_CONFIG_CAPS} structures supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i piSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an int to receive the 
size of the {\b VIDEO_STREAM_CONFIG_CAPS} configuration structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::GetStreamCaps\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::GetStreamCaps(}{\b int} {\i iIndex}{\b , AM_MEDIA_TYPE**} {\i ppmt}{\b , LPBYTE} {\i pSCC}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve a video stream capability pair.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the index to the desired media type 
and capability pair.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppmt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to an 
{\b AM_MEDIA_TYPE} structure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSCC}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
{\b VIDEO_STREAM_CONFIG_CAPS} configuration structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Validate iIndex too\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::Inactive\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::Inactive(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from either 
paused or running to stopped.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::m_pCaptureFilter\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CTAPIVCap* COverlayPin::m_pCaptureFilter}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reference to the 
parent capture filter.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Supports IPin. Never created by COM, so no CreateInstance or entry 
in global FactoryTemplate table. Only ever created by a {\b CTAPIVCap}
 
object and returned via the EnumPins interface\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IAMStreamConfig}, 
{\b IAMStreamControl}, {\b ICPUControl}, {\b IFrameRateControl}, 
{\b IBitrateControl}, {\b INetworkStats}, {\b IH245EncoderCommand} 
and {\b IProgressiveRefinement}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::Notify\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::Notify(}{\b IBaseFilter*} {\i pSelf}{\b , Quality} {\i q}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from paused to 
running mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSelf}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the filter that is 
sending the quality notification.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i q}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a Quality notification structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::SetFormat\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::SetFormat(}{\b AM_MEDIA_TYPE*} {\i pmt}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
set a specific media type on a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an {\b AM_MEDIA_TYPE} 
structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::SetMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b COverlayPin}{\b ::SetMediaType(}{\b CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
set a specific media type on a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 COverlayPin::~COverlayPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b COverlayPin}{\b ::~COverlayPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b COverlayPin}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/OVERLAY.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CPreviewPin}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the video preview output pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEW.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin::ApplySoftCamCtrl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewPin}{\b ::ApplySoftCamCtrl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method applies 
software-only camera control operators.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 You'll need a function like this one for RGB16 and RGB8 
too. In RGB8, make sure you use the Indeo palette, like NM.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin::CPreviewPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewPin}{\b ::CPreviewPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
constructor for the {\b CPreviewPin}
 object\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This should depend on the bitdepth of the display 
at the time of the creation of this pin. If we're in 16 
bit mode, then return the 16 bit mode formats. Before 
doing this, write all the necessary format conversion 
routines.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin::CreatePreviewPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CPreviewPin*} {\b CPreviewPin}{\b ::CreatePreviewPin(}{\b CTAPIVCap*} {\i pCaptureFilter}{\b , CPreviewPin**} {\i ppPreviewPin}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This helper 
function creates a video output pin for preview.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCaptureFilter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the owner 
filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppPreviewPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that address of a pointer 
to a {\b CPreviewPin}
 object to receive the a pointer to the newly 
created pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin::GetPages\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewPin}{\b ::GetPages(}{\b CAUUID*} {\i pPages}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method Fills a counted 
array of GUID values where each GUID specifies the CLSID of each 
property page that can be displayed in the property sheet for this 
object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_OUTOFMEMORY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocation failed\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a caller-allocated CAUUID 
structure that must be initialized and filled before returning. The 
pElems field in the CAUUID structure is allocated by the callee with 
CoTaskMemAlloc and freed by the caller with CoTaskMemFree.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Make sure this is effectively freed at some point\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin::IsSoftCamCtrlNeeded\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewPin}{\b ::IsSoftCamCtrlNeeded(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method verifies 
if a software-only camera controller is needed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 You'll need a function like this one for RGB16 and RGB8 
too. In RGB8, make sure you use the Indeo palette, like NM.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin::m_pCaptureFilter\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CTAPIVCap* CPreviewPin::m_pCaptureFilter}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reference to the 
parent capture filter.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Supports IPin. Never created by COM, so no CreateInstance or entry 
in global FactoryTemplate table. Only ever created by a {\b CTAPIVCap}
 
object and returned via the EnumPins interface\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewPin}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IAMStreamConfig}, 
{\b IAMStreamControl}, {\b ICPUControl}, {\b IFrameRateControl}, 
{\b IBitrateControl}, {\b INetworkStats}, {\b IH245EncoderCommand} 
and {\b IProgressiveRefinement}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewPin::~CPreviewPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPreviewPin}{\b ::~CPreviewPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CPreviewPin}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CPreviewProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements a property page 
to test the new TAPI internal interfaces {\b IBitrateControl} and 
{\b IFrameRateControl}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::CPreviewProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPreviewProperties}{\b ::CPreviewProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CPreviewProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a TAPI Preview Pin 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::InitialRangeScan\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperties}{\b ::InitialRangeScan(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the list of supported formats on the pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::m_Controls[NUM_PREVIEW_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CPreviewProperty* CPreviewProperties::m_Controls[NUM_PREVIEW_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of capture properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Preview Pin {\b IFrameRateControl}, 
and dynamic format change implementation. This code is only compiled 
if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CPreviewProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IFrameRateControl* CPreviewProperties::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IFrameRateControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the current media format used by the pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::OnFormatChanged\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperties}{\b ::OnFormatChanged(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the format selected by the user.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPreviewProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPreviewProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperties::~CPreviewProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPreviewProperties}{\b ::~CPreviewProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for the preview pin property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CPreviewProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single preview property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::CPreviewProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPreviewProperty}{\b ::CPreviewProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , IFrameRateControl*} {\i pIFrameRateControl}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for frame rate property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
pointers to the {\b IFrameRateControl} and {\b IVideoControl} interfaces.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIFrameRateControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b IFrameRateControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::GetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperty}{\b ::GetAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CPreviewProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::m_pIFrameRateControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IFrameRateControl* CPreviewProperty::m_pIFrameRateControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IFrameRateControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Preview Pin {\b IFrameRateControl}, 
and dynamic format change implementation. This code is only compiled 
if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CPreviewProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPreviewProperty::~CPreviewProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPreviewProperty}{\b ::~CPreviewProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for preview property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PREVIEWP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CProcAmpProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class runs a property page to test 
the TAPI VfW Capture Filter {\b IAMVideoProcAmp} implementation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::CProcAmpProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProcAmpProperties}{\b ::CProcAmpProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CProcAmpProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a Network Statistics 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::m_Controls[NUM_PROCAMP_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CProcAmpProperty * CProcAmpProperties::m_Controls[NUM_PROCAMP_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of video proc amp properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IAMVideoProcAmp} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CProcAmpProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::m_pIAMVideoProcAmp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IAMVideoProcAmp * CProcAmpProperties::m_pIAMVideoProcAmp}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IAMVideoProcAmp} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CProcAmpProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CProcAmpProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::~CProcAmpProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProcAmpProperties}{\b ::~CProcAmpProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for the video proc amp control property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CProcAmpProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single video proc amp control property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::CProcAmpProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProcAmpProperty}{\b ::CProcAmpProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , IAMVideoProcAmp*} {\i pInterface}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for video proc amp control property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
a pointer to the {\b IAMVideoProcAmp} interface.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property progress bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInterface}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b IAMVideoProcAmp} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CProcAmpProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IAMVideoProcAmp * CProcAmpProperty::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IAMVideoProcAmp} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Filter {\b IAMVideoProcAmp} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::~CProcAmpProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProcAmpProperty}{\b ::~CProcAmpProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for video proc amp control property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProgRefProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CProgRefProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements a property page 
to test the new TAPI internal interface {\b IProgressiveRefinement}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProgRefProperties::CProgRefProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProgRefProperties}{\b ::CProgRefProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProgRefProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CProgRefProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a Progressive Refinement 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProgRefProperties::m_pIProgRef\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IProgressiveRefinement* CProgRefProperties::m_pIProgRef}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IProgressiveRefinement} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI VfW Capture Pin {\b IProgressiveRefinement} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProgRefProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProgRefProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProgRefProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProgRefProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProgRefProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CProgRefProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProgRefProperties::~CProgRefProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProgRefProperties}{\b ::~CProgRefProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for progressive refinement property page. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROGREFP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CRtpPdPin}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the RTP packetization descriptor 
output pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::ActivePause\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::ActivePause(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from running to 
paused mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::ActiveRun\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::ActiveRun(}{\b REFERENCE_TIME} {\i tStart}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from paused to 
running mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i tStart}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ???.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::CapturePinActive\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::CapturePinActive(}{\b BOOL} {\i fActive}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
capture pin to let the RTPPD pin know that the capture pin is active.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fActive}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the status of the capture pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::CheckMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::CheckMediaType(}{\b CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine if the pin can support a specific media type.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_INVALIDMEDIATYPE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 An invalid media type was specified\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::Commit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::Commit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
commit the memory for the specified buffers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns S_OK.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::CreateRtpPdPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CRtpPdPin*} {\b CRtpPdPin}{\b ::CreateRtpPdPin(}{\b CTAPIVCap*} {\i pCaptureFilter}{\b , CRtpPdPin**} {\i ppRtpPdPin}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This helper 
function creates an output pin for RTP packetization descriptors.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCaptureFilter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the owner 
filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppRtpPdPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that address of a pointer 
to a {\b CRtpPdPin}
 object to receive the a pointer to the newly 
created pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::CRtpPdPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::CRtpPdPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
constructor for the {\b CRtpPdPin}
 object\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::DecideAllocator\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::DecideAllocator(}{\b IMemInputPin*} {\i pPin}{\b , IMemAllocator**} {\i ppAlloc}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to negotiate the allocator to use.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the IPin interface 
of the connecting pin.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppAlloc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the negotiated 
IMemAllocator interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::DecideBufferSize\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::DecideBufferSize(}{\b IMemAllocator*} {\i pAlloc}{\b , ALLOCATOR_PROPERTIES*} {\i ppropInputRequest}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the number and size of buffers required for transfer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAlloc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the allocator 
assigned to the transfer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppropInputRequest}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b ALLOCATOR_PROPERTIES} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 We shouldn't need that many buffers and you probably need a different number 
of buffers if you are capturing in streaming mode of frame grabbing mode 
You also need to decouple this number from the number of video capture buffers: only 
if you need to ship the video capture buffer downstream (possible on the preview pin) 
should you make those number equal.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Use a constant instead\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::Decommit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::Decommit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
release the memory for the specified buffers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns S_OK.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::Flush\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b CRtpPdPin}{\b ::Flush(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Called when stopping. Flush any 
buffers that may be still downstream.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns NOERROR\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::GetBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::GetBuffer(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve a container for a sample.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns E_FAIL.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::GetMaxRTPPacketSize\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::GetMaxRTPPacketSize(}{\b LPDWORD} {\i pdwMaxRTPPacketSize}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
supply to the network sink filter the maximum RTP packet size (in bytes) 
described by the list of packetization descriptors.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMaxRTPPacketSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD to 
receive the maximum RTP packet size (in bytes) described by the list of 
packetization descriptors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::GetMaxRTPPacketSizeRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::GetMaxRTPPacketSizeRange(}{\b LPDWORD} {\i pdwMin}{\b , LPDWORD} {\i pdwMax}{\b , LPDWORD} {\i pdwSteppingDelta}{\b , LPDWORD} {\i pdwDefault}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to supply to the network sink filter the minimum, maximum, and 
default values for the RTP packet size (in bytes) described by the list 
of packetization descriptors.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum RTP packet size (in 
bytes) described by the list of packetization descriptors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum RTP packet size (in 
bytes) described by the list of packetization descriptors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta in 
RTP packet size (in bytes) described by the list of packetization 
descriptors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default RTP packet size 
(in bytes) described by the list of packetization descriptors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Use const defines instead\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::GetMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::GetMediaType(}{\b int} {\i iPosition}{\b , CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves one 
of the media types supported by the pin, which is used by enumerators.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_S_NO_MORE_ITEMS\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 End of the list of media types has been reached\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a position in the media type list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type at 
the {\i iPosition} position in the list of supported media types.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::GetPages\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::GetPages(}{\b CAUUID*} {\i pPages}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method Fills a counted 
array of GUID values where each GUID specifies the CLSID of each 
property page that can be displayed in the property sheet for this 
object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_OUTOFMEMORY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocation failed\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a caller-allocated CAUUID 
structure that must be initialized and filled before returning. The 
pElems field in the CAUUID structure is allocated by the callee with 
CoTaskMemAlloc and freed by the caller with CoTaskMemFree.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::GetProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::GetProperties(}{\b ALLOCATOR_PROPERTIES*} {\i pProps}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve the properties being used on this allocator.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pProps}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
requested allocator properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::m_pCaptureFilter\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CTAPIVCap* CRtpPdPin::m_pCaptureFilter}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reference to the 
parent capture filter.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IRTPPDControl}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::Reconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::Reconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
reconnect a pin to a downstream pin with a new format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::ReleaseBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::ReleaseBuffer(}{\b IMediaSample*} {\i pSample}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
release the {\b CMediaSample}
 object. The final call to Release() on 
{\b IMediaSample} will call this method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_OK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSample}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the buffer to 
release.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::SendFrame\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::SendFrame(}{\b CFrameSample} {\i pSample}{\b , CRtpPdSample} {\i pRSample}{\b , BOOL} {\i bDiscon}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
send a a media sample downstream.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_OK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_FALSE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If the pin is off (IAMStreamControl)\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSample}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the video media 
sample associated to the current Rtp Pd media sample.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRSample}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media sample 
to send downstream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bDiscon}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set to TRUE if this is the first frame we ever 
sent downstream.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do the real work right here!\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This is probably not representative of what the encoder has 
generated, but who cares?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do the real work right here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::SetMaxRTPPacketSize\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::SetMaxRTPPacketSize(}{\b DWORD} {\i dwMaxRTPPacketSize}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
dynamically adjust the maximum RTP packet size (in bytes) to be 
described by the list of packetization descriptor. Typically, this 
number is just below the MTU size of the network.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwMaxRTPPacketSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the maximum RTP packet size 
(in bytes) to be described by the list of packetization descriptors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::SetMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::SetMediaType(}{\b CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
set a specific media type on a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::SetProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdPin}{\b ::SetProperties(}{\b ALLOCATOR_PROPERTIES*} {\i pRequest}{\b , ALLOCATOR_PROPERTIES*} {\i pActual}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
specify the size, number, and alignment of blocks.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRequest}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
requested allocator properties.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pActual}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
allocator properties actually set.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdPin::~CRtpPdPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CRtpPdPin}{\b ::~CRtpPdPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CRtpPdPin}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CRtpPdProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements a property page 
to test the new TAPI internal interfaces {\b IRTPPDControl}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CRtpPdProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a TAPI Rtp Pd Control 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::CRtpPdProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CRtpPdProperties}{\b ::CRtpPdProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::m_Controls[NUM_RTPPD_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CRtpPdProperty* CRtpPdProperties::m_Controls[NUM_RTPPD_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of Rtp Pd control properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Rtp Pd Output Pins {\b IRTPPDControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CRtpPdProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IRTPPDControl* CRtpPdProperties::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IRTPPDControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CRtpPdProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CRtpPdProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperties::~CRtpPdProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CRtpPdProperties}{\b ::~CRtpPdProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for the capture pin property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CRtpPdProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single Rtp Pd control property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::CRtpPdProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CRtpPdProperty}{\b ::CRtpPdProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , IRTPPDControl*} {\i pIRTPPDControl}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for Rtp Pd property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
a pointer to the {\b IRTPPDControl} interface.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIRTPPDControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b IRTPPDControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::GetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperty}{\b ::GetAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CRtpPdProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::m_pIRTPPDControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IRTPPDControl* CRtpPdProperty::m_pIRTPPDControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IRTPPDControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Rtp Pd Output Pins {\b IRTPPDControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CRtpPdProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CRtpPdProperty::~CRtpPdProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CRtpPdProperty}{\b ::~CRtpPdProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for Rtp Pd control property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/RTPPDP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CTAPIBasePin}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the TAPI base output pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::Active\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::Active(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from stopped to 
either paused or running.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::ActivePause\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::ActivePause(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from running to 
paused mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::ActiveRun\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::ActiveRun(}{\b REFERENCE_TIME} {\i tStart}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from paused to 
running mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i tStart}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Who cares.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::CheckMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::CheckMediaType(}{\b CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine if the pin can support a specific media type.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_INVALIDMEDIATYPE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 An invalid media type was specified\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::CloseConverter\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::CloseConverter(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method closes a 
format converter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CONVERT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns NOERROR.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::CloseConverter\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::CloseConverter(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method closes a 
format converter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CONVERT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns NOERROR.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::CloseSoftCamCtrl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::CloseSoftCamCtrl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method closes a 
software-only camera controller.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACS.CPP\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::Commit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::Commit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
commit the memory for the specified buffers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns S_OK.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::ConvertFrame\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::ConvertFrame(}{\b PBYTE} {\i pbyInput}{\b , DWORD} {\i dwInputSize}{\b , PBYTE} {\i pbyOutput}{\b , PDWORD} {\i pdwOutputSize}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method converts 
a bitmap from one format to another, or scale a bitmap.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CONVERT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbyInput}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the input buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwInputSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Size of the input buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbyOutput}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the output buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwOutputSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a DWORD to receive the size 
of the converted data.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Verify error management\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::CTAPIBasePin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::CTAPIBasePin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
constructorfor the {\b CTAPIBasePin}
 object\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This may be fine for VfW devices but not with WDM devices 
You need to build those defaults from the video datarange 
structures returned by the WDM capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This may be fine for VfW devices but not with WDM devices. 
WDM devices may support this in hardware. You need to query 
the device to know if it supports this feature. If it doesn't 
you can still provide a software only implementation for it.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::DecideAllocator\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::DecideAllocator(}{\b IMemInputPin*} {\i pPin}{\b , IMemAllocator**} {\i ppAlloc}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to negotiate the allocator to use.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the IPin interface 
of the connecting pin.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppAlloc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the negotiated 
IMemAllocator interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::DecideBufferSize\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::DecideBufferSize(}{\b IMemAllocator*} {\i pAlloc}{\b , ALLOCATOR_PROPERTIES*} {\i ppropInputRequest}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the number and size of buffers required for transfer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAlloc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the allocator 
assigned to the transfer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppropInputRequest}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b ALLOCATOR_PROPERTIES} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 We shouldn't need that many compressed buffers and you probably need a different number 
of buffers if you are capturing in streaming mode of frame grabbing mode 
You also need to decouple this number from the number of video capture buffers: only 
if you need to ship the video capture buffer downstream (possible on the preview pin) 
should you make those number equal.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::Decommit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::Decommit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
release the memory for the specified buffers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns S_OK.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::Flush\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b CTAPIBasePin}{\b ::Flush(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Called when stopping. Flush any 
buffers that may be still downstream.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns NOERROR\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetBuffer(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve a container for a sample.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns E_FAIL.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetCaps\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetCaps(}{\b long*} {\i pCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the capabilities of the TAPI MSP Video Capture filter capture pin regarding 
flipping pictures and external triggers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve a value representing a 
combination of the flags from the {\b VideoControlFlags} enumeration.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetCurrentActualFrameRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetCurrentActualFrameRate(}{\b LONGLONG*} {\i ActualFrameRate}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the actual frame rate, expressed as a frame duration 
in 100 ns units.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ActualFrameRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the frame rate in frame 
duration in 100 nS units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetCurrentBitrate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetCurrentBitrate(}{\b LPDWORD} {\i pdwCurrentBitrate}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the current bandwidth transmission used by 
the output pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BITRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwCurrentBitrate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the current bandwidth 
transmission of an output pin, in bits/s.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetCurrentCPULoad\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetCurrentCPULoad(}{\b DWORD*} {\i pdwCurrentCPULoad}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the current encoding algorithm CPU load.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwCurrentCPULoad}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the current encoding 
algorithm CPU load, in percentage units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetCurrentFrameRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetCurrentFrameRate(}{\b REFERENCE_TIME*} {\i pAvgTimePerFrame}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the video frame's average display time an 
output pin is currently running at.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FPSRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAvgTimePerFrame}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the current 
video frame's average display time of an output pin, in 100-nanosecond 
units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetCurrentProcessingTime\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetCurrentProcessingTime(}{\b REFERENCE_TIME*} {\i pCurrentProcessingTime}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the current encoding time per frame, in 
100-nanosecond units.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCurrentProcessingTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the maximum 
encoding time per frame the compressed video output pin is currently 
setup for, in 100-nanosecond units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetFormat\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetFormat(}{\b AM_MEDIA_TYPE**} {\i ppmt}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve the current media type on a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppmt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to an 
{\b AM_MEDIA_TYPE} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Note that we return the output type, not the format at which 
we are capturing. Only the filter really cares about how the data is 
being captured.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetFrameRateList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetFrameRateList(}{\b long} {\i iIndex}{\b , SIZE} {\i Dimensions}{\b , long*} {\i ListSize}{\b , LONGLONG**} {\i MaxAvailableFrameRate}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the list of available frame rates.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the index of the format to query 
for frame rates. This index corresponds to the order in which formats 
are enumerated by IAMStreamConfig::GetStreamCaps. The value must range 
between 0 and the number of supported {\b VIDEO_STREAM_CONFIG_CAPS} 
structures returned by IAMStreamConfig::GetNumberOfCapabilities.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Dimensions}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame's image size (width 
and height) in pixels.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ListSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the number of elements in the list 
of frame rates.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i MaxAvailableFrameRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to an array of frame 
rates in 100 ns units. Can be NULL if only {\i ListSize} is wanted.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxAvailableFrameRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxAvailableFrameRate(}{\b long} {\i iIndex}{\b , SIZE} {\i Dimensions}{\b , LONGLONG*} {\i MaxAvailableFrameRate}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the maximum frame rate currently available, based on 
bus bandwidth usage for connections, such as USB (Universal Serial Bus) 
and IEEE 1394, where the maximum frame rate may be limited due to 
bandwidth availability.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the index of the format to query 
for frame rates. This index corresponds to the order in which formats 
are enumerated by IAMStreamConfig::GetStreamCaps. The value must range 
between 0 and the number of supported {\b VIDEO_STREAM_CONFIG_CAPS} 
structures returned by IAMStreamConfig::GetNumberOfCapabilities.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Dimensions}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame's image size (width 
and height) in pixels.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i MaxAvailableFrameRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the maximum 
available frame rate in frame duration in 100 nS units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxBitrate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxBitrate(}{\b LPDWORD} {\i pdwMaxBitrate}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the upper limit in bandwidth transmission 
the output pin is currently setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BITRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMaxBitrate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the limit in bandwidth 
transmission or an output pin, in bits/s.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxBitrateRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxBitrateRange(}{\b LPDWORD} {\i pdwMin}{\b , LPDWORD} {\i pdwMax}{\b , LPDWORD} {\i pdwSteppingDelta}{\b , LPDWORD} {\i pdwDefault}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve support, minimum, maximum, and default 
values for the upper limit in bandwidth transmission the an output pin 
may be setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BITRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum limit in bandwidth 
transmission an output pin maybe setup for, in bits/s.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum limit in bandwidth 
transmission an output pin maybe setup for, in bits/s.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the the stepping 
delta in bandwidth transmission an output pin maybe setup for, in bits/s.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default limit in bandwidth 
transmission an output pin maybe setup for, in bits/s.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxCPULoad\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxCPULoad(}{\b DWORD*} {\i pdwMaxCPULoad}{\b , REFERENCE_TIME} {\i MaxProcessingTime}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the maximum encoding algorithm CPU load the 
compressed video output pin is currently setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMaxCPULoad}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum encoding 
algorithm CPU load the compressed video output pin is currently setup 
for, in percentage units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i MaxProcessingTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies an hypothetical 
maximum encoding time per frame, in 100-nanosecond units. If this 
parameter is set to -1, this method shall use the value of the maximum 
encoding time per frame the compressed video output pin is currently 
setup for.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxCPULoadRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxCPULoadRange(}{\b DWORD*} {\i pdwMin}{\b , DWORD*} {\i pdwMax}{\b , DWORD*} {\i pdwSteppingDelta}{\b , DWORD*} {\i pdwDefault}{\b , REFERENCE_TIME} {\i MaxProcessingTime}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve support, minimum, maximum, and default 
values for the maximum CPU load the compressed video output pin may be 
setup for, in percentage.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of encoding 
algorithm CPU load the compressed video output pin may be setup for, 
in percentage units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of encoding 
algorithm CPU load the compressed video output pin may be setup for, in 
percentage units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta of 
encoding algorithm CPU load the compressed video output pin may be 
setup for, in percentage units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of encoding 
algorithm CPU load the compressed video output pin is setup for, in 
percentage units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i MaxProcessingTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies an hypothetical 
maximum encoding time per frame, in 100-nanosecond units. If this 
parameter is set to -1, this method shall use the value of the maximum 
encoding time per frame the compressed video output pin is currently 
setup for.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxFrameRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxFrameRate(}{\b REFERENCE_TIME*} {\i pAvgTimePerFrame}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the maximum video frame's average display time an 
output pin is currently setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FPSRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAvgTimePerFrame}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the maximum 
video frame's average display time of an output pin, in 100-nanosecond 
units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxFrameRateRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxFrameRateRange(}{\b REFERENCE_TIME*} {\i pMin}{\b , REFERENCE_TIME*} {\i pMax}{\b , REFERENCE_TIME*} {\i pSteppingDelta}{\b , REFERENCE_TIME*} {\i pDefault}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve support, minimum, maximum, and default 
values of the video frame's average display time an output pin 
may be setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FPSRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum video 
frame's average display time an output pin may be setup for, in 
100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum video 
frame's average display time an output pin may be setup for, in 
100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping 
delta in video frame's average display time an output pin may be setup 
for, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default video 
frame's average display time of an output pin, in 100-nanosecond units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxProcessingTime\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxProcessingTime(}{\b REFERENCE_TIME*} {\i pMaxProcessingTime}{\b , DWORD} {\i dwMaxCPULoad}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve the maximum encoding time per frame the 
compressed video output pin is currently setup for, in 100-nanosecond 
units.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMaxProcessingTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the maximum 
encoding time per frame the compressed video output pin is currently 
setup for, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwMaxCPULoad}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies an hypothetical CPU load, in 
percentage units. If this parameter is set to -1UL, this method shall 
use the value of the CPU load  the compressed video output pin is 
currently setup for.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMaxProcessingTimeRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMaxProcessingTimeRange(}{\b REFERENCE_TIME*} {\i pMin}{\b , REFERENCE_TIME*} {\i pMax}{\b , REFERENCE_TIME*} {\i pSteppingDelta}{\b , REFERENCE_TIME*} {\i pDefault}{\b , DWORD} {\i dwMaxCPULoad}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve support, minimum, maximum, and default 
values for the maximum encoding time per frame the compressed video 
output pin may be setup for, in 100-nanosecond units.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of 
encoding time per frame the compressed video output pin may be setup 
for, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of 
encoding time per frame the compressed video output pin may be setup 
for, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping 
delta of encoding time per frame the compressed video output pin may 
be setup for, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value 
of encoding time per frame the compressed video output pin is setup 
for, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwMaxCPULoad}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies an hypothetical CPU load, in 
percentage units. If this parameter is set to -1UL, this method shall 
use the value of the CPU load  the compressed video output pin is 
currently setup for.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMediaType(}{\b int} {\i iPosition}{\b , CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves one 
of the media types supported by the pin, which is used by enumerators.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_S_NO_MORE_ITEMS\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 End of the list of media types has been reached\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a position in the media type list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type at 
the {\i iPosition} position in the list of supported media types.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetMode\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetMode(}{\b long} {\i Mode}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the video control mode of operation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Mode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a value representing a combination of the 
flags from the {\b VideoControlFlags} enumeration.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetNumberOfCapabilities\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetNumberOfCapabilities(}{\b int*} {\i piCount}{\b , int*} {\i piSize}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the number of stream capabilities structures.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i piCount}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an int to receive the 
number of {\b VIDEO_STREAM_CONFIG_CAPS} structures supported.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i piSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an int to receive the 
size of the {\b VIDEO_STREAM_CONFIG_CAPS} configuration structure.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetProperties(}{\b ALLOCATOR_PROPERTIES*} {\i pProps}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve the properties being used on this allocator.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pProps}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
requested allocator properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::GetStreamCaps\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::GetStreamCaps(}{\b int} {\i iIndex}{\b , AM_MEDIA_TYPE**} {\i ppmt}{\b , LPBYTE} {\i pSCC}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve a video stream capability pair.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the index to the desired media type 
and capability pair.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppmt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to an 
{\b AM_MEDIA_TYPE} structure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSCC}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
{\b VIDEO_STREAM_CONFIG_CAPS} configuration structure.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::Inactive\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::Inactive(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called by the 
{\b CBaseFilter}
 implementation when the state changes from either 
paused or running to stopped.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::IsSoftCamCtrlOpen\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CTAPIBasePin}{\b ::IsSoftCamCtrlOpen(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method checks if 
a software-only camera controller has already been opened.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if a software-only camera controller has already been opened\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_AvgTimePerFrameRangeDefault\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIBasePin::m_AvgTimePerFrameRangeDefault}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
frame rate default.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_AvgTimePerFrameRangeMax\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIBasePin::m_AvgTimePerFrameRangeMax}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum 
target frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_AvgTimePerFrameRangeMin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIBasePin::m_AvgTimePerFrameRangeMin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Minimum 
target frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_AvgTimePerFrameRangeSteppingDelta\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIBasePin::m_AvgTimePerFrameRangeSteppingDelta}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
frame rate stepping delta.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_CurrentAvgTimePerFrame\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIBasePin::m_CurrentAvgTimePerFrame}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current 
frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_CurrentProcessingTime\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIBasePin::m_CurrentProcessingTime}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current 
processing time.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwBitrateRangeDefault\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwBitrateRangeDefault}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Default target bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwBitrateRangeMax\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwBitrateRangeMax}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum target bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwBitrateRangeMin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwBitrateRangeMin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Minimum target bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwBitrateRangeSteppingDelta\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwBitrateRangeSteppingDelta}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
bitrate stepping delta.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwConversionType\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwConversionType}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Specifies the format 
conversion operation necessary to go from the format of the captured 
video frames to the format of the data actually generated by the pin. 
It can be any combination of the following constants:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CONVERSIONTYPE_NONE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No conversion operation necessary\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CONVERSIONTYPE_ENCODE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specifies an encoding operation\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CONVERSIONTYPE_DECODE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specifies a decoding operation\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CONVERSIONTYPE_SCALER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specifies an image size change\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwCurrentBitrate\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwCurrentBitrate}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwCurrentCPULoad\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwCurrentCPULoad}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current CPU load.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwFrame\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwFrame}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current frame number.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwLastIFrameTime\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwLastIFrameTime}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Remembers the last 
time we sent an I-frame downstream.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwLastTimestamp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwLastTimestamp}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Timestamps of the last 
frame generated, normalized to 29.97Hz.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwMaxBitrate\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwMaxBitrate}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwMaxCPULoad\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwMaxCPULoad}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum CPU load.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwNumBytesDelivered\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwNumBytesDelivered}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Counts number of 
bytes delivered, reset every second or so.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_dwNumFramesDelivered\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIBasePin::m_dwNumFramesDelivered}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Counts number of 
frames delivered, reset every second or so.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_fConvert\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIBasePin::m_fConvert}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE after an ICM converter 
has been open successfully.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_fFlipHorizontal\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIBasePin::m_fFlipHorizontal}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE if image is 
to be flipped horizontally.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_fFlipVertical\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIBasePin::m_fFlipVertical}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Affects the quality of 
en encoded video stream.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_fFlipVertical\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIBasePin::m_fFlipVertical}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE if image is 
to be flipped vertically.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_fPeriodicIFrames\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIBasePin::m_fPeriodicIFrames}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE to generate 
I-frame periodically.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_fSoftCamCtrl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIBasePin::m_fSoftCamCtrl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE after a 
software-only camera controller has been opened.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do we really need m_dwNumFramesDelivered to be a member variable of this class?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do we really need m_dwNumBytesDelivered to be a member variable of this class?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do we really need this?\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_fTemporalCompress\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIBasePin::m_fTemporalCompress}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE when the 
encoder uses some form or prediction.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_hIC\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HIC CTAPIBasePin::m_hIC}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Handle to the ICM image converter.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_MaxAvgTimePerFrame\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIBasePin::m_MaxAvgTimePerFrame}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_MaxProcessingTime\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIBasePin::m_MaxProcessingTime}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum 
processing time.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_parms\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ALLOCATOR_PROPERTIES CTAPIBasePin::m_parms}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Out allocator 
properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Supports IPin. Never created by COM, so no CreateInstance or entry 
in global FactoryTemplate table. Only ever created by a {\b CTAPIVCap}
 
object and returned via the EnumPins interface\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_parms\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ALLOCATOR_PROPERTIES CTAPIBasePin::m_parms}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Out allocator 
properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_pbiIn\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PBITMAPINFOHEADER CTAPIBasePin::m_pbiIn}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the input 
format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_pbiInt\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PBITMAPINFOHEADER CTAPIBasePin::m_pbiInt}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the intermediate 
format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_pbiOut\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PBITMAPINFOHEADER CTAPIBasePin::m_pbiOut}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the output 
format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_pbiSCCIn\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PBITMAPINFOHEADER CTAPIBasePin::m_pbiSCCIn}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the input 
format of a software-only camera controlled operation.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_pbiSCCOut\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PBITMAPINFOHEADER CTAPIBasePin::m_pbiSCCOut}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the output 
format of a software-only camera controlled operation.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_pbyCamCtrl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PBYTE CTAPIBasePin::m_pbyCamCtrl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Intermediate buffer used in 
a software-only camera controlled operation.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_pbyOut\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PBYTE CTAPIBasePin::m_pbyOut}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the output buffer 
used in a conversion operation.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::m_pCaptureFilter\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CTAPIVCap* CTAPIBasePin::m_pCaptureFilter}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the 
filter that owns us.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a 
pointer to the specified interface if supported. The only interfaces 
explicitly supported being {\b IAMStreamConfig}, {\b IAMStreamControl}, 
{\b ICPUControl}, {\b IFrameRateControl} and {\b IBitrateControl}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::OpenConverter\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::OpenConverter(}{\b PBITMAPINFOHEADER} {\i pbiIn}{\b , PBITMAPINFOHEADER} {\i pbiOut}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method opens a format 
converter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CONVERT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbiIn}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the input format.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbiOut}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the output format.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Verify error management\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Use the new format definition after the decoder has been implemented\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Basd on the result of the previous call, re-allocate if necessary\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::OpenSoftCamCtrl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::OpenSoftCamCtrl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method opens a 
software-only camera controller.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERACS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Verify error management\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Add software-only operators for RGB16, RGB8 and RGB4\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Find a way to go around this extra memory copy in the preview case\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Add software-only operators for RGB16, RGB8 and RGB4\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Find a way to go around this extra memory copy in the preview case\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Add software-only operators for RGB16, RGB8 and RGB4\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::Reconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::Reconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
reconnect a pin to a downstream pin with a new format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::ReleaseBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::ReleaseBuffer(}{\b IMediaSample*} {\i pSample}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
release the {\b CMediaSample}
 object. The final call to Release() on 
{\b IMediaSample} will call this method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_OK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSample}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the buffer to 
release.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::ScaleDIB\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::ScaleDIB(}{\b PBITMAPINFOHEADER} {\i pbiSrc}{\b , PBYTE} {\i pbySrc}{\b , PBITMAPINFOHEADER} {\i pbiSrc}{\b , PBYTE} {\i pbyDst}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method a bitmap. For now, 
RGB24 only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CONVERT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbiSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the input bitmap format.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbySrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the input bitmap.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbiSrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the output bitmap format.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbyDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the output bitmap.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 You'll need a function like this one for RGB16 and RGB8 
too. In RGB8, make sure you use the Indeo palette.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::ScaleDIB\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::ScaleDIB(}{\b PBITMAPINFOHEADER} {\i pbi}{\b , PBYTE} {\i pbySrc}{\b , PBYTE} {\i pbyDst}{\b , LPRECT} {\i prcRect}{\b , BOOL} {\i fFlipHorizontal}{\b , BOOL} {\i fFlipVertical}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method scales/flips 
a bitmap rectangle. For now, RGB24 only.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CONVERT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbi}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the bitmap format.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbySrc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the input bitmap.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbyDst}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the output bitmap.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i prcRect}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the relevant rectangle in the 
input bitmap.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fFlipHorizontal}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set to TRUE if the output bitmap 
is to be flipped horizontally.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fFlipVertical}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set to TRUE if the output bitmap 
is to be flipped vertically.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 You'll need a function like this one for RGB16 and RGB8 
too. In RGB8, make sure you use the Indeo palette.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SendFrame\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SendFrame(}{\b CFrameSample} {\i pSample}{\b , LPTHKVIDEOHDR} {\i ptvh}{\b , PDWORD} {\i pdwBytesUsed}{\b , BOOL} {\i bDiscon}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
send a a media sample downstream.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_OK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_FALSE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If the pin is off (IAMStreamControl)\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pSample}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media sample 
to send downstream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ptvh}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the video header 
of the video capture buffer associated to this sample.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwBytesUsed}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD to receive 
the size of the frame that has been delivered downstream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bDiscon}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set to TRUE if this is the first frame we ever 
sent downstream.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 What you really want to do, if possible, is simply update the 
sample pointer to point to m_pbyCamCtrl instead of the video 
capture buffer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This is probably not representative of what the encoder has 
generated, but who cares?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some frame-grabbing specific timings here\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SetFormat\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SetFormat(}{\b AM_MEDIA_TYPE*} {\i pmt}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
set a specific media type on a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an {\b AM_MEDIA_TYPE} 
structure.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SetMaxBitrate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SetMaxBitrate(}{\b DWORD} {\i dwMaxBitrate}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the output pin the upper limit in 
bandwidth transmission.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BITRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwMaxBitrate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the new limit in bandwidth 
transmission to an output pin, in bits/s.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SetMaxCPULoad\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SetMaxCPULoad(}{\b DWORD} {\i dwMaxCPULoad}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
specify to the compressed video output pin the maximum encoding 
algorithm CPU load.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwMaxCPULoad}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the maximum encoding 
algorithm CPU load, in percentage units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SetMaxFrameRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SetMaxFrameRate(}{\b REFERENCE_TIME} {\i AvgTimePerFrame}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the output pin the new video frame's 
average display time.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FPSRATE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i AvgTimePerFrame}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the new video 
frame's average display time to an output pin, in 100-nanosecond units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SetMaxProcessingTime\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SetMaxProcessingTime(}{\b REFERENCE_TIME} {\i MaxProcessingTime}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the compressed video output pin the 
maximum encoding time per frame, in 100-nanosecond units.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CPUC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i MaxProcessingTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the maximum 
encoding time per frame, in 100-nanosecond units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SetMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SetMediaType(}{\b CMediaType*} {\i pMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
set a specific media type on a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the media type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Beware if you are previewing at the same time!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SetMode\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SetMode(}{\b long} {\i Mode}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to set the 
video control mode of operation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Mode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify a combination of the flags from the 
{\b VideoControlFlags} enumeration.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::SetProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIBasePin}{\b ::SetProperties(}{\b ALLOCATOR_PROPERTIES*} {\i pRequest}{\b , ALLOCATOR_PROPERTIES*} {\i pActual}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
specify the size, number, and alignment of blocks.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRequest}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
requested allocator properties.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pActual}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
allocator properties actually set.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIBasePin::~CTAPIBasePin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CTAPIBasePin}{\b ::~CTAPIBasePin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CTAPIBasePin}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CTAPIVCap}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the TAPI Video Capture Source 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CTAPIVCap}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the TAPI VfW Capture Source 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CTAPIVCap}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the TAPI VfW Capture Source 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Capture\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::Capture(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
run the capture loop. Executes while in the run state.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove this before checkin!\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Hmmm, you're assuming always 6 buffers here... KABOOM!\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Hmmm, you're assuming always 6 buffers here... KABOOM!\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Isn't there a better way to return the buffer to the device?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Isn't there a better way to return the buffer to the device?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove all OutputDebugString\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove all OutputDebugString\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove all OutputDebugString\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove all OutputDebugString\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::ChangeThdState\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CTAPIVCap}{\b ::ChangeThdState(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method changes the state of the 
capture worker thread.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns new thread state\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CTAPIVCap}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of the TAPI VfW Capture 
Source filter referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Step through this code!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::CreatePins\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::CreatePins(}{\b DWORD} {\i dwMilliSecsTimeout}{\b , FILTER_STATE*} {\i State}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve the current state of the filter. We don't send any data during 
PAUSE, so to avoid hanging renderers, we need to return VFW_S_CANT_CUE 
when paused.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwMilliSecsTimeout}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the duration of the time-out, 
in milliseconds.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i State}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the name of the filter being added.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 You should delete the created pins if one of the pins fails to be created!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::CreateThd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::CreateThd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method creates the 
capture worker thread.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE on success, FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::CTAPIVCap\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CTAPIVCap}{\b ::CTAPIVCap(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the constructor 
for the {\b CTAPIVCap}
 object. It only gets the OS type.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Use some const defines, please!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::DestroyThd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::DestroyThd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method waita for the 
worker thread to die before performing some cleanup.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::FindIDByRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::FindIDByRange(}{\b AM_MEDIA_TYPE*} {\i pAMMediaType}{\b , DWORD*} {\i pdwID}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
obtain the unique format ID of a capability that corresponds to an 
{\b AM_MEDIA_TYPE}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAMMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b AM_MEDIA_TYPE} structure that has been initialized indicate a 
specific format.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD output parameter 
that will contain the unique format ID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Get\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::Get(}{\b VideoProcAmpProperty} {\i Property}{\b , long*} {\i plValue}{\b , VideoProcAmpFlags*} {\i plFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve the 
value of a video quality setting.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the video 
quality setting to get the value of. Use a member of the 
{\b VideoProcAmpProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the current value of the 
video quality setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the {\b VideoProcAmpFlags} 
enumerated type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Get\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::Get(}{\b CameraControlProperty} {\i Property}{\b , long*} {\i plValue}{\b , long*} {\i plFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve the 
value of a camera control setting.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERAC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the camera 
control setting to get the value of. Use a member of the 
{\b CameraControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the current value of the 
camera control setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the {\b CameraControlFlags} 
enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetCaps\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetCaps(}{\b IPin*} {\i pPin}{\b , long*} {\i pCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the capabilities of the TAPI MSP Video Capture filter regarding 
flipping pictures and external triggers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the video output pin to query 
capabilities from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve a value representing a 
combination of the flags from the {\b VideoControlFlags} enumeration.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetCurrentActualFrameRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetCurrentActualFrameRate(}{\b IPin*} {\i pPin}{\b , LONGLONG*} {\i ActualFrameRate}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the actual frame rate, expressed as a frame duration 
in 100 ns units.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the pin to retrieve the frame rate 
from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ActualFrameRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the frame rate in frame 
duration in 100 nS units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetCurrentDevice\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetCurrentDevice(}{\b PDWORD} {\i pdwDeviceIndex}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine the index of the capture device currently used.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVENUM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NO_CAPTURE_HARDWARE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No Capture hardware is available\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwDeviceIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD to receive 
the index of the capture device currently used.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetDeviceInfo\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetDeviceInfo(}{\b DWORD} {\i dwDeviceIndex}{\b , PDEVICEINFO} {\i pDeviceInfo}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve information about a capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVENUM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwDeviceIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the device index of the capture 
device to return information about.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pDeviceInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a {\b DEVICEINFO} 
structure to receive information about a capture device.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetFormatTable\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetFormatTable(}{\b IPin*} {\i pPin}{\b , H245VideoCapabilityTable*} {\i pTable}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
obtain {\b H245VideoCapabilityMap} structures for all formats and format 
options that the TAPI MSP Video Capture filter supports. The content of 
the capability information that the TAPI MSP Capability module obtains 
via this method is a two dimensional table that relates every supported 
transmit format to steady-state resource requirements of that format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the video capture or 
still-image output pin of the capture device. The TAPI MSP Video 
Capture filter enumerates the list of formats supported by this pin to 
build its own video capability table.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pTable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b H245VideoCapabilityTable} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The memory allocated by {\b GetFormatTable} is released 
by calling {\b ReleaseFormatTable}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetFrameRateList\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetFrameRateList(}{\b IPin*} {\i pPin}{\b , long} {\i iIndex}{\b , SIZE} {\i Dimensions}{\b , long*} {\i ListSize}{\b , LONGLONG**} {\i MaxAvailableFrameRate}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the list of available frame rates.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the pin to retrieve the frame rates 
from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the index of the format to query 
for frame rates. This index corresponds to the order in which formats 
are enumerated by IAMStreamConfig::GetStreamCaps. The value must range 
between 0 and the number of supported {\b VIDEO_STREAM_CONFIG_CAPS} 
structures returned by IAMStreamConfig::GetNumberOfCapabilities.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Dimensions}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame's image size (width 
and height) in pixels.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ListSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the number of elements in the list 
of frame rates.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i MaxAvailableFrameRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to an array of frame 
rates in 100 ns units. Can be NULL if only {\i ListSize} is wanted.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetH245VersionID\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetH245VersionID(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve a DWORD value that identifies the platform version that the 
TAPI MSP Video Capture filter was designed for. The platform version is 
defined as TAPI_H245_VERSION_ID.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Validate the H.245 version with Mike\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetLocalFormat\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetLocalFormat(}{\b H245VideoCapability*} {\i pRemoteCapability}{\b , HANDLE*} {\i phIntersectionCookie}{\b , AM_MEDIA_TYPE*} {\i pAMMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
obtain the local TAPI MSP Video Capture filter configuration 
parameters that are compatible with a remote capability.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRemoteCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 
video format, including all parameters and options defined by H.245, of 
a remote video capability.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phIntersectionCookie}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the dynamic instance of 
intersected capabilities. When the TAPI MSP Video Capture filter 
creates the intersection, it may allocate memory for the intersected 
capability parameters. The intersection cookie identifies this 
allocation. This is used to release internal allocations and also as an 
argument to the {\b GetNegotiatedLimitProperty} method.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAMMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b AM_MEDIA_TYPE} structure that has been initialized to regard 
negotiated options.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b GetNegotiatedLimitProperty}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetMaxAvailableFrameRate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetMaxAvailableFrameRate(}{\b IPin*} {\i pPin}{\b , long} {\i iIndex}{\b , SIZE} {\i Dimensions}{\b , LONGLONG*} {\i MaxAvailableFrameRate}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to retrieve the maximum frame rate currently available, based on 
bus bandwidth usage for connections, such as USB (Universal Serial Bus) 
and IEEE 1394, where the maximum frame rate may be limited due to 
bandwidth availability.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the pin to retrieve the frame rate 
from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the index of the format to query 
for frame rates. This index corresponds to the order in which formats 
are enumerated by IAMStreamConfig::GetStreamCaps. The value must range 
between 0 and the number of supported {\b VIDEO_STREAM_CONFIG_CAPS} 
structures returned by IAMStreamConfig::GetNumberOfCapabilities.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Dimensions}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame's image size (width 
and height) in pixels.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i MaxAvailableFrameRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the maximum 
available frame rate in frame duration in 100 nS units.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetMode\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetMode(}{\b IPin*} {\i pPin}{\b , long} {\i Mode}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the video control mode of operation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the pin to get the video control 
mode from.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Mode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a value representing a combination of the 
flags from the {\b VideoControlFlags} enumeration.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetNegotiatedLimitProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetNegotiatedLimitProperty(}{\b HANDLE} {\i hIntersectionCookie}{\b , NegotiatedVideoLimit} {\i LimitProperty}{\b , DWORD*} {\i pdwValue}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
is used to obtain negotiated limits that were determined by either the 
{\b IntersectFormats} or {\b GetLocalFormat} 
method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hIntersectionCookie}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the dynamic instance of 
intersected capabilities.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i LimitProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the limit 
property being retrieved.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD to receive 
the value of the specified limit property.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IntersectFormats}, {\b GetLocalFormat}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Are you sure 0 is not a valid handle here?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetNumDevices\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetNumDevices(}{\b PDWORD} {\i pdwNumDevices}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine the number of installed capture devices. This number includes 
only enabled devices.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVENUM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwNumDevices}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD to receive 
the number of installed capture devices.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetPages\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetPages(}{\b CAUUID*} {\i pPages}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method Fills a counted 
array of GUID values where each GUID specifies the CLSID of each 
property page that can be displayed in the property sheet for this 
object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_OUTOFMEMORY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocation failed\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a caller-allocated CAUUID 
structure that must be initialized and filled before returning. The 
pElems field in the CAUUID structure is allocated by the callee with 
CoTaskMemAlloc and freed by the caller with CoTaskMemFree.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetPin(}{\b int} {\i n}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method returns a non-addrefed 
pointer to the {\b cBasePin}
 of a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns NULL or a pointer to a {\b CBasePin}
 object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i n}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetPinCount\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetPinCount(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method returns the pin 
count. There is typically a Capture Pin, a Preview pin, and sometimes 
an Overlay pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns the number of pins.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetRange(}{\b VideoProcAmpProperty} {\i Property}{\b , long*} {\i plMin}{\b , long*} {\i plMax}{\b , long*} {\i plSteppingDelta}{\b , long*} {\i plDefault}{\b , VideoProcAmpFlags*} {\i plCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the minimum, maximum, and default values for specific video quality 
settings.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the video 
quality setting to determine the range of. Use a member of the 
{\b VideoProcAmpProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of the video 
quality setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of the video 
quality setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta of 
the video quality setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of the 
video quality setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the capabilities of the 
video quality setting. Pointer to a member of the 
{\b VideoProcAmpFlags} enumerated type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetRange(}{\b CameraControlProperty} {\i Property}{\b , long*} {\i plMin}{\b , long*} {\i plMax}{\b , long*} {\i plSteppingDelta}{\b , long*} {\i plDefault}{\b , long*} {\i plCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the minimum, maximum, and default values for specific camera control 
settings.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERAC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the camera 
control setting to determine the range of. Use a member of the 
{\b CameraControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of the camera 
control setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of the camera 
control setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta of 
the camera control setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of the 
camera control setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the capabilities of the 
camera control setting. Pointer to a member of the 
{\b CameraControlFlags} enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::GetState\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::GetState(}{\b DWORD} {\i dwMilliSecsTimeout}{\b , FILTER_STATE*} {\i State}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve the current state of the filter. We don't send any data during 
PAUSE, so to avoid hanging renderers, we need to return VFW_S_CANT_CUE 
when paused.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwMilliSecsTimeout}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the duration of the time-out, 
in milliseconds.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i State}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the name of the filter being added.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::IntersectFormats\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::IntersectFormats(}{\b H245VideoCapability*} {\i pLocalCapability}{\b , H245VideoCapability*} {\i pRemoteCapability}{\b , HANDLE*} {\i phIntersectionCookie}{\b , H245VideoCapability*} {\i pIntersectedCapability}{\b , AM_MEDIA_TYPE*} {\i pAMMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
compare and intersect one local capability and one remote capability 
and to obtain configuration parameters.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pLocalCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 video 
format, including all parameters and options defined by H.245, of a 
local video capability.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRemoteCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 
video format, including all parameters and options defined by H.245, of 
a remote video capability.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phIntersectionCookie}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the dynamic instance of 
intersected capabilities. When the TAPI MSP Video Capture filter 
creates the intersection, it may allocate memory for the intersected 
capability parameters. The intersection cookie identifies this 
allocation. This is used to release internal allocations and also as an 
argument to the {\b GetNegotiatedLimitProperty} method.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIntersectedCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 
video format, of the resolved common local and remote capability 
options and limits.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAMMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b AM_MEDIA_TYPE} structure that has been initialized to regard 
negotiated options.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b GetNegotiatedLimitProperty}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::JoinFilterGraph\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::JoinFilterGraph(}{\b IFilterGraph} {\i pGraph}{\b , LPCWSTR} {\i pName}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
inform a filter that it has joined a filter graph.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pGraph}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the filter graph to 
join.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pName}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the name of the filter being added.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 We don't validate input parameters as both pointers can be 
NULL when we leave the graph.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Why only this device but not all installed devices?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 The following delete may complain that m_user.pvi has been freed already 
investigate!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_fDialogUp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIVCap::m_fDialogUp}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE if a VfW driver 
dialog box is up\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Describe and clean up other members\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Not all these need to be dynamic! Use constants whenever possibe. 
Camera control\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_fDialogUp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIVCap::m_fDialogUp}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE if a VfW driver 
dialog box is up\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_fDialogUp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIVCap::m_fDialogUp}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE if a VfW driver 
dialog box is up\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_lock\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCritSec CTAPIVCap::m_lock}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Critical section used for 
locking by the {\b CBaseFilter}
 base class.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_lock\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCritSec CTAPIVCap::m_lock}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Critical section used for 
locking by the {\b CBaseFilter}
 base class.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_lock\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCritSec CTAPIVCap::m_lock}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Critical section used for 
locking by the {\b CBaseFilter}
 base class.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pCapturePin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCapturePin CTAPIVCap::m_pCapturePin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the capture pin 
object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pCapturePin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCapturePin CTAPIVCap::m_pCapturePin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the capture pin 
object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pCapturePin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCapturePin CTAPIVCap::m_pCapturePin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the capture pin 
object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pOverlayPin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b COverlayPin CTAPIVCap::m_pOverlayPin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the overlay 
pin object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pOverlayPin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b COverlayPin CTAPIVCap::m_pOverlayPin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the overlay 
pin object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pOverlayPin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b COverlayPin CTAPIVCap::m_pOverlayPin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the overlay 
pin object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pPreviewPin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CPreviewPin CTAPIVCap::m_pPreviewPin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the preview 
pin object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pPreviewPin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CPreviewPin CTAPIVCap::m_pPreviewPin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the preview 
pin object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pPreviewPin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CPreviewPin CTAPIVCap::m_pPreviewPin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the preview 
pin object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::m_pRtpPdPin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CPreviewPin CTAPIVCap::m_pRtpPdPin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the Rtp Pd 
pin object\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IAMVfwCaptureDialogs}, {\b IAMVideoProcAmp}, 
{\b IAMCameraControl}, {\b IH245VideoCapability}, {\b IPersistStream} and 
{\b IPersistPropertyBag}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Pause\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::Pause(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method transitions the filter 
the filter to State_Paused state if it is not in this state already.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Actually, we want to be able and see the source dialog while running...\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::PauseThd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CTAPIVCap}{\b ::PauseThd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method puts the capture 
worker thread in a paused state and wait for it to get there.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Prepare\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b CTAPIVCap}{\b ::Prepare(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to allocate 
resources in preparation for capture loop.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do some real error handling here\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Before you can do the following you need to decouple the samples 
from the capture buffers. This means using two different queues: one for 
the capture samples, and one for the capture buffers. This will also allow 
for a much smaller number of samples than capture buffers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do some real error handling here\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Before you can do the following you need to decouple the samples 
from the capture buffers. This means using two different queues: one for 
the capture samples, and one for the capture buffers. This will also allow 
for a much smaller number of samples than capture buffers.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do some real error handling here\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Before you can do the following you need to decouple the samples 
from the capture buffers. This means using two different queues: one for 
the preview samples, and one for the capture buffers. This will also allow 
for a much smaller number of samples than capture buffers.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::ReleaseFormatTable\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::ReleaseFormatTable(}{\b H245VideoCapabilityTable*} {\i pTable}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
to release memory allocated by the {\b GetFormatTable} method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pTable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b H245VideoCapabilityTable} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b GetFormatTable}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::ReleaseFrame\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::ReleaseFrame(}{\b LPTHKVIDEOHDR} {\i ptvh}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
return a buffer to the capture driver.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_FALSE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If the pin is off (IAMStreamControl)\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ptvh}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ???.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove this before checkin!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::ReleaseNegotiatedCapability\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::ReleaseNegotiatedCapability(}{\b HANDLE} {\i hIntersectionCookie}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
is used to release the TAPI MSP Video Capture filter internal memory 
allocated by either the {\b IntersectFormats} or 
{\b GetLocalFormat} method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hIntersectionCookie}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the dynamic instance of 
intersected capabilities.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IntersectFormats}, {\b GetLocalFormat}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Are you sure 0 is not a valid handle here?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Run\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::Run(}{\b REFERENCE_TIME} {\i tStart}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method transitions the filter 
from paused to running state if it is not in this state already.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i tStart}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the reference time value 
corresponding to stream time 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::RunThd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::RunThd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method puts the worker 
thread into the run state. This call does not wait for the state 
transition to be complete before returning.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE on success, FALSE otherwise\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Set\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::Set(}{\b CameraControlProperty} {\i Property}{\b , long} {\i lValue}{\b , long} {\i Flags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to set the value 
of a camera control setting.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/CAMERAC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the camera 
control setting to set the value of. Use a member of the 
{\b CameraControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the new value of the camera control 
setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Flags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A member of the {\b CameraControlFlags} enumerated 
type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Set\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::Set(}{\b VideoProcAmpProperty} {\i Property}{\b , long} {\i lValue}{\b , VideoProcAmpFlags} {\i Flags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to set the value 
of a video quality setting.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/PROCAMP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the video 
quality setting to set the value of. Use a member of the 
{\b VideoProcAmpProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the new value of the video quality 
setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Flags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A member of the {\b VideoProcAmpFlags} enumerated 
type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::SetCurrentDevice\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::SetCurrentDevice(}{\b DWORD} {\i dwDeviceIndex}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
specify the index of the capture device to use.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVENUM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_STOPPED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Need to stop this filter first\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NO_CAPTURE_HARDWARE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No Capture hardware is available\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwDeviceIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the index of the capture device 
to use.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::SetIDBase\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::SetIDBase(}{\b DWORD} {\i dwIDBase}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
control the sequential numbering range used to uniquely identify the 
TAPI MSP Video Capture filter capabilities.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIDBase}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a DWORD value that indicates the 
beginning number in the sequence.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This dwIDBase value probably has a range. Figure it out and validate input param...\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::SetMode\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::SetMode(}{\b IPin*} {\i pPin}{\b , long} {\i Mode}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to set the 
video control mode of operation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the pin to set the video control 
mode on.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Mode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify a combination of the flags from the 
{\b VideoControlFlags} enumeration.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::SetSyncSource\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::SetSyncSource(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method identifies the 
reference clock to which the filter should synchronize activity.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\i pClock} parameter can be NULL, meaning that the filter 
should run as fast as possible at its current quality settings 
without any attempt to synchronize...\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Stop\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::Stop(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method transitions the filter 
the filter to State_Stopped state if it is not in this state already.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::StopThd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CTAPIVCap}{\b ::StopThd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method puts the capture 
worker thread in a stopped state.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::ThreadProc\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::ThreadProc(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Capture worker thread.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns 0.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 General strategy for thread synchronization: 
as much as possible we try to handle thread state transitions without 
trying to grab any critical sections. we use InterlockedExchange of a 
thread state variable and count on the fact that only Active and Inactive 
and the ThreadProc can change the thread state\par 

this works because: the caller of Active/Inactive is serialized so we 
will never try to make two state changes simultaneously. 
so state transitions boil down to a few simple possibilities:\par 

Not->Create   - Create() does this. effectively serializes Create 
so that the first thread does the work and subsequent 
threads fail.\par 

Create->Init  - worker does this when it starts up. worker will always 
proceed to Pause, this state exists only to make debugging 
easier. 
Init->Pause   - worker does this when done with initialization.\par 

Pause->Run    - user does  this via Run() 
Run->Pause    - user does this via Pause()\par 

Run->Stop     - user does this via Stop() 
Pause->Stop   - user does this via Stop()\par 

Stop->Destroy - another debugging state. worker sets destroy to indicate 
that it has noticed Stop request and is not shutting down 
thread always proceeds to Exit from 
Destroy->Exit - worker does this prior to dying.  this is a debug transition 
Exit->Not     - Destroy() does this after waiting for the worker to die.\par 

When Active returns, worker should always be in Pause or Run state 
When Inactive returns, worker should always be in Not state (worker does 
not exist)\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::ThreadProcInit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVCap}{\b ::ThreadProcInit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Thread init stub.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns 0\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::Unprepare\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b CTAPIVCap}{\b ::Unprepare(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
free resources used by the capture loop.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns NOERROR\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVCap::~CTAPIVCap\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CTAPIVCap}{\b ::~CTAPIVCap(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CTAPIVCap}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::AddBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::AddBuffer(}{\b PVIDEOHDR} {\i pVHdr}{\b , DWORD} {\i cbVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
post a data buffer to a VfW capture device when video streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
PVIDEOHDR structure identifying the video buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size of the structure pointed to by 
the {\i pVHdr} parameter.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::AllocateBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::AllocateBuffer(}{\b LPTHKVIDEOHDR *} {\i pptvh}{\b , DWORD} {\i dwIndex}{\b , DWORD} {\i cbBuffer}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to allocate 
a data buffer when video streaming from a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pptvh}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to a 
THKVIDEOHDR structure to receive the video buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the positional index of the video buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbBuffer}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size of the video buffer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::AllocateHeaders\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::AllocateHeaders(}{\b DWORD} {\i dwNumHdrs}{\b , DWORD} {\i cbHdr}{\b , LPVOID*} {\i ppaHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
video headers for data buffers used with a VfW capture device in streaming 
mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwNumHdrs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of video headers to allocate.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size of the video headers to allocate.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppaHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to receive 
the video headers allocated.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::ConnectToDriver\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::ConnectToDriver(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
open a VfW capture device, get its format capibilities, and set a default 
format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 You may have to do some palette work here\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This should be adjusted on the available memory and the 
type of capture (streaming 4 buffs vs. frame grabbing 1 buff)\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::CreateVfWCapDev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CVfWCapDev*} {\b CVfWCapDev}{\b ::CreateVfWCapDev(}{\b CTAPIVCap*} {\i pCaptureFilter}{\b , CCapDev**} {\i ppCapDev}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
helper function creates an object to interact with the VfW capture 
device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_OUTOFMEMORY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Out of memory\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCaptureFilter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the owner 
filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppCapDev}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to the 
newly created {\b CVfWCapDev}
 object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::CVfWCapDev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CVfWCapDev}{\b ::CVfWCapDev(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the constructor 
for the {\b CVfWCapDev}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::DisconnectFromDriver\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::DisconnectFromDriver(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
release the capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::FreeBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::FreeBuffer(}{\b PVIDEOHDR} {\i pVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
free a data buffer that was used with a VfW capture device in streaming 
mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
PVIDEOHDR structure identifying the video buffer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::GetFormatFromDriver\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::GetFormatFromDriver(}{\b VIDEOINFOHEADER **} {\i ppvi}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve the VfW capture device format in use.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppvi}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to 
a video info header structure to receive the video format description.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Verify the value for this fps\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::GrabFrame\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::GrabFrame(}{\b PVIDEOHDR} {\i pVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
grab a video frame from a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a VIDEOHDR structure to 
receive the video frame.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::HasDialog\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::HasDialog(}{\b int} {\i iDialog}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine if the specified dialog box exists in the driver.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VFWDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_OK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If the driver contains the dialog box\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_FALSE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If the driver doesn't contain the dialog box\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iDialog}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the desired dialog box. This is a member 
of the {\b VfwCaptureDialogs} enumerated data type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::InitializeStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::InitializeStreaming(}{\b DWORD} {\i usPerFrame}{\b , DWORD_PTR} {\i hEvtBufferDone}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
initialize a VfW capture device for streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i usPerFrame}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the frame rate to be used.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hEvtBufferDone}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the event to be 
signaled whenever a frame is available.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::IsBufferDone\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CVfWCapDev}{\b ::IsBufferDone(}{\b PVIDEOHDR} {\i pVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
check the DONE status of a video streaming buffer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if the buffer is DONE, FALSE otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
PVIDEOHDR structure identifying the video buffer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IAMVfWCaptureDialogs}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::ProfileCaptureDevice\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::ProfileCaptureDevice(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine the list of formats supported by a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::SendDriverMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::SendDriverMessage(}{\b int} {\i iDialog}{\b , int} {\i uMsg}{\b , long} {\i dw1}{\b , long} {\i dw2}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
send a driver-specific message.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VFWDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iDialog}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the desired dialog box. This is a member 
of the {\b VfwCaptureDialogs} enumerated data type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the message to send to the driver.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dw1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies message data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dw2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies message data.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::SendFormatToDriver\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::SendFormatToDriver(}{\b LONG} {\i biWidth}{\b , LONG} {\i biHeight}{\b , LONG} {\i biCompression}{\b , WORD} {\i biBitCount}{\b , REFERENCE_TIME} {\i AvgTimePerFrame}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
tell the VfW capture device what format to use.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i biWidth}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the image width.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i biHeight}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the image height.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i biCompression}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the format type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i biBitCount}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of bits per pixel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i AvgTimePerFrame}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the frame rate.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Fix units for fps\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Rename those variables - it's the format, not the number of colors...\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Copy the palette if there is one\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do I need to set a palette too?  Do I care?\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::ShowDialog\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::ShowDialog(}{\b int} {\i iDialog}{\b , HWND} {\i hwnd}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
displaay the specified dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VFWDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_STOPPED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The operation could not be performed because the filter is not stopped\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_CANNOT_CONNECT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No combination of intermediate filters could be found to make the connection\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iDialog}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the desired dialog box. This is a member 
of the {\b VfwCaptureDialogs} enumerated data type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the handle of the dialog box's parent 
window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::StartStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::StartStreaming(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
start streaming from a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::StopStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::StopStreaming(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
stop streaming from a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::TerminateStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CVfWCapDev}{\b ::TerminateStreaming(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
tell a VfW capture device to terminate streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CVfWCapDev::~CVfWCapDev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CVfWCapDev}{\b ::~CVfWCapDev(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CVfWCapDev}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEV.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CWDMCapDev}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class provides access to the streaming class 
driver, through which we acess the video capture mini-driver properties 
using IOCtls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::AddBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::AddBuffer(}{\b PVIDEOHDR} {\i pVHdr}{\b , DWORD} {\i cbVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
post a data buffer to a VfW capture device when video streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
PVIDEOHDR structure identifying the video buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size of the structure pointed to by 
the {\i pVHdr} parameter.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::AllocateBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::AllocateBuffer(}{\b LPTHKVIDEOHDR *} {\i pptvh}{\b , DWORD} {\i dwIndex}{\b , DWORD} {\i cbBuffer}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to allocate 
a data buffer when video streaming from a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pptvh}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to a 
THKVIDEOHDR structure to receive the video buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the positional index of the video buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbBuffer}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size of the video buffer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::AllocateHeaders\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::AllocateHeaders(}{\b DWORD} {\i dwNumHdrs}{\b , DWORD} {\i cbHdr}{\b , LPVOID*} {\i ppaHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
video headers for data buffers used with a WDM capture device in streaming 
mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwNumHdrs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of video headers to allocate.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size of the video headers to allocate.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppaHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to receive 
the video headers allocated.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove this before checkin!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::ConnectToDriver\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::ConnectToDriver(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
open a WDM capture device, get its format capibilities, and set a default 
format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Verify error management\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 You may have to do some palette work here\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This should be adjusted on the available memory and the 
type of capture (streaming 4 buffs vs. frame grabbing 1 buff)\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::CreateDriverSupportedDataRanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b CWDMCapDev}{\b ::CreateDriverSupportedDataRanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
builds the list of video data ranges supported by the capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the number of valid data ranges in the list.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::CreateWDMCapDev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CWDMCapDev*} {\b CWDMCapDev}{\b ::CreateWDMCapDev(}{\b CTAPIVCap*} {\i pCaptureFilter}{\b , CCapDev**} {\i ppCapDev}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
helper function creates an object to interact with the WDM capture 
device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_OUTOFMEMORY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Out of memory\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCaptureFilter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the owner 
filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppCapDev}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to the 
newly created {\b CWDMCapDev}
 object.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::CWDMCapDev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CWDMCapDev}{\b ::CWDMCapDev(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the constructor 
for the {\b CWDMCapDev}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::DeQueueHeader\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b LPVIDEOHDR} {\b CWDMCapDev}{\b ::DeQueueHeader(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function dequeues a 
video buffer from the list of video buffers used for streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a valid pointer if successful, or NULL otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::DeviceIoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CWDMCapDev}{\b ::DeviceIoControl(}{\b HANDLE} {\i hFile}{\b , DWORD} {\i dwIoControlCode}{\b , LPVOID} {\i lpInBuffer}{\b , DWORD} {\i nInBufferSize}{\b , LPVOID} {\i lpOutBuffer}{\b , DWORD} {\i nOutBufferSize}{\b , LPDWORD} {\i lpBytesReturned}{\b , BOOL} {\i bOverlapped}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function wraps around 
::DeviceIOControl.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if successful, or FALSE otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hFile}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Handle to the device that is to perform the 
operation.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIoControlCode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the control code for the 
operation.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpInBuffer}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a buffer that contains the data 
required to perform the operation.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nInBufferSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size, in bytes, of the buffer 
pointed to by {\i lpInBuffer}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpOutBuffer}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a buffer that receives the 
operation's output data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i nOutBufferSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size, in bytes, of the 
buffer pointed to by {\i lpOutBuffer}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpBytesReturned}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a variable that receives the 
size, in bytes, of the data stored into the buffer pointed to by 
{\i lpOutBuffer}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i bOverlapped}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 If TRUE, the operation is performed 
asynchronously, if FALSE, the operation is synchronous.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::DisconnectFromDriver\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::DisconnectFromDriver(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
release the capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::FindMatchDataRangeVideo\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CWDMCapDev}{\b ::FindMatchDataRangeVideo(}{\b PBITMAPINFOHEADER} {\i pbiHdr}{\b , BOOL} {\i pfValidMatch}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method either 
finds a video data range compatible with the bitamp info header passed 
in, or the prefered video data range.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a valid pointer to a {\b KS_DATARANGE_VIDEO} structure if 
successful, or a NULL pointer otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pbiHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Bitmap info header to match.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pfValidMatch}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set to TRUE if a match was found, FALSE 
otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 \\redrum\\slmro\\proj\\wdm10\\src\\dvd\\amovie\\proxy\\filter\\ksutil.cpp(207):KsGetMediaTypes(\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::FreeBuffer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::FreeBuffer(}{\b PVIDEOHDR} {\i pVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
free a data buffer that was used with a VfW capture device in streaming 
mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
PVIDEOHDR structure identifying the video buffer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::GetDefaultValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::GetDefaultValue(}{\b GUID} {\i guidPropertySet}{\b , ULONG} {\i ulPropertyId}{\b , PLONG} {\i plDefValue}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function gets the 
default value of a video property of a capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidPropertySet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 GUID of the KS property set we are touching. It 
is either PROPSETID_VIDCAP_VIDEOPROCAMP or PROPSETID_VIDCAP_CAMERACONTROL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ulPropertyId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of the property we are touching. It is 
either KSPROPERTY_VIDEOPROCAMP_* or KSPROPERTY_CAMERACONTROL_*.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a LONG to receive the default value.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::GetDriverDetails\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::GetDriverDetails(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
dump the list of capabilities of a WDM capture device. This code should 
used in DEBUG mode only!\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nade\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::GetDriverSupportedDataRanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b CWDMCapDev}{\b ::GetDriverSupportedDataRanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
returns the list of video data ranges supported by the capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the number of valid data ranges in the list.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::GetFormatFromDriver\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::GetFormatFromDriver(}{\b VIDEOINFOHEADER **} {\i ppvi}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve the WDM capture device format in use.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppvi}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a pointer to 
a video info header structure to receive the video format description.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::GetPropertyValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::GetPropertyValue(}{\b GUID} {\i guidPropertySet}{\b , ULONG} {\i ulPropertyId}{\b , PLONG} {\i plValue}{\b , PULONG} {\i pulFlags}{\b , PULONG} {\i pulCapabilities}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function gets the 
current value of a video property of a capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidPropertySet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 GUID of the KS property set we are touching. It 
is either PROPSETID_VIDCAP_VIDEOPROCAMP or PROPSETID_VIDCAP_CAMERACONTROL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ulPropertyId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of the property we are touching. It is 
either KSPROPERTY_VIDEOPROCAMP_* or KSPROPERTY_CAMERACONTROL_*.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a LONG to receive the current value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pulFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a ULONG to receive the current 
flags. We only care about KSPROPERTY_*_FLAGS_MANUAL or 
KSPROPERTY_*_FLAGS_AUTO.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pulCapabilities}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a ULONG to receive the 
capabilities. We only care about KSPROPERTY_*_FLAGS_MANUAL or 
KSPROPERTY_*_FLAGS_AUTO.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 Developer Notes\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 KSPROPERTY_VIDEOPROCAMP_S == KSPROPERTY_CAMERACONTROL_S.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::GetRangeValues\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::GetRangeValues(}{\b GUID} {\i guidPropertySet}{\b , ULONG} {\i ulPropertyId}{\b , PLONG} {\i plMin}{\b , PLONG} {\i plMax}{\b , PLONG} {\i plStep}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function gets the 
range values of a video property of a capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidPropertySet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 GUID of the KS property set we are touching. It 
is either PROPSETID_VIDCAP_VIDEOPROCAMP or PROPSETID_VIDCAP_CAMERACONTROL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ulPropertyId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of the property we are touching. It is 
either KSPROPERTY_VIDEOPROCAMP_* or KSPROPERTY_CAMERACONTROL_*.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a LONG to receive the minimum value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a LONG to receive the maximum value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plStep}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a LONG to receive the step value.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::GrabFrame\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::GrabFrame(}{\b PVIDEOHDR} {\i pVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
grab a video frame from a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a VIDEOHDR structure to 
receive the video frame.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::HasDialog\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::HasDialog(}{\b int} {\i iDialog}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine if the specified dialog box exists in the driver.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_OK\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If the driver contains the dialog box\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 S_FALSE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If the driver doesn't contain the dialog box\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iDialog}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the desired dialog box. This is a member 
of the {\b VfwCaptureDialogs} enumerated data type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::InitializeStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::InitializeStreaming(}{\b DWORD} {\i usPerFrame}{\b , DWORD_PTR} {\i hEvtBufferDone}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
initialize a WDM capture device for streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i usPerFrame}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the frame rate to be used.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hEvtBufferDone}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the event to be 
signaled whenever a frame is available.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::IsBufferDone\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CWDMCapDev}{\b ::IsBufferDone(}{\b PVIDEOHDR} {\i pVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
check the DONE status of a video streaming buffer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if the buffer is DONE, FALSE otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
PVIDEOHDR structure identifying the video buffer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::m_dwDeviceID\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CWDMCapDev::m_dwDeviceID}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Capture device ID.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::m_hDriver\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HANDLE CWDMCapDev::m_hDriver}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This member holds the driver 
file handle.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::m_pVideoDataRanges\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PVIDEO_DATA_RANGES CWDMCapDev::m_pVideoDataRanges}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This member 
points to the video data range structure.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IAMVfWCaptureDialogs}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::ProfileCaptureDevice\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::ProfileCaptureDevice(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine the list of formats supported by a WDM capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::QueueHeader\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CWDMCapDev}{\b ::QueueHeader(}{\b LPVIDEOHDR} {\i lpVHdr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function actually adds the 
video buffer to the list of video buffers used for streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a {\b VIDEOHDR} structure describing 
a video buffer to add to the list of streaming buffers.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::QueueRead\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CWDMCapDev}{\b ::QueueRead(}{\b DWORD} {\i dwIndex}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function queues a read 
operation on a video streaming pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if successful, or FALSE otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Index of the video structure in read buffer.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove this before checkin!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::SendFormatToDriver\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::SendFormatToDriver(}{\b LONG} {\i biWidth}{\b , LONG} {\i biHeight}{\b , LONG} {\i biCompression}{\b , WORD} {\i biBitCount}{\b , REFERENCE_TIME} {\i AvgTimePerFrame}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
tell the VfW capture device what format to use.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i biWidth}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the image width.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i biHeight}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the image height.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i biCompression}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the format type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i biBitCount}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of bits per pixel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i AvgTimePerFrame}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the frame rate.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Fix units for fps\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Rename those variables - it's the format, not the number of colors...\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Copy the palette if there is one\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Allocate size for DATAPINCONNECT dynamically\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Read this from somewhere\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::SetPropertyValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::SetPropertyValue(}{\b GUID} {\i guidPropertySet}{\b , ULONG} {\i ulPropertyId}{\b , LONG} {\i lValue}{\b , ULONG} {\i ulFlags}{\b , ULONG} {\i ulCapabilities}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function sets the 
current value of a video property of a capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidPropertySet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 GUID of the KS property set we are touching. It 
is either PROPSETID_VIDCAP_VIDEOPROCAMP or PROPSETID_VIDCAP_CAMERACONTROL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ulPropertyId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 ID of the property we are touching. It is 
either KSPROPERTY_VIDEOPROCAMP_* or KSPROPERTY_CAMERACONTROL_*.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 New value.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ulFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 New flags. We only care about KSPROPERTY_*_FLAGS_MANUAL 
or KSPROPERTY_*_FLAGS_AUTO.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ulCapabilities}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 New capabilities. We only care about 
KSPROPERTY_*_FLAGS_MANUAL or KSPROPERTY_*_FLAGS_AUTO.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 Developer Notes\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 KSPROPERTY_VIDEOPROCAMP_S == KSPROPERTY_CAMERACONTROL_S.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::SetState\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CWDMCapDev}{\b ::SetState(}{\b KSSTATE} {\i ksState}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function sets the state of the 
kernel streaming video pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if successful, or FALSE otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ksState}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 New state.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::ShowDialog\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::ShowDialog(}{\b int} {\i iDialog}{\b , HWND} {\i hwnd}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
displaay the specified dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_UNEXPECTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Unrecoverable error\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NOT_STOPPED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The operation could not be performed because the filter is not stopped\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_CANNOT_CONNECT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No combination of intermediate filters could be found to make the connection\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iDialog}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the desired dialog box. This is a member 
of the {\b VfwCaptureDialogs} enumerated data type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hwnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the handle of the dialog box's parent 
window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::Start\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CWDMCapDev}{\b ::Start(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function puts the kernel streaming 
video pin in streaming mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if successful, or FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::StartStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::StartStreaming(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
start streaming from a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::Stop\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CWDMCapDev}{\b ::Stop(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function stops streaming on the 
kernel streaming video pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if successful, or FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::StopStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::StopStreaming(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
stop streaming from a VfW capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::TerminateStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CWDMCapDev}{\b ::TerminateStreaming(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
tell a WDM capture device to terminate streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMCapDev::~CWDMCapDev\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CWDMCapDev}{\b ::~CWDMCapDev(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CWDMCapDev}
 object. Closes the driver file handle and 
releases the video data range memory\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICEW.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CWDMDialog}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class provides support for property 
pages to be displayed within a property sheet.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::BaseDlgProc\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CWDMDialog}{\b ::BaseDlgProc(}{\b HWND} {\i hDlg}{\b , UINT} {\i uMessage}{\b , WPARAM} {\i wParam}{\b , LPARAM} {\i lParam}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function implements 
the dialog box procedure for the page of a property sheet.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Except in response to the WM_INITDIALOG message, the dialog box 
procedure returns nonzero if it processes the message, and zero if it 
does not.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Handle to dialog box.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i uMessage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Message sent to the dialog box.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 First message parameter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lParam}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Second message parameter.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::Create\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HPROPSHEETPAGE} {\b CWDMDialog}{\b ::Create(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function creates a new 
page for a property sheet.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the handle to the new property sheet if successful, or 
NULL otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::CWDMDialog\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CWDMDialog}{\b ::CWDMDialog(}{\b int} {\i DlgId}{\b , DWORD} {\i dwNumControls}{\b , GUID} {\i guidPropertySet}{\b , PPROPSLIDECONTROL} {\i pPC}{\b , PDWORD} {\i pdwHelp}{\b , CWDMPin *} {\i pCWDMPin}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Property page class constructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i DlgId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Resource ID of the property page dialog.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwNumControls}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Number of controls to display in the page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i guidPropertySet}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 GUID of the KS property set we are showing in 
the property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPC}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the list of slider controls 
to be displayed in the property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwHelp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the list of help IDs to be displayed 
in the property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pCWDMPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the kernel streaming object 
we will query the property on.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::DoCommand\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b CWDMDialog}{\b ::DoCommand(}{\b WORD} {\i wCmdID}{\b , WORD} {\i hHow}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function handles WM_COMMAND. This 
is where a click on the Default button or one of the Auto checkboxes 
is handled\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Always returns 1.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wCmdID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Command ID.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hHow}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Notification code.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_bChanged\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CWDMDialog::m_bChanged}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This member is set to TRUE after the 
page has been changed.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_bInit\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CWDMDialog::m_bInit}\par
\pard\plain \sa160\sl240 \fs21\lang1033 This member is set to TRUE after the 
page has been initialized.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_DlgID\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CWDMDialog::m_DlgID}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the property page dialog.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_dwNumControls\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CWDMDialog::m_dwNumControls}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Number of controls to\\ 
display in the page.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_guidPropertySet\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b GUID CWDMDialog::m_guidPropertySet}\par
\pard\plain \sa160\sl240 \fs21\lang1033 GUID of the KS property 
we are showing in the property page.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_hDlg\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CWDMDialog::m_hDlg}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle of the property page.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_pCWDMPin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CWDMPin * CWDMDialog::m_pCWDMPin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the kernel 
streaming object we will query the property on.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_pdwHelp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PDWORD CWDMDialog::m_pdwHelp}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the list of help IDs 
to be displayed in the property page.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::m_pPC\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b PPROPSLIDECONTROL CWDMDialog::m_pPC}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the list of 
slider controls to be displayed in the property page.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::QueryCancel\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b CWDMDialog}{\b ::QueryCancel(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function handles 
PSN_QUERYCANCEL by resetting the values of the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Always returns 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CWDMDialog::SetActive\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b int} {\b CWDMDialog}{\b ::SetActive(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function handles 
PSN_SETACTIVE by intializing all the property page controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WDMDLGS.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Always returns 0.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetCapDeviceInfo\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b GetCapDeviceInfo(}{\b DWORD} {\i dwDeviceIndex}{\b , PDEVICEINFO} {\i pDeviceInfo}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve information about a capture device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVENUM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VFW_E_NO_CAPTURE_HARDWARE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No Capture hardware is available\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwDeviceIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the device index of the capture 
device to return information about.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pDeviceInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a {\b DEVICEINFO} 
structure to receive information about a capture device.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetNumCapDevices\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b GetNumCapDevices(}{\b PDWORD} {\i pdwNumDevices}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
determine the number of installed capture devices. This number includes 
only enabled devices.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVENUM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwNumDevices}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD to receive 
the number of installed capture devices.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 Developer Notes\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 MSDN references: 
DirectX 5, DirectX Media, DirectShow, Application Developer's Guide 
"Enumerate and Access Hardware Devices in DirectShow Applications"\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Could there be another bag property we could use to get version info for WDM devices?\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 GetProcOrd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b FARPROC} {\b GetProcOrd(}{\b HINSTANCE} {\i hinstDll}{\b , UINT} {\i ord}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 GetProcAddress on a DLL by ordinal.\par 

Win95 does not let you GetProcAddress on KERNEL32 by ordinal, 
so we need to do it the evil way.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hinstDll}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The instance handle of the DLL we want to get the ordinal 
from.  The only DLL you need to use this function for is 
KERNEL32.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ord}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 The ordinal you want to retrieve.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 OpenVxDHandle\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b OpenVxDHandle(}{\b HANDLE} {\i hEvent}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 On Win9x we have to convert the event 
handle we will be using as a callback into a VxD handle. Ssince the 
Win9x kernel does not publish this entry point we dynamically link to 
it.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/WRKRTHD.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns mapped event handle\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hEvent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a event handle.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TemplateThunk\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b TemplateThunk(}{\b FARPROC} {\i fp}{\b , PCSTR} {\i pszSig}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Call down, passing all sorts of random parameters.\par 

Parameter signature is as follows:\par 

p = 0:32 pointer to convert to 16:16 pointer 
l = a 32-bit integer 
s = a 16-bit integer\par 

P = returns a pointer 
L = returns a 32-bit integer 
S = returns a 16-bit signed integer 
U = returns a 16-bit unsigned integer\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fp}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 16:16 function to call.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pszSig}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Function signature.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ThunkGetProcAddresses\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b ThunkGetProcAddresses(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Get all the necessary proc addresses.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ThunkInit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b ThunkInit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Initialize the various goo we need in KERNEL32.\par 

Returns FALSE if we cannot initialize the thunks. 
(For example, if the platform doesn't support flat thunks.)\par 

Note that you must never ever call this function more 
than once.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ThunkInit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b ThunkInit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 GetProcAddress16 our brains out.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ThunkTerm\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b ThunkTerm(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Free it.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoCapDriverDescAndVer\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoCapDriverDescAndVer(}{\b DWORD} {\i dwDeviceID}{\b , LPTSTR} {\i lpszDesc}{\b , UINT} {\i cbDesc}{\b , LPTSTR} {\i lpszVer}{\b , UINT} {\i cbVer}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function gets strings 
for the description and version of a video capture driver\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwDeviceID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the index of which video driver to get 
information about.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpszDesc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a place to return the description\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbDesc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the length of the description string\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpszVer}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a place to return the version\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i cbVer}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the length of the version string\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use this function to get strings describing the driver and its version\par 

/***************************************************************************\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoClose\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoClose(}{\b HVIDEO} {\i hVideo}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function closes the specified video 
device channel.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specified device handle is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NONSPECIFIC\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The driver failed to close the channel.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel. 
If this function is successful, the handle is invalid 
after this call.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If buffers have been sent with {\b videoStreamAddBuffer} and 
they haven't been returned to the application, 
the close operation fails. You can use {\b videoStreamReset} to mark all 
pending buffers as done.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoOpen} {\b videoStreamInit} {\b videoStreamFini} {\b videoStreamReset}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoConfigure\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoConfigure(}{\b HVIDEO} {\i hVideo}{\b , UINT} {\i msg}{\b , DWORD} {\i dwFlags}{\b , LPDWORD} {\i lpdwReturn}{\b , LPVOID} {\i lpData1}{\b , DWORD} {\i dwSize1}{\b , LPVOID} {\i lpData2}{\b , DWORD} {\i dwSize2}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function sets or retrieves 
the options for a configurable driver.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specified device handle is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NOTSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Function is not supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i msg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the option to set or retrieve. The 
following options are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DVM_PALETTE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates a palette is being sent to the driver 
or retrieved from the driver.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DVM_PALETTERGB555\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates an RGB555 palette is being 
sent to the driver.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DVM_FORMAT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates format information is being sent to 
the driver or retrieved from the driver.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies flags for configuring or 
interrogating the device driver. The following flags are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_CONFIGURE_SET\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates values are being sent to the driver.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_CONFIGURE_GET\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates values are being obtained from the driver.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_CONFIGURE_QUERY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Determines if the 
driver supports the option specified by {\i msg}. This flag 
should be combined with either the VIDEO_CONFIGURE_SET or 
VIDEO_CONFIGURE_GET flag. If this flag is 
set, the {\i lpData1}, {\i dwSize1}, {\i lpData2}, and {\i dwSize2} 
parameters are ignored.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_CONFIGURE_QUERYSIZE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Returns the size, in bytes, 
of the configuration option in {\i lpdwReturn}. This flag is only valid if 
the VIDEO_CONFIGURE_GET flag is also set.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_CONFIGURE_CURRENT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Requests the current value. 
This flag is valid only if  the VIDEO_CONFIGURE_GET flag is also set.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_CONFIGURE_NOMINAL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Requests the nominal value. 
This flag is valid only if  the VIDEO_CONFIGURE_GET flag is also set.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_CONFIGURE_MIN\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Requests the minimum value. 
This flag is valid only if  the VIDEO_CONFIGURE_GET flag is also set.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_CONFIGURE_MAX\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Get the maximum value. 
This flag is valid only if  the VIDEO_CONFIGURE_GET flag is also set.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpdwReturn}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Points to a DWORD used for returning information 
from the driver.  If 
the VIDEO_CONFIGURE_QUERYSIZE flag is set, {\i lpdwReturn} is 
filled with the size of the configuration option.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpData1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to message specific data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwSize1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size, in bytes, of the {\i lpData1} 
buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpData2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to message specific data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwSize2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size, in bytes, of the {\i lpData2} 
buffer.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoOpen} {\b videoMessage}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoDialog\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoDialog(}{\b HVIDEO} {\i hVideo}{\b , HWND} {\i hWndParent}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function displays a channel-specific 
dialog box used to set configuration parameters.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specified device handle is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NOTSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Function is not supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hWndParent}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the parent window handle.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies flags for the dialog box. The 
following flag is defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_DLG_QUERY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If this flag is set, the driver immediately 
returns zero if it supplies a dialog box for the channel, 
or DV_ERR_NOTSUPPORTED if it does not.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Typically, each dialog box displayed by this 
function lets the user select options appropriate for the channel. 
For example, a VIDEO_IN channel dialog box lets the user select 
the image dimensions and bit depth.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoOpen} {\b videoConfigureStorage}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoFunc\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void CALLBACK} {\b videoFunc(}{\b HVIDEO} {\i hVideo}{\b , DWORD} {\i wMsg}{\b , DWORD} {\i dwInstance}{\b , DWORD} {\i dwParam1}{\b , DWORD} {\i dwParam2}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 {\b videoFunc} is a placeholder for an 
application-supplied function name. The actual name must be exported by 
including it in an EXPORTS statement in the DLL's module-definition file. 
This is used only when a callback function is specified in 
{\b videoStreamInit}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel 
associated with the callback.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the MM_DRVM_ messages. Messages indicate 
errors and when image data is available. For information on 
these messages, see {\b videoStreamInit}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwInstance}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the user instance 
data specified with {\b videoStreamInit}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwParam1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a parameter for the message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwParam2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a parameter for the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Because the callback is accessed at interrupt time, it must reside 
in a DLL and its code segment must be specified as FIXED in the 
module-definition file for the DLL. Any data the callback accesses 
must be in a FIXED data segment as well. The callback may not make any 
system calls except for {\b PostMessage}, {\b timeGetSystemTime}, 
{\b timeGetTime}, {\b timeSetEvent}, {\b timeKillEvent}, 
{\b midiOutShortMsg}, {\b midiOutLongMsg}, and {\b OutputDebugStr}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoOpen} {\b videoStreamFini} {\b videoClose}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoGetChannelCaps\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoGetChannelCaps(}{\b HVIDEO} {\i hVideo}{\b , LPCHANNEL_CAPS} {\i lpChannelCaps}{\b , DWORD} {\i dwSize}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function retrieves a 
description of the capabilities of a channel.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function is successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specified device handle is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Function is not supported.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpChannelCaps}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a far pointer to a 
{\b CHANNEL_CAPS} structure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size, in bytes, of the 
{\b CHANNEL_CAPS} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b CHANNEL_CAPS} structure returns the capability 
information. For example, capability information might 
include whether or not the channel can crop and scale images, 
or show overlay.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoGetNumDevs\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoGetNumDevs(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function returns the number of MSVIDEO 
devices installed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDEO.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the number of MSVIDEO devices listed in the 
[drivers] (or [drivers32] for NT) section of the SYSTEM.INI file.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Because the indexes of the MSVIDEO devices in the SYSTEM.INI 
file can be non-contiguous, applications should not assume 
the indexes range between zero and the number of devices minus 
one.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoOpen}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoMessage(}{\b HVIDEO} {\i hVideo}{\b , UINT} {\i wMsg}{\b , DWORD} {\i dwP1}{\b , DWORD} {\i dwP2}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function sends messages to a 
video device channel.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns the message specific value returned from the driver.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the handle to the video device channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i wMsg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the message to send.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwP1}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the first parameter for the message.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwP2}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the second parameter for the message.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function is used for configuration messages such as 
DVM_SRC_RECT and DVM_DST_RECT, and 
device specific messages.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoConfigure}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoOpen\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoOpen(}{\b LPHVIDEO} {\i lphvideo}{\b , DWORD} {\i dwDeviceID}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function opens a channel on the 
specified video device.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_BADDEVICEID\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the specified device ID is out of range.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_ALLOCATED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the specified resource is already allocated.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NOMEM\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device is unable to allocate or lock memory.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lphvideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a far pointer to a buffer 
used to return an {\b HVIDEO} handle. The video capture driver 
uses this location to return 
a handle that uniquely identifies the opened video device channel. 
Use the returned handle to identify the device channel when 
calling other video functions.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwDeviceID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the video device to open. 
The value of {\i dwDeviceID} varies from zero to one less 
than the number of video capture devices installed in the system.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies flags for opening the device. 
The following flags are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_EXTERNALIN\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specifies the channel is opened 
for external input. Typically, external input channels 
capture images into a frame buffer.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_EXTERNALOUT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specifies the channel is opened 
for external output. Typically, external output channels 
display images stored in a frame buffer on an auxilary monitor 
or overlay.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_IN\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specifies the channel is opened 
for video input. Video input channels transfer images 
from a frame buffer to system memory buffers.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 VIDEO_OUT\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specifies the channel is opened 
for video output. Video output channels transfer images 
from system memory buffers to a frame buffer.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 At a minimum, all capture drivers support a VIDEO_EXTERNALIN 
and a VIDEO_IN channel. 
Use {\b videoGetNumDevs} to determine the number of video 
devices present in the system.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoClose}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoRegGetDriverByIndex\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b videoRegGetDriverByIndex(}{\b DWORD} {\i dwDeviceID}{\b , LPDEVNODE} {\i lpDevnode}{\b , LPBOOL} {\i lpEnabled}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function returns information 
about a capture driver by index from the registry.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDEO.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if successful, or FALSE if a driver was not found 
with the {\i dwDeviceID} index.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwDeviceID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the video device to open. 
The value of {\i dwDeviceID} varies from zero to one less 
than the number of video capture devices installed in the system.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpDevnode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a far pointer to a buffer 
used to return an {\b DEVNODE} handle.  For non Plug-and-Play devices, 
this return value will be NULL.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpEnabled}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a far pointer to a buffer 
used to return a {\b BOOL} flag.  If this value is TRUE, the driver is 
enabled, if FALSE, the corresponding device is disabled.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Because the indexes of the MSVIDEO devices in the SYSTEM.INI 
file can be non-contiguous, applications should not assume 
the indexes range between zero and the number of devices minus 
one.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoRegOpenMSVideoKey\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b videoRegOpenMSVideoKey(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function returns a key 
for the msvideo node in the registry. 
If the key does not exist it will be created, 
and the default entries made.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDEO.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns Key on success, else NULL.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoStreamFini\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoStreamFini(}{\b HVIDEO} {\i hVideo}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function terminates streaming 
from the specified device channel.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device handle specified is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_STILLPLAYING\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates there are still buffers in the queue.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If there are buffers that have been sent with 
{\b videoStreamAddBuffer} that haven't been returned to the application, 
this operation will fail. Use {\b videoStreamReset} to return all 
pending buffers.\par 

Each call to {\b videoStreamInit} must be matched with a call to 
{\b videoStreamFini}.\par 

For VIDEO_EXTERNALIN channels, this function is used to 
halt capturing of data to the frame buffer.\par 

For VIDEO_EXTERNALOUT channels supporting overlay, 
this function is used to disable the overlay.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoStreamInit}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoStreamInit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoStreamInit(}{\b HVIDEO} {\i hVideo}{\b , DWORD} {\i dwMicroSecPerFrame}{\b , DWORD_PTR} {\i dwCallback}{\b , DWORD_PTR} {\i dwCallbackInstance}{\b , DWORD} {\i dwFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function initializes a video 
device channel for streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_BADDEVICEID\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device ID specified in 
{\i hVideo} is not valid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_ALLOCATED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the resource specified is already allocated.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NOMEM\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device is unable to allocate or lock memory.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwMicroSecPerFrame}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of microseconds 
between frames.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwCallback}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the address of a callback 
function or a handle to a window called during video 
streaming. The callback function or window processes 
messages related to the progress of streaming.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwCallbackInstance}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies user 
instance data passed to the callback function. This parameter is not 
used with window callbacks.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies flags for opening the device channel. 
The following flags are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CALLBACK_WINDOW\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If this flag is specified, {\i dwCallback} is 
a window handle.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 CALLBACK_FUNCTION\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 If this flag is specified, {\i dwCallback} is 
a callback procedure address.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If a window or function is chosen to receive callback information, the following 
messages are sent to it to indicate the 
progress of video input:\par 

MM_DRVM_OPEN is sent at the time of {\b videoStreamInit}\par 

MM_DRVM_CLOSE is sent at the time of {\b videoStreamFini}\par 

MM_DRVM_DATA is sent when a buffer of image data is available\par 

MM_DRVM_ERROR is sent when an error occurs\par 

Callback functions must reside in a DLL. 
You do not have to use {\b MakeProcInstance} to get 
a procedure-instance address for the callback function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoStreamPrepareHeader\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoStreamPrepareHeader(}{\b HVIDEO} {\i hVideo}{\b , LPVIDEOHDR} {\i lpvideoHdr}{\b , DWORD} {\i dwSize}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function prepares a buffer 
for video streaming.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the specified device handle is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NOMEM\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device is unable to allocate or lock memory.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video 
device channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpvideoHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a 
{\b VIDEOHDR} structure identifying the buffer to be prepared.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size of the {\b VIDEOHDR} structure in bytes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Use this function after {\b videoStreamInit} or 
after {\b videoStreamReset} to prepare the data buffers 
for streaming data.\par 

The {\b VIDEOHDR} data structure and the data block pointed to by its 
{\b lpData}
 member must be allocated with {\b GlobalAlloc} using the 
GMEM_MOVEABLE and GMEM_SHARE flags, and locked with {\b GlobalLock}. 
Preparing a header that has already been prepared will have no effect 
and the function will return zero. Typically, this function is used 
to ensure that the buffer will be available for use at interrupt time.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoStreamUnprepareHeader}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoStreamReset\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoStreamReset(}{\b HVIDEO} {\i hVideo}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function stops streaming 
on the specified video device channel and resets the current position 
to zero.  All pending buffers are marked as done and 
are returned to the application.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device handle specified is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NOTSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device does not support this 
function.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoStreamReset} {\b videoStreamStop} {\b videoStreamAddBuffer} {\b videoStreamClose} 
/***************************************************************************\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoStreamStart\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoStreamStart(}{\b HVIDEO} {\i hVideo}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function starts streaming on the 
specified video device channel.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device handle specified is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NOTSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device does not support this 
function.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoStreamReset} {\b videoStreamStop} {\b videoStreamAddBuffer} {\b videoStreamClose} 
/***************************************************************************\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoStreamStop\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoStreamStop(}{\b HVIDEO} {\i hVideo}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function stops streaming on a video channel.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following error is defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the specified device handle is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_NOTSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device does not support this 
function.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video 
device channel.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 If there are any buffers in the queue, the current buffer will be 
marked as done (the {\b dwBytesRecorded}
 member in 
the {\b VIDEOHDR} header will contain the actual length of data), but any 
empty buffers in the queue will remain there. Calling this 
function when the channel is not started has no effect, and the 
function returns zero.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoStreamStart} {\b videoStreamReset}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoStreamUnprepareHeader\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoStreamUnprepareHeader(}{\b HVIDEO} {\i hVideo}{\b , LPVIDEOHDR} {\i lpvideoHdr}{\b , DWORD} {\i dwSize}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function clears the 
preparation performed by {\b videoStreamPrepareHeader}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device handle specified is invalid.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_STILLPLAYING\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the structure identified by {\i lpvideoHdr} 
is still in the queue.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video 
device channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lpvideoHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a {\b VIDEOHDR} 
structure identifying the data buffer to be unprepared.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwSize}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the size of the {\b VIDEOHDR} structure in bytes.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This function is the complementary function to {\b videoStreamPrepareHeader}. 
You must call this function before freeing the data buffer with {\b GlobalFree}. 
After passing a buffer to the device driver with {\b videoStreamAddBuffer}, you 
must wait until the driver is finished with the buffer before calling 
{\b videoStreamUnprepareHeader}. Unpreparing a buffer that has not been 
prepared or has been already unprepared has no effect, 
and the function returns zero.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b videoStreamPrepareHeader}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 videoUpdate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b DWORD} {\b videoUpdate(}{\b HVIDEO} {\i hVideo}{\b , HWND} {\i hWnd}{\b , HDC} {\i hDC}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This function directs a channel to 
repaint the display.  It applies only to VIDEO_EXTERNALOUT channels.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/THUNK.C\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns zero if the function was successful. Otherwise, it returns 
an error number. The following errors are defined:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Specified message is unsupported.\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 DV_ERR_INVALHANDLE\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Indicates the device handle specified is invalid.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hVideo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the video device channel.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hWnd}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the handle of the window to be used 
by the channel for image display.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDC}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to a device context.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This message is normally sent 
whenever the client window receives a WM_MOVE, WM_SIZE, 
or WM_PAINT message.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CONVERSIONTYPE_DECODE constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000002 CONVERSIONTYPE_DECODE;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Specifies a decoding operation.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CONVERSIONTYPE_ENCODE constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000001 CONVERSIONTYPE_ENCODE;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Specifies an encoding operation.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CONVERSIONTYPE_NONE constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000000 CONVERSIONTYPE_NONE;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 No conversion operation necessary.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CONVERSIONTYPE_SCALER constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000004 CONVERSIONTYPE_SCALER;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/BASEPIN.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Specifies an image size change.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DISPLAY_DLG_OFF constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000000 DISPLAY_DLG_OFF;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Disable display dialog.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DISPLAY_DLG_ON constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000002 DISPLAY_DLG_ON;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Enable display dialog.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Use the two following keys or get rid of them\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FORMAT_DLG_OFF constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000000 FORMAT_DLG_OFF;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Disable video format dialog.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FORMAT_DLG_ON constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000001 FORMAT_DLG_ON;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Enable video format dialog.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 NUM_4BIT_ENTRIES constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 16 NUM_4BIT_ENTRIES;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Number of entries in a 4bit palette.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 NUM_8BIT_ENTRIES constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 256 NUM_8BIT_ENTRIES;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Number of entries in an 8bit palette.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SOURCE_DLG_OFF constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000000 SOURCE_DLG_OFF;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Disable source dialog.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 SOURCE_DLG_ON constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000002 SOURCE_DLG_ON;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Enable source dialog.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_BI_BITFIELDS constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const BI_BITFIELDS VIDEO_FORMAT_BI_BITFIELDS;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 RGB Bit Fields video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_BI_RGB constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const BI_RGB VIDEO_FORMAT_BI_RGB;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 RGB video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_BI_RLE4 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const BI_RLE4 VIDEO_FORMAT_BI_RLE4;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 RLE 4 video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_BI_RLE8 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const BI_RLE8 VIDEO_FORMAT_BI_RLE8;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 RLE 8 video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_CVID constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('c','v','i','d') VIDEO_FORMAT_CVID;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Cinepack video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_112_80 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000010 VIDEO_FORMAT_IMAGE_SIZE_112_80;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 112x80 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_120_90 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000020 VIDEO_FORMAT_IMAGE_SIZE_120_90;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 120x90 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_128_96 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000040 VIDEO_FORMAT_IMAGE_SIZE_128_96;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 128x96 (SQCIF) pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_144_112 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000080 VIDEO_FORMAT_IMAGE_SIZE_144_112;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 144x112 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_160_120 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000100 VIDEO_FORMAT_IMAGE_SIZE_160_120;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 160x120 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_160_128 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000200 VIDEO_FORMAT_IMAGE_SIZE_160_128;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 160x128 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_176_144 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000400 VIDEO_FORMAT_IMAGE_SIZE_176_144;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 176x144 (QCIF) pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_192_160 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000800 VIDEO_FORMAT_IMAGE_SIZE_192_160;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 192x160 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_200_150 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00001000 VIDEO_FORMAT_IMAGE_SIZE_200_150;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 200x150 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_208_176 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00002000 VIDEO_FORMAT_IMAGE_SIZE_208_176;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 208x176 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_224_192 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00004000 VIDEO_FORMAT_IMAGE_SIZE_224_192;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 224x192 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_240_180 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00008000 VIDEO_FORMAT_IMAGE_SIZE_240_180;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 240x180 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_240_208 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00010000 VIDEO_FORMAT_IMAGE_SIZE_240_208;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 240x208 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_256_224 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00020000 VIDEO_FORMAT_IMAGE_SIZE_256_224;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 256x224 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_272_240 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00040000 VIDEO_FORMAT_IMAGE_SIZE_272_240;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 272x240 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_280_210 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00080000 VIDEO_FORMAT_IMAGE_SIZE_280_210;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 280x210 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_288_256 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00100000 VIDEO_FORMAT_IMAGE_SIZE_288_256;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 288x256 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_304_272 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00200000 VIDEO_FORMAT_IMAGE_SIZE_304_272;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 304x272 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_320_240 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00400000 VIDEO_FORMAT_IMAGE_SIZE_320_240;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 320x240 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_320_288 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00800000 VIDEO_FORMAT_IMAGE_SIZE_320_288;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 320x288 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_336_288 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x01000000 VIDEO_FORMAT_IMAGE_SIZE_336_288;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 336x288 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_352_288 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x02000000 VIDEO_FORMAT_IMAGE_SIZE_352_288;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 352x288 (CIF) pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_40_30 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000001 VIDEO_FORMAT_IMAGE_SIZE_40_30;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 40x30 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_640_480 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x04000000 VIDEO_FORMAT_IMAGE_SIZE_640_480;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 640x480 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_64_48 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000002 VIDEO_FORMAT_IMAGE_SIZE_64_48;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 64x48 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_80_60 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000004 VIDEO_FORMAT_IMAGE_SIZE_80_60;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 80x60 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IMAGE_SIZE_96_64 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000008 VIDEO_FORMAT_IMAGE_SIZE_96_64;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 96x64 pixel frames.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_INTELH261 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('h','2','6','1') VIDEO_FORMAT_INTELH261;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Intel H.261 video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_INTELH263 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('h','2','6','3') VIDEO_FORMAT_INTELH263;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Intel H.263 video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_IV32 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('I','V','3','2') VIDEO_FORMAT_IV32;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Intel Indeo IV32 video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_MRLE constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('M','R','L','E') VIDEO_FORMAT_MRLE;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Microsoft RLE video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_MSH261 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('M','2','6','1') VIDEO_FORMAT_MSH261;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Microsoft H.261 video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_MSH263 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('M','2','6','3') VIDEO_FORMAT_MSH263;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Microsoft H.263 video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_MSVC constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('M','S','V','C') VIDEO_FORMAT_MSVC;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Microsoft CRAM video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_16 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000001 VIDEO_FORMAT_NUM_COLORS_16;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 16 colors.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_16777216 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000008 VIDEO_FORMAT_NUM_COLORS_16777216;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 16777216 colors.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_256 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000002 VIDEO_FORMAT_NUM_COLORS_256;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 256 colors.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_65536 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000004 VIDEO_FORMAT_NUM_COLORS_65536;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses 65536 colors.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_I420 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000020 VIDEO_FORMAT_NUM_COLORS_I420;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses the I420 compressed format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_IYUV constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000040 VIDEO_FORMAT_NUM_COLORS_IYUV;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses the IYUV compressed format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_M261 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000200 VIDEO_FORMAT_NUM_COLORS_M261;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses the M261 compressed format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_M263 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000400 VIDEO_FORMAT_NUM_COLORS_M263;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses the M263 compressed format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_UYVY constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000100 VIDEO_FORMAT_NUM_COLORS_UYVY;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses the UYVY compressed format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_YUY2 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000080 VIDEO_FORMAT_NUM_COLORS_YUY2;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses the YUY2 compressed format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_COLORS_YVU9 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 0x00000010 VIDEO_FORMAT_NUM_COLORS_YVU9;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Video input device uses the YVU9 compressed format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_NUM_IMAGE_SIZE constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 27 VIDEO_FORMAT_NUM_IMAGE_SIZE;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Number of video input sizes used by the device.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_UNKNOWN constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const WAVE_FORMAT_UNKNOWN VIDEO_FORMAT_UNKNOWN;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Constant for unknown video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_VDEC constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('V','D','E','C') VIDEO_FORMAT_VDEC;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Color QuickCam video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEO_FORMAT_YVU9 constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAKEFOURCC('Y','V','U','9') VIDEO_FORMAT_YVU9;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/FORMATS.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Intel Indeo YVU9 video format.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 BUFSTRUCT Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPVIDEOHDR lpVHdr;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BOOL fReady;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} BUFSTRUCT;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b BUFSTRUCT} structure holds the status of each 
video streaming buffer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b lpVHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the video header of a 
video streaming buffer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b fReady}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set to TRUE if the video buffer is available for 
video streaming, FALSE if is locked by the application or queued for 
an asynchronous read.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DATAPINCONNECT Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KSPIN_CONNECT Connect;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KS_DATAFORMAT_VIDEOINFOHEADER Data;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} DATAPINCONNECT;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b DATAPINCONNECT} structure is used to 
connect to a streaming video pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Connect}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Describes how the connection is to be 
done.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Data}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Describes the video format 
of the video data streaming from a video pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 KS_HEADER_AND_INFO Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KSSTREAM_HEADER StreamHeader;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KS_FRAME_INFO FrameInfo;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} KS_HEADER_AND_INFO;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b KS_HEADER_AND_INFO} structure is used 
stream data from a video pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b StreamHeader}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Describes how the streaming is to be 
done.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b FrameInfo}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Describes the video format 
of the video data streaming from a video pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ThdState\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum ThdState \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TS_Not,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TS_Create,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TS_Init,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TS_Pause,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TS_Run,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TS_Stop,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TS_Destroy,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TS_Exit\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b ThdState} enum is used to change and keep track of 
that capture worker thread state.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/TAPIVCAP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TS_Not}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Worker thread hasn't been created yet.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TS_Create}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Worker thread has been created.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TS_Init}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Worker thread hasn't been initialized.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TS_Pause}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Worker thread is in the Pause state.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TS_Run}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Worker thread is in the Run state.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TS_Stop}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Worker thread is in the Stop state.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TS_Destroy}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Worker thread hasn't been destroyed.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TS_Exit}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Worker thread hasn't been asked to exit.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VideoControlFlags\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum VideoControlFlags \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoControlFlag_FlipHorizontal,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoControlFlag_FlipVertical,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoControlFlag_ExternalTriggerEnable,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoControlFlag_Trigger\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b VideoControlFlags} enum is used to describe 
video modes.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/VIDCTRL.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoControlFlag_FlipHorizontal}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that the camera control 
setting can be modified manually.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoControlFlag_FlipVertical}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that the camera control 
setting can be modified automatically.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoControlFlag_ExternalTriggerEnable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that the camera 
control setting can be modified automatically.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoControlFlag_Trigger}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that the camera control setting 
can be modified automatically.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEOFASTUPDATEGOB_S Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFirstGOB;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwNumberOfGOBs;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} VIDEOFASTUPDATEGOB_S;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b VIDEOFASTUPDATEGOB_S} structure is 
used with the KSPROPERTY_H245VIDENCCOMMAND_VIDEOFASTUPDATEGOB property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFirstGOB}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the first GOB to be 
updated. This value is only valid between 0 and 17.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwNumberOfGOBs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of GOBs to be 
updated. This value is only valid between 1 and 18.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEOFASTUPDATEMB_S Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFirstGOB;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFirstMB;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwNumberOfMBs;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} VIDEOFASTUPDATEMB_S;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b VIDEOFASTUPDATEMB_S} structure is 
used with the KSPROPERTY_H245VIDENCCOMMAND_VIDEOFASTUPDATEMB property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFirstGOB}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the first GOB to be 
updated and is only relative to H.263. This value is only valid between 
0 and 255.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFirstMB}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the first MB to be 
updated and is only relative to H.261. This value is only valid 
between 1 and 8192.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwNumberOfMBs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of MBs to be 
updated. This value is only valid between 1 and 8192.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VIDEONOTDECODEDMBS_S Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwFirstMB;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwNumberOfMBs;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwTemporalReference;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} VIDEONOTDECODEDMBS_S;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b VIDEONOTDECODEDMBS_S} structure is 
used with the KSPROPERTY_H245VIDENCINDICATION_VIDEONOTDECODEDMBS property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/H245VIDE.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwFirstMB}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the first MB treated 
as not coded. This value is only valid between 1 and 8192.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwNumberOfMBs}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of MBs treated as not 
coded. This value is only valid between 1 and 8192.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwTemporalReference}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the temporal reference of 
the picture containing not decoded MBs. This value is only valid 
between 0 and 255.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 WDMVIDEOBUFF Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab OVERLAPPED Overlap;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BOOL fBlocking;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KS_HEADER_AND_INFO SHGetImage;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LPVIDEOHDR pVideoHdr;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} WDMVIDEOBUFF;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b WDMVIDEOBUFF} structure is used to queue 
asynchronous read on a video streaming pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVCAP.SLM/DEVICE.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b Overlap}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Structure used for overlapping IOs.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b fBlocking}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set to TRUE if read is going to block.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SHGetImage}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Video streaming structure used 
on the video pin to get video data.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pVideoHdr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to the video header for this WDM 
video buffer.\par 
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tapi\skywalker\filters\video\tapivdec\tapivdec.doc ===
{\rtf1\ansi \deff0\deflang1033

{\fonttbl
{\f0\froman Times New Roman;}
{\f2\fswiss Arial;}
{\f19\fmodern\fcharset0\fprq1 Courier New;}
}

{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue127;
\red0\green127\blue127;
\red0\green127\blue0;
\red127\green0\blue127;
\red127\green0\blue0;
\red127\green127\blue0;
\red127\green127\blue127;
\red192\green192\blue192;
}


{\stylesheet
{\s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 header;}
{\s251\sb160\sa40\sl-280\keepn \b\f2\lang1033 heading 4;}
{\s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 heading 3;}
{\s253\li-1800\sb160\sa60\sl-380\keepn \b\f0\fs34\lang1033 heading 2;}
{\s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 heading 1;}
{\*\cs10 \additive Default Paragraph Font;}
{\sa160\sl240 \fs21\lang1033 Normal;}
{\s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 Ex;}
{\s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 header rule;}
{\s45\li-1800\sa180\sl-440\keepn\tx0 \b\f2\fs40\up8\lang1033 Rh1;}
{\s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Rmh;}
{\s50\sl-240\keepn \f0\fs21\lang1033 Term1;}
{\s53\li280\sl-240\keepn \f0\fs21\lang1033 Term2;}
{\s54\li280\sa80\sl-240 \f0\fs21\lang1033 Def1;}
{\s55\li560\sa80\sl-240 \f0\fs21\lang1033 Def2;}
{\s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 Rule;}
{\s93\sl240 \fs21\lang1033 
Index Link;}
{\s25\sa80\widctlpar\intbl \f4\fs21\lang1024 \sbasedon0\snext25 Table Text;}
}

\paperw12240\paperh15840\margl3330\margr1530\margt-2540\margb-2220\gutter420 
\facingp\deftab280\widowctrl\ftnbj 

\sectd \binfsxn1\binsxn1\linex0\headery1990\footery360\endnhere\titlepg 

{\headerl \pard\plain \s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 
{\field\flddirty{\*\fldinst PAGE}{\fldrslt 4}}{\expnd50  }TAPIVDec Reference - 07/06/99\par 
\pard\plain \s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 \par }

{\headerr \pard\plain \s243\li-1800\sl-210\tqr\tx6960 \b\f2\fs19\lang1033 
\tab TAPIVDec Reference - 07/06/99{\expnd50   }
{\field\flddirty{\*\fldinst PAGE}{\fldrslt 3}}
\par \pard\plain \s44\li-1770\ri30\sb50\sl-80\brdrt\brdrs\brdrw15\brdrcf2 \fs12\lang1033 
\par }
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Contents\par 
\pard\plain \s93\sl240 \fs21\lang1033 
To display a list of topics by category, click any 
of the contents entries below. To display an alphabetical list of 
topics, choose the Index button.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Introduction\par 
\pard\plain \sa160\sl240 \fs21\lang1033 This DLL implements the TAPI MSP H.26X Video Decoder filter. This filter 
differs from traditional Microsoft Windows desktop video codecs:\par 

It operates over unreliable communication channels using RTP/UDP/IP (H.323) 
It has many modes of operation (H.263 options) 
It needs to handle or generate call control specific (H.245) commands 
It implements different decoding algorithms in order to adapt its CPU usage\par 

Like other desktop video decoders, it needs to operate in real-time.\par 

The TAPI incoming video stack relies on this video decoder to expose a 
RTP-packetized compressed video pin, and uncompressed video output pin using 
the DirectShow model. This video decoder presents its input pins to the network 
source filter and is able to reassemble and decompress raw RTP packets, to 
deliver uncompressed video frames to the downstream render filter.\par 

Its uncompressed video output pin implements a new H.245 command interface to 
receive H.245 picture freeze requests. We also define an H.245 command outgoing 
interface to allow the video input pin of this video decoder to issue H.245 
commands such as requests for I-frame, group of blocks, or macro-block updates 
due to packet loss.\par 

It used extended bitmap info headers for H.261 and H.263 video streams to 
retrieve from the compressed video input pin a list of optional mode of 
decompression supported by the decoder.\par 

It also exposes interfaces to allow users to control video quality settings 
such as brightness, contrast, hue, saturation, gamma and sharpness, by applying 
the necessary post-processing operators. It also exposes an interface to 
simulate local camera control functionality such as pan, tilt and zoom.\par 

Finally, it implements a new H.245 capability interface. This interface provides 
the TAPI TSP/MSP call control components with information needed to resolve 
capabilities.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Implementation\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The TAPI H.26X Video Decoder filter currently loads TAPIH263.DLL or TAPIH261.DLL 
dynamically and calls a unique entry point (DriverProc) exposed by those 
DLLs to decompress the incoming video data. The video decoder filter is 
responsible for re-assembling the incoming RTP packets and watch dynamic format 
changes in the content of those packets. If the incoming RTP packets use a 
different encoding format (different encoding - H.261 vs H.263, different image 
size - SQCIF vs QCIF vs CIF) it dynamically recongures the TAPIH26X DLL and 
changes the format of the output media sample to let the downstream filter 
know about the format change.\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Video decoder filter application interfaces\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Although the following interfaces are not exposed directly to applications, interfaces 
exposed to applications simply delegate to those interfaces.\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 IAMVideoProcAmp application interface\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IAMVideoProcAmp methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IAMVideoProcAmp structures and enums\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 ICameraControl application interface\par 
\pard\plain \s93\sl240 \fs21\lang1033 
ICameraControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
ICameraControl structures and enums\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Video decoder filter MSP interfaces\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 IH245VideoCapability application interface\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IH245VideoCapability methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IH245VideoCapability structures and enums\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Video decoder filter output pin TAPI interfaces\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 ICPUControl interface\par 
\pard\plain \s93\sl240 \fs21\lang1033 
ICPUControl methods\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 IFrameRateControl interface (output pin)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IFrameRateControl methods (output pin)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IFrameRateControl structures and enums (output pin)\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 IH245DecoderCommand interface\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IH245DecoderCommand methods\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Video decoder filter input pin TAPI interfaces\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 IFrameRateControl interface (input pin)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IFrameRateControl methods (input pin)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IFrameRateControl structures and enums (input pin)\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 IBitrateControl interface\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IBitrateControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
IBitrateControl structures and enums\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Classes\par 
\pard\plain \s93\sl240 \fs21\lang1033 
Classes\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Modules\par 
\pard\plain \s93\sl240 \fs21\lang1033 
Modules\par 
\pard\plain \s93\sl240 \fs21\lang1033 
Constants\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Code information\par 
\pard\plain \sa160\sl240 \fs21\lang1033 The only libraries necessary in retail mode (w/o property pages) are ........\\dev\\tools\\amovsdk.20\\lib\\strmbase.lib ......\\ddk\\lib\\i386\\ksuser.lib ......\\ddk\\lib\\i386\\ksguid.lib kernel32.lib ole32.lib uuid.lib msvcrt.lib\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 Exports\par 
\pard\plain \sa160\sl240 \fs21\lang1033 DllCanUnloadNow 
DllGetClassObject 
DllRegisterServer 
DllUnregisterServer\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 Imports\par 
\pard\plain \sa160\sl240 \fs21\lang1033 MSVCRT.DLL: 
??2@YAPAXI@Z 
??3@YAXPAX@Z 
_EH_prolog 
__CxxFrameHandler 
_purecall 
memcmp\par 

WINMM.DLL: 
timeGetTime\par 

KERNEL32.DLL: 
DeleteCriticalSection 
DisableThreadLibraryCalls 
EnterCriticalSection 
FreeLibrary 
GetLastError 
GetModuleFileNameA 
GetVersionExA 
InitializeCriticalSection 
InterlockedDecrement 
InterlockedIncrement 
LeaveCriticalSection 
MulDiv 
MultiByteToWideChar 
lstrlenA\par 

MSVFW32.DLL: 
ICClose 
ICDecompress 
ICLocate 
ICSendMessage\par 

USER32.DLL: 
GetDC 
ReleaseDC 
wsprintfA\par 

GDI32.DLL: 
GetDeviceCaps\par 

ADVAPI32.DLL: 
RegCloseKey 
RegCreateKeyA 
RegDeleteKeyA 
RegEnumKeyExA 
RegOpenKeyExA 
RegSetValueA 
RegSetValueExA\par 

OLE32.DLL: 
CoCreateInstance 
CoFreeUnusedLibraries 
CoInitialize 
CoTaskMemAlloc 
CoTaskMemFree 
CoUninitialize 
StringFromGUID2\par 
\pard\plain \s252\sb160\sa40\sl-340\keepn \b\f2\fs30\lang1033 Code size\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Compile options: /nologo /MDd /W3 /GX /O1 /X /I "....\\inc" /I "......\\ddk\\inc" /I "........\\dev\\tools\\amovsdk.20\\include" /I "........\\dev\\tools\\amovsdk.20\\classes\\base" /I "........\\dev\\ntddk\\inc" /I "........\\dev\\inc" /I "........\\dev\\tools\\c32\\inc" /D "NDEBUG" /D "WIN32" /D "_WINDOWS" /D "DLL" /D "STRICT" /FR"Release/" /Fp"Release/TAPIKsIf.pch" /YX /Fo"Release/" /Fd"Release/" /FD /c\par 

Link options: ........\\dev\\tools\\amovsdk.20\\lib\\strmbase.lib ......\\ddk\\lib\\i386\\ksuser.lib ......\\ddk\\lib\\i386\\ksguid.lib comctl32.lib msvcrt.lib winmm.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /base:"0x1e180000" /entry:"DllEntryPoint" /dll /incremental:no /pdb:"Release/TAPIKsIf.pdb" /map:"Release/TAPIKsIf.map" /machine:I386 /nodefaultlib /def:".\\TAPIKsIf.def" /out:"Release/TAPIKsIf.ax" /implib:"Release/TAPIKsIf.lib"\par 

Resulting size: 52KB\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Classes\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties{\v CCameraControlProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty{\v CCameraControlProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties{\v CProcAmpProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty{\v CProcAmpProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor{\v CPropertyEditor}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin{\v CTAPIInputPin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin{\v CTAPIOutputPin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec{\v CTAPIVDec}\par 

\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::CheckInputType{\v CTAPIVDec__CheckInputType}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::CheckTransform{\v CTAPIVDec__CheckTransform}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::CreateInstance{\v CTAPIVDec__CreateInstance}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::CTAPIVDec{\v CTAPIVDec__CTAPIVDec}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetMediaType{\v CTAPIVDec__GetMediaType}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetPages{\v CTAPIVDec__GetPages}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetPin{\v CTAPIVDec__GetPin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::m_FourCCIn{\v CTAPIVDec__m_FourCCIn}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::m_fStreaming{\v CTAPIVDec__m_fStreaming}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::m_hic{\v CTAPIVDec__m_hic}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::NonDelegatingQueryInterface{\v CTAPIVDec__NonDelegatingQueryInterface}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::SetMediaType{\v CTAPIVDec__SetMediaType}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::StartStreaming{\v CTAPIVDec__StartStreaming}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::StopStreaming{\v CTAPIVDec__StopStreaming}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Transform{\v CTAPIVDec__Transform}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::~CTAPIVDec{\v CTAPIVDec__.7eCTAPIVDec}\par 

\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::CTAPIOutputPin{\v CTAPIOutputPin__CTAPIOutputPin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::Get{\v CTAPIOutputPin__Get}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::Get{\v CTAPIOutputPin__Get_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::GetRange{\v CTAPIOutputPin__GetRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_AvgTimePerFrameRangeDefault{\v CTAPIOutputPin__m_AvgTimePerFrameRangeDefault}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_AvgTimePerFrameRangeMax{\v CTAPIOutputPin__m_AvgTimePerFrameRangeMax}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_AvgTimePerFrameRangeMin{\v CTAPIOutputPin__m_AvgTimePerFrameRangeMin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_AvgTimePerFrameRangeSteppingDelta{\v CTAPIOutputPin__m_AvgTimePerFrameRangeSteppingDelta}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_CurrentAvgTimePerFrame{\v CTAPIOutputPin__m_CurrentAvgTimePerFrame}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_CurrentProcessingTime{\v CTAPIOutputPin__m_CurrentProcessingTime}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_dwCurrentCPULoad{\v CTAPIOutputPin__m_dwCurrentCPULoad}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_dwMaxCPULoad{\v CTAPIOutputPin__m_dwMaxCPULoad}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_dwNumFramesDelivered{\v CTAPIOutputPin__m_dwNumFramesDelivered}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_MaxAvgTimePerFrame{\v CTAPIOutputPin__m_MaxAvgTimePerFrame}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_MaxProcessingTime{\v CTAPIOutputPin__m_MaxProcessingTime}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::m_pDecoderFilter{\v CTAPIOutputPin__m_pDecoderFilter}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::NonDelegatingQueryInterface{\v CTAPIOutputPin__NonDelegatingQueryInterface}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::Set{\v CTAPIOutputPin__Set}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::Set{\v CTAPIOutputPin__Set_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::~CTAPIOutputPin{\v CTAPIOutputPin__.7eCTAPIOutputPin}\par 

\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::CTAPIInputPin{\v CTAPIInputPin__CTAPIInputPin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::Get{\v CTAPIInputPin__Get}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::GetRange{\v CTAPIInputPin__GetRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_AvgTimePerFrameRangeDefault{\v CTAPIInputPin__m_AvgTimePerFrameRangeDefault}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_AvgTimePerFrameRangeMax{\v CTAPIInputPin__m_AvgTimePerFrameRangeMax}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_AvgTimePerFrameRangeMin{\v CTAPIInputPin__m_AvgTimePerFrameRangeMin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_AvgTimePerFrameRangeSteppingDelta{\v CTAPIInputPin__m_AvgTimePerFrameRangeSteppingDelta}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_CurrentAvgTimePerFrame{\v CTAPIInputPin__m_CurrentAvgTimePerFrame}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_dwBitrateRangeDefault{\v CTAPIInputPin__m_dwBitrateRangeDefault}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_dwBitrateRangeMax{\v CTAPIInputPin__m_dwBitrateRangeMax}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_dwBitrateRangeMin{\v CTAPIInputPin__m_dwBitrateRangeMin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_dwBitrateRangeSteppingDelta{\v CTAPIInputPin__m_dwBitrateRangeSteppingDelta}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_dwCurrentBitrate{\v CTAPIInputPin__m_dwCurrentBitrate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_dwMaxBitrate{\v CTAPIInputPin__m_dwMaxBitrate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_dwNumBytesDelivered{\v CTAPIInputPin__m_dwNumBytesDelivered}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_dwNumFramesDelivered{\v CTAPIInputPin__m_dwNumFramesDelivered}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_pDecoderFilter{\v CTAPIInputPin__m_pDecoderFilter}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::m_pIH245EncoderCommand{\v CTAPIInputPin__m_pIH245EncoderCommand}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::NonDelegatingQueryInterface{\v CTAPIInputPin__NonDelegatingQueryInterface}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::~CTAPIInputPin{\v CTAPIInputPin__.7eCTAPIInputPin}\par 

\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::Set{\v CTAPIInputPin__Set}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::videoFastUpdatePicture{\v CTAPIInputPin__videoFastUpdatePicture}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::videoFreezePicture{\v CTAPIOutputPin__videoFreezePicture}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::FindIDByRange{\v CTAPIVDec__FindIDByRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetFormatTable{\v CTAPIVDec__GetFormatTable}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetH245VersionID{\v CTAPIVDec__GetH245VersionID}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetLocalFormat{\v CTAPIVDec__GetLocalFormat}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetNegotiatedLimitProperty{\v CTAPIVDec__GetNegotiatedLimitProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::IntersectFormats{\v CTAPIVDec__IntersectFormats}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::ReleaseFormatTable{\v CTAPIVDec__ReleaseFormatTable}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::ReleaseNegotiatedCapability{\v CTAPIVDec__ReleaseNegotiatedCapability}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::SetIDBase{\v CTAPIVDec__SetIDBase}\par 

\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::CCameraControlProperties{\v CCameraControlProperties__CCameraControlProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::CreateInstance{\v CCameraControlProperties__CreateInstance}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::m_Controls[NUM_CAMERA_CONTROLS]{\v CCameraControlProperties__m_Controls.5bNUM_CAMERA_CONTROLS.5d}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::m_NumProperties{\v CCameraControlProperties__m_NumProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::m_pICameraControl{\v CCameraControlProperties__m_pICameraControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::OnActivate{\v CCameraControlProperties__OnActivate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::OnApplyChanges{\v CCameraControlProperties__OnApplyChanges}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::OnConnect{\v CCameraControlProperties__OnConnect}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::OnDeactivate{\v CCameraControlProperties__OnDeactivate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::OnDisconnect{\v CCameraControlProperties__OnDisconnect}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::OnReceiveMessage{\v CCameraControlProperties__OnReceiveMessage}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::SetDirty{\v CCameraControlProperties__SetDirty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperties::~CCameraControlProperties{\v CCameraControlProperties__.7eCCameraControlProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::CanAutoControl{\v CCameraControlProperty__CanAutoControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::CanAutoControl{\v CCameraControlProperty__CanAutoControl_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::CCameraControlProperty{\v CCameraControlProperty__CCameraControlProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::GetRange{\v CCameraControlProperty__GetRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::GetValue{\v CCameraControlProperty__GetValue}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::m_NumProperties{\v CCameraControlProperty__m_NumProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::m_pInterface{\v CCameraControlProperty__m_pInterface}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::SetAuto{\v CCameraControlProperty__SetAuto}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::SetValue{\v CCameraControlProperty__SetValue}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CCameraControlProperty::~CCameraControlProperty{\v CCameraControlProperty__.7eCCameraControlProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Get{\v CTAPIVDec__Get}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetRange{\v CTAPIVDec__GetRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Set{\v CTAPIVDec__Set}\par 

\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::CProcAmpProperties{\v CProcAmpProperties__CProcAmpProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::CreateInstance{\v CProcAmpProperties__CreateInstance}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::m_Controls[NUM_PROCAMP_CONTROLS]{\v CProcAmpProperties__m_Controls.5bNUM_PROCAMP_CONTROLS.5d}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::m_NumProperties{\v CProcAmpProperties__m_NumProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::m_pIAMVideoProcAmp{\v CProcAmpProperties__m_pIAMVideoProcAmp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::OnActivate{\v CProcAmpProperties__OnActivate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::OnApplyChanges{\v CProcAmpProperties__OnApplyChanges}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::OnConnect{\v CProcAmpProperties__OnConnect}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::OnDeactivate{\v CProcAmpProperties__OnDeactivate}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::OnDisconnect{\v CProcAmpProperties__OnDisconnect}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::OnReceiveMessage{\v CProcAmpProperties__OnReceiveMessage}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::SetDirty{\v CProcAmpProperties__SetDirty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperties::~CProcAmpProperties{\v CProcAmpProperties__.7eCProcAmpProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::CanAutoControl{\v CProcAmpProperty__CanAutoControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::CanAutoControl{\v CProcAmpProperty__CanAutoControl_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::CProcAmpProperty{\v CProcAmpProperty__CProcAmpProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::GetRange{\v CProcAmpProperty__GetRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::GetValue{\v CProcAmpProperty__GetValue}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::m_NumProperties{\v CProcAmpProperty__m_NumProperties}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::m_pInterface{\v CProcAmpProperty__m_pInterface}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::SetAuto{\v CProcAmpProperty__SetAuto}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::SetValue{\v CProcAmpProperty__SetValue}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CProcAmpProperty::~CProcAmpProperty{\v CProcAmpProperty__.7eCProcAmpProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Get{\v CTAPIVDec__Get_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetRange{\v CTAPIVDec__GetRange_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Set{\v CTAPIVDec__Set_1}\par 

\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_Active{\v CPropertyEditor__m_Active}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_CurrentValue{\v CPropertyEditor__m_CurrentValue}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_DefaultValue{\v CPropertyEditor__m_DefaultValue}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_hDlg{\v CPropertyEditor__m_hDlg}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_hWndDefault{\v CPropertyEditor__m_hWndDefault}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_hWndEdit{\v CPropertyEditor__m_hWndEdit}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_hWndMax{\v CPropertyEditor__m_hWndMax}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_hWndMin{\v CPropertyEditor__m_hWndMin}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_hWndProgress{\v CPropertyEditor__m_hWndProgress}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_hWndStep{\v CPropertyEditor__m_hWndStep}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_hWndTrackbar{\v CPropertyEditor__m_hWndTrackbar}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDDefaultControl{\v CPropertyEditor__m_IDDefaultControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDEditControl{\v CPropertyEditor__m_IDEditControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDLabel{\v CPropertyEditor__m_IDLabel}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDMaxControl{\v CPropertyEditor__m_IDMaxControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDMinControl{\v CPropertyEditor__m_IDMinControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDProgressControl{\v CPropertyEditor__m_IDProgressControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDProperty{\v CPropertyEditor__m_IDProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDStepControl{\v CPropertyEditor__m_IDStepControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_IDTrackbarControl{\v CPropertyEditor__m_IDTrackbarControl}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_Max{\v CPropertyEditor__m_Max}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_Min{\v CPropertyEditor__m_Min}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_OriginalValue{\v CPropertyEditor__m_OriginalValue}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CPropertyEditor::m_SteppingDelta{\v CPropertyEditor__m_SteppingDelta}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Constants\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
MAX_CAPDEV_DESCRIPTION{\v MAX_CAPDEV_DESCRIPTION}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
MAX_CAPDEV_VERSION{\v MAX_CAPDEV_VERSION}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
MAX_CAPTURE_DEVICES{\v MAX_CAPTURE_DEVICES}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAPI_H245_VERSION_ID{\v TAPI_H245_VERSION_ID}\par 

\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 The following stuff is already defined in TAPIVCAP\\H26XEnc.h 
Move this stuff in filters\\inc and share those defintions.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Remove useless fields of this structure\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMVideoProcAmp methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Get{\v CTAPIVDec__Get_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetRange{\v CTAPIVDec__GetRange_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Set{\v CTAPIVDec__Set_1}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IAMVideoProcAmp structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
VideoProcAmpProperty{\v VideoProcAmpProperty}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IBitrateControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::Get{\v CTAPIInputPin__Get_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::GetRange{\v CTAPIInputPin__GetRange_1}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IBitrateControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
BitrateControlProperty{\v BitrateControlProperty}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ICameraControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Get{\v CTAPIVDec__Get}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetRange{\v CTAPIVDec__GetRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::Set{\v CTAPIVDec__Set}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ICameraControl structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
TAPICameraControlProperty{\v TAPICameraControlProperty}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 ICPUControl methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::Get{\v CTAPIOutputPin__Get_1}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::Set{\v CTAPIOutputPin__Set_1}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IFrameRateControl methods (input pin)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::Get{\v CTAPIInputPin__Get}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::GetRange{\v CTAPIInputPin__GetRange}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IFrameRateControl methods (output pin)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::Get{\v CTAPIOutputPin__Get}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::GetRange{\v CTAPIOutputPin__GetRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::Set{\v CTAPIOutputPin__Set}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IFrameRateControl structures and enums (input pin)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
FrameRateControlProperty{\v FrameRateControlProperty}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IFrameRateControl structures and enums (output pin)\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
FrameRateControlProperty{\v FrameRateControlProperty}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IH245DecoderCommand methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::Set{\v CTAPIInputPin__Set}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIInputPin::videoFastUpdatePicture{\v CTAPIInputPin__videoFastUpdatePicture}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIOutputPin::videoFreezePicture{\v CTAPIOutputPin__videoFreezePicture}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IH245VideoCapability methods\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::FindIDByRange{\v CTAPIVDec__FindIDByRange}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetFormatTable{\v CTAPIVDec__GetFormatTable}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetH245VersionID{\v CTAPIVDec__GetH245VersionID}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetLocalFormat{\v CTAPIVDec__GetLocalFormat}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::GetNegotiatedLimitProperty{\v CTAPIVDec__GetNegotiatedLimitProperty}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::IntersectFormats{\v CTAPIVDec__IntersectFormats}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::ReleaseFormatTable{\v CTAPIVDec__ReleaseFormatTable}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::ReleaseNegotiatedCapability{\v CTAPIVDec__ReleaseNegotiatedCapability}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CTAPIVDec::SetIDBase{\v CTAPIVDec__SetIDBase}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 IH245VideoCapability structures and enums\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
H245VideoCapabilityMap{\v H245VideoCapabilityMap}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
H245VideoCapabilityTable{\v H245VideoCapabilityTable}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
NegotiatedVideoLimit{\v NegotiatedVideoLimit}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
VideoResourceBounds{\v VideoResourceBounds}\par 

\par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Modules\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\par 
\pard\plain \s93\sl240 \fs21\lang1033 
\pard\plain \s93\sl240 \fs21\lang1033 
CameraC.cpp{\v CameraC.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CameraCP.cpp{\v CameraCP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
CameraCP.h{\v CameraCP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Guids.h{\v Guids.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
H245Comm.cpp{\v H245Comm.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
H245VidC.cpp{\v H245VidC.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
InPin.cpp{\v InPin.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
InPin.h{\v InPin.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OutPin.cpp{\v OutPin.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
OutPin.h{\v OutPin.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
Precomp.h{\v Precomp.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProcAmp.cpp{\v ProcAmp.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProcAmpP.cpp{\v ProcAmpP.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
ProcAmpP.h{\v ProcAmpP.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PropEdit.cpp{\v PropEdit.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
PropEdit.h{\v PropEdit.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAPIVDec.cpp{\v TAPIVDec.cpp}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAPIVDec.h{\v TAPIVDec.h}\par 

\pard\plain \s93\sl240 \fs21\lang1033 
TAPIVid.h{\v TAPIVid.h}\par 

\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CameraC.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERAC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVDec}
 
class methods used to implement the TAPI {\b ICameraControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The {\b CTAPIVDec}
 class does everything in software.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 The camera control function in the decoders needs to be optimized.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CameraCP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CCameraControlProperty}
 
class used to implement a property page to test the DShow interface 
{\b ICameraControl}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI H.26X Video Decoder filter {\b ICameraControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module CameraCP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CCameraControlProperty}
 
class used to implement a property page to test the DShow interface 
{\b ICameraControl}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Capture Filter {\b ICameraControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Guids.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/GUIDS.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file containing the CLSIDs of our filter and its 
property pages.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module H245Comm.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245COMM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIInputPin}
 class methods 
used to implement the video decoder input pin remote H.245 encoder command 
methods, and {\b CTAPIOutputPin}
 H.245 decoder command method.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Our decoder only issues video fast-update picture commands.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module H245VidC.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVDec}
 class methods 
used to implement the {\b IH245VideoCapability} TAPI inteface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Implement the {\b IH245VideoCapability} interface\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module InPin.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIInputPin}
 class methods 
used to implement the TAPI base output pin.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Add support for {\b IFrameRateControl}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module InPin.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CTAPIInputPin}
 class methods 
used to implement the TAPI base input pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module OutPin.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIOutputPin}
 class methods 
used to implement the TAPI base output pin.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Add support for {\b IFrameRateControl}\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module OutPin.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CTAPIOutputPin}
 class methods 
used to implement the TAPI H.26X Video Decoder output pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module Precomp.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PRECOMP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Master header file.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProcAmp.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVDec}
 
class methods used to implement the {\b IAMVideoProcAmp} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do something with the {\b IAMVideoProcAmp} interface or remove it.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProcAmpP.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CProcAmpProperty}
 
class used to implement a property page to test the DShow interface 
{\b IAMVideoProcAmp}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Capture Filter {\b IAMVideoProcAmp} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module ProcAmpP.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CProcAmpProperty}
 
class used to implement a property page to test the DShow interface 
{\b IAMVideoProcAmp}.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Capture Filter {\b IAMVideoProcAmp} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module PropEdit.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CPropertyEditor}
 
class used to implement behavior of a single property to be displayed 
in a property page.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code is only compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module PropEdit.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CPropertyEditor}
 
class used to implement behavior of a single property to be displayed 
in a property page.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the Ks interface handlers. This code is only 
compiled if USE_PROPERTY_PAGES is defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module TAPIVDec.cpp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Source file for the {\b CTAPIVDec}
 
class used to implement the TAPI H.26X Video Decoder filter.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Switch to new format definition when you're done\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module TAPIVDec.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the {\b CTAPIVDec}
 
class used to implement the TAPI H.26X Video Decoder filter.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 Module TAPIVid.h\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Filename: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Description\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Header file for the new TAPI internal interfaces and 
devine enumeration enums and struct, and our filter GUID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Two interface declaration changes are due to a multiple inheritance 
problem: {\b IAMCameraControl} and {\b IAMVideoProcAmp} interface methods 
have identical prototypes. Our Video Capture filter implements both 
interfaces.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCameraControlProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class runs a property page to test 
the TAPI Capture Filter {\b ICameraControl} implementation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::CCameraControlProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCameraControlProperties}{\b ::CCameraControlProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CCameraControlProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a Network Statistics 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::m_Controls[NUM_CAMERA_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CCameraControlProperty * CCameraControlProperties::m_Controls[NUM_CAMERA_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of camera control properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Capture Filter {\b ICameraControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CCameraControlProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::m_pICameraControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ICameraControl * CCameraControlProperties::m_pICameraControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b ICameraControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CCameraControlProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CCameraControlProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperties::~CCameraControlProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCameraControlProperties}{\b ::~CCameraControlProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for camera control property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CCameraControlProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single camera control property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::CCameraControlProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCameraControlProperty}{\b ::CCameraControlProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , ICameraControl*} {\i pInterface}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for camera control property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
a pointer to the {\b ICameraControl} interface.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property progress bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInterface}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b ICameraControl} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CCameraControlProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ICameraControl * CCameraControlProperty::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b ICameraControl} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Capture Filter {\b ICameraControl} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CCameraControlProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CCameraControlProperty::~CCameraControlProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CCameraControlProperty}{\b ::~CCameraControlProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for camera control property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERACP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CProcAmpProperties}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class runs a property page to test 
the TAPI Capture Filter {\b IAMVideoProcAmp} implementation.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::CProcAmpProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProcAmpProperties}{\b ::CProcAmpProperties(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for the property page object. It simply 
calls the constructor of the property page base class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CProcAmpProperties}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of a Network Statistics 
Property Page. It is referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::m_Controls[NUM_PROCAMP_CONTROLS]\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CProcAmpProperty * CProcAmpProperties::m_Controls[NUM_PROCAMP_CONTROLS]}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Array 
of video proc amp properties.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Capture Filter {\b IAMVideoProcAmp} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CProcAmpProperties::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::m_pIAMVideoProcAmp\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IAMVideoProcAmp * CProcAmpProperties::m_pIAMVideoProcAmp}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IAMVideoProcAmp} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnActivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnActivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is activated.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnApplyChanges\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnApplyChanges(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the user applies changes to the property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnConnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnConnect(}{\b LPUNKNOWN} {\i pUnknown}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is connected to the filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnknown}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnDeactivate\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnDeactivate(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is dismissed.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnDisconnect\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperties}{\b ::OnDisconnect(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when the property page is disconnected from the owning 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::OnReceiveMessage\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CProcAmpProperties}{\b ::OnReceiveMessage(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called when a message is sent to the property page dialog box.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 By default, returns the value returned by the Win32 DefWindowProc function.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::SetDirty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CProcAmpProperties}{\b ::SetDirty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method notifies the property page site of changes.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperties::~CProcAmpProperties\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProcAmpProperties}{\b ::~CProcAmpProperties(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for the video proc amp control property page. It 
simply calls the base class destructor after deleting all the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CProcAmpProperty}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements handling of a 
single video proc amp control property in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the automatic control capabilities for a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::CanAutoControl\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::CanAutoControl(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
retrieves the current automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE if automatic control is supported, FALSE 
otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::CProcAmpProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProcAmpProperty}{\b ::CProcAmpProperty(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b , IAMVideoProcAmp*} {\i pInterface}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for video proc amp control property objects. It 
calls the base class constructor, calls InitCommonControlsEx, and saves 
a pointer to the {\b IAMVideoProcAmp} interface.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property progress bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the Ks property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pInterface}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the 
{\b IAMVideoProcAmp} interface.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::GetRange(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method retrieves 
the range information of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::GetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::GetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method queries for 
the value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::m_NumProperties\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b int CProcAmpProperty::m_NumProperties}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Keeps 
track of the number of properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::m_pInterface\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b IAMVideoProcAmp * CProcAmpProperty::m_pInterface}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer 
to the {\b IAMVideoProcAmp} interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 This code tests the TAPI Capture Filter {\b IAMVideoProcAmp} 
implementation. This code is only compiled if USE_PROPERTY_PAGES is 
defined.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::SetAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::SetAuto(}{\b BOOL} {\i fAuto}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
sets the automatic control mode of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns TRUE.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i fAuto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the automatic control mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::SetValue\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CProcAmpProperty}{\b ::SetValue(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method sets the 
value of a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_NOTIMPL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Method is not supported\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CProcAmpProperty::~CProcAmpProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CProcAmpProperty}{\b ::~CProcAmpProperty(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the destructor for video proc amp control property objects. It 
simply calls the base class destructor.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMPP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CPropertyEditor}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements behavior of a single 
property to be displayed in a property page.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::CPropertyEditor\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPropertyEditor}{\b ::CPropertyEditor(}{\b HWND} {\i hDlg}{\b , ULONG} {\i IDLabel}{\b , ULONG} {\i IDMinControl}{\b , ULONG} {\i IDMaxControl}{\b , ULONG} {\i IDDefaultControl}{\b , ULONG} {\i IDStepControl}{\b , ULONG} {\i IDEditControl}{\b , ULONG} {\i IDTrackbarControl}{\b , ULONG} {\i IDProgressControl}{\b , ULONG} {\i IDProperty}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the constructor for property objects.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hDlg}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a handle to the parent property page.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDLabel}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMinControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Minimum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDMaxControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Maximum value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDDefaultControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Default value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDStepControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the Stepping Delta value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDEditControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property edit control where the value of the property appears.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDTrackbarControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
property slide bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProgressControl}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a label ID for the associated 
progress bar.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i IDProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the property.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::GetAutoHWnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b CPropertyEditor}{\b ::GetAutoHWnd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helper method to allow 
the property page code to access the auto window (private member) of 
a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the auto window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::GetEditHWnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b CPropertyEditor}{\b ::GetEditHWnd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helper method to allow 
the property page code to access the Target window (private member) of 
a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the Target window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::GetProgressHWnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b CPropertyEditor}{\b ::GetProgressHWnd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helper method to allow 
the property page code to access the progress bar window (private member) of 
a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the progress window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::GetTrackbarHWnd\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HWND} {\b CPropertyEditor}{\b ::GetTrackbarHWnd(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Helper method to allow 
the property page code to access the slide bar window (private member) of 
a property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a handle to the slide bar window.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::HasChanged\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPropertyEditor}{\b ::HasChanged(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This member tests for a 
change in value.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if value has changed.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::Init\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::Init(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This initializes the controls.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 TRUE on success, FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_Active\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CPropertyEditor::m_Active}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Set to TRUE after all property values have been initialized\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_CurrentValue\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CPropertyEditor::m_CurrentValue}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Property current value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_DefaultValue\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CPropertyEditor::m_DefaultValue}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Property default value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_hDlg\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CPropertyEditor::m_hDlg}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Parent dialog\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_hWndDefault\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CPropertyEditor::m_hWndDefault}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Default dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_hWndEdit\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CPropertyEditor::m_hWndEdit}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Target dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_hWndMax\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CPropertyEditor::m_hWndMax}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Maximum dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_hWndMin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CPropertyEditor::m_hWndMin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Minimum dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_hWndProgress\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CPropertyEditor::m_hWndProgress}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the progress bar\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_hWndStep\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CPropertyEditor::m_hWndStep}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the Stepping Delta dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_hWndTrackbar\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HWND CPropertyEditor::m_hWndTrackbar}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Window handle to the slide bar\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDDefaultControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDDefaultControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Default dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDEditControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDEditControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Target dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDLabel\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDLabel}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the property label\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDMaxControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDMaxControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Maximum dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDMinControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDMinControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Minimum dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDProgressControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDProgressControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the progress bar\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDProperty\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDProperty}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Property ID\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDStepControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDStepControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the Stepping Delta dialog item\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_IDTrackbarControl\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b ULONG CPropertyEditor::m_IDTrackbarControl}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resource ID of the slide bar\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_Max\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CPropertyEditor::m_Max}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Property maximum value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_Min\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CPropertyEditor::m_Min}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Property minimum value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_OriginalValue\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CPropertyEditor::m_OriginalValue}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Backup of the original value\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::m_SteppingDelta\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b LONG CPropertyEditor::m_SteppingDelta}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Property stepping delta\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::OnApply\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPropertyEditor}{\b ::OnApply(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This member function is 
called by the framework when the user chooses the OK or the Apply Now 
button. When the framework calls this member function, changes made on 
all property pages in the property sheet are accepted, the property 
sheet retains focus.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::OnAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::OnAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Gets the status of the 
checkbox.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::OnDefault\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::OnDefault(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Resets the position of the 
slide bar and updates the content of the Target windows after the user 
pressed the Default button.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if Active, FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::OnEdit\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::OnEdit(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads the content of the 
Target window and updates the postion of the slider after the user 
has messed with the Target edit control.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::OnScroll\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::OnScroll(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Reads the position of the 
slide bar and updates the content of the Target windows after the user 
has messed with the slide bar.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE if Active, FALSE otherwise.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::UpdateAuto\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::UpdateAuto(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Updates the auto checkbox\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::UpdateEditBox\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::UpdateEditBox(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Updates the content of 
the Target window after user has moved the slide bar.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::UpdateProgress\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::UpdateProgress(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Updates the position of 
the progress bar.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::UpdateTrackbar\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b BOOL} {\b CPropertyEditor}{\b ::UpdateTrackbar(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Updates the position of 
the slide bar after user has messed with the Target window.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns TRUE.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPropertyEditor::~CPropertyEditor\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CPropertyEditor}{\b ::~CPropertyEditor(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 Destructor for this class.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROPEDIT.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CTAPIInputPin}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the TAPI H.26X Video 
Decoder input pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::CTAPIInputPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIInputPin}{\b ::CTAPIInputPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
constructor for the {\b CTAPIInputPin}
 object\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This should be based on the capabilities of the machine\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::Get\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIInputPin}{\b ::Get(}{\b FrameRateControlProperty} {\i Property}{\b , long*} {\i plValue}{\b , TAPIControlFlags*} {\i plFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the value of the current or maximum frame rate advertized.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame rate 
control setting to get the value of. Use a member of the 
{\b FrameRateControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the value of the property, in 
100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the 
{\b TAPIControlFlags} enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::Get\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIInputPin}{\b ::Get(}{\b BitrateControlProperty} {\i Property}{\b , long*} {\i plValue}{\b , TAPIControlFlags*} {\i plFlags}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the current or maximum limit in bandwidth transmission advertized.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specifiy the property 
to retrieve the value of.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the value of the property, in bps.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the value of the flag 
associated to the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIInputPin}{\b ::GetRange(}{\b long*} {\i plMin}{\b , long*} {\i plMax}{\b , long*} {\i plSteppingDelta}{\b , long*} {\i plDefault}{\b , TAPIControlFlags*} {\i plCapsFlags}{\b , DWORD} {\i dwLayerId}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to retrieve support, minimum, maximum, and default 
values for the upper limit in bandwidth transmission the an output pin 
may be setup for.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of the 
property, in bps.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of the 
property, in bps.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta 
of the property, in bps.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of the 
property, in bps.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the flags 
suppported by the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwLayerId}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the ID of the encoding layer the 
call applies to. For standard audio and video encoders, this field is 
always set to 0. In the case of multi-layered encoders, this field 
shall be set to 0 for the base layer, 1 for the first enhancement 
layer, 2 for the next enhancement layer, etc\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIInputPin}{\b ::GetRange(}{\b FrameRateControlProperty} {\i Property}{\b , long*} {\i plMin}{\b , long*} {\i plMax}{\b , long*} {\i plSteppingDelta}{\b , long*} {\i plDefault}{\b , TAPIControlFlags*} {\i plCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve support, minimum, maximum, and default values of the current 
or maximum frame rate advertized.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame rate 
control setting to get the range values of. Use a member of the 
{\b FrameRateControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of the 
property, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of the 
property, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta 
of the property, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of the 
property, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the 
{\b TAPIControlFlags} enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_AvgTimePerFrameRangeDefault\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIInputPin::m_AvgTimePerFrameRangeDefault}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
frame rate default.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_AvgTimePerFrameRangeMax\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIInputPin::m_AvgTimePerFrameRangeMax}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum 
target frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_AvgTimePerFrameRangeMin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIInputPin::m_AvgTimePerFrameRangeMin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Minimum 
target frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_AvgTimePerFrameRangeSteppingDelta\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIInputPin::m_AvgTimePerFrameRangeSteppingDelta}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
frame rate stepping delta.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_CurrentAvgTimePerFrame\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIInputPin::m_CurrentAvgTimePerFrame}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current 
frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_dwBitrateRangeDefault\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_dwBitrateRangeDefault}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Default target bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_dwBitrateRangeMax\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_dwBitrateRangeMax}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum target bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_dwBitrateRangeMin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_dwBitrateRangeMin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Minimum target bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_dwBitrateRangeSteppingDelta\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_dwBitrateRangeSteppingDelta}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
bitrate stepping delta.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_dwCurrentBitrate\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_dwCurrentBitrate}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_dwMaxBitrate\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_dwMaxBitrate}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_dwNumBytesDelivered\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_dwNumBytesDelivered}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Counts number of 
bytes delivered, reset every second or so.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_dwNumFramesDelivered\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_dwNumFramesDelivered}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Counts number of 
frames delivered, reset every second or so.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_pDecoderFilter\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CTAPIVCap* CTAPIInputPin::m_pDecoderFilter}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the 
filter that owns us.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::m_pIH245EncoderCommand\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIInputPin::m_pIH245EncoderCommand}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the 
outgoing {\b IH245EncoderCommand} interface exposed by the channel 
controller to send H.245 commands to the remote encoder.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do we really need m_dwNumFramesDelivered to be a member variable of this class?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do we really need m_dwNumBytesDelivered to be a member variable of this class?\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIInputPin}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a 
pointer to the specified interface if supported. The only interfaces 
explicitly supported being {\b IOutgoingInterface}, 
{\b IFrameRateControl} and {\b IBitrateControl}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::Set\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIInputPin}{\b ::Set(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used by the incoming 
video stream to provide a pointer to the {\b IH245EncoderCommand} 
interface supported by the associated channel controller.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245COMM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::videoFastUpdatePicture\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIInputPin}{\b ::videoFastUpdatePicture(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the remote encoder to enter 
the fast-update picture mode at its earliest opportunity.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245COMM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns NOERROR.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIInputPin::~CTAPIInputPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CTAPIInputPin}{\b ::~CTAPIInputPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
destructor of our input pin. We simply release the pointer to the 
{\b IH245EncoderCommand} interface.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/INPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CTAPIOutputPin}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the TAPI H.26X Video 
Decoder output pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::CTAPIOutputPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::CTAPIOutputPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
constructor for the {\b CTAPIOutputPin}
 object\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This should be based on the capabilities of the machine\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::Get\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::Get(}{\b FrameRateControlProperty} {\i Property}{\b , long*} {\i plValue}{\b , TAPIControlFlags*} {\i plFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the value of the current or maximum frame rate advertized.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame rate 
control setting to get the value of. Use a member of the 
{\b FrameRateControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the value of the property, in 
100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the 
{\b TAPIControlFlags} enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::Get\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::Get(}{\b CPUControlProperty} {\i Property}{\b , long*} {\i plValue}{\b , TAPIControlFlags*} {\i plFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the value of a CPU control property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the CPU 
control setting to get the value of. Use a member of the 
{\b CPUControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the value of the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the {\b TAPIControlFlags} 
enumerated type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Only implement Get for CPUControl_CurrentProcessingTime.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::GetRange(}{\b FrameRateControlProperty} {\i Property}{\b , long*} {\i plMin}{\b , long*} {\i plMax}{\b , long*} {\i plSteppingDelta}{\b , long*} {\i plDefault}{\b , TAPIControlFlags*} {\i plCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve support, minimum, maximum, and default values of the current 
or maximum frame rate advertized.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame rate 
control setting to get the range values of. Use a member of the 
{\b FrameRateControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of the 
property, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of the 
property, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta 
of the property, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of the 
property, in 100-nanosecond units.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the 
{\b TAPIControlFlags} enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::GetRange(}{\b CPUControlProperty} {\i Property}{\b , long*} {\i plMin}{\b , long*} {\i plMax}{\b , long*} {\i plSteppingDelta}{\b , long*} {\i plDefault}{\b , TAPIControlFlags*} {\i plCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve support, minimum, maximum, and default values of a CPU control 
property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specifiy the CPU control 
property to retrieve the range values of.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of the 
property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of the 
property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta 
of the property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of the 
property.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to receive the flags 
suppported by the property.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_AvgTimePerFrameRangeDefault\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIOutputPin::m_AvgTimePerFrameRangeDefault}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
frame rate default.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_AvgTimePerFrameRangeMax\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIOutputPin::m_AvgTimePerFrameRangeMax}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum 
target frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_AvgTimePerFrameRangeMin\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIOutputPin::m_AvgTimePerFrameRangeMin}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Minimum 
target frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_AvgTimePerFrameRangeSteppingDelta\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIOutputPin::m_AvgTimePerFrameRangeSteppingDelta}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
frame rate stepping delta.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_CurrentAvgTimePerFrame\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIOutputPin::m_CurrentAvgTimePerFrame}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current 
frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_CurrentProcessingTime\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIOutputPin::m_CurrentProcessingTime}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current 
processing time.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_dwCurrentCPULoad\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIOutputPin::m_dwCurrentCPULoad}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Current CPU load.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_dwMaxCPULoad\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIOutputPin::m_dwMaxCPULoad}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum CPU load.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_dwNumFramesDelivered\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b DWORD CTAPIOutputPin::m_dwNumFramesDelivered}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Counts number of 
frames delivered, reset every second or so.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do we really need m_dwNumFramesDelivered to be a member variable of this class?\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_MaxAvgTimePerFrame\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIOutputPin::m_MaxAvgTimePerFrame}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Target 
frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_MaxProcessingTime\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b REFERENCE_TIME CTAPIOutputPin::m_MaxProcessingTime}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum 
processing time.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::m_pDecoderFilter\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b CTAPIVDec* CTAPIOutputPin::m_pDecoderFilter}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Pointer to the 
filter that owns us.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a 
pointer to the specified interface if supported. The only interfaces 
explicitly supported being {\b ICPUControl}, {\b IFrameRateControl} 
and {\b IH245DecoderCommand}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::Set\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::Set(}{\b FrameRateControlProperty} {\i Property}{\b , long} {\i lValue}{\b , TAPIControlFlags} {\i lFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to set the 
value of a frame rate control property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the frame rate 
control setting to set the value of. Use a member of the 
{\b FrameRateControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the new value of the frame rate control 
setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A member of the {\b TAPIControlFlags} 
enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::Set\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::Set(}{\b CPUControlProperty} {\i Property}{\b , long} {\i lValue}{\b , TAPIControlFlags} {\i lFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to set the 
value of a CPU control property.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the CPU 
control setting to set the value of. Use a member of the 
{\b CPUControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the new value of the CPU control 
setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A member of the {\b TAPIControlFlags} 
enumerated type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Do not implement Set on any of the CPU control properties.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::videoFreezePicture\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIOutputPin}{\b ::videoFreezePicture(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is used to specify to the decoder to complete updating the 
current video frame and subsequently display the frozen picture until 
receipt of the appropriate freeze-picture release control signal.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245COMM.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns NOERROR.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIOutputPin::~CTAPIOutputPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CTAPIOutputPin}{\b ::~CTAPIOutputPin(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the 
destructor of our output pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/OUTPIN.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec Class\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b class CTAPIVDec}\par 

\pard\plain \sa160\sl240 \fs21\lang1033 This class implements the TAPI H.26X Video Decoder 
filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.H\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::CheckInputType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::CheckInputType(}{\b const CMediaType*} {\i pmtIn}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
verify that the input pin supports the media type, and proposes the 
output pin's media type.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmtIn}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an input 
media type object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Why the hell did we do all this work then?\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::CheckTransform\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::CheckTransform(}{\b const CMediaType*} {\i pmtIn}{\b , const CMediaType*} {\i pmtOut}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
verify that the input and output pins support the media types.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmtIn}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an input 
media type object.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmtOut}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an output 
media type object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Add support for DDraw\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::CreateInstance\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b CUnknown*} {\b CTAPIVDec}{\b ::CreateInstance(}{\b LPUNKNOWN} {\i pUnkOuter}{\b , HRESULT*} {\i pHr}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is called by DShow to create an instance of the TAPI H.26X Video 
Decoder Transform filter referred to in the global structure {\b g_Templates}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Returns a pointer to the nondelegating CUnknown portion of the 
object, or NULL otherwise.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pUnkOuter}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the outer unknown, if any.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pHr}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put any error return.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::CTAPIVDec\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CTAPIVDec}{\b ::CTAPIVDec(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the constructor 
for the {\b CTAPIVDec}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::DecideBufferSize\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::DecideBufferSize(}{\b IMemAllocator*} {\i pAlloc}{\b , ALLOCATOR_PROPERTIES*} {\i ppropInputRequest}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is 
used to set the number and size of buffers required for transfer.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAlloc}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the allocator 
assigned to the transfer.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppropInputRequest}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b ALLOCATOR_PROPERTIES} structure.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::FindIDByRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::FindIDByRange(}{\b AM_MEDIA_TYPE*} {\i pAMMediaType}{\b , DWORD*} {\i pdwID}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
obtain the unique format ID of a capability that corresponds to an 
{\b AM_MEDIA_TYPE}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAMMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b AM_MEDIA_TYPE} structure that has been initialized indicate a 
specific format.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD output parameter 
that will contain the unique format ID.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::Get\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::Get(}{\b TAPICameraControlProperty} {\i Property}{\b , long*} {\i plValue}{\b , TAPIControlFlags*} {\i plFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve the 
value of a camera control setting.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERAC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the camera 
control setting to get the value of. Use a member of the 
{\b TAPICameraControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the current value of the 
camera control setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the {\b TAPIControlFlags} 
enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::Get\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::Get(}{\b VideoProcAmpProperty} {\i Property}{\b , long*} {\i plValue}{\b , TAPIControlFlags*} {\i plFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve the 
value of a video quality setting.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the video 
quality setting to get the value of. Use a member of the 
{\b VideoProcAmpProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the current value of the 
video quality setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Pointer to a member of the {\b TAPIControlFlags} 
enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetFormatTable\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetFormatTable(}{\b IPin*} {\i pPin}{\b , H245VideoCapabilityTable*} {\i pTable}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
obtain {\b H245VideoCapabilityMap} structures for all formats and format 
options that the TAPI MSP Video Capture filter supports. The content of 
the capability information that the TAPI MSP Capability module obtains 
via this method is a two dimensional table that relates every supported 
transmit format to steady-state resource requirements of that format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the video capture or 
still-image output pin of the capture device. The TAPI MSP Video 
Capture filter enumerates the list of formats supported by this pin to 
build its own video capability table.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pTable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b H245VideoCapabilityTable} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 The memory allocated by {\b GetFormatTable} is released 
by calling {\b ReleaseFormatTable}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetH245VersionID\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetH245VersionID(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
retrieve a DWORD value that identifies the platform version that the 
TAPI MSP Video Capture filter was designed for. The platform version is 
defined as TAPI_H245_VERSION_ID.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Validate the H.245 version with Mike\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetLocalFormat\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetLocalFormat(}{\b H245VideoCapability*} {\i pRemoteCapability}{\b , HANDLE*} {\i phIntersectionCookie}{\b , AM_MEDIA_TYPE*} {\i pAMMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
obtain the local TAPI MSP Video Capture filter configuration 
parameters that are compatible with a remote capability.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRemoteCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 
video format, including all parameters and options defined by H.245, of 
a remote video capability.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phIntersectionCookie}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the dynamic instance of 
intersected capabilities. When the TAPI MSP Video Capture filter 
creates the intersection, it may allocate memory for the intersected 
capability parameters. The intersection cookie identifies this 
allocation. This is used to release internal allocations and also as an 
argument to the {\b GetNegotiatedLimitProperty} method.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAMMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b AM_MEDIA_TYPE} structure that has been initialized to regard 
negotiated options.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b GetNegotiatedLimitProperty}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetMediaType(}{\b int} {\i iPosition}{\b , CMediaType*} {\i pmt}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called when 
enumerating the media type the output pin supports. It checks the 
current display mode to device which of the RGB types to return.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i iPosition}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the position of the media type in the 
media type list.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer pointer to the returned 
media type object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 The H.26x decoders support YUY2. Either use it and advertize it, or 
remove the code from the decoders if you're not going to use it.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetNegotiatedLimitProperty\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetNegotiatedLimitProperty(}{\b HANDLE} {\i hIntersectionCookie}{\b , NegotiatedVideoLimit} {\i LimitProperty}{\b , DWORD*} {\i pdwValue}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
is used to obtain negotiated limits that were determined by either the 
{\b IntersectFormats} or {\b GetLocalFormat} 
method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hIntersectionCookie}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the dynamic instance of 
intersected capabilities.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i LimitProperty}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the limit 
property being retrieved.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pdwValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a DWORD to receive 
the value of the specified limit property.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IntersectFormats}, {\b GetLocalFormat}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Are you sure 0 is not a valid handle here?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetPages\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetPages(}{\b CAUUID*} {\i pPages}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method Fills a counted 
array of GUID values where each GUID specifies the CLSID of each 
property page that can be displayed in the property sheet for this 
object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_OUTOFMEMORY\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Allocation failed\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pPages}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a caller-allocated CAUUID 
structure that must be initialized and filled before returning. The 
pElems field in the CAUUID structure is allocated by the callee with 
CoTaskMemAlloc and freed by the caller with CoTaskMemFree.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetPin\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetPin(}{\b int} {\i n}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method returns a non-addrefed 
pointer to the {\b cBasePin}
 of a pin.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns NULL or a pointer to a {\b CBasePin}
 object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i n}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the number of the pin.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetRange(}{\b VideoProcAmpProperty} {\i Property}{\b , long*} {\i plMin}{\b , long*} {\i plMax}{\b , long*} {\i plSteppingDelta}{\b , long*} {\i plDefault}{\b , TAPIControlFlags*} {\i plCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the minimum, maximum, and default values for specific video quality 
settings.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the video 
quality setting to determine the range of. Use a member of the 
{\b VideoProcAmpProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of the video 
quality setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of the video 
quality setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta of 
the video quality setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of the 
video quality setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the capabilities of the 
video quality setting. Pointer to a member of the 
{\b TAPIControlFlags} enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::GetRange\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::GetRange(}{\b CameraControlProperty} {\i Property}{\b , long*} {\i plMin}{\b , long*} {\i plMax}{\b , long*} {\i plSteppingDelta}{\b , long*} {\i plDefault}{\b , TAPIControlFlags*} {\i plCapsFlags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to retrieve 
the minimum, maximum, and default values for specific camera control 
settings.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERAC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the camera 
control setting to determine the range of. Use a member of the 
{\b CameraControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMin}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the minimum value of the camera 
control setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plMax}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the maximum value of the camera 
control setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plSteppingDelta}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the stepping delta of 
the camera control setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plDefault}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the default value of the 
camera control setting range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i plCapsFlags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to retrieve the capabilities 
of the camera control setting. Pointer to a member of the {\b TAPIControlFlags} 
enumerated type.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::IntersectFormats\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::IntersectFormats(}{\b H245VideoCapability*} {\i pLocalCapability}{\b , H245VideoCapability*} {\i pRemoteCapability}{\b , HANDLE*} {\i phIntersectionCookie}{\b , H245VideoCapability*} {\i pIntersectedCapability}{\b , AM_MEDIA_TYPE*} {\i pAMMediaType}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
compare and intersect one local capability and one remote capability 
and to obtain configuration parameters.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pLocalCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 video 
format, including all parameters and options defined by H.245, of a 
local video capability.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pRemoteCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 
video format, including all parameters and options defined by H.245, of 
a remote video capability.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i phIntersectionCookie}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the dynamic instance of 
intersected capabilities. When the TAPI MSP Video Capture filter 
creates the intersection, it may allocate memory for the intersected 
capability parameters. The intersection cookie identifies this 
allocation. This is used to release internal allocations and also as an 
argument to the {\b GetNegotiatedLimitProperty} method.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIntersectedCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 
video format, of the resolved common local and remote capability 
options and limits.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pAMMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b AM_MEDIA_TYPE} structure that has been initialized to regard 
negotiated options.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b GetNegotiatedLimitProperty}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::m_FourCCIn\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b FOURCC CTAPIVDec::m_FourCCIn}\par
\pard\plain \sa160\sl240 \fs21\lang1033 FourCC used to get a handle 
to the decoder.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::m_fStreaming\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b BOOL CTAPIVDec::m_fStreaming}\par
\pard\plain \sa160\sl240 \fs21\lang1033 Streaming state.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::m_hic\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b HIC CTAPIVDec::m_hic}\par
\pard\plain \sa160\sl240 \fs21\lang1033 ICM handle to the decoder\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::NonDelegatingQueryInterface\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::NonDelegatingQueryInterface(}{\b REFIID} {\i riid}{\b , PVOID*} {\i ppv}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This 
method is the nondelegating interface query function. It returns a pointer 
to the specified interface if supported. The only interfaces explicitly 
supported being {\b IAMVideoProcAmp}, 
{\b IAMCameraControl}, {\b IH245VideoCapability}.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i riid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the identifier of the interface to return.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i ppv}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the place in which to put the interface 
pointer.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::ReleaseFormatTable\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::ReleaseFormatTable(}{\b H245VideoCapabilityTable*} {\i pTable}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
to release memory allocated by the {\b GetFormatTable} method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pTable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b H245VideoCapabilityTable} structure.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b GetFormatTable}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::ReleaseNegotiatedCapability\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::ReleaseNegotiatedCapability(}{\b HANDLE} {\i hIntersectionCookie}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method 
is used to release the TAPI MSP Video Capture filter internal memory 
allocated by either the {\b IntersectFormats} or 
{\b GetLocalFormat} method.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i hIntersectionCookie}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Identifies the dynamic instance of 
intersected capabilities.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 See Also\par \pard\plain \sa160\sl240 \fs21\lang1033 {\b IntersectFormats}, {\b GetLocalFormat}\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Are you sure 0 is not a valid handle here?\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::Set\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::Set(}{\b VideoProcAmpProperty} {\i Property}{\b , long} {\i lValue}{\b , TAPIControlFlags} {\i Flags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to set the value 
of a video quality setting.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/PROCAMP.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the video 
quality setting to set the value of. Use a member of the 
{\b VideoProcAmpProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the new value of the video quality 
setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Flags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A member of the {\b TAPIControlFlags} 
enumerated type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Check the range of {\i lValue} before remembering it - return 
E_INVALIDARG on error in this case\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::Set\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::Set(}{\b TAPICameraControlProperty} {\i Property}{\b , long} {\i lValue}{\b , TAPIControlFlags} {\i Flags}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to set the value 
of a camera control setting.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/CAMERAC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_PROP_ID_UNSUPPORTED\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 The specified property ID is not supported 
for the specified property set\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Property}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the camera 
control setting to set the value of. Use a member of the 
{\b TAPICameraControlProperty} enumerated type.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i lValue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify the new value of the camera control 
setting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i Flags}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 A member of the {\b TAPIControlFlags} 
enumerated type.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Check the range of {\i lValue} before remembering it - return 
E_INVALIDARG on error in this case\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::SetIDBase\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::SetIDBase(}{\b DWORD} {\i dwIDBase}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used to 
control the sequential numbering range used to uniquely identify the 
TAPI MSP Video Capture filter capabilities.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/H245VIDC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_INVALIDARG\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Invalid argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i dwIDBase}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a DWORD value that indicates the 
beginning number in the sequence.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This dwIDBase value probably has a range. Figure it out and validate input param...\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Put some real code here!\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::SetMediaType\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::SetMediaType(}{\b PIN_DIRECTION} {\i direction}{\b , const CMediaType*} {\i pmt}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is called when 
the media type is established for the connection.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i direction}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the pin direction.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pmt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to a media type 
object.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Is this the method that I should call when I detect that the 
input format data has changed in-band? But I would be streaming at 
this point...\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::StartStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::StartStreaming(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method lets our filter 
know that we're in the process of switching to active mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::StopStreaming\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::StopStreaming(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method lets our filter 
know that we're in the process of leaving active mode and entering 
stopped mode.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns NOERROR.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::Transform\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b HRESULT} {\b CTAPIVDec}{\b ::Transform(}{\b IMediaSample*} {\i pIn}{\b , IMediaSample*} {\i pOut}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is used 
to perform the transform operations supported by this filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 This method returns an HRESULT value that depends on the 
implementation of the interface. HRESULT can include one of the 
following standard constants, or other values not listed:\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_FAIL\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Failure\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 E_POINTER\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 Null pointer argument\par 
\pard\plain \s53\li280\sl-240\keepn \f0\fs21\lang1033 NOERROR\par 
\pard\plain \s55\li560\sa80\sl-240 \f0\fs21\lang1033 No error\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Parameters\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pIn}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the input 
IMediaSample interface.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\i pOut}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to the output 
IMediaSample interface.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 This isn't how we would detect a format change. We need to peek 
at the incoming RTP packets to understand a format change has occured. 
But we need to change the output pin media type if necessary.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Verify our decoders actually handle this flag correctly or remove this code 
By the way, this may conflict with the way we do frame rate control\par 
\pard\plain \sa160\sl240 \fs21\lang1033 \cf6 Implement this yourself - don't use the CVideoTrasnsformFilter implementation\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CTAPIVDec::~CTAPIVDec\par 
\pard \plain \sa160\sl240 \fs21\lang1033 {\b void} {\b CTAPIVDec}{\b ::~CTAPIVDec(void}{\b ) }\par
\pard\plain \sa160\sl240 \fs21\lang1033 This method is the destructor 
for the {\b CTAPIVDec}
 object.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/TAPIVDEC/TAPIVDEC.CPP\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Return Value\par \pard\plain \sa160\sl240 \fs21\lang1033 Nada.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MAX_CAPDEV_DESCRIPTION constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const MAX_PATH MAX_CAPDEV_DESCRIPTION;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum length of capture 
device description string.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MAX_CAPDEV_VERSION constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 80 MAX_CAPDEV_VERSION;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum length of capture device version 
string.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 MAX_CAPTURE_DEVICES constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const 4 MAX_CAPTURE_DEVICES;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Maximum number of capture devices.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TAPI_H245_VERSION_ID constant\par 
\pard\plain \sa160\sl240 \fs21\lang1033 {\b const int TAPI_H245_VERSION_ID;}\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Specifies  the  H.245 platform 
version 3.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 BitrateControlProperty\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum BitrateControlProperty \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BitrateControl_Maximum,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BitrateControl_Current\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b BitrateControlProperty} enum is used 
to identify specific bitrate control settings.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIQC.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BitrateControl_Maximum}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the maximum bitrate not to be 
exceeded.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b BitrateControl_Current}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the current bitrate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CaptureMode\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum CaptureMode \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab CaptureMode_FrameGrabbing,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab CaptureMode_Streaming\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b CaptureMode} enum is used to identify frame 
grabbing or streaming mode.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b CaptureMode_FrameGrabbing}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies frame grabbing mode.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b CaptureMode_Streaming}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies streaming mode.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CHANNELERRORS_S Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwRandomBitErrorRate;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwBurstErrorDuration;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwBurstErrorMaxFrequency;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} CHANNELERRORS_S;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b CHANNELERRORS_S} structure is used 
to set and retrieve the value of channel errors.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIQC.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwRandomBitErrorRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the random bit error rate 
of the channel in multiples of 10-6.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwBurstErrorDuration}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the duration for short 
burst errors in ms.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwBurstErrorMaxFrequency}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the maximum 
frequency for short burst errors in Hz.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 CPUControlProperty\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum CPUControlProperty \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab CPUControl_MaxCPULoad,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab CPUControl_CurrentCPULoad,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab CPUControl_MaxProcessingTime,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab CPUControl_CurrentProcessingTime\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b CPUControlProperty} enum is used 
to identify specific CPU control settings.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIQC.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b CPUControl_MaxCPULoad}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the maximum CPU load not to be 
exceeded.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b CPUControl_CurrentCPULoad}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the current CPU load.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b CPUControl_MaxProcessingTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the maximum processing 
time not to be exceeded.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b CPUControl_CurrentProcessingTime}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the current processing 
time.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DEVICEINFO Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab char szDeviceDescription[];\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab char szDeviceVersion[];\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BOOL fHasOverlay;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab BOOL fInUse;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DeviceType nDeviceType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab CaptureMode nCaptureMode;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwVfWIndex;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} DEVICEINFO;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b DEVICEINFO} structure is used to store capture 
device information.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b szDeviceDescription[]}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the description string of 
the capture device.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b szDeviceVersion[]}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the version string of 
the capture device.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b fHasOverlay}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the overlay support of the capture 
device.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b fInUse}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Set to TRUE when a device is being used by an 
instance of the capture filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b nDeviceType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the type (VfW or WDM) of the 
capture device.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b nCaptureMode}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the capture mode (frame grabbing 
or streaming) of the capture device.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwVfWIndex}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the VfW index of the capture device.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 DeviceType\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum DeviceType \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DeviceType_VfW,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DeviceType_WDM\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b DeviceType} enum is used to identify VfW and WDM 
device types.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DeviceType_VfW}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a VfW device.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DeviceType_WDM}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a WDM device.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 FrameRateControlProperty\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum FrameRateControlProperty \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab FrameRateControl_Maximum,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab FrameRateControl_Current\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b FrameRateControlProperty} enum is used 
to identify specific frame rate control settings.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIQC.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b FrameRateControl_Maximum}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the maximum frame rate not 
to be exceeded.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b FrameRateControl_Current}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the current frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 H245VideoCapabilityMap Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab AM_MEDIA_TYPE* pAMMediaType;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab H245VideoCapability h245VideoCapability;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab GUID filterGuid;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwUniqueID;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab UINT uNumRatesSupported;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoResourceBounds* pResourceBoundArray;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} H245VideoCapabilityMap;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b H245VideoCapabilityMap} structure 
is used to specify the relationship between supported formats and 
estimated maximum system resources for the supported format.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pAMMediaType}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer to an 
{\b AM_MEDIA_TYPE} structure that describes the format of the video stream.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b h245VideoCapability}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the H.245 
video format, including all parameters and options. This structure is 
H.245 version specific: its definition depends on the version of H.245 
used by the TAPI MSP Video Capture filter. This structure may indicate 
format parameters for more than one standard video size at a time if 
the resource requirements are similar for all sizes.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b filterGuid}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a GUID value that uniquely 
identifies the TAPI MSP Video Capture filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwUniqueID}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a DWORD value that uniquely 
identifies the capability of the TAPI MSP Video Capture filter.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b uNumRatesSupported}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 This indicates the number of elements 
referenced by {\b pResourceBoundArray} and specifies the number of integral 
frame rates that are supported for the format options specified in 
{\b pAMMediaType} and {\b h245VideoCapability}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pResourceBoundArray}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies an array 
of {\b VideoResourceBounds} structures that indicate the approximate 
resource bounds of each supported integral frame rate.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 H245VideoCapabilityTable Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab UINT uMappedCapabilities;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab H245VideoCapabilityMap* pCapabilityArray;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} H245VideoCapabilityTable;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b H245VideoCapabilityTable} structure 
is used to specify the set of formats that are supported by the TAPI MSP 
Video Capture filter.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b uMappedCapabilities}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies  the  number of 
{\b H245VideoCapabilityMap} structures in {\b pCapabilityArray}.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b pCapabilityArray}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a pointer 
to an array of {\b H245VideoCapabilityMap} structures.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 KSCHANNELERRORS_LIST_S Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KSPROPERTY_DESCRIPTION PropertyDescription;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KSPROPERTY_MEMBERSHEADER MembersHeader;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KSPROPERTY_STEPPING_LONG SteppingRandomBitErrorRate;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LONG DefaultRandomBitErrorRate;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KSPROPERTY_STEPPING_LONG SteppingBurstErrorDuration;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LONG DefaultBurstErrorDuration;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab KSPROPERTY_STEPPING_LONG SteppingBurstErrorMaxFrequency;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab LONG DefaultBurstErrorMaxFrequency;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} KSCHANNELERRORS_LIST_S;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b KSCHANNELERRORS_LIST_S} structure is used 
to set and retrieve the value of channel errors.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIQC.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b PropertyDescription}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies access 
flags (KSPROPERTY_TYPE_GET and KSPROPERTY_TYPE_SET), the inclusive 
size of the entire values information, the property value type 
information, and the number of members lists that would typically 
follow the structure.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b MembersHeader}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to provide 
information on a property member header.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SteppingRandomBitErrorRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to 
specify stepping values for random bit error rate.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DefaultRandomBitErrorRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify default 
values for random bit error rate.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SteppingBurstErrorDuration}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to 
specify stepping values for short burst errors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DefaultBurstErrorDuration}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify default values 
for short burst errors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b SteppingBurstErrorMaxFrequency}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used 
to specify stepping values for the maximum frequency for short burst errors.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b DefaultBurstErrorMaxFrequency}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Used to specify default 
values for the maximum frequency for short burst errors.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 \cf6 To Do\par \pard\plain \sa160\sl240 \fs21\lang1033 \cf6 For accelerators, don't use those values\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 NegotiatedVideoLimit\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum NegotiatedVideoLimit \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab NegotiatedVideo_MaxFrameRate,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab NegotiatedVideo_MaxBitRate,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab NegotiatedVideo_MaxBitsPerPicture\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b NegotiatedVideoLimit} enum 
is used to describe negotiated video limiting parameters.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b NegotiatedVideo_MaxFrameRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the smaller of the maximum 
continuous video frame rate that the receiver is capable of receiving 
or the transmitter is capable of transmitting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b NegotiatedVideo_MaxBitRate}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the smaller of the maximum 
average video bit rate that the receiver is capable of receiving or the 
transmitter is capable of transmitting.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b NegotiatedVideo_MaxBitsPerPicture}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the maximum number of 
bits that may be contained in a single video frame. If there is no 
negotiated maximum, this shall be zero.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TAPICameraControlProperty\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum TAPICameraControlProperty \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_Pan,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_Tilt,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_Roll,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_Zoom,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_Exposure,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_Iris,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_Focus,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_FlipVertical,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPICameraControl_FlipHorizontal\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b TAPICameraControlProperty} enum 
is used to identify specific camera control settings.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_Pan}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the camera pan setting in degrees. 
Values range from -180 to +180, and the default is zero. Positive values 
are clockwise from the origin (the camera rotates clockwise when viewed 
from above), and negative values are counterclockwise from the origin. 
Note that a particular video capture filter may only implement a subset 
of this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_Tilt}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the camera tilt setting in degrees. 
Values range from -180 to +180, and the default is zero. Positive values 
point the imaging plane up, and negative values point the imaging plane 
down. Note that a particular video capture filter may only implement a 
subset of this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_Roll}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the roll setting in degrees. Values 
range from -180 to +180, and the default is zero. Positive values cause 
a clockwise rotation of the camera along the image viewing axis, and 
negative values cause a counterclockwise rotation of the camera. Note 
that a particular video capture filter may only implement a subset of 
this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_Zoom}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the zoom setting in millimeter units. 
Values range from 10 to 600, and the default is video capture filter 
specific.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_Exposure}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the exposure setting in seconds 
using the following formula. For values less than zero, the exposure 
time is 1/2n seconds. For positive values and zero, the exposure time is 
2n seconds. Note that a particular video capture filter may only 
implement a subset of this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_Iris}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the iris setting expressed as the 
fstop * 10.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_Focus}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the camera focus setting as the 
distance to the optimally focused target in millimeters. The range and 
default values are video encoder filter specific. Note that a 
particular video capture filter may only implement a subset of this 
range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_FlipVertical}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that the picture is 
flipped vertically.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPICameraControl_FlipHorizontal}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that the picture is 
flipped horizontally.\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Comments\par \pard\plain \sa160\sl240 \fs21\lang1033 Our software-only implementation provides zoom, pan, tilt, vertical 
flip and horizontal flip capabilities.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 TAPIControlFlags\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum TAPIControlFlags \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPIControl_Flags_None,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPIControl_Flags_Manual,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab TAPIControl_Flags_Auto\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b TAPIControlFlags} enum is used to qualify 
if a control property can be set manually and/or automatically.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIQC.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPIControl_Flags_None}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that a control property does not 
have any control flag. This is typical of read-only properties.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPIControl_Flags_Manual}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that a control property can be 
modified manually.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b TAPIControl_Flags_Auto}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies that a control property can be 
modified automatically.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VideoProcAmpProperty\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 enum VideoProcAmpProperty \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_Brightness,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_Contrast,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_Hue,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_Saturation,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_Sharpness,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_Gamma,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_ColorEnable,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_WhiteBalance,\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab VideoProcAmp_BacklightCompensation\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \};\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b VideoProcAmpProperty} enum is used to 
identify specific video quality settings.\par
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_Brightness}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the brightness setting in IRE 
units * 100. The range for Value is -10000 to 10000; the default value 
is 750 (7.5 IRE).\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_Contrast}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the contrast or luma gain setting 
in gain factor * 100. The Value range is from zero to 10000, and the 
default is 100 (1x). Note that a particular video encoder filter may 
only implement a subset of this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_Hue}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the hue setting in degrees * 100. Value 
range is from -18000 to 18000 ( -180 to +180 degrees), and the default 
is zero. Note that a particular video encoder filter may only implement 
a subset of this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_Saturation}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the saturation or chroma gain 
setting in gain * 100. Value ranges from zero to 10000, and the default 
is 100 (1x). Note that a particular video encoder filter may only 
implement a subset of this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_Sharpness}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the sharpness setting in 
arbitrary units. Value ranges from zero to 100, and the default is 50. 
Note that a particular video encoder filter may only implement a subset 
of this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_Gamma}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the gamma setting in gamma * 100. 
Value ranges from 1 to 500, and the default is 100 (gamma = 1). Note 
that a particular video encoder filter may only implement a subset of 
this range.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_ColorEnable}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the color enable setting as a 
Boolean value. Value ranges from zero to 1, and the default is 1.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_WhiteBalance}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the white balance setting 
expressed as a color temperature in degrees Kelvin. The range and 
default values for this setting are video encoder filter dependent.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b VideoProcAmp_BacklightCompensation}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies the backlight 
compensation setting which is a Boolean. Zero indicates backlight 
compensation is disabled, and 1 indicates backlight compensation is 
enabled.\par 
\pard\plain \s57\li-1770\ri30\sb280\sa250\sl-120\keepn\brdrb\brdrs\brdrw15\brdrcf2 \fs8\cf8\lang1033 \par 
\pard\plain \s254\li-1800\sb200\sa80\sl-440\keepn \b\f0\fs40\lang1033 VideoResourceBounds Structure\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 typedef struct \{\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab int iPicturesPerSecond;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab DWORD dwBitsPerPicture;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \tab WORD wCPUUtilization;\par \pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \} VideoResourceBounds;\par 
\pard\plain \s28\sl-220\tx380\tx760\tx1140\tx1520\tx1900\tx2280\tx2660\tx3040\tx3420\tx3800 \f19\fs16\lang1033 \par 

\pard\plain \sa160\sl240 \fs21\lang1033 The {\b VideoResourceBounds} structure is used 
to specify the estimated maximum continuous resource requirements of the 
TAPI MSP Video Capture filter at a specific frame rate.\par 
\pard\plain \sa160\sl240 \fs21\lang1033 Defined in: P:/W98GOLD/WDM10/CAPTURE/AMOVIE/INC/TAPIVID.H\par 
\pard\plain \s46\sb20\sl-220\keepn\pvpara\phpg\posy0\absw1560\dxfrtext240\dfrmtxtx240\dfrmtxty240 \b\f2\fs21\lang1033 Members\par \pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b iPicturesPerSecond}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies an INTEGER value that 
indicates the video frame rate, in frames per second, for which the 
resource bounds are being specified. Frame rates of less than 1 frame 
per second are indicated by a negative value in units of seconds per 
frame.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b dwBitsPerPicture}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a DWORD value that indicates 
the approximate average number of bits per video frame at an average 
frame rate of iPicturesPerSecond.\par 
\pard\plain \s50\sl-240\keepn \f0\fs21\lang1033 {\b wCPUUtilization}\par 
\pard\plain \s54\li280\sa80\sl-240 \f0\fs21\lang1033 Specifies a WORD value that indicates 
the approximate average CPU utilization, in percent, of the TAPI MSP 
Video Capture filter at the average frame rate of {\b iPicturesPerSecond}.\par 
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tapi\skywalker\hidtsp\readme.txt ===
Copyright (c) 1999  Microsoft Corporation


Phone TSP



Overview:
~~~~~~~~~
Hidphone is a TSP (telephony service provider) that implements support for 
USB phone devices that are HID (human interface device) compliant.

The TSP communicates with the HID interface that provides abstraction for
the phone devices. The TSP enumerates the HID phone devices available on the
system and makes them available to TAPI applications. The TSP provides 
thread-safe access to these phone devices. TAPISRV communicates with this TSP
when it needs access to these phone devices. The TSP provides
the TSP API functions that TAPISRV uses to call the TSP. 



The following files implement the TSP
    hidphone.h  - this file contains all the variables used by the TSP
    hidphone.c  - this file contains the implementations of the TSPI functions


The following declare the main DLL exports:
    hidphone.def 


The following files declare all the strings used throughout the TSP:
    hidphone.rc
    resource.h

The following files provide functions to get the wave ids of the audio devices
associated with the phones:
    audio.h
    audio.cpp

The following file discovers the Hid phone devices on the system
    pnp.c

The following file helps in sending and receiving reports from the HID device
    report.c

The following define and implement the logging functionality:
    mylog.h
    mylog.c

The following define and implement the heap trace inorder to detect memory leaks:
    mymem.h
    mymem.c


How to use the TSP:
~~~~~~~~~~~~~~~~~~~~~~

Copy hidphone.tsp to the %windir%\winnt\system32 directory
Add the tsp in the control panel.

The tsp can now be accessed by TAPI applications


What functionality does this TSP show:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Enumerate the supported HID-compliant phone devices
* Negotiates TAPI version 2.0 - 3.0 
* Discovers the capabilities of each phone device supported
* Provides information about the phones when requested
* Receive and send input, feature and output reports from and to the device.
* Send Phone state and Phone Button events to TAPISRV
* Plug and play capability
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tapi\skywalker\inc\rend.txt ===
Const RENDBIND_AUTHENTICATE                   =&H00000001
Const RENDBIND_DEFAULTDOMAINNAME              =&H00000002
Const RENDBIND_DEFAULTUSERNAME                =&H00000004
Const RENDBIND_DEFAULTPASSWORD                =&H00000008
Const RENDBIND_DEFAULTCREDENTIALS             =&H0000000e
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tapi\skywalker\inc\tapi.txt ===
Public Const LINEADDRCAPFLAGS_FWDNUMRINGS            =&H00000001
Public Const LINEADDRCAPFLAGS_PICKUPGROUPID          =&H00000002
Public Const LINEADDRCAPFLAGS_SECURE                 =&H00000004
Public Const LINEADDRCAPFLAGS_BLOCKIDDEFAULT         =&H00000008
Public Const LINEADDRCAPFLAGS_BLOCKIDOVERRIDE        =&H00000010
Public Const LINEADDRCAPFLAGS_DIALED                 =&H00000020
Public Const LINEADDRCAPFLAGS_ORIGOFFHOOK            =&H00000040
Public Const LINEADDRCAPFLAGS_DESTOFFHOOK            =&H00000080
Public Const LINEADDRCAPFLAGS_FWDCONSULT             =&H00000100
Public Const LINEADDRCAPFLAGS_SETUPCONFNULL          =&H00000200
Public Const LINEADDRCAPFLAGS_AUTORECONNECT          =&H00000400
Public Const LINEADDRCAPFLAGS_COMPLETIONID           =&H00000800
Public Const LINEADDRCAPFLAGS_TRANSFERHELD           =&H00001000
Public Const LINEADDRCAPFLAGS_TRANSFERMAKE           =&H00002000
Public Const LINEADDRCAPFLAGS_CONFERENCEHELD         =&H00004000
Public Const LINEADDRCAPFLAGS_CONFERENCEMAKE         =&H00008000
Public Const LINEADDRCAPFLAGS_PARTIALDIAL            =&H00010000
Public Const LINEADDRCAPFLAGS_FWDSTATUSVALID         =&H00020000
Public Const LINEADDRCAPFLAGS_FWDINTEXTADDR          =&H00040000
Public Const LINEADDRCAPFLAGS_FWDBUSYNAADDR          =&H00080000
Public Const LINEADDRCAPFLAGS_ACCEPTTOALERT          =&H00100000
Public Const LINEADDRCAPFLAGS_CONFDROP               =&H00200000
Public Const LINEADDRCAPFLAGS_PICKUPCALLWAIT         =&H00400000
Public Const LINEADDRCAPFLAGS_PREDICTIVEDIALER       =&H00800000
Public Const LINEADDRCAPFLAGS_QUEUE                  =&H01000000
Public Const LINEADDRCAPFLAGS_ROUTEPOINT             =&H02000000
Public Const LINEADDRCAPFLAGS_HOLDMAKESNEW           =&H04000000
Public Const LINEADDRCAPFLAGS_NOINTERNALCALLS        =&H08000000
Public Const LINEADDRCAPFLAGS_NOEXTERNALCALLS        =&H10000000
Public Const LINEADDRCAPFLAGS_SETCALLINGID           =&H20000000
Public Const LINEADDRCAPFLAGS_ACDGROUP               =&H40000000

Public Const LINEADDRESSMODE_ADDRESSID               =&H00000001
Public Const LINEADDRESSMODE_DIALABLEADDR            =&H00000002

Public Const LINEADDRESSSHARING_PRIVATE              =&H00000001
Public Const LINEADDRESSSHARING_BRIDGEDEXCL          =&H00000002
Public Const LINEADDRESSSHARING_BRIDGEDNEW           =&H00000004
Public Const LINEADDRESSSHARING_BRIDGEDSHARED        =&H00000008
Public Const LINEADDRESSSHARING_MONITORED            =&H00000010

Public Const LINEADDRESSSTATE_OTHER                  =&H00000001
Public Const LINEADDRESSSTATE_DEVSPECIFIC            =&H00000002
Public Const LINEADDRESSSTATE_INUSEZERO              =&H00000004
Public Const LINEADDRESSSTATE_INUSEONE               =&H00000008
Public Const LINEADDRESSSTATE_INUSEMANY              =&H00000010
Public Const LINEADDRESSSTATE_NUMCALLS               =&H00000020
Public Const LINEADDRESSSTATE_FORWARD                =&H00000040
Public Const LINEADDRESSSTATE_TERMINALS              =&H00000080
Public Const LINEADDRESSSTATE_CAPSCHANGE             =&H00000100

Public Const LINEADDRESSTYPE_PHONENUMBER             =&H00000001
Public Const LINEADDRESSTYPE_SDP                     =&H00000002
Public Const LINEADDRESSTYPE_EMAILNAME               =&H00000004
Public Const LINEADDRESSTYPE_DOMAINNAME              =&H00000008
Public Const LINEADDRESSTYPE_IPADDRESS               =&H00000010

Public Const LINEADDRFEATURE_FORWARD                 =&H00000001
Public Const LINEADDRFEATURE_MAKECALL                =&H00000002
Public Const LINEADDRFEATURE_PICKUP                  =&H00000004
Public Const LINEADDRFEATURE_SETMEDIACONTROL         =&H00000008
Public Const LINEADDRFEATURE_SETTERMINAL             =&H00000010
Public Const LINEADDRFEATURE_SETUPCONF               =&H00000020
Public Const LINEADDRFEATURE_UNCOMPLETECALL          =&H00000040
Public Const LINEADDRFEATURE_UNPARK                  =&H00000080
Public Const LINEADDRFEATURE_PICKUPHELD              =&H00000100
Public Const LINEADDRFEATURE_PICKUPGROUP             =&H00000200
Public Const LINEADDRFEATURE_PICKUPDIRECT            =&H00000400
Public Const LINEADDRFEATURE_PICKUPWAITING           =&H00000800
Public Const LINEADDRFEATURE_FORWARDFWD              =&H00001000
Public Const LINEADDRFEATURE_FORWARDDND              =&H00002000

Public Const LINEAGENTFEATURE_SETAGENTGROUP          =&H00000001
Public Const LINEAGENTFEATURE_SETAGENTSTATE          =&H00000002
Public Const LINEAGENTFEATURE_SETAGENTACTIVITY       =&H00000004
Public Const LINEAGENTFEATURE_AGENTSPECIFIC          =&H00000008
Public Const LINEAGENTFEATURE_GETAGENTACTIVITYLIST   =&H00000010
Public Const LINEAGENTFEATURE_GETAGENTGROUP          =&H00000020

Public Const LINEAGENTSTATE_LOGGEDOFF                =&H00000001
Public Const LINEAGENTSTATE_NOTREADY                 =&H00000002
Public Const LINEAGENTSTATE_READY                    =&H00000004
Public Const LINEAGENTSTATE_BUSYACD                  =&H00000008
Public Const LINEAGENTSTATE_BUSYINCOMING             =&H00000010
Public Const LINEAGENTSTATE_BUSYOUTBOUND             =&H00000020
Public Const LINEAGENTSTATE_BUSYOTHER                =&H00000040
Public Const LINEAGENTSTATE_WORKINGAFTERCALL         =&H00000080
Public Const LINEAGENTSTATE_UNKNOWN                  =&H00000100
Public Const LINEAGENTSTATE_UNAVAIL                  =&H00000200

Public Const LINEAGENTSTATUS_GROUP                   =&H00000001
Public Const LINEAGENTSTATUS_STATE                   =&H00000002
Public Const LINEAGENTSTATUS_NEXTSTATE               =&H00000004
Public Const LINEAGENTSTATUS_ACTIVITY                =&H00000008
Public Const LINEAGENTSTATUS_ACTIVITYLIST            =&H00000010
Public Const LINEAGENTSTATUS_GROUPLIST               =&H00000020
Public Const LINEAGENTSTATUS_CAPSCHANGE              =&H00000040
Public Const LINEAGENTSTATUS_VALIDSTATES             =&H00000080
Public Const LINEAGENTSTATUS_VALIDNEXTSTATES         =&H00000100

Public Const LINEAGENTSTATEEX_NOTREADY               =&H00000001
Public Const LINEAGENTSTATEEX_READY                  =&H00000002
Public Const LINEAGENTSTATEEX_BUSYACD                =&H00000004
Public Const LINEAGENTSTATEEX_BUSYINCOMING           =&H00000008
Public Const LINEAGENTSTATEEX_BUSYOUTGOING           =&H00000010
Public Const LINEAGENTSTATEEX_UNKNOWN                =&H00000020
Public Const LINEAGENTSTATEEX_RELEASED               =&H00000040

Public Const LINEAGENTSTATUSEX_NEWAGENT              =&H00000001
Public Const LINEAGENTSTATUSEX_STATE                 =&H00000002
Public Const LINEAGENTSTATUSEX_UPDATEINFO            =&H00000004

Public Const LINEAGENTSESSIONSTATE_NOTREADY          =&H00000001
Public Const LINEAGENTSESSIONSTATE_READY             =&H00000002
Public Const LINEAGENTSESSIONSTATE_BUSYONCALL        =&H00000004
Public Const LINEAGENTSESSIONSTATE_BUSYWRAPUP        =&H00000008
Public Const LINEAGENTSESSIONSTATE_ENDED             =&H00000010
Public Const LINEAGENTSESSIONSTATE_RELEASED          =&H00000020

Public Const LINEAGENTSESSIONSTATUS_NEWSESSION       =&H00000001
Public Const LINEAGENTSESSIONSTATUS_STATE            =&H00000002
Public Const LINEAGENTSESSIONSTATUS_UPDATEINFO       =&H00000004

Public Const LINEQUEUESTATUS_UPDATEINFO              =&H00000001
Public Const LINEQUEUESTATUS_NEWQUEUE                =&H00000002
Public Const LINEQUEUESTATUS_QUEUEREMOVED            =&H00000004

Public Const LINEGROUPSTATUS_NEWGROUP                =&H00000001
Public Const LINEGROUPSTATUS_GROUPREMOVED            =&H00000002

Public Const LINEPROXYSTATUS_OPEN                    =&H00000001
Public Const LINEPROXYSTATUS_CLOSE                   =&H00000002
Public Const LINEPROXYSTATUS_ALLOPENFORACD           =&H00000004

Public Const LINEANSWERMODE_NONE                     =&H00000001
Public Const LINEANSWERMODE_DROP                     =&H00000002
Public Const LINEANSWERMODE_HOLD                     =&H00000004

Public Const LINEBEARERMODE_VOICE                    =&H00000001
Public Const LINEBEARERMODE_SPEECH                   =&H00000002
Public Const LINEBEARERMODE_MULTIUSE                 =&H00000004
Public Const LINEBEARERMODE_DATA                     =&H00000008
Public Const LINEBEARERMODE_ALTSPEECHDATA            =&H00000010
Public Const LINEBEARERMODE_NONCALLSIGNALING         =&H00000020
Public Const LINEBEARERMODE_PASSTHROUGH              =&H00000040
Public Const LINEBEARERMODE_RESTRICTEDDATA           =&H00000080

Public Const LINEBUSYMODE_STATION                    =&H00000001
Public Const LINEBUSYMODE_TRUNK                      =&H00000002
Public Const LINEBUSYMODE_UNKNOWN                    =&H00000004
Public Const LINEBUSYMODE_UNAVAIL                    =&H00000008

Public Const LINECALLCOMPLCOND_BUSY                  =&H00000001
Public Const LINECALLCOMPLCOND_NOANSWER              =&H00000002

Public Const LINECALLCOMPLMODE_CAMPON                =&H00000001
Public Const LINECALLCOMPLMODE_CALLBACK              =&H00000002
Public Const LINECALLCOMPLMODE_INTRUDE               =&H00000004
Public Const LINECALLCOMPLMODE_MESSAGE               =&H00000008

Public Const LINECALLFEATURE_ACCEPT                  =&H00000001
Public Const LINECALLFEATURE_ADDTOCONF               =&H00000002
Public Const LINECALLFEATURE_ANSWER                  =&H00000004
Public Const LINECALLFEATURE_BLINDTRANSFER           =&H00000008
Public Const LINECALLFEATURE_COMPLETECALL            =&H00000010
Public Const LINECALLFEATURE_COMPLETETRANSF          =&H00000020
Public Const LINECALLFEATURE_DIAL                    =&H00000040
Public Const LINECALLFEATURE_DROP                    =&H00000080
Public Const LINECALLFEATURE_GATHERDIGITS            =&H00000100
Public Const LINECALLFEATURE_GENERATEDIGITS          =&H00000200
Public Const LINECALLFEATURE_GENERATETONE            =&H00000400
Public Const LINECALLFEATURE_HOLD                    =&H00000800
Public Const LINECALLFEATURE_MONITORDIGITS           =&H00001000
Public Const LINECALLFEATURE_MONITORMEDIA            =&H00002000
Public Const LINECALLFEATURE_MONITORTONES            =&H00004000
Public Const LINECALLFEATURE_PARK                    =&H00008000
Public Const LINECALLFEATURE_PREPAREADDCONF          =&H00010000
Public Const LINECALLFEATURE_REDIRECT                =&H00020000
Public Const LINECALLFEATURE_REMOVEFROMCONF          =&H00040000
Public Const LINECALLFEATURE_SECURECALL              =&H00080000
Public Const LINECALLFEATURE_SENDUSERUSER            =&H00100000
Public Const LINECALLFEATURE_SETCALLPARAMS           =&H00200000
Public Const LINECALLFEATURE_SETMEDIACONTROL         =&H00400000
Public Const LINECALLFEATURE_SETTERMINAL             =&H00800000
Public Const LINECALLFEATURE_SETUPCONF               =&H01000000
Public Const LINECALLFEATURE_SETUPTRANSFER           =&H02000000
Public Const LINECALLFEATURE_SWAPHOLD                =&H04000000
Public Const LINECALLFEATURE_UNHOLD                  =&H08000000
Public Const LINECALLFEATURE_RELEASEUSERUSERINFO     =&H10000000
Public Const LINECALLFEATURE_SETTREATMENT            =&H20000000
Public Const LINECALLFEATURE_SETQOS                  =&H40000000
Public Const LINECALLFEATURE_SETCALLDATA             =&H80000000

Public Const LINECALLFEATURE2_NOHOLDCONFERENCE       =&H00000001
Public Const LINECALLFEATURE2_ONESTEPTRANSFER        =&H00000002
Public Const LINECALLFEATURE2_COMPLCAMPON            =&H00000004
Public Const LINECALLFEATURE2_COMPLCALLBACK          =&H00000008
Public Const LINECALLFEATURE2_COMPLINTRUDE           =&H00000010
Public Const LINECALLFEATURE2_COMPLMESSAGE           =&H00000020
Public Const LINECALLFEATURE2_TRANSFERNORM           =&H00000040
Public Const LINECALLFEATURE2_TRANSFERCONF           =&H00000080
Public Const LINECALLFEATURE2_PARKDIRECT             =&H00000100
Public Const LINECALLFEATURE2_PARKNONDIRECT          =&H00000200

Public Const LINECALLHUBTRACKING_NONE                =&H00000000
Public Const LINECALLHUBTRACKING_PROVIDERLEVEL       =&H00000001
Public Const LINECALLHUBTRACKING_ALLCALLS            =&H00000002

Public Const LINECALLINFOSTATE_OTHER                 =&H00000001
Public Const LINECALLINFOSTATE_DEVSPECIFIC           =&H00000002
Public Const LINECALLINFOSTATE_BEARERMODE            =&H00000004
Public Const LINECALLINFOSTATE_RATE                  =&H00000008
Public Const LINECALLINFOSTATE_MEDIAMODE             =&H00000010
Public Const LINECALLINFOSTATE_APPSPECIFIC           =&H00000020
Public Const LINECALLINFOSTATE_CALLID                =&H00000040
Public Const LINECALLINFOSTATE_RELATEDCALLID         =&H00000080
Public Const LINECALLINFOSTATE_ORIGIN                =&H00000100
Public Const LINECALLINFOSTATE_REASON                =&H00000200
Public Const LINECALLINFOSTATE_COMPLETIONID          =&H00000400
Public Const LINECALLINFOSTATE_NUMOWNERINCR          =&H00000800
Public Const LINECALLINFOSTATE_NUMOWNERDECR          =&H00001000
Public Const LINECALLINFOSTATE_NUMMONITORS           =&H00002000
Public Const LINECALLINFOSTATE_TRUNK                 =&H00004000
Public Const LINECALLINFOSTATE_CALLERID              =&H00008000
Public Const LINECALLINFOSTATE_CALLEDID              =&H00010000
Public Const LINECALLINFOSTATE_CONNECTEDID           =&H00020000
Public Const LINECALLINFOSTATE_REDIRECTIONID         =&H00040000
Public Const LINECALLINFOSTATE_REDIRECTINGID         =&H00080000
Public Const LINECALLINFOSTATE_DISPLAY               =&H00100000
Public Const LINECALLINFOSTATE_USERUSERINFO          =&H00200000
Public Const LINECALLINFOSTATE_HIGHLEVELCOMP         =&H00400000
Public Const LINECALLINFOSTATE_LOWLEVELCOMP          =&H00800000
Public Const LINECALLINFOSTATE_CHARGINGINFO          =&H01000000
Public Const LINECALLINFOSTATE_TERMINAL              =&H02000000
Public Const LINECALLINFOSTATE_DIALPARAMS            =&H04000000
Public Const LINECALLINFOSTATE_MONITORMODES          =&H08000000
Public Const LINECALLINFOSTATE_TREATMENT             =&H10000000
Public Const LINECALLINFOSTATE_QOS                   =&H20000000
Public Const LINECALLINFOSTATE_CALLDATA              =&H40000000

Public Const LINECALLORIGIN_OUTBOUND                 =&H00000001
Public Const LINECALLORIGIN_INTERNAL                 =&H00000002
Public Const LINECALLORIGIN_EXTERNAL                 =&H00000004
Public Const LINECALLORIGIN_UNKNOWN                  =&H00000010
Public Const LINECALLORIGIN_UNAVAIL                  =&H00000020
Public Const LINECALLORIGIN_CONFERENCE               =&H00000040
Public Const LINECALLORIGIN_INBOUND                  =&H00000080

Public Const LINECALLPARAMFLAGS_SECURE               =&H00000001
Public Const LINECALLPARAMFLAGS_IDLE                 =&H00000002
Public Const LINECALLPARAMFLAGS_BLOCKID              =&H00000004
Public Const LINECALLPARAMFLAGS_ORIGOFFHOOK          =&H00000008
Public Const LINECALLPARAMFLAGS_DESTOFFHOOK          =&H00000010
Public Const LINECALLPARAMFLAGS_NOHOLDCONFERENCE     =&H00000020
Public Const LINECALLPARAMFLAGS_PREDICTIVEDIAL       =&H00000040
Public Const LINECALLPARAMFLAGS_ONESTEPTRANSFER      =&H00000080

Public Const LINECALLPARTYID_BLOCKED                 =&H00000001
Public Const LINECALLPARTYID_OUTOFAREA               =&H00000002
Public Const LINECALLPARTYID_NAME                    =&H00000004
Public Const LINECALLPARTYID_ADDRESS                 =&H00000008
Public Const LINECALLPARTYID_PARTIAL                 =&H00000010
Public Const LINECALLPARTYID_UNKNOWN                 =&H00000020
Public Const LINECALLPARTYID_UNAVAIL                 =&H00000040

Public Const LINECALLPRIVILEGE_NONE                  =&H00000001
Public Const LINECALLPRIVILEGE_MONITOR               =&H00000002
Public Const LINECALLPRIVILEGE_OWNER                 =&H00000004

Public Const LINECALLREASON_DIRECT                   =&H00000001
Public Const LINECALLREASON_FWDBUSY                  =&H00000002
Public Const LINECALLREASON_FWDNOANSWER              =&H00000004
Public Const LINECALLREASON_FWDUNCOND                =&H00000008
Public Const LINECALLREASON_PICKUP                   =&H00000010
Public Const LINECALLREASON_UNPARK                   =&H00000020
Public Const LINECALLREASON_REDIRECT                 =&H00000040
Public Const LINECALLREASON_CALLCOMPLETION           =&H00000080
Public Const LINECALLREASON_TRANSFER                 =&H00000100
Public Const LINECALLREASON_REMINDER                 =&H00000200
Public Const LINECALLREASON_UNKNOWN                  =&H00000400
Public Const LINECALLREASON_UNAVAIL                  =&H00000800
Public Const LINECALLREASON_INTRUDE                  =&H00001000
Public Const LINECALLREASON_PARKED                   =&H00002000
Public Const LINECALLREASON_CAMPEDON                 =&H00004000
Public Const LINECALLREASON_ROUTEREQUEST             =&H00008000

Public Const LINECALLSELECT_LINE                     =&H00000001
Public Const LINECALLSELECT_ADDRESS                  =&H00000002
Public Const LINECALLSELECT_CALL                     =&H00000004
Public Const LINECALLSELECT_DEVICEID                 =&H00000008
Public Const LINECALLSELECT_CALLID                   =&H00000010

Public Const LINECALLSTATE_IDLE                      =&H00000001
Public Const LINECALLSTATE_OFFERING                  =&H00000002
Public Const LINECALLSTATE_ACCEPTED                  =&H00000004
Public Const LINECALLSTATE_DIALTONE                  =&H00000008
Public Const LINECALLSTATE_DIALING                   =&H00000010
Public Const LINECALLSTATE_RINGBACK                  =&H00000020
Public Const LINECALLSTATE_BUSY                      =&H00000040
Public Const LINECALLSTATE_SPECIALINFO               =&H00000080
Public Const LINECALLSTATE_CONNECTED                 =&H00000100
Public Const LINECALLSTATE_PROCEEDING                =&H00000200
Public Const LINECALLSTATE_ONHOLD                    =&H00000400
Public Const LINECALLSTATE_CONFERENCED               =&H00000800
Public Const LINECALLSTATE_ONHOLDPENDCONF            =&H00001000
Public Const LINECALLSTATE_ONHOLDPENDTRANSFER        =&H00002000
Public Const LINECALLSTATE_DISCONNECTED              =&H00004000
Public Const LINECALLSTATE_UNKNOWN                   =&H00008000

Public Const LINECALLTREATMENT_SILENCE               =&H00000001
Public Const LINECALLTREATMENT_RINGBACK              =&H00000002
Public Const LINECALLTREATMENT_BUSY                  =&H00000003
Public Const LINECALLTREATMENT_MUSIC                 =&H00000004

Public Const LINECARDOPTION_PREDEFINED               =&H00000001
Public Const LINECARDOPTION_HIDDEN                   =&H00000002

Public Const LINECONNECTEDMODE_ACTIVE                =&H00000001
Public Const LINECONNECTEDMODE_INACTIVE              =&H00000002
Public Const LINECONNECTEDMODE_ACTIVEHELD            =&H00000004
Public Const LINECONNECTEDMODE_INACTIVEHELD          =&H00000008
Public Const LINECONNECTEDMODE_CONFIRMED             =&H00000010

Public Const LINEDEVCAPFLAGS_CROSSADDRCONF           =&H00000001
Public Const LINEDEVCAPFLAGS_HIGHLEVCOMP             =&H00000002
Public Const LINEDEVCAPFLAGS_LOWLEVCOMP              =&H00000004
Public Const LINEDEVCAPFLAGS_MEDIACONTROL            =&H00000008
Public Const LINEDEVCAPFLAGS_MULTIPLEADDR            =&H00000010
Public Const LINEDEVCAPFLAGS_CLOSEDROP               =&H00000020
Public Const LINEDEVCAPFLAGS_DIALBILLING             =&H00000040
Public Const LINEDEVCAPFLAGS_DIALQUIET               =&H00000080
Public Const LINEDEVCAPFLAGS_DIALDIALTONE            =&H00000100
Public Const LINEDEVCAPFLAGS_MSP                     =&H00000200
Public Const LINEDEVCAPFLAGS_CALLHUB                 =&H00000400
Public Const LINEDEVCAPFLAGS_CALLHUBTRACKING         =&H00000800
Public Const LINEDEVCAPFLAGS_PRIVATEOBJECTS          =&H00001000

Public Const LINEDEVSTATE_OTHER                      =&H00000001
Public Const LINEDEVSTATE_RINGING                    =&H00000002
Public Const LINEDEVSTATE_CONNECTED                  =&H00000004
Public Const LINEDEVSTATE_DISCONNECTED               =&H00000008
Public Const LINEDEVSTATE_MSGWAITON                  =&H00000010
Public Const LINEDEVSTATE_MSGWAITOFF                 =&H00000020
Public Const LINEDEVSTATE_INSERVICE                  =&H00000040
Public Const LINEDEVSTATE_OUTOFSERVICE               =&H00000080
Public Const LINEDEVSTATE_MAINTENANCE                =&H00000100
Public Const LINEDEVSTATE_OPEN                       =&H00000200
Public Const LINEDEVSTATE_CLOSE                      =&H00000400
Public Const LINEDEVSTATE_NUMCALLS                   =&H00000800
Public Const LINEDEVSTATE_NUMCOMPLETIONS             =&H00001000
Public Const LINEDEVSTATE_TERMINALS                  =&H00002000
Public Const LINEDEVSTATE_ROAMMODE                   =&H00004000
Public Const LINEDEVSTATE_BATTERY                    =&H00008000
Public Const LINEDEVSTATE_SIGNAL                     =&H00010000
Public Const LINEDEVSTATE_DEVSPECIFIC                =&H00020000
Public Const LINEDEVSTATE_REINIT                     =&H00040000
Public Const LINEDEVSTATE_LOCK                       =&H00080000
Public Const LINEDEVSTATE_CAPSCHANGE                 =&H00100000
Public Const LINEDEVSTATE_CONFIGCHANGE               =&H00200000
Public Const LINEDEVSTATE_TRANSLATECHANGE            =&H00400000
Public Const LINEDEVSTATE_COMPLCANCEL                =&H00800000
Public Const LINEDEVSTATE_REMOVED                    =&H01000000

Public Const LINEDEVSTATUSFLAGS_CONNECTED            =&H00000001
Public Const LINEDEVSTATUSFLAGS_MSGWAIT              =&H00000002
Public Const LINEDEVSTATUSFLAGS_INSERVICE            =&H00000004
Public Const LINEDEVSTATUSFLAGS_LOCKED               =&H00000008

Public Const LINEDIALTONEMODE_NORMAL                 =&H00000001
Public Const LINEDIALTONEMODE_SPECIAL                =&H00000002
Public Const LINEDIALTONEMODE_INTERNAL               =&H00000004
Public Const LINEDIALTONEMODE_EXTERNAL               =&H00000008
Public Const LINEDIALTONEMODE_UNKNOWN                =&H00000010
Public Const LINEDIALTONEMODE_UNAVAIL                =&H00000020

Public Const LINEDIGITMODE_PULSE                     =&H00000001
Public Const LINEDIGITMODE_DTMF                      =&H00000002
Public Const LINEDIGITMODE_DTMFEND                   =&H00000004

Public Const LINEDISCONNECTMODE_NORMAL               =&H00000001
Public Const LINEDISCONNECTMODE_UNKNOWN              =&H00000002
Public Const LINEDISCONNECTMODE_REJECT               =&H00000004
Public Const LINEDISCONNECTMODE_PICKUP               =&H00000008
Public Const LINEDISCONNECTMODE_FORWARDED            =&H00000010
Public Const LINEDISCONNECTMODE_BUSY                 =&H00000020
Public Const LINEDISCONNECTMODE_NOANSWER             =&H00000040
Public Const LINEDISCONNECTMODE_BADADDRESS           =&H00000080
Public Const LINEDISCONNECTMODE_UNREACHABLE          =&H00000100
Public Const LINEDISCONNECTMODE_CONGESTION           =&H00000200
Public Const LINEDISCONNECTMODE_INCOMPATIBLE         =&H00000400
Public Const LINEDISCONNECTMODE_UNAVAIL              =&H00000800
Public Const LINEDISCONNECTMODE_NODIALTONE           =&H00001000
Public Const LINEDISCONNECTMODE_NUMBERCHANGED        =&H00002000
Public Const LINEDISCONNECTMODE_OUTOFORDER           =&H00004000
Public Const LINEDISCONNECTMODE_TEMPFAILURE          =&H00008000
Public Const LINEDISCONNECTMODE_QOSUNAVAIL           =&H00010000
Public Const LINEDISCONNECTMODE_BLOCKED              =&H00020000
Public Const LINEDISCONNECTMODE_DONOTDISTURB         =&H00040000
Public Const LINEDISCONNECTMODE_CANCELLED            =&H00080000

Public Const LINEERR_ALLOCATED                       =&H80000001
Public Const LINEERR_BADDEVICEID                     =&H80000002
Public Const LINEERR_BEARERMODEUNAVAIL               =&H80000003
Public Const LINEERR_CALLUNAVAIL                     =&H80000005
Public Const LINEERR_COMPLETIONOVERRUN               =&H80000006
Public Const LINEERR_CONFERENCEFULL                  =&H80000007
Public Const LINEERR_DIALBILLING                     =&H80000008
Public Const LINEERR_DIALDIALTONE                    =&H80000009
Public Const LINEERR_DIALPROMPT                      =&H8000000A
Public Const LINEERR_DIALQUIET                       =&H8000000B
Public Const LINEERR_INCOMPATIBLEAPIVERSION          =&H8000000C
Public Const LINEERR_INCOMPATIBLEEXTVERSION          =&H8000000D
Public Const LINEERR_INIFILECORRUPT                  =&H8000000E
Public Const LINEERR_INUSE                           =&H8000000F
Public Const LINEERR_INVALADDRESS                    =&H80000010
Public Const LINEERR_INVALADDRESSID                  =&H80000011
Public Const LINEERR_INVALADDRESSMODE                =&H80000012
Public Const LINEERR_INVALADDRESSSTATE               =&H80000013
Public Const LINEERR_INVALAPPHANDLE                  =&H80000014
Public Const LINEERR_INVALAPPNAME                    =&H80000015
Public Const LINEERR_INVALBEARERMODE                 =&H80000016
Public Const LINEERR_INVALCALLCOMPLMODE              =&H80000017
Public Const LINEERR_INVALCALLHANDLE                 =&H80000018
Public Const LINEERR_INVALCALLPARAMS                 =&H80000019
Public Const LINEERR_INVALCALLPRIVILEGE              =&H8000001A
Public Const LINEERR_INVALCALLSELECT                 =&H8000001B
Public Const LINEERR_INVALCALLSTATE                  =&H8000001C
Public Const LINEERR_INVALCALLSTATELIST              =&H8000001D
Public Const LINEERR_INVALCARD                       =&H8000001E
Public Const LINEERR_INVALCOMPLETIONID               =&H8000001F
Public Const LINEERR_INVALCONFCALLHANDLE             =&H80000020
Public Const LINEERR_INVALCONSULTCALLHANDLE          =&H80000021
Public Const LINEERR_INVALCOUNTRYCODE                =&H80000022
Public Const LINEERR_INVALDEVICECLASS                =&H80000023
Public Const LINEERR_INVALDEVICEHANDLE               =&H80000024
Public Const LINEERR_INVALDIALPARAMS                 =&H80000025
Public Const LINEERR_INVALDIGITLIST                  =&H80000026
Public Const LINEERR_INVALDIGITMODE                  =&H80000027
Public Const LINEERR_INVALDIGITS                     =&H80000028
Public Const LINEERR_INVALEXTVERSION                 =&H80000029
Public Const LINEERR_INVALGROUPID                    =&H8000002A
Public Const LINEERR_INVALLINEHANDLE                 =&H8000002B
Public Const LINEERR_INVALLINESTATE                  =&H8000002C
Public Const LINEERR_INVALLOCATION                   =&H8000002D
Public Const LINEERR_INVALMEDIALIST                  =&H8000002E
Public Const LINEERR_INVALMEDIAMODE                  =&H8000002F
Public Const LINEERR_INVALMESSAGEID                  =&H80000030
Public Const LINEERR_INVALPARAM                      =&H80000032
Public Const LINEERR_INVALPARKID                     =&H80000033
Public Const LINEERR_INVALPARKMODE                   =&H80000034
Public Const LINEERR_INVALPOINTER                    =&H80000035
Public Const LINEERR_INVALPRIVSELECT                 =&H80000036
Public Const LINEERR_INVALRATE                       =&H80000037
Public Const LINEERR_INVALREQUESTMODE                =&H80000038
Public Const LINEERR_INVALTERMINALID                 =&H80000039
Public Const LINEERR_INVALTERMINALMODE               =&H8000003A
Public Const LINEERR_INVALTIMEOUT                    =&H8000003B
Public Const LINEERR_INVALTONE                       =&H8000003C
Public Const LINEERR_INVALTONELIST                   =&H8000003D
Public Const LINEERR_INVALTONEMODE                   =&H8000003E
Public Const LINEERR_INVALTRANSFERMODE               =&H8000003F
Public Const LINEERR_LINEMAPPERFAILED                =&H80000040
Public Const LINEERR_NOCONFERENCE                    =&H80000041
Public Const LINEERR_NODEVICE                        =&H80000042
Public Const LINEERR_NODRIVER                        =&H80000043
Public Const LINEERR_NOMEM                           =&H80000044
Public Const LINEERR_NOREQUEST                       =&H80000045
Public Const LINEERR_NOTOWNER                        =&H80000046
Public Const LINEERR_NOTREGISTERED                   =&H80000047
Public Const LINEERR_OPERATIONFAILED                 =&H80000048
Public Const LINEERR_OPERATIONUNAVAIL                =&H80000049
Public Const LINEERR_RATEUNAVAIL                     =&H8000004A
Public Const LINEERR_RESOURCEUNAVAIL                 =&H8000004B
Public Const LINEERR_REQUESTOVERRUN                  =&H8000004C
Public Const LINEERR_STRUCTURETOOSMALL               =&H8000004D
Public Const LINEERR_TARGETNOTFOUND                  =&H8000004E
Public Const LINEERR_TARGETSELF                      =&H8000004F
Public Const LINEERR_UNINITIALIZED                   =&H80000050
Public Const LINEERR_USERUSERINFOTOOBIG              =&H80000051
Public Const LINEERR_REINIT                          =&H80000052
Public Const LINEERR_ADDRESSBLOCKED                  =&H80000053
Public Const LINEERR_BILLINGREJECTED                 =&H80000054
Public Const LINEERR_INVALFEATURE                    =&H80000055
Public Const LINEERR_NOMULTIPLEINSTANCE              =&H80000056
Public Const LINEERR_INVALAGENTID                    =&H80000057
Public Const LINEERR_INVALAGENTGROUP                 =&H80000058
Public Const LINEERR_INVALPASSWORD                   =&H80000059
Public Const LINEERR_INVALAGENTSTATE                 =&H8000005A
Public Const LINEERR_INVALAGENTACTIVITY              =&H8000005B
Public Const LINEERR_DIALVOICEDETECT                 =&H8000005C
Public Const LINEERR_USERCANCELLED                   =&H8000005D
Public Const LINEERR_INVALADDRESSTYPE                =&H8000005E
Public Const LINEERR_INVALAGENTSESSIONSTATE          =&H8000005F
Public Const LINEERR_DISCONNECTED                    =&H80000060
Public Const LINEERR_LASTERRORVALUE                  =&H80000060


Public Const LINEFEATURE_DEVSPECIFIC                 =&H00000001
Public Const LINEFEATURE_DEVSPECIFICFEAT             =&H00000002
Public Const LINEFEATURE_FORWARD                     =&H00000004
Public Const LINEFEATURE_MAKECALL                    =&H00000008
Public Const LINEFEATURE_SETMEDIACONTROL             =&H00000010
Public Const LINEFEATURE_SETTERMINAL                 =&H00000020
Public Const LINEFEATURE_SETDEVSTATUS                =&H00000040
Public Const LINEFEATURE_FORWARDFWD                  =&H00000080
Public Const LINEFEATURE_FORWARDDND                  =&H00000100

Public Const LINEFORWARDMODE_UNCOND                  =&H00000001
Public Const LINEFORWARDMODE_UNCONDINTERNAL          =&H00000002
Public Const LINEFORWARDMODE_UNCONDEXTERNAL          =&H00000004
Public Const LINEFORWARDMODE_UNCONDSPECIFIC          =&H00000008
Public Const LINEFORWARDMODE_BUSY                    =&H00000010
Public Const LINEFORWARDMODE_BUSYINTERNAL            =&H00000020
Public Const LINEFORWARDMODE_BUSYEXTERNAL            =&H00000040
Public Const LINEFORWARDMODE_BUSYSPECIFIC            =&H00000080
Public Const LINEFORWARDMODE_NOANSW                  =&H00000100
Public Const LINEFORWARDMODE_NOANSWINTERNAL          =&H00000200
Public Const LINEFORWARDMODE_NOANSWEXTERNAL          =&H00000400
Public Const LINEFORWARDMODE_NOANSWSPECIFIC          =&H00000800
Public Const LINEFORWARDMODE_BUSYNA                  =&H00001000
Public Const LINEFORWARDMODE_BUSYNAINTERNAL          =&H00002000
Public Const LINEFORWARDMODE_BUSYNAEXTERNAL          =&H00004000
Public Const LINEFORWARDMODE_BUSYNASPECIFIC          =&H00008000
Public Const LINEFORWARDMODE_UNKNOWN                 =&H00010000
Public Const LINEFORWARDMODE_UNAVAIL                 =&H00020000

Public Const LINEGATHERTERM_BUFFERFULL               =&H00000001
Public Const LINEGATHERTERM_TERMDIGIT                =&H00000002
Public Const LINEGATHERTERM_FIRSTTIMEOUT             =&H00000004
Public Const LINEGATHERTERM_INTERTIMEOUT             =&H00000008
Public Const LINEGATHERTERM_CANCEL                   =&H00000010

Public Const LINEGENERATETERM_DONE                   =&H00000001
Public Const LINEGENERATETERM_CANCEL                 =&H00000002

Public Const LINEINITIALIZEEXOPTION_USEHIDDENWINDOW      =&H00000001
Public Const LINEINITIALIZEEXOPTION_USEEVENT             =&H00000002
Public Const LINEINITIALIZEEXOPTION_USECOMPLETIONPORT    =&H00000003

Public Const LINEINITIALIZEEXOPTION_CALLHUBTRACKING      =&H80000000

Public Const LINELOCATIONOPTION_PULSEDIAL            =&H00000001

Public Const LINEMAPPER                              =&HFFFFFFFF

Public Const LINEMEDIACONTROL_NONE                   =&H00000001
Public Const LINEMEDIACONTROL_START                  =&H00000002
Public Const LINEMEDIACONTROL_RESET                  =&H00000004
Public Const LINEMEDIACONTROL_PAUSE                  =&H00000008
Public Const LINEMEDIACONTROL_RESUME                 =&H00000010
Public Const LINEMEDIACONTROL_RATEUP                 =&H00000020
Public Const LINEMEDIACONTROL_RATEDOWN               =&H00000040
Public Const LINEMEDIACONTROL_RATENORMAL             =&H00000080
Public Const LINEMEDIACONTROL_VOLUMEUP               =&H00000100
Public Const LINEMEDIACONTROL_VOLUMEDOWN             =&H00000200
Public Const LINEMEDIACONTROL_VOLUMENORMAL           =&H00000400

Public Const LINEMEDIAMODE_UNKNOWN                   =&H00000002
Public Const LINEMEDIAMODE_INTERACTIVEVOICE          =&H00000004
Public Const LINEMEDIAMODE_AUTOMATEDVOICE            =&H00000008
Public Const LINEMEDIAMODE_DATAMODEM                 =&H00000010
Public Const LINEMEDIAMODE_G3FAX                     =&H00000020
Public Const LINEMEDIAMODE_TDD                       =&H00000040
Public Const LINEMEDIAMODE_G4FAX                     =&H00000080
Public Const LINEMEDIAMODE_DIGITALDATA               =&H00000100
Public Const LINEMEDIAMODE_TELETEX                   =&H00000200
Public Const LINEMEDIAMODE_VIDEOTEX                  =&H00000400
Public Const LINEMEDIAMODE_TELEX                     =&H00000800
Public Const LINEMEDIAMODE_MIXED                     =&H00001000
Public Const LINEMEDIAMODE_ADSI                      =&H00002000
Public Const LINEMEDIAMODE_VOICEVIEW                 =&H00004000
Public Const LINEMEDIAMODE_VIDEO                     =&H00008000
Public Const LAST_LINEMEDIAMODE                      =&H00008000

Public Const LINEOFFERINGMODE_ACTIVE                 =&H00000001
Public Const LINEOFFERINGMODE_INACTIVE               =&H00000002

Public Const LINEOPENOPTION_SINGLEADDRESS            =&H80000000
Public Const LINEOPENOPTION_PROXY                    =&H40000000

Public Const LINEPARKMODE_DIRECTED                   =&H00000001
Public Const LINEPARKMODE_NONDIRECTED                =&H00000002

Public Const LINEPROXYREQUEST_SETAGENTGROUP          =&H00000001
Public Const LINEPROXYREQUEST_SETAGENTSTATE          =&H00000002
Public Const LINEPROXYREQUEST_SETAGENTACTIVITY       =&H00000003
Public Const LINEPROXYREQUEST_GETAGENTCAPS           =&H00000004
Public Const LINEPROXYREQUEST_GETAGENTSTATUS         =&H00000005
Public Const LINEPROXYREQUEST_AGENTSPECIFIC          =&H00000006
Public Const LINEPROXYREQUEST_GETAGENTACTIVITYLIST   =&H00000007
Public Const LINEPROXYREQUEST_GETAGENTGROUPLIST      =&H00000008

Public Const LINEPROXYREQUEST_CREATEAGENT                =&H00000009
Public Const LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD  =&H0000000A
Public Const LINEPROXYREQUEST_GETAGENTINFO               =&H0000000B
Public Const LINEPROXYREQUEST_CREATEAGENTSESSION         =&H0000000C
Public Const LINEPROXYREQUEST_GETAGENTSESSIONLIST        =&H0000000D
Public Const LINEPROXYREQUEST_SETAGENTSESSIONSTATE       =&H0000000E
Public Const LINEPROXYREQUEST_GETAGENTSESSIONINFO        =&H0000000F
Public Const LINEPROXYREQUEST_GETQUEUELIST               =&H00000010
Public Const LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD  =&H00000011
Public Const LINEPROXYREQUEST_GETQUEUEINFO               =&H00000012
Public Const LINEPROXYREQUEST_GETGROUPLIST               =&H00000013
Public Const LINEPROXYREQUEST_SETAGENTSTATEEX            =&H00000014

Public Const LINEREMOVEFROMCONF_NONE                 =&H00000001
Public Const LINEREMOVEFROMCONF_LAST                 =&H00000002
Public Const LINEREMOVEFROMCONF_ANY                  =&H00000003

Public Const LINEREQUESTMODE_MAKECALL                =&H00000001
Public Const LINEREQUESTMODE_MEDIACALL               =&H00000002
Public Const LINEREQUESTMODE_DROP                    =&H00000004
Public Const LAST_LINEREQUESTMODE                    =LINEREQUESTMODE_MEDIACALL

Public Const LINEROAMMODE_UNKNOWN                    =&H00000001
Public Const LINEROAMMODE_UNAVAIL                    =&H00000002
Public Const LINEROAMMODE_HOME                       =&H00000004
Public Const LINEROAMMODE_ROAMA                      =&H00000008
Public Const LINEROAMMODE_ROAMB                      =&H00000010

Public Const LINESPECIALINFO_NOCIRCUIT               =&H00000001
Public Const LINESPECIALINFO_CUSTIRREG               =&H00000002
Public Const LINESPECIALINFO_REORDER                 =&H00000004
Public Const LINESPECIALINFO_UNKNOWN                 =&H00000008
Public Const LINESPECIALINFO_UNAVAIL                 =&H00000010

Public Const LINETERMDEV_PHONE                       =&H00000001
Public Const LINETERMDEV_HEADSET                     =&H00000002
Public Const LINETERMDEV_SPEAKER                     =&H00000004

Public Const LINETERMMODE_BUTTONS                    =&H00000001
Public Const LINETERMMODE_LAMPS                      =&H00000002
Public Const LINETERMMODE_DISPLAY                    =&H00000004
Public Const LINETERMMODE_RINGER                     =&H00000008
Public Const LINETERMMODE_HOOKSWITCH                 =&H00000010
Public Const LINETERMMODE_MEDIATOLINE                =&H00000020
Public Const LINETERMMODE_MEDIAFROMLINE              =&H00000040
Public Const LINETERMMODE_MEDIABIDIRECT              =&H00000080

Public Const LINETERMSHARING_PRIVATE                 =&H00000001
Public Const LINETERMSHARING_SHAREDEXCL              =&H00000002
Public Const LINETERMSHARING_SHAREDCONF              =&H00000004

Public Const LINETOLLLISTOPTION_ADD                  =&H00000001
Public Const LINETOLLLISTOPTION_REMOVE               =&H00000002

Public Const LINETONEMODE_CUSTOM                     =&H00000001
Public Const LINETONEMODE_RINGBACK                   =&H00000002
Public Const LINETONEMODE_BUSY                       =&H00000004
Public Const LINETONEMODE_BEEP                       =&H00000008
Public Const LINETONEMODE_BILLING                    =&H00000010

Public Const LINETRANSFERMODE_TRANSFER               =&H00000001
Public Const LINETRANSFERMODE_CONFERENCE             =&H00000002

Public Const LINETRANSLATEOPTION_CARDOVERRIDE        =&H00000001
Public Const LINETRANSLATEOPTION_CANCELCALLWAITING   =&H00000002
Public Const LINETRANSLATEOPTION_FORCELOCAL          =&H00000004
Public Const LINETRANSLATEOPTION_FORCELD             =&H00000008

Public Const LINETRANSLATERESULT_CANONICAL           =&H00000001
Public Const LINETRANSLATERESULT_INTERNATIONAL       =&H00000002
Public Const LINETRANSLATERESULT_LONGDISTANCE        =&H00000004
Public Const LINETRANSLATERESULT_LOCAL               =&H00000008
Public Const LINETRANSLATERESULT_INTOLLLIST          =&H00000010
Public Const LINETRANSLATERESULT_NOTINTOLLLIST       =&H00000020
Public Const LINETRANSLATERESULT_DIALBILLING         =&H00000040
Public Const LINETRANSLATERESULT_DIALQUIET           =&H00000080
Public Const LINETRANSLATERESULT_DIALDIALTONE        =&H00000100
Public Const LINETRANSLATERESULT_DIALPROMPT          =&H00000200
Public Const LINETRANSLATERESULT_VOICEDETECT         =&H00000400

Public Const PHONEBUTTONFUNCTION_UNKNOWN             =&H00000000
Public Const PHONEBUTTONFUNCTION_CONFERENCE          =&H00000001
Public Const PHONEBUTTONFUNCTION_TRANSFER            =&H00000002
Public Const PHONEBUTTONFUNCTION_DROP                =&H00000003
Public Const PHONEBUTTONFUNCTION_HOLD                =&H00000004
Public Const PHONEBUTTONFUNCTION_RECALL              =&H00000005
Public Const PHONEBUTTONFUNCTION_DISCONNECT          =&H00000006
Public Const PHONEBUTTONFUNCTION_CONNECT             =&H00000007
Public Const PHONEBUTTONFUNCTION_MSGWAITON           =&H00000008
Public Const PHONEBUTTONFUNCTION_MSGWAITOFF          =&H00000009
Public Const PHONEBUTTONFUNCTION_SELECTRING          =&H0000000A
Public Const PHONEBUTTONFUNCTION_ABBREVDIAL          =&H0000000B
Public Const PHONEBUTTONFUNCTION_FORWARD             =&H0000000C
Public Const PHONEBUTTONFUNCTION_PICKUP              =&H0000000D
Public Const PHONEBUTTONFUNCTION_RINGAGAIN           =&H0000000E
Public Const PHONEBUTTONFUNCTION_PARK                =&H0000000F
Public Const PHONEBUTTONFUNCTION_REJECT              =&H00000010
Public Const PHONEBUTTONFUNCTION_REDIRECT            =&H00000011
Public Const PHONEBUTTONFUNCTION_MUTE                =&H00000012
Public Const PHONEBUTTONFUNCTION_VOLUMEUP            =&H00000013
Public Const PHONEBUTTONFUNCTION_VOLUMEDOWN          =&H00000014
Public Const PHONEBUTTONFUNCTION_SPEAKERON           =&H00000015
Public Const PHONEBUTTONFUNCTION_SPEAKEROFF          =&H00000016
Public Const PHONEBUTTONFUNCTION_FLASH               =&H00000017
Public Const PHONEBUTTONFUNCTION_DATAON              =&H00000018
Public Const PHONEBUTTONFUNCTION_DATAOFF             =&H00000019
Public Const PHONEBUTTONFUNCTION_DONOTDISTURB        =&H0000001A
Public Const PHONEBUTTONFUNCTION_INTERCOM            =&H0000001B
Public Const PHONEBUTTONFUNCTION_BRIDGEDAPP          =&H0000001C
Public Const PHONEBUTTONFUNCTION_BUSY                =&H0000001D
Public Const PHONEBUTTONFUNCTION_CALLAPP             =&H0000001E
Public Const PHONEBUTTONFUNCTION_DATETIME            =&H0000001F
Public Const PHONEBUTTONFUNCTION_DIRECTORY           =&H00000020
Public Const PHONEBUTTONFUNCTION_COVER               =&H00000021
Public Const PHONEBUTTONFUNCTION_CALLID              =&H00000022
Public Const PHONEBUTTONFUNCTION_LASTNUM             =&H00000023
Public Const PHONEBUTTONFUNCTION_NIGHTSRV            =&H00000024
Public Const PHONEBUTTONFUNCTION_SENDCALLS           =&H00000025
Public Const PHONEBUTTONFUNCTION_MSGINDICATOR        =&H00000026
Public Const PHONEBUTTONFUNCTION_REPDIAL             =&H00000027
Public Const PHONEBUTTONFUNCTION_SETREPDIAL          =&H00000028
Public Const PHONEBUTTONFUNCTION_SYSTEMSPEED         =&H00000029
Public Const PHONEBUTTONFUNCTION_STATIONSPEED        =&H0000002A
Public Const PHONEBUTTONFUNCTION_CAMPON              =&H0000002B
Public Const PHONEBUTTONFUNCTION_SAVEREPEAT          =&H0000002C
Public Const PHONEBUTTONFUNCTION_QUEUECALL           =&H0000002D
Public Const PHONEBUTTONFUNCTION_NONE                =&H0000002E

Public Const PHONEBUTTONMODE_DUMMY                   =&H00000001
Public Const PHONEBUTTONMODE_CALL                    =&H00000002
Public Const PHONEBUTTONMODE_FEATURE                 =&H00000004
Public Const PHONEBUTTONMODE_KEYPAD                  =&H00000008
Public Const PHONEBUTTONMODE_LOCAL                   =&H00000010
Public Const PHONEBUTTONMODE_DISPLAY                 =&H00000020

Public Const PHONEBUTTONSTATE_UP                     =&H00000001
Public Const PHONEBUTTONSTATE_DOWN                   =&H00000002
Public Const PHONEBUTTONSTATE_UNKNOWN                =&H00000004
Public Const PHONEBUTTONSTATE_UNAVAIL                =&H00000008

Public Const PHONEERR_ALLOCATED                      =&H90000001
Public Const PHONEERR_BADDEVICEID                    =&H90000002
Public Const PHONEERR_INCOMPATIBLEAPIVERSION         =&H90000003
Public Const PHONEERR_INCOMPATIBLEEXTVERSION         =&H90000004
Public Const PHONEERR_INIFILECORRUPT                 =&H90000005
Public Const PHONEERR_INUSE                          =&H90000006
Public Const PHONEERR_INVALAPPHANDLE                 =&H90000007
Public Const PHONEERR_INVALAPPNAME                   =&H90000008
Public Const PHONEERR_INVALBUTTONLAMPID              =&H90000009
Public Const PHONEERR_INVALBUTTONMODE                =&H9000000A
Public Const PHONEERR_INVALBUTTONSTATE               =&H9000000B
Public Const PHONEERR_INVALDATAID                    =&H9000000C
Public Const PHONEERR_INVALDEVICECLASS               =&H9000000D
Public Const PHONEERR_INVALEXTVERSION                =&H9000000E
Public Const PHONEERR_INVALHOOKSWITCHDEV             =&H9000000F
Public Const PHONEERR_INVALHOOKSWITCHMODE            =&H90000010
Public Const PHONEERR_INVALLAMPMODE                  =&H90000011
Public Const PHONEERR_INVALPARAM                     =&H90000012
Public Const PHONEERR_INVALPHONEHANDLE               =&H90000013
Public Const PHONEERR_INVALPHONESTATE                =&H90000014
Public Const PHONEERR_INVALPOINTER                   =&H90000015
Public Const PHONEERR_INVALPRIVILEGE                 =&H90000016
Public Const PHONEERR_INVALRINGMODE                  =&H90000017
Public Const PHONEERR_NODEVICE                       =&H90000018
Public Const PHONEERR_NODRIVER                       =&H90000019
Public Const PHONEERR_NOMEM                          =&H9000001A
Public Const PHONEERR_NOTOWNER                       =&H9000001B
Public Const PHONEERR_OPERATIONFAILED                =&H9000001C
Public Const PHONEERR_OPERATIONUNAVAIL               =&H9000001D
Public Const PHONEERR_RESOURCEUNAVAIL                =&H9000001F
Public Const PHONEERR_REQUESTOVERRUN                 =&H90000020
Public Const PHONEERR_STRUCTURETOOSMALL              =&H90000021
Public Const PHONEERR_UNINITIALIZED                  =&H90000022
Public Const PHONEERR_REINIT                         =&H90000023
Public Const PHONEERR_DISCONNECTED                   =&H90000024
Public Const PHONEERR_LASTERRORVALUE                 =&H90000024


Public Const PHONEFEATURE_GETBUTTONINFO              =&H00000001
Public Const PHONEFEATURE_GETDATA                    =&H00000002
Public Const PHONEFEATURE_GETDISPLAY                 =&H00000004
Public Const PHONEFEATURE_GETGAINHANDSET             =&H00000008
Public Const PHONEFEATURE_GETGAINSPEAKER             =&H00000010
Public Const PHONEFEATURE_GETGAINHEADSET             =&H00000020
Public Const PHONEFEATURE_GETHOOKSWITCHHANDSET       =&H00000040
Public Const PHONEFEATURE_GETHOOKSWITCHSPEAKER       =&H00000080
Public Const PHONEFEATURE_GETHOOKSWITCHHEADSET       =&H00000100
Public Const PHONEFEATURE_GETLAMP                    =&H00000200
Public Const PHONEFEATURE_GETRING                    =&H00000400
Public Const PHONEFEATURE_GETVOLUMEHANDSET           =&H00000800
Public Const PHONEFEATURE_GETVOLUMESPEAKER           =&H00001000
Public Const PHONEFEATURE_GETVOLUMEHEADSET           =&H00002000
Public Const PHONEFEATURE_SETBUTTONINFO              =&H00004000
Public Const PHONEFEATURE_SETDATA                    =&H00008000
Public Const PHONEFEATURE_SETDISPLAY                 =&H00010000
Public Const PHONEFEATURE_SETGAINHANDSET             =&H00020000
Public Const PHONEFEATURE_SETGAINSPEAKER             =&H00040000
Public Const PHONEFEATURE_SETGAINHEADSET             =&H00080000
Public Const PHONEFEATURE_SETHOOKSWITCHHANDSET       =&H00100000
Public Const PHONEFEATURE_SETHOOKSWITCHSPEAKER       =&H00200000
Public Const PHONEFEATURE_SETHOOKSWITCHHEADSET       =&H00400000
Public Const PHONEFEATURE_SETLAMP                    =&H00800000
Public Const PHONEFEATURE_SETRING                    =&H01000000
Public Const PHONEFEATURE_SETVOLUMEHANDSET           =&H02000000
Public Const PHONEFEATURE_SETVOLUMESPEAKER           =&H04000000
Public Const PHONEFEATURE_SETVOLUMEHEADSET           =&H08000000

Public Const PHONEHOOKSWITCHDEV_HANDSET              =&H00000001
Public Const PHONEHOOKSWITCHDEV_SPEAKER              =&H00000002
Public Const PHONEHOOKSWITCHDEV_HEADSET              =&H00000004

Public Const PHONEHOOKSWITCHMODE_ONHOOK              =&H00000001
Public Const PHONEHOOKSWITCHMODE_MIC                 =&H00000002
Public Const PHONEHOOKSWITCHMODE_SPEAKER             =&H00000004
Public Const PHONEHOOKSWITCHMODE_MICSPEAKER          =&H00000008
Public Const PHONEHOOKSWITCHMODE_UNKNOWN             =&H00000010

Public Const PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW     =&H00000001
Public Const PHONEINITIALIZEEXOPTION_USEEVENT            =&H00000002
Public Const PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT   =&H00000003

Public Const PHONELAMPMODE_DUMMY                     =&H00000001
Public Const PHONELAMPMODE_OFF                       =&H00000002
Public Const PHONELAMPMODE_STEADY                    =&H00000004
Public Const PHONELAMPMODE_WINK                      =&H00000008
Public Const PHONELAMPMODE_FLASH                     =&H00000010
Public Const PHONELAMPMODE_FLUTTER                   =&H00000020
Public Const PHONELAMPMODE_BROKENFLUTTER             =&H00000040
Public Const PHONELAMPMODE_UNKNOWN                   =&H00000080

Public Const PHONEPRIVILEGE_MONITOR                  =&H00000001
Public Const PHONEPRIVILEGE_OWNER                    =&H00000002

Public Const PHONESTATE_OTHER                        =&H00000001
Public Const PHONESTATE_CONNECTED                    =&H00000002
Public Const PHONESTATE_DISCONNECTED                 =&H00000004
Public Const PHONESTATE_OWNER                        =&H00000008
Public Const PHONESTATE_MONITORS                     =&H00000010
Public Const PHONESTATE_DISPLAY                      =&H00000020
Public Const PHONESTATE_LAMP                         =&H00000040
Public Const PHONESTATE_RINGMODE                     =&H00000080
Public Const PHONESTATE_RINGVOLUME                   =&H00000100
Public Const PHONESTATE_HANDSETHOOKSWITCH            =&H00000200
Public Const PHONESTATE_HANDSETVOLUME                =&H00000400
Public Const PHONESTATE_HANDSETGAIN                  =&H00000800
Public Const PHONESTATE_SPEAKERHOOKSWITCH            =&H00001000
Public Const PHONESTATE_SPEAKERVOLUME                =&H00002000
Public Const PHONESTATE_SPEAKERGAIN                  =&H00004000
Public Const PHONESTATE_HEADSETHOOKSWITCH            =&H00008000
Public Const PHONESTATE_HEADSETVOLUME                =&H00010000
Public Const PHONESTATE_HEADSETGAIN                  =&H00020000
Public Const PHONESTATE_SUSPEND                      =&H00040000
Public Const PHONESTATE_RESUME                       =&H00080000
Public Const PHONESTATE_DEVSPECIFIC                  =&H00100000
Public Const PHONESTATE_REINIT                       =&H00200000
Public Const PHONESTATE_CAPSCHANGE                   =&H00400000
Public Const PHONESTATE_REMOVED                      =&H00800000

Public Const PHONESTATUSFLAGS_CONNECTED              =&H00000001
Public Const PHONESTATUSFLAGS_SUSPENDED              =&H00000002

Public Const STRINGFORMAT_ASCII                      =&H00000001
Public Const STRINGFORMAT_DBCS                       =&H00000002
Public Const STRINGFORMAT_UNICODE                    =&H00000003
Public Const STRINGFORMAT_BINARY                     =&H00000004

Public Const TAPI_E_NOTENOUGHMEMORY                  =&H80040001
Public Const TAPI_E_NOITEMS                          =&H80040002
Public Const TAPI_E_NOTSUPPORTED                     =&H80040003
Public Const TAPI_E_INVALIDMEDIATYPE                 =&H80040004
Public Const TAPI_E_OPERATIONFAILED                  =&H80040005
Public Const TAPI_E_ALLOCATED                        =&H80040006
Public Const TAPI_E_CALLUNAVAIL                      =&H80040007
Public Const TAPI_E_COMPLETIONOVERRUN                =&H80040008
Public Const TAPI_E_CONFERENCEFULL                   =&H80040009
Public Const TAPI_E_DIALMODIFIERNOTSUPPORTED         =&H8004000A
Public Const TAPI_E_INUSE                            =&H8004000B
Public Const TAPI_E_INVALADDRESS                     =&H8004000C
Public Const TAPI_E_INVALADDRESSSTATE                =&H8004000D
Public Const TAPI_E_INVALCALLPARAMS                  =&H8004000E
Public Const TAPI_E_INVALCALLPRIVILEGE               =&H8004000F
Public Const TAPI_E_INVALCALLSTATE                   =&H80040010
Public Const TAPI_E_INVALCARD                        =&H80040011
Public Const TAPI_E_INVALCOMPLETIONID                =&H80040012
Public Const TAPI_E_INVALCOUNTRYCODE                 =&H80040013
Public Const TAPI_E_INVALDEVICECLASS                 =&H80040014
Public Const TAPI_E_INVALDIALPARAMS                  =&H80040015
Public Const TAPI_E_INVALDIGITS                      =&H80040016
Public Const TAPI_E_INVALGROUPID                     =&H80040017
Public Const TAPI_E_INVALLOCATION                    =&H80040018
Public Const TAPI_E_INVALMESSAGEID                   =&H80040019
Public Const TAPI_E_INVALPARKID                      =&H8004001A
Public Const TAPI_E_INVALRATE                        =&H8004001B
Public Const TAPI_E_INVALTIMEOUT                     =&H8004001C
Public Const TAPI_E_INVALTONE                        =&H8004001D
Public Const TAPI_E_INVALLIST                        =&H8004001E
Public Const TAPI_E_INVALMODE                        =&H8004001F
Public Const TAPI_E_NOCONFERENCE                     =&H80040020
Public Const TAPI_E_NODEVICE                         =&H80040021
Public Const TAPI_E_NOREQUEST                        =&H80040022
Public Const TAPI_E_NOTOWNER                         =&H80040023
Public Const TAPI_E_NOTREGISTERED                    =&H80040024
Public Const TAPI_E_REQUESTOVERRUN                   =&H80040025
Public Const TAPI_E_TARGETNOTFOUND                   =&H80040026
Public Const TAPI_E_TARGETSELF                       =&H80040027
Public Const TAPI_E_USERUSERINFOTOOBIG               =&H80040028
Public Const TAPI_E_REINIT                           =&H80040029
Public Const TAPI_E_ADDRESSBLOCKED                   =&H8004002A
Public Const TAPI_E_BILLINGREJECTED                  =&H8004002B
Public Const TAPI_E_INVALFEATURE                     =&H8004002C
Public Const TAPI_E_INVALBUTTONLAMPID                =&H8004002D
Public Const TAPI_E_INVALBUTTONSTATE                 =&H8004002E
Public Const TAPI_E_INVALDATAID                      =&H8004002F
Public Const TAPI_E_INVALHOOKSWITCHDEV               =&H80040030
Public Const TAPI_E_DROPPED                          =&H80040031
Public Const TAPI_E_NOREQUESTRECIPIENT               =&H80040032
Public Const TAPI_E_REQUESTQUEUEFULL                 =&H80040033
Public Const TAPI_E_DESTBUSY                         =&H80040034
Public Const TAPI_E_DESTNOANSWER                     =&H80040035
Public Const TAPI_E_DESTUNAVAIL                      =&H80040036
Public Const TAPI_E_REQUESTFAILED                    =&H80040037
Public Const TAPI_E_REQUESTCANCELLED                 =&H80040038
Public Const TAPI_E_INVALPRIVILEGE                   =&H80040039
Public Const TAPI_E_INVALIDDIRECTION                 =&H8004003A
Public Const TAPI_E_INVALIDTERMINAL                  =&H8004003B
Public Const TAPI_E_INVALIDTERMINALCLASS             =&H8004003C
Public Const TAPI_E_NODRIVER                         =&H8004003D
Public Const TAPI_E_MAXSTREAMS                       =&H8004003E
Public Const TAPI_E_NOTERMINALSELECTED               =&H8004003F
Public Const TAPI_E_TERMINALINUSE                    =&H80040040
Public Const TAPI_E_NOTSTOPPED                       =&H80040041
Public Const TAPI_E_MAXTERMINALS                     =&H80040042
Public Const TAPI_E_INVALIDSTREAM                    =&H80040043
Public Const TAPI_E_TIMEOUT                          =&H80040044
Public Const TAPI_E_CALLCENTER_GROUP_REMOVED         =&H80040045
Public Const TAPI_E_CALLCENTER_QUEUE_REMOVED         =&H80040046
Public Const TAPI_E_CALLCENTER_NO_AGENT_ID           =&H80040047
Public Const TAPI_E_CALLCENTER_INVALAGENTID          =&H80040048
Public Const TAPI_E_CALLCENTER_INVALAGENTGROUP       =&H80040049
Public Const TAPI_E_CALLCENTER_INVALPASSWORD         =&H8004004A
Public Const TAPI_E_CALLCENTER_INVALAGENTSTATE       =&H8004004B
Public Const TAPI_E_CALLCENTER_INVALAGENTACTIVITY    =&H8004004C
Public Const TAPI_E_REGISTRY_SETTING_CORRUPT         =&H8004004D
Public Const TAPI_E_TERMINAL_PEER                    =&H8004004E
Public Const TAPI_E_PEER_NOT_SET                     =&H8004004F
Public Const TAPI_E_NOEVENT                          =&H80040050
Public Const TAPI_E_INVALADDRESSTYPE                 =&H80040051
Public Const TAPI_E_RESOURCEUNAVAIL                  =&H80040052
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tapi\skywalker\ipconf\bridge\test2\blob.txt ===
<><v=0
o=qhuai 0 0 IN IP4 157.55.89.115
s=BridgeTestConf1
c=IN IP4 239.9.20.26/15
t=0 0
m=video 20000 RTP/AVP 34 31
m=audio 20040 RTP/AVP 0 4
><v=0
o=qhuai 0 0 IN IP4 157.55.89.115
s=BridgeTestConf2
c=IN IP4 239.9.20.26/15
t=0 0
m=video 20000 RTP/AVP 34 31
m=audio 20040 RTP/AVP 3
>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\apis\iphlpapi\dll\calltree.txt ===
CompareIfRow        
CompareIpAddrRow    
CompareTcpRow       
CompareUdpRow       
CompareIpNetRow     
CompareIpForwardRow 
GetIfNumber         
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetIpStatsFromStack 
              IsRouterRunning     
GetIfTable          
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetIfTableFromStack 
              IsRouterRunning     
              GetIfNumber         
GetIpAddrTable      
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetIpAddrTableFromStack
              IsRouterRunning     
              GetIpStatistics     
GetIpNetTable       
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetArpEntryCount    
              GetIpNetTableFromStack
              IsRouterRunning     
GetIpForwardTable   
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetIpForwardTableFromStack
              IsRouterRunning     
              GetIpStatistics     
GetTcpTable         
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetTcpTableFromStack
              IsRouterRunning     
              GetTcpStatistics    
GetUdpTable         
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetUdpTableFromStack
              IsRouterRunning     
              GetUdpStatistics    
GetIpStatistics     
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetIpStatsFromStack 
              IsRouterRunning     
GetIcmpStatistics   
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetIcmpStatsFromStack
              IsRouterRunning     
GetTcpStatistics    
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetTcpStatsFromStack
              IsRouterRunning     
GetUdpStatistics    
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              GetUdpStatsFromStack
              IsRouterRunning     
SetIfEntry          
              InternalSetIfEntry  
CreateIpForwardEntry
              InternalCreateIpForwardEntry
SetIpForwardEntry   
              InternalSetIpForwardEntry
DeleteIpForwardEntry
              InternalDeleteIpForwardEntry
SetIpStatistics     
              InternalSetIpStats  
CreateIpNetEntry    
              InternalCreateIpNetEntry
SetIpNetEntry       
              InternalSetIpNetEntry
DeleteIpNetEntry    
              InternalDeleteIpNetEntry
SetTcpEntry         
              InternalSetTcpEntry 
InitAdapterMappingTable
StoreAdapterToATInstanceMap
              InsertAdapterMap    
              LookUpAdapterMap    
StoreAdapterToIFInstanceMap
              InsertAdapterMap    
              LookUpAdapterMap    
GetIFInstanceFromAdapter
              LookUpAdapterMap    
GetATInstanceFromAdapter
              LookUpAdapterMap    
LookUpAdapterMap    
InsertAdapterMap    
UpdateAdapterToIFInstanceMapping
              TCPQueryInformationEx
              GetIpStatsFromStack 
              StoreAdapterToIFInstanceMap
UpdateAdapterToATInstanceMapping
              TCPQueryInformationEx
              AllocateAndGetArpEntTableFromStack
              StoreAdapterToATInstanceMap
InternalGetIfTable  
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              AllocateAndGetIfTableFromStack
              IsRouterRunning     
InternalGetIpAddrTable
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              AllocateAndGetIpAddrTableFromStack
              IsRouterRunning     
InternalGetIpNetTable
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              AllocateAndGetIpNetTableFromStack
              IsRouterRunning     
InternalGetIpForwardTable
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              AllocateAndGetIpForwardTableFromStack
              IsRouterRunning     
InternalGetTcpTable 
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              AllocateAndGetTcpTableFromStack
              IsRouterRunning     
InternalGetUdpTable 
              MprAdminMIBEntryGet 
              MprAdminMIBBufferFree
              AllocateAndGetUdpTableFromStack
              IsRouterRunning     
InternalSetIfEntry  
              MprAdminMIBEntrySet 
              SetIfEntryToStack   
              IsRouterRunning     
InternalCreateIpForwardEntry
              MprAdminMIBEntryCreate
              SetIpForwardEntryToStack
              IsRouterRunning     
InternalSetIpForwardEntry
              MprAdminMIBEntrySet 
              SetIpForwardEntryToStack
              IsRouterRunning     
InternalDeleteIpForwardEntry
              MprAdminMIBEntryDelete
              SetIpForwardEntryToStack
              IsRouterRunning     
InternalSetIpStats  
              MprAdminMIBEntrySet 
              SetIpStatsToStack   
              IsRouterRunning     
InternalCreateIpNetEntry
              MprAdminMIBEntryCreate
              SetIpNetEntryToStack
              IsRouterRunning     
InternalSetIpNetEntry
              MprAdminMIBEntrySet 
              SetIpNetEntryToStack
              IsRouterRunning     
InternalDeleteIpNetEntry
              MprAdminMIBEntryDelete
              SetIpNetEntryToStack
              IsRouterRunning     
InternalSetTcpEntry 
              MprAdminMIBEntrySet 
              SetTcpEntryToStack  
              IsRouterRunning     
OpenAdapterKey      
ReadRegistryDword   
GetAdapterIPInterfaceContext
              ReadRegistryDword   
              OpenAdapterKey      
GetAdapterIndex     
              AllocateAndGetIpAddrTableFromStack
              GetAdapterIPInterfaceContext
AddIPAddress        
              TCPSendIoctl        
DeleteIPAddress     
              TCPSendIoctl        
GetRTT              
              IcmpCreateFile      
              IcmpSendEcho        
              IcmpCloseHandle     
GetHopCounts        
              IcmpCreateFile      
              IcmpSendEcho        
              IcmpCloseHandle     
IsLocalAddress      
              AllocateAndGetIpAddrTableFromStack
AddArpEntry         
              SetIpNetEntryToStack
DeleteArpEntry      
              SetIpNetEntryToStack
NotifyAddrChange    
              TCPSendIoctl        
NotifyRouteChange   
              TCPSendIoctl        
IpReleaseAddress    
              DhcpReleaseParameters
IpRenewAddress      
              DhcpAcquireParameters
IpHlpDllEntry       
              MprAdminMIBServerDisconnect
              CloseTCPDriver      
              OpenTCPDriver       
              UpdateAdapterToATInstanceMapping
              UpdateAdapterToIFInstanceMapping
              InitAdapterMappingTable
IsRouterRunning     
              MprAdminMIBServerConnect
AllocateAndGetIfTableFromStack
              GetIpStatsFromStack 
              GetIfTableFromStack 
              UpdateAdapterToIFInstanceMapping
GetIfTableFromStack 
              AccessIfEntryInStack
SetIfEntryToStack   
              AccessIfEntryInStack
              UpdateAdapterToIFInstanceMapping
              GetIFInstanceFromAdapter
AccessIfEntryInStack
              TCPSetInformationEx 
              TCPQueryInformationEx
AllocateAndGetIpAddrTableFromStack
              GetIpStatsFromStack 
              GetIpAddrTableFromStack
GetIpAddrTableFromStack
              TCPQueryInformationEx
AllocateAndGetTcpTableFromStack
              GetTcpStatsFromStack
              GetTcpTableFromStack
GetTcpTableFromStack
              TCPQueryInformationEx
SetTcpEntryToStack  
              TCPSetInformationEx 
AllocateAndGetUdpTableFromStack
              GetUdpStatsFromStack
              GetUdpTableFromStack
GetUdpTableFromStack
              TCPQueryInformationEx
AllocateAndGetIpForwardTableFromStack
              GetIpStatsFromStack 
              GetIpForwardTableFromStack
GetIpForwardTableFromStack
              TCPQueryInformationEx
              GetIpStatsFromStack 
AllocateAndGetIpNetTableFromStack
              GetArpEntryCount    
              GetIpNetTableFromStack
              UpdateAdapterToATInstanceMapping
GetIpNetTableFromStack
              TCPQueryInformationEx
GetIpStatsFromStack 
              TCPQueryInformationEx
SetIpStatsToStack   
              TCPSetInformationEx 
GetIcmpStatsFromStack
              TCPQueryInformationEx
GetUdpStatsFromStack
              TCPQueryInformationEx
GetTcpStatsFromStack
              TCPQueryInformationEx
SetIpNetEntryToStack
              TCPSetInformationEx 
              UpdateAdapterToATInstanceMapping
              GetATInstanceFromAdapter
GetArpEntryCount    
              TCPQueryInformationEx
AllocateAndGetArpEntTableFromStack
              TCPQueryInformationEx
SetIpForwardEntryToStack
              SetIpRouteEntryToStack
SetIpRouteEntryToStack
              TCPSetInformationEx 
TCPQueryInformationEx
TCPSendIoctl        
TCPSetInformationEx 
OpenTCPDriver       
CloseTCPDriver      
MprAdminMIBBufferFree
MprAdminMIBEntryGet 
MprAdminMIBEntrySet 
MprAdminMIBEntryCreate
MprAdminMIBEntryDelete
MprAdminMIBServerDisconnect
MprAdminMIBServerConnect
IcmpCloseHandle     
IcmpSendEcho        
IcmpCreateFile      
DhcpReleaseParameters
DhcpAcquireParameters
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\apis\iphlpapi\dll\rfc1213.txt ===
Network Working Group									   K. McCloghrie
Request for Comments: 1213						Hughes LAN Systems, Inc.
Obsoletes: RFC 1158												 M. Rose
									   Performance Systems International
																 Editors
															  March 1991


		   Management Information Base for Network Management
					   of TCP/IP-based internets:
								 MIB-II

Status of this Memo

   This memo defines the second version of the Management Information
   Base (MIB-II) for use with network management protocols in TCP/IP-
   based internets.	 This RFC specifies an IAB standards track protocol
   for the Internet community, and requests discussion and suggestions
   for improvements.  Please refer to the current edition of the "IAB
   Official Protocol Standards" for the standardization state and status
   of this protocol.  Distribution of this memo is unlimited.

Table of Contents

   1. Abstract...............................................	 2
   2. Introduction ..........................................	 2
   3. Changes from RFC 1156 .................................	 3
   3.1 Deprecated Objects ...................................	 3
   3.2 Display Strings ......................................	 4
   3.3 Physical Addresses ...................................	 4
   3.4 The System Group .....................................	 5
   3.5 The Interfaces Group .................................	 5
   3.6 The Address Translation Group ........................	 6
   3.7 The IP Group .........................................	 6
   3.8 The ICMP Group .......................................	 7
   3.9 The TCP Group ........................................	 7
   3.10 The UDP Group .......................................	 7
   3.11 The EGP Group .......................................	 7
   3.12 The Transmission Group ..............................	 8
   3.13 The SNMP Group ......................................	 8
   3.14 Changes from RFC 1158 ................. .............	 9
   4. Objects ...............................................	10
   4.1 Format of Definitions ................................	10
   5. Overview ..............................................	10
   6. Definitions ...........................................	12
   6.1 Textual Conventions ..................................	12
   6.2 Groups in MIB-II .....................................	13
   6.3 The System Group .....................................	13


SNMP Working Group												[Page 1]

RFC 1213						 MIB-II						  March 1991


   6.4 The Interfaces Group .................................	16
   6.5 The Address Translation Group ........................	23
   6.6 The IP Group .........................................	26
   6.7 The ICMP Group .......................................	41
   6.8 The TCP Group ........................................	46
   6.9 The UDP Group ........................................	52
   6.10 The EGP Group .......................................	54
   6.11 The Transmission Group ..............................	60
   6.12 The SNMP Group ......................................	60
   7. Acknowledgements ......................................	67
   8. References ............................................	69
   9. Security Considerations ...............................	70
   10. Authors' Addresses ...................................	70

1.	Abstract

   This memo defines the second version of the Management Information
   Base (MIB-II) for use with network management protocols in TCP/IP-
   based internets.	 In particular, together with its companion memos
   which describe the structure of management information (RFC 1155)
   along with the network management protocol (RFC 1157) for TCP/IP-
   based internets, these documents provide a simple, workable
   architecture and system for managing TCP/IP-based internets and in
   particular the Internet community.

2.	Introduction

   As reported in RFC 1052, IAB Recommendations for the Development of
   Internet Network Management Standards [1], a two-prong strategy for
   network management of TCP/IP-based internets was undertaken.	 In the
   short-term, the Simple Network Management Protocol (SNMP) was to be
   used to manage nodes in the Internet community.	In the long-term,
   the use of the OSI network management framework was to be examined.
   Two documents were produced to define the management information: RFC
   1065, which defined the Structure of Management Information (SMI)
   [2], and RFC 1066, which defined the Management Information Base
   (MIB) [3].  Both of these documents were designed so as to be
   compatible with both the SNMP and the OSI network management
   framework.

   This strategy was quite successful in the short-term: Internet-based
   network management technology was fielded, by both the research and
   commercial communities, within a few months.	 As a result of this,
   portions of the Internet community became network manageable in a
   timely fashion.

   As reported in RFC 1109, Report of the Second Ad Hoc Network
   Management Review Group [4], the requirements of the SNMP and the OSI
   network management frameworks were more different than anticipated.
   As such, the requirement for compatibility between the SMI/MIB and
   both frameworks was suspended.  This action permitted the operational
   network management framework, the SNMP, to respond to new operational
   needs in the Internet community by producing this document.

   As such, the current network management framework for TCP/IP- based
   internets consists of: Structure and Identification of Management
   Information for TCP/IP-based internets, RFC 1155 [12], which
   describes how managed objects contained in the MIB are defined;
   Management Information Base for Network Management of TCP/IP-based
   internets: MIB-II, this memo, which describes the managed objects
   contained in the MIB (and supercedes RFC 1156 [13]); and, the Simple
   Network Management Protocol, RFC 1098 [5], which defines the protocol
   used to manage these objects.

3.	Changes from RFC 1156

   Features of this MIB include:

   (1)	incremental additions to reflect new operational
		requirements;

   (2)	upwards compatibility with the SMI/MIB and the SNMP;

   (3)	improved support for multi-protocol entities; and,

   (4)	textual clean-up of the MIB to improve clarity and
		readability.

   The objects defined in MIB-II have the OBJECT IDENTIFIER prefix:

	  mib-2		 OBJECT IDENTIFIER ::= { mgmt 1 }

   which is identical to the prefix used in MIB-I.

3.1.  Deprecated Objects

   In order to better prepare implementors for future changes in the
   MIB, a new term "deprecated" may be used when describing an object.
   A deprecated object in the MIB is one which must be supported, but
   one which will most likely be removed from the next version of the
   MIB (e.g., MIB-III).

   MIB-II marks one object as being deprecated:

	  atTable
   As a result of deprecating the atTable object, the entire Address
   Translation group is deprecated.

   Note that no functionality is lost with the deprecation of these
   objects: new objects providing equivalent or superior functionality
   are defined in MIB-II.

3.2.  Display Strings

   In the past, there have been misinterpretations of the MIB as to when
   a string of octets should contain printable characters, meant to be
   displayed to a human.  As a textual convention in the MIB, the
   datatype

	  DisplayString ::=
		  OCTET STRING

   is introduced.  A DisplayString is restricted to the NVT ASCII
   character set, as defined in pages 10-11 of [6].

   The following objects are now defined in terms of DisplayString:

	  sysDescr
	  ifDescr

   It should be noted that this change has no effect on either the
   syntax nor semantics of these objects.  The use of the DisplayString
   notation is merely an artifact of the explanatory method used in
   MIB-II and future MIBs.

   Further it should be noted that any object defined in terms of OCTET
   STRING may contain arbitrary binary data, in which each octet may
   take any value from 0 to 255 (decimal).

3.3.  Physical Addresses

   As a further, textual convention in the MIB, the datatype

	  PhysAddress ::=
		  OCTET STRING

   is introduced to represent media- or physical-level addresses.

   The following objects are now defined in terms of PhysAddress:

	  ifPhysAddress
	  atPhysAddress
	  ipNetToMediaPhysAddress
   It should be noted that this change has no effect on either the
   syntax nor semantics of these objects.  The use of the PhysAddress
   notation is merely an artifact of the explanatory method used in
   MIB-II and future MIBs.

3.4.  The System Group

   Four new objects are added to this group:

	  sysContact
	  sysName
	  sysLocation
	  sysServices

   These provide contact, administrative, location, and service
   information regarding the managed node.

3.5.  The Interfaces Group

   The definition of the ifNumber object was incorrect, as it required
   all interfaces to support IP.  (For example, devices without IP, such
   as MAC-layer bridges, could not be managed if this definition was
   strictly followed.)	The description of the ifNumber object is
   changed accordingly.

   The ifTable object was mistaken marked as read-write, it has been
   (correctly) re-designated as not-accessible.	 In addition, several
   new values have been added to the ifType column in the ifTable
   object:

	  ppp(23)
	  softwareLoopback(24)
	  eon(25)
	  ethernet-3Mbit(26)
	  nsip(27)
	  slip(28)
	  ultra(29)
	  ds3(30)
	  sip(31)
	  frame-relay(32)

   Finally, a new column has been added to the ifTable object:

	  ifSpecific

   which provides information about information specific to the media
   being used to realize the interface.

3.6.  The Address Translation Group

   In MIB-I this group contained a table which permitted mappings from
   network addresses (e.g., IP addresses) to physical addresses (e.g.,
   MAC addresses).	Experience has shown that efficient implementations
   of this table make two assumptions: a single network protocol
   environment, and mappings occur only from network address to physical
   address.

   The need to support multi-protocol nodes (e.g., those with both the
   IP and CLNP active), and the need to support the inverse mapping
   (e.g., for ES-IS), have invalidated both of these assumptions.  As
   such, the atTable object is declared deprecated.

   In order to meet both the multi-protocol and inverse mapping
   requirements, MIB-II and its successors will allocate up to two
   address translation tables inside each network protocol group.  That
   is, the IP group will contain one address translation table, for
   going from IP addresses to physical addresses.  Similarly, when a
   document defining MIB objects for the CLNP is produced (e.g., [7]),
   it will contain two tables, for mappings in both directions, as this
   is required for full functionality.

   It should be noted that the choice of two tables (one for each
   direction of mapping) provides for ease of implementation in many
   cases, and does not introduce undue burden on implementations which
   realize the address translation abstraction through a single internal
   table.

3.7.  The IP Group

   The access attribute of the variable ipForwarding has been changed
   from read-only to read-write.

   In addition, there is a new column to the ipAddrTable object,

	  ipAdEntReasmMaxSize

   which keeps track of the largest IP datagram that can be re-assembled
   on a particular interface.

   The descriptor of the ipRoutingTable object has been changed to
   ipRouteTable for consistency with the other IP routing objects.
   There are also three new columns in the ipRouteTable object,

	  ipRouteMask
	  ipRouteMetric5
	  ipRouteInfo
   the first is used for IP routing subsystems that support arbitrary
   subnet masks, and the latter two are IP routing protocol-specific.

   Two new objects are added to the IP group:

	  ipNetToMediaTable
	  ipRoutingDiscards

   the first is the address translation table for the IP group
   (providing identical functionality to the now deprecated atTable in
   the address translation group), and the latter provides information
   when routes are lost due to a lack of buffer space.

3.8.  The ICMP Group

   There are no changes to this group.

3.9.  The TCP Group

   Two new variables are added:

	  tcpInErrs
	  tcpOutRsts

   which keep track of the number of incoming TCP segments in error and
   the number of resets generated by a TCP.

3.10.  The UDP Group

   A new table:

	  udpTable

   is added.

3.11.  The EGP Group

   Experience has indicated a need for additional objects that are
   useful in EGP monitoring.  In addition to making several additions to
   the egpNeighborTable object, i.e.,

	  egpNeighAs
	  egpNeighInMsgs
	  egpNeighInErrs
	  egpNeighOutMsgs
	  egpNeighOutErrs
	  egpNeighInErrMsgs
	  egpNeighOutErrMsgs
	  egpNeighStateUps
	  egpNeighStateDowns
	  egpNeighIntervalHello
	  egpNeighIntervalPoll
	  egpNeighMode
	  egpNeighEventTrigger

   a new variable is added:

	  egpAs

   which gives the autonomous system associated with this EGP entity.

3.12.  The Transmission Group

   MIB-I was lacking in that it did not distinguish between different
   types of transmission media.	 A new group, the Transmission group, is
   allocated for this purpose:

	  transmission OBJECT IDENTIFIER ::= { mib-2 10 }

   When Internet-standard definitions for managing transmission media
   are defined, the transmission group is used to provide a prefix for
   the names of those objects.

   Typically, such definitions reside in the experimental portion of the
   MIB until they are "proven", then as a part of the Internet
   standardization process, the definitions are accordingly elevated and
   a new object identifier, under the transmission group is defined.  By
   convention, the name assigned is:

	  type OBJECT IDENTIFIER ::= { transmission number }

   where "type" is the symbolic value used for the media in the ifType
   column of the ifTable object, and "number" is the actual integer
   value corresponding to the symbol.

3.13.  The SNMP Group

   The application-oriented working groups of the IETF have been tasked
   to be receptive towards defining MIB variables specific to their
   respective applications.

   For the SNMP, it is useful to have statistical information.	A new
   group, the SNMP group, is allocated for this purpose:

	  snmp	 OBJECT IDENTIFIER ::= { mib-2 11 }
3.14.  Changes from RFC 1158

   Features of this MIB include:

   (1)	The managed objects in this document have been defined
		using the conventions defined in the Internet-standard
		SMI, as amended by the extensions specified in [14].  It
		must be emphasized that definitions made using these
		extensions are semantically identically to those in RFC
		1158.

   (2)	The PhysAddress textual convention has been introduced to
		represent media addresses.

   (3)	The ACCESS clause of sysLocation is now read-write.

   (4)	The definition of sysServices has been clarified.

   (5)	New ifType values (29-32) have been defined.  In
		addition, the textual-descriptor for the DS1 and E1
		interface types has been corrected.

   (6)	The definition of ipForwarding has been clarified.

   (7)	The definition of ipRouteType has been clarified.

   (8)	The ipRouteMetric5 and ipRouteInfo objects have been
		defined.

   (9)	The ACCESS clause of tcpConnState is now read-write, to
		support deletion of the TCB associated with a TCP
		connection.	 The definition of this object has been
		clarified to explain this usage.

   (10) The definition of egpNeighEventTrigger has been
		clarified.

   (11) The definition of several of the variables in the new
		snmp group have been clarified.	 In addition, the
		snmpInBadTypes and snmpOutReadOnlys objects are no longer
		present.  (However, the object identifiers associated
		with those objects are reserved to prevent future use.)

   (12) The definition of snmpInReadOnlys has been clarified.

   (13) The textual descriptor of the snmpEnableAuthTraps has
		been changed to snmpEnableAuthenTraps, and the definition
		has been clarified.
   (14) The ipRoutingDiscards object was added.

   (15) The optional use of an implementation-dependent, small
		positive integer was disallowed when identifying
		instances of the IP address and routing tables.

4.	Objects

   Managed objects are accessed via a virtual information store, termed
   the Management Information Base or MIB.	Objects in the MIB are
   defined using the subset of Abstract Syntax Notation One (ASN.1) [8]
   defined in the SMI.	In particular, each object has a name, a syntax,
   and an encoding.	 The name is an object identifier, an
   administratively assigned name, which specifies an object type.	The
   object type together with an object instance serves to uniquely
   identify a specific instantiation of the object.	 For human
   convenience, we often use a textual string, termed the OBJECT
   DESCRIPTOR, to also refer to the object type.

   The syntax of an object type defines the abstract data structure
   corresponding to that object type.  The ASN.1 language is used for
   this purpose.  However, the SMI [12] purposely restricts the ASN.1
   constructs which may be used.  These restrictions are explicitly made
   for simplicity.

   The encoding of an object type is simply how that object type is
   represented using the object type's syntax.	Implicitly tied to the
   notion of an object type's syntax and encoding is how the object type
   is represented when being transmitted on the network.

   The SMI specifies the use of the basic encoding rules of ASN.1 [9],
   subject to the additional requirements imposed by the SNMP.

4.1.  Format of Definitions

   Section 6 contains contains the specification of all object types
   contained in this MIB module.  The object types are defined using the
   conventions defined in the SMI, as amended by the extensions
   specified in [14].

5.	Overview

   Consistent with the IAB directive to produce simple, workable systems
   in the short-term, the list of managed objects defined here, has been
   derived by taking only those elements which are considered essential.

   This approach of taking only the essential objects is NOT
   restrictive, since the SMI defined in the companion memo provides
   three extensibility mechanisms: one, the addition of new standard
   objects through the definitions of new versions of the MIB; two, the
   addition of widely-available but non-standard objects through the
   experimental subtree; and three, the addition of private objects
   through the enterprises subtree.	 Such additional objects can not
   only be used for vendor-specific elements, but also for
   experimentation as required to further the knowledge of which other
   objects are essential.

   The design of MIB-II is heavily influenced by the first extensibility
   mechanism.  Several new variables have been added based on
   operational experience and need.	 Based on this, the criteria for
   including an object in MIB-II are remarkably similar to the MIB-I
   criteria:

   (1)	An object needed to be essential for either fault or
		configuration management.

   (2)	Only weak control objects were permitted (by weak, it is
		meant that tampering with them can do only limited
		damage).  This criterion reflects the fact that the
		current management protocols are not sufficiently secure
		to do more powerful control operations.

   (3)	Evidence of current use and utility was required.

   (4)	In MIB-I, an attempt was made to limit the number of
		objects to about 100 to make it easier for vendors to
		fully instrument their software.  In MIB-II, this limit
		was raised given the wide technological base now
		implementing MIB-I.

   (5)	To avoid redundant variables, it was required that no
		object be included that can be derived from others in the
		MIB.

   (6)	Implementation specific objects (e.g., for BSD UNIX) were
		excluded.

   (7)	It was agreed to avoid heavily instrumenting critical
		sections of code.  The general guideline was one counter
		per critical section per layer.

   MIB-II, like its predecessor, the Internet-standard MIB, contains
   only essential elements.	 There is no need to allow individual
   objects to be optional.	Rather, the objects are arranged into the
   following groups:
	  - System
	  - Interfaces
	  - Address Translation (deprecated)
	  - IP
	  - ICMP
	  - TCP
	  - UDP
	  - EGP
	  - Transmission
	  - SNMP

   These groups are the basic unit of conformance: This method is as
   follows: if the semantics of a group is applicable to an
   implementation, then it must implement all objects in that group.
   For example, an implementation must implement the EGP group if and
   only if it implements the EGP.

   There are two reasons for defining these groups: to provide a means
   of assigning object identifiers; and, to provide a method for
   implementations of managed agents to know which objects they must
   implement.

6.	Definitions

		  RFC1213-MIB DEFINITIONS ::= BEGIN

		  IMPORTS
				  mgmt, NetworkAddress, IpAddress, Counter, Gauge,
						  TimeTicks
					  FROM RFC1155-SMI
				  OBJECT-TYPE
						  FROM RFC-1212;

		  --  This MIB module uses the extended OBJECT-TYPE macro as
		  --  defined in [14];


		  --  MIB-II (same prefix as MIB-I)

		  mib-2		 OBJECT IDENTIFIER ::= { mgmt 1 }

		  -- textual conventions

		  DisplayString ::=
			  OCTET STRING
		  -- This data type is used to model textual information taken
		  -- from the NVT ASCII character set.	By convention, objects
		  -- with this syntax are declared as having
		  --
		  --	  SIZE (0..255)

		  PhysAddress ::=
			  OCTET STRING
		  -- This data type is used to model media addresses.  For many
		  -- types of media, this will be in a binary representation.
		  -- For example, an ethernet address would be represented as
		  -- a string of 6 octets.


		  -- groups in MIB-II

		  system	   OBJECT IDENTIFIER ::= { mib-2 1 }

		  interfaces   OBJECT IDENTIFIER ::= { mib-2 2 }

		  at		   OBJECT IDENTIFIER ::= { mib-2 3 }

		  ip		   OBJECT IDENTIFIER ::= { mib-2 4 }

		  icmp		   OBJECT IDENTIFIER ::= { mib-2 5 }

		  tcp		   OBJECT IDENTIFIER ::= { mib-2 6 }

		  udp		   OBJECT IDENTIFIER ::= { mib-2 7 }

		  egp		   OBJECT IDENTIFIER ::= { mib-2 8 }

		  -- historical (some say hysterical)
		  -- cmot	   OBJECT IDENTIFIER ::= { mib-2 9 }

		  transmission OBJECT IDENTIFIER ::= { mib-2 10 }

		  snmp		   OBJECT IDENTIFIER ::= { mib-2 11 }


		  -- the System group

		  -- Implementation of the System group is mandatory for all
		  -- systems.  If an agent is not configured to have a value
		  -- for any of these variables, a string of length 0 is
		  -- returned.

		  sysDescr OBJECT-TYPE
			  SYNTAX  DisplayString (SIZE (0..255))
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "A textual description of the entity.	 This value
					  should include the full name and version
					  identification of the system's hardware type,
					  software operating-system, and networking
					  software.	 It is mandatory that this only contain
					  printable ASCII characters."
			  ::= { system 1 }

		  sysObjectID OBJECT-TYPE
			  SYNTAX  OBJECT IDENTIFIER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The vendor's authoritative identification of the
					  network management subsystem contained in the
					  entity.  This value is allocated within the SMI
					  enterprises subtree (1.3.6.1.4.1) and provides an
					  easy and unambiguous means for determining `what
					  kind of box' is being managed.  For example, if
					  vendor `Flintstones, Inc.' was assigned the
					  subtree 1.3.6.1.4.1.4242, it could assign the
					  identifier 1.3.6.1.4.1.4242.1.1 to its `Fred
					  Router'."
			  ::= { system 2 }

		  sysUpTime OBJECT-TYPE
			  SYNTAX  TimeTicks
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The time (in hundredths of a second) since the
					  network management portion of the system was last
					  re-initialized."
			  ::= { system 3 }

		  sysContact OBJECT-TYPE
			  SYNTAX  DisplayString (SIZE (0..255))
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The textual identification of the contact person
					  for this managed node, together with information
					  on how to contact this person."
			  ::= { system 4 }

		  sysName OBJECT-TYPE
			  SYNTAX  DisplayString (SIZE (0..255))
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "An administratively-assigned name for this
					  managed node.	 By convention, this is the node's
					  fully-qualified domain name."
			  ::= { system 5 }

		  sysLocation OBJECT-TYPE
			  SYNTAX  DisplayString (SIZE (0..255))
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The physical location of this node (e.g.,
					  `telephone closet, 3rd floor')."
			  ::= { system 6 }

		  sysServices OBJECT-TYPE
			  SYNTAX  INTEGER (0..127)
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "A value which indicates the set of services that
					  this entity primarily offers.

					  The value is a sum.  This sum initially takes the
					  value zero, Then, for each layer, L, in the range
					  1 through 7, that this node performs transactions
					  for, 2 raised to (L - 1) is added to the sum.	 For
					  example, a node which performs primarily routing
					  functions would have a value of 4 (2^(3-1)).	In
					  contrast, a node which is a host offering
					  application services would have a value of 72
					  (2^(4-1) + 2^(7-1)).	Note that in the context of
					  the Internet suite of protocols, values should be
					  calculated accordingly:

						   layer  functionality
							   1  physical (e.g., repeaters)
							   2  datalink/subnetwork (e.g., bridges)
							   3  internet (e.g., IP gateways)
							   4  end-to-end  (e.g., IP hosts)
							   7  applications (e.g., mail relays)

					  For systems including OSI protocols, layers 5 and
					  6 may also be counted."
			  ::= { system 7 }
		  -- the Interfaces group

		  -- Implementation of the Interfaces group is mandatory for
		  -- all systems.

		  ifNumber OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of network interfaces (regardless of
					  their current state) present on this system."
			  ::= { interfaces 1 }


		  -- the Interfaces table

		  -- The Interfaces table contains information on the entity's
		  -- interfaces.  Each interface is thought of as being
		  -- attached to a `subnetwork'.  Note that this term should
		  -- not be confused with `subnet' which refers to an
		  -- addressing partitioning scheme used in the Internet suite
		  -- of protocols.

		  ifTable OBJECT-TYPE
			  SYNTAX  SEQUENCE OF IfEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "A list of interface entries.	 The number of
					  entries is given by the value of ifNumber."
			  ::= { interfaces 2 }

		  ifEntry OBJECT-TYPE
			  SYNTAX  IfEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "An interface entry containing objects at the
					  subnetwork layer and below for a particular
					  interface."
			  INDEX	  { ifIndex }
			  ::= { ifTable 1 }

		  IfEntry ::=
			  SEQUENCE {
				  ifIndex
					  INTEGER,
				  ifDescr
					  DisplayString,
				  ifType
					  INTEGER,
				  ifMtu
					  INTEGER,
				  ifSpeed
					  Gauge,
				  ifPhysAddress
					  PhysAddress,
				  ifAdminStatus
					  INTEGER,
				  ifOperStatus
					  INTEGER,
				  ifLastChange
					  TimeTicks,
				  ifInOctets
					  Counter,
				  ifInUcastPkts
					  Counter,
				  ifInNUcastPkts
					  Counter,
				  ifInDiscards
					  Counter,
				  ifInErrors
					  Counter,
				  ifInUnknownProtos
					  Counter,
				  ifOutOctets
					  Counter,
				  ifOutUcastPkts
					  Counter,
				  ifOutNUcastPkts
					  Counter,
				  ifOutDiscards
					  Counter,
				  ifOutErrors
					  Counter,
				  ifOutQLen
					  Gauge,
				  ifSpecific
					  OBJECT IDENTIFIER
			  }

		  ifIndex OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "A unique value for each interface.  Its value
					  ranges between 1 and the value of ifNumber.  The
					  value for each interface must remain constant at
					  least from one re-initialization of the entity's
					  network management system to the next re-
					  initialization."
			  ::= { ifEntry 1 }

		  ifDescr OBJECT-TYPE
			  SYNTAX  DisplayString (SIZE (0..255))
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "A textual string containing information about the
					  interface.  This string should include the name of
					  the manufacturer, the product name and the version
					  of the hardware interface."
			  ::= { ifEntry 2 }

		  ifType OBJECT-TYPE
			  SYNTAX  INTEGER {
						  other(1),			 -- none of the following
						  regular1822(2),
						  hdh1822(3),
						  ddn-x25(4),
						  rfc877-x25(5),
						  ethernet-csmacd(6),
						  iso88023-csmacd(7),
						  iso88024-tokenBus(8),
						  iso88025-tokenRing(9),
						  iso88026-man(10),
						  starLan(11),
						  proteon-10Mbit(12),
						  proteon-80Mbit(13),
						  hyperchannel(14),
						  fddi(15),
						  lapb(16),
						  sdlc(17),
						  ds1(18),			 -- T-1
						  e1(19),			 -- european equiv. of T-1
						  basicISDN(20),
						  primaryISDN(21),	 -- proprietary serial
						  propPointToPointSerial(22),
						  ppp(23),
						  softwareLoopback(24),
						  eon(25),			  -- CLNP over IP [11]
						  ethernet-3Mbit(26),
						  nsip(27),			  -- XNS over IP
						  slip(28),			  -- generic SLIP
						  ultra(29),		  -- ULTRA technologies
						  ds3(30),			  -- T-3
						  sip(31),			  -- SMDS
						  frame-relay(32)
					  }
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The type of interface, distinguished according to
					  the physical/link protocol(s) immediately `below'
					  the network layer in the protocol stack."
			  ::= { ifEntry 3 }

		  ifMtu OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The size of the largest datagram which can be
					  sent/received on the interface, specified in
					  octets.  For interfaces that are used for
					  transmitting network datagrams, this is the size
					  of the largest network datagram that can be sent
					  on the interface."
			  ::= { ifEntry 4 }

		  ifSpeed OBJECT-TYPE
			  SYNTAX  Gauge
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "An estimate of the interface's current bandwidth
					  in bits per second.  For interfaces which do not
					  vary in bandwidth or for those where no accurate
					  estimation can be made, this object should contain
					  the nominal bandwidth."
			  ::= { ifEntry 5 }

		  ifPhysAddress OBJECT-TYPE
			  SYNTAX  PhysAddress
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The interface's address at the protocol layer
					  immediately `below' the network layer in the
					  protocol stack.  For interfaces which do not have
					  such an address (e.g., a serial line), this object
					  should contain an octet string of zero length."
			  ::= { ifEntry 6 }

		  ifAdminStatus OBJECT-TYPE
			  SYNTAX  INTEGER {
						  up(1),	   -- ready to pass packets
						  down(2),
						  testing(3)   -- in some test mode
					  }
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The desired state of the interface.	The
					  testing(3) state indicates that no operational
					  packets can be passed."
			  ::= { ifEntry 7 }

		  ifOperStatus OBJECT-TYPE
			  SYNTAX  INTEGER {
						  up(1),	   -- ready to pass packets
						  down(2),
						  testing(3)   -- in some test mode
					  }
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The current operational state of the interface.
					  The testing(3) state indicates that no operational
					  packets can be passed."
			  ::= { ifEntry 8 }

		  ifLastChange OBJECT-TYPE
			  SYNTAX  TimeTicks
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The value of sysUpTime at the time the interface
					  entered its current operational state.  If the
					  current state was entered prior to the last re-
					  initialization of the local network management
					  subsystem, then this object contains a zero
					  value."
			  ::= { ifEntry 9 }

		  ifInOctets OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of octets received on the
					  interface, including framing characters."
			  ::= { ifEntry 10 }

		  ifInUcastPkts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of subnetwork-unicast packets
					  delivered to a higher-layer protocol."
			  ::= { ifEntry 11 }

		  ifInNUcastPkts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of non-unicast (i.e., subnetwork-
					  broadcast or subnetwork-multicast) packets
					  delivered to a higher-layer protocol."
			  ::= { ifEntry 12 }

		  ifInDiscards OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of inbound packets which were chosen
					  to be discarded even though no errors had been
					  detected to prevent their being deliverable to a
					  higher-layer protocol.  One possible reason for
					  discarding such a packet could be to free up
					  buffer space."
			  ::= { ifEntry 13 }

		  ifInErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of inbound packets that contained
					  errors preventing them from being deliverable to a
					  higher-layer protocol."
			  ::= { ifEntry 14 }
		  ifInUnknownProtos OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of packets received via the interface
					  which were discarded because of an unknown or
					  unsupported protocol."
			  ::= { ifEntry 15 }

		  ifOutOctets OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of octets transmitted out of the
					  interface, including framing characters."
			  ::= { ifEntry 16 }

		  ifOutUcastPkts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of packets that higher-level
					  protocols requested be transmitted to a
					  subnetwork-unicast address, including those that
					  were discarded or not sent."
			  ::= { ifEntry 17 }

		  ifOutNUcastPkts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of packets that higher-level
					  protocols requested be transmitted to a non-
					  unicast (i.e., a subnetwork-broadcast or
					  subnetwork-multicast) address, including those
					  that were discarded or not sent."
			  ::= { ifEntry 18 }

		  ifOutDiscards OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of outbound packets which were chosen
					  to be discarded even though no errors had been
					  detected to prevent their being transmitted.	One
					  possible reason for discarding such a packet could
					  be to free up buffer space."
			  ::= { ifEntry 19 }

		  ifOutErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of outbound packets that could not be
					  transmitted because of errors."
			  ::= { ifEntry 20 }

		  ifOutQLen OBJECT-TYPE
			  SYNTAX  Gauge
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The length of the output packet queue (in
					  packets)."
			  ::= { ifEntry 21 }

		  ifSpecific OBJECT-TYPE
			  SYNTAX  OBJECT IDENTIFIER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "A reference to MIB definitions specific to the
					  particular media being used to realize the
					  interface.  For example, if the interface is
					  realized by an ethernet, then the value of this
					  object refers to a document defining objects
					  specific to ethernet.	 If this information is not
					  present, its value should be set to the OBJECT
					  IDENTIFIER { 0 0 }, which is a syntatically valid
					  object identifier, and any conformant
					  implementation of ASN.1 and BER must be able to
					  generate and recognize this value."
			  ::= { ifEntry 22 }


		  -- the Address Translation group

		  -- Implementation of the Address Translation group is
		  -- mandatory for all systems.	 Note however that this group
		  -- is deprecated by MIB-II. That is, it is being included
		  -- solely for compatibility with MIB-I nodes, and will most
		  -- likely be excluded from MIB-III nodes.	 From MIB-II and
		  -- onwards, each network protocol group contains its own
		  -- address translation tables.

		  -- The Address Translation group contains one table which is
		  -- the union across all interfaces of the translation tables
		  -- for converting a NetworkAddress (e.g., an IP address) into
		  -- a subnetwork-specific address.	 For lack of a better term,
		  -- this document refers to such a subnetwork-specific address
		  -- as a `physical' address.

		  -- Examples of such translation tables are: for broadcast
		  -- media where ARP is in use, the translation table is
		  -- equivalent to the ARP cache; or, on an X.25 network where
		  -- non-algorithmic translation to X.121 addresses is
		  -- required, the translation table contains the
		  -- NetworkAddress to X.121 address equivalences.

		  atTable OBJECT-TYPE
			  SYNTAX  SEQUENCE OF AtEntry
			  ACCESS  not-accessible
			  STATUS  deprecated
			  DESCRIPTION
					  "The Address Translation tables contain the
					  NetworkAddress to `physical' address equivalences.
					  Some interfaces do not use translation tables for
					  determining address equivalences (e.g., DDN-X.25
					  has an algorithmic method); if all interfaces are
					  of this type, then the Address Translation table
					  is empty, i.e., has zero entries."
			  ::= { at 1 }

		  atEntry OBJECT-TYPE
			  SYNTAX  AtEntry
			  ACCESS  not-accessible
			  STATUS  deprecated
			  DESCRIPTION
					  "Each entry contains one NetworkAddress to
					  `physical' address equivalence."
			  INDEX	  { atIfIndex,
						atNetAddress }
			  ::= { atTable 1 }

		  AtEntry ::=
			  SEQUENCE {
				  atIfIndex
					  INTEGER,
				  atPhysAddress
					  PhysAddress,
				  atNetAddress
					  NetworkAddress
			  }

		  atIfIndex OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  deprecated
			  DESCRIPTION
					  "The interface on which this entry's equivalence
					  is effective.	 The interface identified by a
					  particular value of this index is the same
					  interface as identified by the same value of
					  ifIndex."
			  ::= { atEntry 1 }

		  atPhysAddress OBJECT-TYPE
			  SYNTAX  PhysAddress
			  ACCESS  read-write
			  STATUS  deprecated
			  DESCRIPTION
					  "The media-dependent `physical' address.

					  Setting this object to a null string (one of zero
					  length) has the effect of invaliding the
					  corresponding entry in the atTable object.  That
					  is, it effectively dissasociates the interface
					  identified with said entry from the mapping
					  identified with said entry.  It is an
					  implementation-specific matter as to whether the
					  agent removes an invalidated entry from the table.
					  Accordingly, management stations must be prepared
					  to receive tabular information from agents that
					  corresponds to entries not currently in use.
					  Proper interpretation of such entries requires
					  examination of the relevant atPhysAddress object."
			  ::= { atEntry 2 }

		  atNetAddress OBJECT-TYPE
			  SYNTAX  NetworkAddress
			  ACCESS  read-write
			  STATUS  deprecated
			  DESCRIPTION
					  "The NetworkAddress (e.g., the IP address)
					  corresponding to the media-dependent `physical'
					  address."
			  ::= { atEntry 3 }


		  -- the IP group

		  -- Implementation of the IP group is mandatory for all
		  -- systems.

		  ipForwarding OBJECT-TYPE
			  SYNTAX  INTEGER {
						  forwarding(1),	-- acting as a gateway
						  not-forwarding(2) -- NOT acting as a gateway
					  }
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The indication of whether this entity is acting
					  as an IP gateway in respect to the forwarding of
					  datagrams received by, but not addressed to, this
					  entity.  IP gateways forward datagrams.  IP hosts
					  do not (except those source-routed via the host).

					  Note that for some managed nodes, this object may
					  take on only a subset of the values possible.
					  Accordingly, it is appropriate for an agent to
					  return a `badValue' response if a management
					  station attempts to change this object to an
					  inappropriate value."
			  ::= { ip 1 }

		  ipDefaultTTL OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The default value inserted into the Time-To-Live
					  field of the IP header of datagrams originated at
					  this entity, whenever a TTL value is not supplied
					  by the transport layer protocol."
			  ::= { ip 2 }

		  ipInReceives OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of input datagrams received from
					  interfaces, including those received in error."
			  ::= { ip 3 }

		  ipInHdrErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of input datagrams discarded due to
					  errors in their IP headers, including bad
					  checksums, version number mismatch, other format
					  errors, time-to-live exceeded, errors discovered
					  in processing their IP options, etc."
			  ::= { ip 4 }

		  ipInAddrErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of input datagrams discarded because
					  the IP address in their IP header's destination
					  field was not a valid address to be received at
					  this entity.	This count includes invalid
					  addresses (e.g., 0.0.0.0) and addresses of
					  unsupported Classes (e.g., Class E).	For entities
					  which are not IP Gateways and therefore do not
					  forward datagrams, this counter includes datagrams
					  discarded because the destination address was not
					  a local address."
			  ::= { ip 5 }

		  ipForwDatagrams OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of input datagrams for which this
					  entity was not their final IP destination, as a
					  result of which an attempt was made to find a
					  route to forward them to that final destination.
					  In entities which do not act as IP Gateways, this
					  counter will include only those packets which were
					  Source-Routed via this entity, and the Source-
					  Route option processing was successful."
			  ::= { ip 6 }

		  ipInUnknownProtos OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of locally-addressed datagrams
					  received successfully but discarded because of an
					  unknown or unsupported protocol."
			  ::= { ip 7 }

		  ipInDiscards OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of input IP datagrams for which no
					  problems were encountered to prevent their
					  continued processing, but which were discarded
					  (e.g., for lack of buffer space).	 Note that this
					  counter does not include any datagrams discarded
					  while awaiting re-assembly."
			  ::= { ip 8 }

		  ipInDelivers OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of input datagrams successfully
					  delivered to IP user-protocols (including ICMP)."
			  ::= { ip 9 }

		  ipOutRequests OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of IP datagrams which local IP
					  user-protocols (including ICMP) supplied to IP in
					  requests for transmission.  Note that this counter
					  does not include any datagrams counted in
					  ipForwDatagrams."
			  ::= { ip 10 }

		  ipOutDiscards OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of output IP datagrams for which no
					  problem was encountered to prevent their
					  transmission to their destination, but which were
					  discarded (e.g., for lack of buffer space).  Note
					  that this counter would include datagrams counted
					  in ipForwDatagrams if any such packets met this
					  (discretionary) discard criterion."
			  ::= { ip 11 }

		  ipOutNoRoutes OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of IP datagrams discarded because no
					  route could be found to transmit them to their
					  destination.	Note that this counter includes any
					  packets counted in ipForwDatagrams which meet this
					  `no-route' criterion.	 Note that this includes any
					  datagarms which a host cannot route because all of
					  its default gateways are down."
			  ::= { ip 12 }

		  ipReasmTimeout OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The maximum number of seconds which received
					  fragments are held while they are awaiting
					  reassembly at this entity."
			  ::= { ip 13 }

		  ipReasmReqds OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of IP fragments received which needed
					  to be reassembled at this entity."
			  ::= { ip 14 }

		  ipReasmOKs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of IP datagrams successfully re-
					  assembled."
			  ::= { ip 15 }

		  ipReasmFails OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of failures detected by the IP re-
					  assembly algorithm (for whatever reason: timed
					  out, errors, etc).  Note that this is not
					  necessarily a count of discarded IP fragments
					  since some algorithms (notably the algorithm in
					  RFC 815) can lose track of the number of fragments
					  by combining them as they are received."
			  ::= { ip 16 }

		  ipFragOKs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of IP datagrams that have been
					  successfully fragmented at this entity."
			  ::= { ip 17 }

		  ipFragFails OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of IP datagrams that have been
					  discarded because they needed to be fragmented at
					  this entity but could not be, e.g., because their
					  Don't Fragment flag was set."
			  ::= { ip 18 }

		  ipFragCreates OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of IP datagram fragments that have
					  been generated as a result of fragmentation at
					  this entity."
			  ::= { ip 19 }
		  -- the IP address table

		  -- The IP address table contains this entity's IP addressing
		  -- information.

		  ipAddrTable OBJECT-TYPE
			  SYNTAX  SEQUENCE OF IpAddrEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "The table of addressing information relevant to
					  this entity's IP addresses."
			  ::= { ip 20 }

		  ipAddrEntry OBJECT-TYPE
			  SYNTAX  IpAddrEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "The addressing information for one of this
					  entity's IP addresses."
			  INDEX	  { ipAdEntAddr }
			  ::= { ipAddrTable 1 }

		  IpAddrEntry ::=
			  SEQUENCE {
				  ipAdEntAddr
					  IpAddress,
				  ipAdEntIfIndex
					  INTEGER,
				  ipAdEntNetMask
					  IpAddress,
				  ipAdEntBcastAddr
					  INTEGER,
				  ipAdEntReasmMaxSize
					  INTEGER (0..65535)
			  }

		  ipAdEntAddr OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The IP address to which this entry's addressing
					  information pertains."
			  ::= { ipAddrEntry 1 }
		  ipAdEntIfIndex OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The index value which uniquely identifies the
					  interface to which this entry is applicable.	The
					  interface identified by a particular value of this
					  index is the same interface as identified by the
					  same value of ifIndex."
			  ::= { ipAddrEntry 2 }

		  ipAdEntNetMask OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The subnet mask associated with the IP address of
					  this entry.  The value of the mask is an IP
					  address with all the network bits set to 1 and all
					  the hosts bits set to 0."
			  ::= { ipAddrEntry 3 }

		  ipAdEntBcastAddr OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The value of the least-significant bit in the IP
					  broadcast address used for sending datagrams on
					  the (logical) interface associated with the IP
					  address of this entry.  For example, when the
					  Internet standard all-ones broadcast address is
					  used, the value will be 1.  This value applies to
					  both the subnet and network broadcasts addresses
					  used by the entity on this (logical) interface."
			  ::= { ipAddrEntry 4 }

		  ipAdEntReasmMaxSize OBJECT-TYPE
			  SYNTAX  INTEGER (0..65535)
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The size of the largest IP datagram which this
					  entity can re-assemble from incoming IP fragmented
					  datagrams received on this interface."
			  ::= { ipAddrEntry 5 }
		  -- the IP routing table

		  -- The IP routing table contains an entry for each route
		  -- presently known to this entity.

		  ipRouteTable OBJECT-TYPE
			  SYNTAX  SEQUENCE OF IpRouteEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "This entity's IP Routing table."
			  ::= { ip 21 }

		  ipRouteEntry OBJECT-TYPE
			  SYNTAX  IpRouteEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "A route to a particular destination."
			  INDEX	  { ipRouteDest }
			  ::= { ipRouteTable 1 }

		  IpRouteEntry ::=
			  SEQUENCE {
				  ipRouteDest
					  IpAddress,
				  ipRouteIfIndex
					  INTEGER,
				  ipRouteMetric1
					  INTEGER,
				  ipRouteMetric2
					  INTEGER,
				  ipRouteMetric3
					  INTEGER,
				  ipRouteMetric4
					  INTEGER,
				  ipRouteNextHop
					  IpAddress,
				  ipRouteType
					  INTEGER,
				  ipRouteProto
					  INTEGER,
				  ipRouteAge
					  INTEGER,
				  ipRouteMask
					  IpAddress,
				  ipRouteMetric5
					  INTEGER,
				  ipRouteInfo
					  OBJECT IDENTIFIER
			  }

		  ipRouteDest OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The destination IP address of this route.  An
					  entry with a value of 0.0.0.0 is considered a
					  default route.  Multiple routes to a single
					  destination can appear in the table, but access to
					  such multiple entries is dependent on the table-
					  access mechanisms defined by the network
					  management protocol in use."
			  ::= { ipRouteEntry 1 }

		  ipRouteIfIndex OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The index value which uniquely identifies the
					  local interface through which the next hop of this
					  route should be reached.	The interface identified
					  by a particular value of this index is the same
					  interface as identified by the same value of
					  ifIndex."
			  ::= { ipRouteEntry 2 }

		  ipRouteMetric1 OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The primary routing metric for this route.  The
					  semantics of this metric are determined by the
					  routing-protocol specified in the route's
					  ipRouteProto value.  If this metric is not used,
					  its value should be set to -1."
			  ::= { ipRouteEntry 3 }

		  ipRouteMetric2 OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "An alternate routing metric for this route.	The
					  semantics of this metric are determined by the
					  routing-protocol specified in the route's
					  ipRouteProto value.  If this metric is not used,
					  its value should be set to -1."
			  ::= { ipRouteEntry 4 }

		  ipRouteMetric3 OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "An alternate routing metric for this route.	The
					  semantics of this metric are determined by the
					  routing-protocol specified in the route's
					  ipRouteProto value.  If this metric is not used,
					  its value should be set to -1."
			  ::= { ipRouteEntry 5 }

		  ipRouteMetric4 OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "An alternate routing metric for this route.	The
					  semantics of this metric are determined by the
					  routing-protocol specified in the route's
					  ipRouteProto value.  If this metric is not used,
					  its value should be set to -1."
			  ::= { ipRouteEntry 6 }

		  ipRouteNextHop OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The IP address of the next hop of this route.
					  (In the case of a route bound to an interface
					  which is realized via a broadcast media, the value
					  of this field is the agent's IP address on that
					  interface.)"
			  ::= { ipRouteEntry 7 }

		  ipRouteType OBJECT-TYPE
			  SYNTAX  INTEGER {
						  other(1),		   -- none of the following

						  invalid(2),	   -- an invalidated route
										   -- route to directly
						  direct(3),	   -- connected (sub-)network

										   -- route to a non-local
						  indirect(4)	   -- host/network/sub-network
					  }
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The type of route.  Note that the values
					  direct(3) and indirect(4) refer to the notion of
					  direct and indirect routing in the IP
					  architecture.

					  Setting this object to the value invalid(2) has
					  the effect of invalidating the corresponding entry
					  in the ipRouteTable object.  That is, it
					  effectively dissasociates the destination
					  identified with said entry from the route
					  identified with said entry.  It is an
					  implementation-specific matter as to whether the
					  agent removes an invalidated entry from the table.
					  Accordingly, management stations must be prepared
					  to receive tabular information from agents that
					  corresponds to entries not currently in use.
					  Proper interpretation of such entries requires
					  examination of the relevant ipRouteType object."
			  ::= { ipRouteEntry 8 }

		  ipRouteProto OBJECT-TYPE
			  SYNTAX  INTEGER {
						  other(1),		  -- none of the following

										  -- non-protocol information,
										  -- e.g., manually configured
						  local(2),		  -- entries

										  -- set via a network
						  netmgmt(3),	  -- management protocol

										  -- obtained via ICMP,
						  icmp(4),		  -- e.g., Redirect

										  -- the remaining values are
										  -- all gateway routing
										  -- protocols
						  egp(5),
						  ggp(6),
						  hello(7),
						  rip(8),
						  is-is(9),
						  es-is(10),
						  ciscoIgrp(11),
						  bbnSpfIgp(12),
						  ospf(13),
						  bgp(14)
					  }
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The routing mechanism via which this route was
					  learned.	Inclusion of values for gateway routing
					  protocols is not intended to imply that hosts
					  should support those protocols."
			  ::= { ipRouteEntry 9 }

		  ipRouteAge OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of seconds since this route was last
					  updated or otherwise determined to be correct.
					  Note that no semantics of `too old' can be implied
					  except through knowledge of the routing protocol
					  by which the route was learned."
			  ::= { ipRouteEntry 10 }

		  ipRouteMask OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "Indicate the mask to be logical-ANDed with the
					  destination address before being compared to the
					  value in the ipRouteDest field.  For those systems
					  that do not support arbitrary subnet masks, an
					  agent constructs the value of the ipRouteMask by
					  determining whether the value of the correspondent
					  ipRouteDest field belong to a class-A, B, or C
					  network, and then using one of:

						   mask			  network
						   255.0.0.0	  class-A
						   255.255.0.0	  class-B
						   255.255.255.0  class-C
					  If the value of the ipRouteDest is 0.0.0.0 (a
					  default route), then the mask value is also
					  0.0.0.0.	It should be noted that all IP routing
					  subsystems implicitly use this mechanism."
			  ::= { ipRouteEntry 11 }

		  ipRouteMetric5 OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "An alternate routing metric for this route.	The
					  semantics of this metric are determined by the
					  routing-protocol specified in the route's
					  ipRouteProto value.  If this metric is not used,
					  its value should be set to -1."
			  ::= { ipRouteEntry 12 }

		  ipRouteInfo OBJECT-TYPE
			  SYNTAX  OBJECT IDENTIFIER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "A reference to MIB definitions specific to the
					  particular routing protocol which is responsible
					  for this route, as determined by the value
					  specified in the route's ipRouteProto value.	If
					  this information is not present, its value should
					  be set to the OBJECT IDENTIFIER { 0 0 }, which is
					  a syntatically valid object identifier, and any
					  conformant implementation of ASN.1 and BER must be
					  able to generate and recognize this value."
			  ::= { ipRouteEntry 13 }


		  -- the IP Address Translation table

		  -- The IP address translation table contain the IpAddress to
		  -- `physical' address equivalences.  Some interfaces do not
		  -- use translation tables for determining address
		  -- equivalences (e.g., DDN-X.25 has an algorithmic method);
		  -- if all interfaces are of this type, then the Address
		  -- Translation table is empty, i.e., has zero entries.

		  ipNetToMediaTable OBJECT-TYPE
			  SYNTAX  SEQUENCE OF IpNetToMediaEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "The IP Address Translation table used for mapping
					  from IP addresses to physical addresses."
			  ::= { ip 22 }

		  ipNetToMediaEntry OBJECT-TYPE
			  SYNTAX  IpNetToMediaEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "Each entry contains one IpAddress to `physical'
					  address equivalence."
			  INDEX	  { ipNetToMediaIfIndex,
						ipNetToMediaNetAddress }
			  ::= { ipNetToMediaTable 1 }

		  IpNetToMediaEntry ::=
			  SEQUENCE {
				  ipNetToMediaIfIndex
					  INTEGER,
				  ipNetToMediaPhysAddress
					  PhysAddress,
				  ipNetToMediaNetAddress
					  IpAddress,
				  ipNetToMediaType
					  INTEGER
			  }

		  ipNetToMediaIfIndex OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The interface on which this entry's equivalence
					  is effective.	 The interface identified by a
					  particular value of this index is the same
					  interface as identified by the same value of
					  ifIndex."
			  ::= { ipNetToMediaEntry 1 }

		  ipNetToMediaPhysAddress OBJECT-TYPE
			  SYNTAX  PhysAddress
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The media-dependent `physical' address."
			  ::= { ipNetToMediaEntry 2 }
		  ipNetToMediaNetAddress OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The IpAddress corresponding to the media-
					  dependent `physical' address."
			  ::= { ipNetToMediaEntry 3 }

		  ipNetToMediaType OBJECT-TYPE
			  SYNTAX  INTEGER {
						  other(1),		   -- none of the following
						  invalid(2),	   -- an invalidated mapping
						  dynamic(3),
						  static(4)
					  }
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The type of mapping.

					  Setting this object to the value invalid(2) has
					  the effect of invalidating the corresponding entry
					  in the ipNetToMediaTable.	 That is, it effectively
					  dissasociates the interface identified with said
					  entry from the mapping identified with said entry.
					  It is an implementation-specific matter as to
					  whether the agent removes an invalidated entry
					  from the table.  Accordingly, management stations
					  must be prepared to receive tabular information
					  from agents that corresponds to entries not
					  currently in use.	 Proper interpretation of such
					  entries requires examination of the relevant
					  ipNetToMediaType object."
			  ::= { ipNetToMediaEntry 4 }


		  -- additional IP objects

		  ipRoutingDiscards OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of routing entries which were chosen
					  to be discarded even though they are valid.  One
					  possible reason for discarding such an entry could
					  be to free-up buffer space for other routing
					  entries."
			  ::= { ip 23 }


		  -- the ICMP group

		  -- Implementation of the ICMP group is mandatory for all
		  -- systems.

		  icmpInMsgs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of ICMP messages which the
					  entity received.	Note that this counter includes
					  all those counted by icmpInErrors."
			  ::= { icmp 1 }

		  icmpInErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP messages which the entity
					  received but determined as having ICMP-specific
					  errors (bad ICMP checksums, bad length, etc.)."
			  ::= { icmp 2 }

		  icmpInDestUnreachs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Destination Unreachable
					  messages received."
			  ::= { icmp 3 }

		  icmpInTimeExcds OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Time Exceeded messages
					  received."
			  ::= { icmp 4 }
		  icmpInParmProbs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Parameter Problem messages
					  received."
			  ::= { icmp 5 }

		  icmpInSrcQuenchs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Source Quench messages
					  received."
			  ::= { icmp 6 }

		  icmpInRedirects OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Redirect messages received."
			  ::= { icmp 7 }

		  icmpInEchos OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Echo (request) messages
					  received."
			  ::= { icmp 8 }

		  icmpInEchoReps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Echo Reply messages received."
			  ::= { icmp 9 }

		  icmpInTimestamps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Timestamp (request) messages
					  received."
			  ::= { icmp 10 }

		  icmpInTimestampReps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Timestamp Reply messages
					  received."
			  ::= { icmp 11 }

		  icmpInAddrMasks OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Address Mask Request messages
					  received."
			  ::= { icmp 12 }

		  icmpInAddrMaskReps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Address Mask Reply messages
					  received."
			  ::= { icmp 13 }

		  icmpOutMsgs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of ICMP messages which this
					  entity attempted to send.	 Note that this counter
					  includes all those counted by icmpOutErrors."
			  ::= { icmp 14 }

		  icmpOutErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP messages which this entity did
					  not send due to problems discovered within ICMP
					  such as a lack of buffers.  This value should not
					  include errors discovered outside the ICMP layer
					  such as the inability of IP to route the resultant
					  datagram.	 In some implementations there may be no
					  types of error which contribute to this counter's
					  value."
			  ::= { icmp 15 }

		  icmpOutDestUnreachs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Destination Unreachable
					  messages sent."
			  ::= { icmp 16 }

		  icmpOutTimeExcds OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Time Exceeded messages sent."
			  ::= { icmp 17 }

		  icmpOutParmProbs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Parameter Problem messages
					  sent."
			  ::= { icmp 18 }

		  icmpOutSrcQuenchs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Source Quench messages sent."
			  ::= { icmp 19 }

		  icmpOutRedirects OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Redirect messages sent.  For a
					  host, this object will always be zero, since hosts
					  do not send redirects."
			  ::= { icmp 20 }

		  icmpOutEchos OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Echo (request) messages sent."
			  ::= { icmp 21 }

		  icmpOutEchoReps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Echo Reply messages sent."
			  ::= { icmp 22 }

		  icmpOutTimestamps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Timestamp (request) messages
					  sent."
			  ::= { icmp 23 }

		  icmpOutTimestampReps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Timestamp Reply messages
					  sent."
			  ::= { icmp 24 }

		  icmpOutAddrMasks OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Address Mask Request messages
					  sent."
			  ::= { icmp 25 }
		  icmpOutAddrMaskReps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of ICMP Address Mask Reply messages
					  sent."
			  ::= { icmp 26 }


		  -- the TCP group

		  -- Implementation of the TCP group is mandatory for all
		  -- systems that implement the TCP.

		  -- Note that instances of object types that represent
		  -- information about a particular TCP connection are
		  -- transient; they persist only as long as the connection
		  -- in question.

		  tcpRtoAlgorithm OBJECT-TYPE
			  SYNTAX  INTEGER {
						  other(1),	   -- none of the following

						  constant(2), -- a constant rto
						  rsre(3),	   -- MIL-STD-1778, Appendix B
						  vanj(4)	   -- Van Jacobson's algorithm [10]
					  }
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The algorithm used to determine the timeout value
					  used for retransmitting unacknowledged octets."
			  ::= { tcp 1 }

		  tcpRtoMin OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The minimum value permitted by a TCP
					  implementation for the retransmission timeout,
					  measured in milliseconds.	 More refined semantics
					  for objects of this type depend upon the algorithm
					  used to determine the retransmission timeout.	 In
					  particular, when the timeout algorithm is rsre(3),
					  an object of this type has the semantics of the
					  LBOUND quantity described in RFC 793."
			  ::= { tcp 2 }


		  tcpRtoMax OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The maximum value permitted by a TCP
					  implementation for the retransmission timeout,
					  measured in milliseconds.	 More refined semantics
					  for objects of this type depend upon the algorithm
					  used to determine the retransmission timeout.	 In
					  particular, when the timeout algorithm is rsre(3),
					  an object of this type has the semantics of the
					  UBOUND quantity described in RFC 793."
			  ::= { tcp 3 }

		  tcpMaxConn OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The limit on the total number of TCP connections
					  the entity can support.  In entities where the
					  maximum number of connections is dynamic, this
					  object should contain the value -1."
			  ::= { tcp 4 }

		  tcpActiveOpens OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of times TCP connections have made a
					  direct transition to the SYN-SENT state from the
					  CLOSED state."
			  ::= { tcp 5 }

		  tcpPassiveOpens OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of times TCP connections have made a
					  direct transition to the SYN-RCVD state from the
					  LISTEN state."
			  ::= { tcp 6 }
		  tcpAttemptFails OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of times TCP connections have made a
					  direct transition to the CLOSED state from either
					  the SYN-SENT state or the SYN-RCVD state, plus the
					  number of times TCP connections have made a direct
					  transition to the LISTEN state from the SYN-RCVD
					  state."
			  ::= { tcp 7 }

		  tcpEstabResets OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of times TCP connections have made a
					  direct transition to the CLOSED state from either
					  the ESTABLISHED state or the CLOSE-WAIT state."
			  ::= { tcp 8 }

		  tcpCurrEstab OBJECT-TYPE
			  SYNTAX  Gauge
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of TCP connections for which the
					  current state is either ESTABLISHED or CLOSE-
					  WAIT."
			  ::= { tcp 9 }

		  tcpInSegs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of segments received, including
					  those received in error.	This count includes
					  segments received on currently established
					  connections."
			  ::= { tcp 10 }

		  tcpOutSegs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of segments sent, including
					  those on current connections but excluding those
					  containing only retransmitted octets."
			  ::= { tcp 11 }

		  tcpRetransSegs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of segments retransmitted - that
					  is, the number of TCP segments transmitted
					  containing one or more previously transmitted
					  octets."
			  ::= { tcp 12 }


		  -- the TCP Connection table

		  -- The TCP connection table contains information about this
		  -- entity's existing TCP connections.

		  tcpConnTable OBJECT-TYPE
			  SYNTAX  SEQUENCE OF TcpConnEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "A table containing TCP connection-specific
					  information."
			  ::= { tcp 13 }

		  tcpConnEntry OBJECT-TYPE
			  SYNTAX  TcpConnEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "Information about a particular current TCP
					  connection.  An object of this type is transient,
					  in that it ceases to exist when (or soon after)
					  the connection makes the transition to the CLOSED
					  state."
			  INDEX	  { tcpConnLocalAddress,
						tcpConnLocalPort,
						tcpConnRemAddress,
						tcpConnRemPort }
			  ::= { tcpConnTable 1 }
		  TcpConnEntry ::=
			  SEQUENCE {
				  tcpConnState
					  INTEGER,
				  tcpConnLocalAddress
					  IpAddress,
				  tcpConnLocalPort
					  INTEGER (0..65535),
				  tcpConnRemAddress
					  IpAddress,
				  tcpConnRemPort
					  INTEGER (0..65535)
			  }

		  tcpConnState OBJECT-TYPE
			  SYNTAX  INTEGER {
						  closed(1),
						  listen(2),
						  synSent(3),
						  synReceived(4),
						  established(5),
						  finWait1(6),
						  finWait2(7),
						  closeWait(8),
						  lastAck(9),
						  closing(10),
						  timeWait(11),
						  deleteTCB(12)
					  }
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "The state of this TCP connection.

					  The only value which may be set by a management
					  station is deleteTCB(12).	 Accordingly, it is
					  appropriate for an agent to return a `badValue'
					  response if a management station attempts to set
					  this object to any other value.

					  If a management station sets this object to the
					  value deleteTCB(12), then this has the effect of
					  deleting the TCB (as defined in RFC 793) of the
					  corresponding connection on the managed node,
					  resulting in immediate termination of the
					  connection.

					  As an implementation-specific option, a RST
					  segment may be sent from the managed node to the
					  other TCP endpoint (note however that RST segments
					  are not sent reliably)."
			  ::= { tcpConnEntry 1 }

		  tcpConnLocalAddress OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The local IP address for this TCP connection.  In
					  the case of a connection in the listen state which
					  is willing to accept connections for any IP
					  interface associated with the node, the value
					  0.0.0.0 is used."
			  ::= { tcpConnEntry 2 }

		  tcpConnLocalPort OBJECT-TYPE
			  SYNTAX  INTEGER (0..65535)
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The local port number for this TCP connection."
			  ::= { tcpConnEntry 3 }

		  tcpConnRemAddress OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The remote IP address for this TCP connection."
			  ::= { tcpConnEntry 4 }

		  tcpConnRemPort OBJECT-TYPE
			  SYNTAX  INTEGER (0..65535)
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The remote port number for this TCP connection."
			  ::= { tcpConnEntry 5 }


		  -- additional TCP objects

		  tcpInErrs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of segments received in error
					  (e.g., bad TCP checksums)."
			  ::= { tcp 14 }

		  tcpOutRsts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of TCP segments sent containing the
					  RST flag."
			  ::= { tcp 15 }


		  -- the UDP group

		  -- Implementation of the UDP group is mandatory for all
		  -- systems which implement the UDP.

		  udpInDatagrams OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of UDP datagrams delivered to
					  UDP users."
			  ::= { udp 1 }

		  udpNoPorts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of received UDP datagrams for
					  which there was no application at the destination
					  port."
			  ::= { udp 2 }

		  udpInErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of received UDP datagrams that could
					  not be delivered for reasons other than the lack
					  of an application at the destination port."
			  ::= { udp 3 }
		  udpOutDatagrams OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of UDP datagrams sent from this
					  entity."
			  ::= { udp 4 }


		  -- the UDP Listener table

		  -- The UDP listener table contains information about this
		  -- entity's UDP end-points on which a local application is
		  -- currently accepting datagrams.

		  udpTable OBJECT-TYPE
			  SYNTAX  SEQUENCE OF UdpEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "A table containing UDP listener information."
			  ::= { udp 5 }

		  udpEntry OBJECT-TYPE
			  SYNTAX  UdpEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "Information about a particular current UDP
					  listener."
			  INDEX	  { udpLocalAddress, udpLocalPort }
			  ::= { udpTable 1 }

		  UdpEntry ::=
			  SEQUENCE {
				  udpLocalAddress
					  IpAddress,
				  udpLocalPort
					  INTEGER (0..65535)
			  }

		  udpLocalAddress OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The local IP address for this UDP listener.	In
					  the case of a UDP listener which is willing to
					  accept datagrams for any IP interface associated
					  with the node, the value 0.0.0.0 is used."
			  ::= { udpEntry 1 }

		  udpLocalPort OBJECT-TYPE
			  SYNTAX  INTEGER (0..65535)
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The local port number for this UDP listener."
			  ::= { udpEntry 2 }


		  -- the EGP group

		  -- Implementation of the EGP group is mandatory for all
		  -- systems which implement the EGP.

		  egpInMsgs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of EGP messages received without
					  error."
			  ::= { egp 1 }

		  egpInErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of EGP messages received that proved
					  to be in error."
			  ::= { egp 2 }

		  egpOutMsgs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of locally generated EGP
					  messages."
			  ::= { egp 3 }

		  egpOutErrors OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of locally generated EGP messages not
					  sent due to resource limitations within an EGP
					  entity."
			  ::= { egp 4 }


		  -- the EGP Neighbor table

		  -- The EGP neighbor table contains information about this
		  -- entity's EGP neighbors.

		  egpNeighTable OBJECT-TYPE
			  SYNTAX  SEQUENCE OF EgpNeighEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "The EGP neighbor table."
			  ::= { egp 5 }

		  egpNeighEntry OBJECT-TYPE
			  SYNTAX  EgpNeighEntry
			  ACCESS  not-accessible
			  STATUS  mandatory
			  DESCRIPTION
					  "Information about this entity's relationship with
					  a particular EGP neighbor."
			  INDEX	  { egpNeighAddr }
			  ::= { egpNeighTable 1 }

		  EgpNeighEntry ::=
			  SEQUENCE {
				  egpNeighState
					  INTEGER,
				  egpNeighAddr
					  IpAddress,
				  egpNeighAs
					  INTEGER,
				  egpNeighInMsgs
					  Counter,
				  egpNeighInErrs
					  Counter,
				  egpNeighOutMsgs
					  Counter,
				  egpNeighOutErrs
					  Counter,
				  egpNeighInErrMsgs
					  Counter,
				  egpNeighOutErrMsgs
					  Counter,
				  egpNeighStateUps
					  Counter,
				  egpNeighStateDowns
					  Counter,
				  egpNeighIntervalHello
					  INTEGER,
				  egpNeighIntervalPoll
					  INTEGER,
				  egpNeighMode
					  INTEGER,
				  egpNeighEventTrigger
					  INTEGER
			  }

		  egpNeighState OBJECT-TYPE
			  SYNTAX  INTEGER {
						  idle(1),
						  acquisition(2),
						  down(3),
						  up(4),
						  cease(5)
					  }
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The EGP state of the local system with respect to
					  this entry's EGP neighbor.  Each EGP state is
					  represented by a value that is one greater than
					  the numerical value associated with said state in
					  RFC 904."
			  ::= { egpNeighEntry 1 }

		  egpNeighAddr OBJECT-TYPE
			  SYNTAX  IpAddress
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The IP address of this entry's EGP neighbor."
			  ::= { egpNeighEntry 2 }

		  egpNeighAs OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The autonomous system of this EGP peer.	Zero
					  should be specified if the autonomous system
					  number of the neighbor is not yet known."
			  ::= { egpNeighEntry 3 }

		  egpNeighInMsgs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of EGP messages received without error
					  from this EGP peer."
			  ::= { egpNeighEntry 4 }

		  egpNeighInErrs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of EGP messages received from this EGP
					  peer that proved to be in error (e.g., bad EGP
					  checksum)."
			  ::= { egpNeighEntry 5 }

		  egpNeighOutMsgs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of locally generated EGP messages to
					  this EGP peer."
			  ::= { egpNeighEntry 6 }

		  egpNeighOutErrs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of locally generated EGP messages not
					  sent to this EGP peer due to resource limitations
					  within an EGP entity."
			  ::= { egpNeighEntry 7 }

		  egpNeighInErrMsgs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of EGP-defined error messages received
					  from this EGP peer."
			  ::= { egpNeighEntry 8 }

		  egpNeighOutErrMsgs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of EGP-defined error messages sent to
					  this EGP peer."
			  ::= { egpNeighEntry 9 }

		  egpNeighStateUps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of EGP state transitions to the UP
					  state with this EGP peer."
			  ::= { egpNeighEntry 10 }

		  egpNeighStateDowns OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The number of EGP state transitions from the UP
					  state to any other state with this EGP peer."
			  ::= { egpNeighEntry 11 }

		  egpNeighIntervalHello OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The interval between EGP Hello command
					  retransmissions (in hundredths of a second).	This
					  represents the t1 timer as defined in RFC 904."
			  ::= { egpNeighEntry 12 }

		  egpNeighIntervalPoll OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The interval between EGP poll command
					  retransmissions (in hundredths of a second).	This
					  represents the t3 timer as defined in RFC 904."
			  ::= { egpNeighEntry 13 }

		  egpNeighMode OBJECT-TYPE
			  SYNTAX  INTEGER { active(1), passive(2) }
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The polling mode of this EGP entity, either
					  passive or active."
			  ::= { egpNeighEntry 14 }

		  egpNeighEventTrigger OBJECT-TYPE
			  SYNTAX  INTEGER { start(1), stop(2) }
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "A control variable used to trigger operator-
					  initiated Start and Stop events.	When read, this
					  variable always returns the most recent value that
					  egpNeighEventTrigger was set to.	If it has not
					  been set since the last initialization of the
					  network management subsystem on the node, it
					  returns a value of `stop'.

					  When set, this variable causes a Start or Stop
					  event on the specified neighbor, as specified on
					  pages 8-10 of RFC 904.  Briefly, a Start event
					  causes an Idle peer to begin neighbor acquisition
					  and a non-Idle peer to reinitiate neighbor
					  acquisition.	A stop event causes a non-Idle peer
					  to return to the Idle state until a Start event
					  occurs, either via egpNeighEventTrigger or
					  otherwise."
			  ::= { egpNeighEntry 15 }


		  -- additional EGP objects

		  egpAs OBJECT-TYPE
			  SYNTAX  INTEGER
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The autonomous system number of this EGP entity."
			  ::= { egp 6 }
		  -- the Transmission group

		  -- Based on the transmission media underlying each interface
		  -- on a system, the corresponding portion of the Transmission
		  -- group is mandatory for that system.

		  -- When Internet-standard definitions for managing
		  -- transmission media are defined, the transmission group is
		  -- used to provide a prefix for the names of those objects.

		  -- Typically, such definitions reside in the experimental
		  -- portion of the MIB until they are "proven", then as a
		  -- part of the Internet standardization process, the
		  -- definitions are accordingly elevated and a new object
		  -- identifier, under the transmission group is defined. By
		  -- convention, the name assigned is:
		  --
		  --	 type OBJECT IDENTIFIER	   ::= { transmission number }
		  --
		  -- where "type" is the symbolic value used for the media in
		  -- the ifType column of the ifTable object, and "number" is
		  -- the actual integer value corresponding to the symbol.


		  -- the SNMP group

		  -- Implementation of the SNMP group is mandatory for all
		  -- systems which support an SNMP protocol entity.	 Some of
		  -- the objects defined below will be zero-valued in those
		  -- SNMP implementations that are optimized to support only
		  -- those functions specific to either a management agent or
		  -- a management station.	In particular, it should be
		  -- observed that the objects below refer to an SNMP entity,
		  -- and there may be several SNMP entities residing on a
		  -- managed node (e.g., if the node is hosting acting as
		  -- a management station).

		  snmpInPkts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of Messages delivered to the
					  SNMP entity from the transport service."
			  ::= { snmp 1 }

		  snmpOutPkts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Messages which were
					  passed from the SNMP protocol entity to the
					  transport service."
			  ::= { snmp 2 }

		  snmpInBadVersions OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Messages which were
					  delivered to the SNMP protocol entity and were for
					  an unsupported SNMP version."
			  ::= { snmp 3 }

		  snmpInBadCommunityNames OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Messages delivered to
					  the SNMP protocol entity which used a SNMP
					  community name not known to said entity."
			  ::= { snmp 4 }

		  snmpInBadCommunityUses OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Messages delivered to
					  the SNMP protocol entity which represented an SNMP
					  operation which was not allowed by the SNMP
					  community named in the Message."
			  ::= { snmp 5 }

		  snmpInASNParseErrs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of ASN.1 or BER errors
					  encountered by the SNMP protocol entity when
					  decoding received SNMP Messages."
			  ::= { snmp 6 }
		  -- { snmp 7 } is not used

		  snmpInTooBigs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP PDUs which were
					  delivered to the SNMP protocol entity and for
					  which the value of the error-status field is
					  `tooBig'."
			  ::= { snmp 8 }

		  snmpInNoSuchNames OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP PDUs which were
					  delivered to the SNMP protocol entity and for
					  which the value of the error-status field is
					  `noSuchName'."
			  ::= { snmp 9 }

		  snmpInBadValues OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP PDUs which were
					  delivered to the SNMP protocol entity and for
					  which the value of the error-status field is
					  `badValue'."
			  ::= { snmp 10 }

		  snmpInReadOnlys OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number valid SNMP PDUs which were
					  delivered to the SNMP protocol entity and for
					  which the value of the error-status field is
					  `readOnly'.  It should be noted that it is a
					  protocol error to generate an SNMP PDU which
					  contains the value `readOnly' in the error-status
					  field, as such this object is provided as a means
					  of detecting incorrect implementations of the
					  SNMP."
			  ::= { snmp 11 }

		  snmpInGenErrs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP PDUs which were
					  delivered to the SNMP protocol entity and for
					  which the value of the error-status field is
					  `genErr'."
			  ::= { snmp 12 }

		  snmpInTotalReqVars OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of MIB objects which have been
					  retrieved successfully by the SNMP protocol entity
					  as the result of receiving valid SNMP Get-Request
					  and Get-Next PDUs."
			  ::= { snmp 13 }

		  snmpInTotalSetVars OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of MIB objects which have been
					  altered successfully by the SNMP protocol entity
					  as the result of receiving valid SNMP Set-Request
					  PDUs."
			  ::= { snmp 14 }

		  snmpInGetRequests OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Get-Request PDUs which
					  have been accepted and processed by the SNMP
					  protocol entity."
			  ::= { snmp 15 }

		  snmpInGetNexts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Get-Next PDUs which have
					  been accepted and processed by the SNMP protocol
					  entity."
			  ::= { snmp 16 }

		  snmpInSetRequests OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Set-Request PDUs which
					  have been accepted and processed by the SNMP
					  protocol entity."
			  ::= { snmp 17 }

		  snmpInGetResponses OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Get-Response PDUs which
					  have been accepted and processed by the SNMP
					  protocol entity."
			  ::= { snmp 18 }

		  snmpInTraps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Trap PDUs which have
					  been accepted and processed by the SNMP protocol
					  entity."
			  ::= { snmp 19 }

		  snmpOutTooBigs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP PDUs which were
					  generated by the SNMP protocol entity and for
					  which the value of the error-status field is
					  `tooBig.'"
			  ::= { snmp 20 }
		  snmpOutNoSuchNames OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP PDUs which were
					  generated by the SNMP protocol entity and for
					  which the value of the error-status is
					  `noSuchName'."
			  ::= { snmp 21 }

		  snmpOutBadValues OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP PDUs which were
					  generated by the SNMP protocol entity and for
					  which the value of the error-status field is
					  `badValue'."
			  ::= { snmp 22 }

		  -- { snmp 23 } is not used

		  snmpOutGenErrs OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP PDUs which were
					  generated by the SNMP protocol entity and for
					  which the value of the error-status field is
					  `genErr'."
			  ::= { snmp 24 }

		  snmpOutGetRequests OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Get-Request PDUs which
					  have been generated by the SNMP protocol entity."
			  ::= { snmp 25 }

		  snmpOutGetNexts OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Get-Next PDUs which have
					  been generated by the SNMP protocol entity."
			  ::= { snmp 26 }

		  snmpOutSetRequests OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Set-Request PDUs which
					  have been generated by the SNMP protocol entity."
			  ::= { snmp 27 }

		  snmpOutGetResponses OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Get-Response PDUs which
					  have been generated by the SNMP protocol entity."
			  ::= { snmp 28 }

		  snmpOutTraps OBJECT-TYPE
			  SYNTAX  Counter
			  ACCESS  read-only
			  STATUS  mandatory
			  DESCRIPTION
					  "The total number of SNMP Trap PDUs which have
					  been generated by the SNMP protocol entity."
			  ::= { snmp 29 }

		  snmpEnableAuthenTraps OBJECT-TYPE
			  SYNTAX  INTEGER { enabled(1), disabled(2) }
			  ACCESS  read-write
			  STATUS  mandatory
			  DESCRIPTION
					  "Indicates whether the SNMP agent process is
					  permitted to generate authentication-failure
					  traps.  The value of this object overrides any
					  configuration information; as such, it provides a
					  means whereby all authentication-failure traps may
					  be disabled.

					  Note that it is strongly recommended that this
					  object be stored in non-volatile memory so that it
					  remains constant between re-initializations of the
					  network management system."
			  ::= { snmp 30 }

		  END

7.	Acknowledgements

   This document was produced by the SNMP Working Group:

			   Anne Ambler, Spider
			   Karl Auerbach, Sun
			   Fred Baker, ACC
			   David Bridgham, Epilogue Technology
			   Ken Brinkerhoff
			   Ron Broersma, NOSC
			   Brian Brown, Synoptics
			   Jack Brown, US Army
			   Theodore Brunner, Bellcore
			   Jeff Buffum, HP
			   Jeffrey Buffum, HP
			   John Burress, Wellfleet
			   Jeffrey D. Case, University of Tennessee at Knoxville
			   Chris Chiptasso, Spartacus
			   Paul Ciarfella, DEC
			   Bob Collet
			   John Cook, Chipcom
			   Tracy Cox, Bellcore
			   James R. Davin, MIT-LCS
			   Eric Decker, cisco
			   Kurt Dobbins, Cabletron
			   Nadya El-Afandi, Network Systems
			   Gary Ellis, HP
			   Fred Engle
			   Mike Erlinger
			   Mark S. Fedor, PSI
			   Richard Fox, Synoptics
			   Karen Frisa, CMU
			   Stan Froyd, ACC
			   Chris Gunner, DEC
			   Fred Harris, University of Tennessee at Knoxville
			   Ken Hibbard, Xylogics
			   Ole Jacobsen, Interop
			   Ken Jones
			   Satish Joshi, Synoptics
			   Frank Kastenholz, Racal-Interlan
			   Shimshon Kaufman, Spartacus
			   Ken Key, University of Tennessee at Knoxville
			   Jim Kinder, Fibercom
			   Alex Koifman, BBN
			   Christopher Kolb, PSI
			   Cheryl Krupczak, NCR
			   Paul Langille, DEC
			   Martin Lee Schoffstall, PSI
			   Peter Lin, Vitalink
			   John Lunny, TWG
			   Carl Malamud
			   Gary Malkin, FTP Software, Inc.
			   Randy Mayhew, University of Tennessee at Knoxville
			   Keith McCloghrie, Hughes LAN Systems
			   Donna McMaster, David Systems
			   Lynn Monsanto, Sun
			   Dave Perkins, 3COM
			   Jim Reinstedler, Ungerman Bass
			   Anil Rijsinghani, DEC
			   Kathy Rinehart, Arnold AFB
			   Kary Robertson
			   Marshall T. Rose, PSI (chair)
			   L. Michael Sabo, NCSC
			   Jon Saperia, DEC
			   Greg Satz, cisco
			   Martin Schoffstall, PSI
			   John Seligson
			   Steve Sherry, Xyplex
			   Fei Shu, NEC
			   Sam Sjogren, TGV
			   Mark Sleeper, Sparta
			   Lance Sprung
			   Mike St.Johns
			   Bob Stewart, Xyplex
			   Emil Sturniold
			   Kaj Tesink, Bellcore
			   Geoff Thompson, Synoptics
			   Dean Throop, Data General
			   Bill Townsend, Xylogics
			   Maurice Turcotte, Racal-Milgo
			   Kannan Varadhou
			   Sudhanshu Verma, HP
			   Bill Versteeg, Network Research Corporation
			   Warren Vik, Interactive Systems
			   David Waitzman, BBN
			   Steve Waldbusser, CMU
			   Dan Wintringhan
			   David Wood
			   Wengyik Yeong, PSI
			   Jeff Young, Cray Research

   In addition, the comments of the following individuals are also
   acknolwedged:

			   Craig A. Finseth, Minnesota Supercomputer Center, Inc.
			   Jeffrey C. Honig, Cornell University Theory Center
			   Philip R. Karn, Bellcore

8.	References

   [1] Cerf, V., "IAB Recommendations for the Development of Internet
	   Network Management Standards", RFC 1052, NRI, April 1988.

   [2] Rose M., and K. McCloghrie, "Structure and Identification of
	   Management Information for TCP/IP-based internets," RFC 1065,
	   TWG, August 1988.

   [3] McCloghrie, K., and M. Rose, "Management Information Base for
	   Network Management of TCP/IP-based internets, RFC 1066, TWG,
	   August 1988.

   [4] Cerf, V., "Report of the Second Ad Hoc Network Management Review
	   Group", RFC 1109, NRI, August 1989.

   [5] Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple
	   Network Management Protocol (SNMP)", RFC 1098, University of
	   Tennessee at Knoxville, NYSERNet, Inc., Rensselaer Polytechnic
	   Institute, MIT Laboratory for Computer Science, April 1989.

   [6] Postel, J., and J. Reynolds, "TELNET Protocol Specification", RFC
	   854, USC/Information Sciences Institute, May 1983.

   [7] Satz, G., "Connectionless Network Protocol (ISO 8473) and End
	   System to Intermediate System (ISO 9542) Management Information
	   Base", RFC 1162, cisco Systems, Inc., June 1990.

   [8] Information processing systems - Open Systems Interconnection -
	   Specification of Abstract Syntax Notation One (ASN.1),
	   International Organization for Standardization, International
	   Standard 8824, December 1987.

   [9] Information processing systems - Open Systems Interconnection -
	   Specification of Basic Encoding Rules for Abstract Notation One
	   (ASN.1), International Organization for Standardization,
	   International Standard 8825, December 1987.

  [10] Jacobson, V., "Congestion Avoidance and Control", SIGCOMM 1988,
	   Stanford, California.

  [11] Hagens, R., Hall, N., and M. Rose, "Use of the Internet as a
	   Subnetwork for Experimentation with the OSI Network Layer", RFC
	   1070, U of Wiscsonsin - Madison, U of Wiscsonsin - Madison, The
	   Wollongong Group, February 1989.

  [12] Rose M., and K. McCloghrie, "Structure and Identification of
	   Management Information for TCP/IP-based internets", RFC 1155,
	   Performance Systems International, Hughes LAN Systems, May 1990.

  [13] Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple
	   Network Management Protocol", RFC 1157, SNMP Research,
	   Performance Systems International, Performance Systems
	   International, MIT Laboratory for Computer Science, May 1990.

  [14] Rose, M., and K. McCloghrie, Editors, "Concise MIB Definitions",
	   RFC 1212, Performance Systems International, Hughes LAN Systems,
	   March 1991.

9.	Security Considerations

   Security issues are not discussed in this memo.

10.	 Authors' Addresses

   Keith McCloghrie
   Hughes LAN Systems
   1225 Charleston Road
   Mountain View, CA 94043
   1225 Charleston Road
   Mountain View, CA 94043

   Phone: (415) 966-7934

   EMail: kzm@hls.com


   Marshall T. Rose
   Performance Systems International
   5201 Great America Parkway
   Suite 3106
   Santa Clara, CA	95054

   Phone: +1 408 562 6222

   EMail: mrose@psi.com
   X.500:  rose, psi, us


SNMP Working Group											   [Page 70]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\commands\ipconfig\readme.txt ===
Usage:

ipconfig [option]
where option is one of:
/all -- show all information
/renew [Adapter] -- renew adapter or all adapters if none provided
/release [Adapter] -- release ...
/flushdns -- flush dns registrations
/registerdns -- static refresh (causes dns registrations?)
/displaydns -- show dns cache
/displayclassid Adapter -- show class id info
/setclassid Adapter ClassId
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\rip\iprip.ini ===
\Registry\Machine

    System
      CurrentControlSet
        Services
            IpRip 
                Parameters
                    SilentRip = REG_DWORD 0x0
                    AcceptHostRoutes = REG_DWORD 0x0
                    AnnounceHostRoutes = REG_DWORD 0x0
                    AcceptDefaultRoutes = REG_DWORD 0x0
                    AnnounceDefaultRoutes = REG_DWORD 0x0
                    EnablePoisonedReverse = REG_DWORD 0x1
                    EnableSplitHorizon = REG_DWORD 0x1
                    EnableTriggeredUpdates = REG_DWORD 0x1
                    RouteTimeout = REG_DWORD 0xb4
                    GarbageTimeout = REG_DWORD 0x78
                    LoggingLevel = REG_DWORD 0x3
                    UpdateFrequency = REG_DWORD 0x1e
                    OverwriteStaticRoutes = REG_DWORD 0x0
                    MaxTriggeredUpdateFrequency = REG_DWORD 0x05
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\rip\rip.ini ===
\Registry\Machine

    System
      CurrentControlSet
        Services
            Rip
                DependOnService = REG_MULTI_SZ "Tcpip" "EventLog"
                DisplayName = REG_SZ RIP Service
                ErrorControl = REG_DWORD 0x1
                ImagePath = REG_EXPAND_SZ %SystemRoot%\System32\rip.exe
                ObjectName = REG_SZ LocalSystem
                Start = REG_DWORD 0x2
                Type = REG_DWORD 0x10

            EventLog
                System
                    Rip
                        EventMessageFile = REG_EXPAND_SZ %SystemRoot%\System32\rip.exe
                        TypesSupported = REG_DWORD 0x7
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\simple\calltree.txt ===
SimpInitializeEventLog
SimpTerminateEventLog
SimpLogEvent
              LogEventWorker
LogEventWorker
              DbgPrint
ServiceEntry
              WSAStartup
              socket
              WSAGetLastError
              select
              __WSAFDIsSet
              accept
              send
              closesocket
              ioctlsocket
              recvfrom
              sendto
              ReadRegistry
              AnnounceServiceStatus
              GetServicePort
              InitializeChargen
              InitializeQotdQuotes
              FormatQotdResponse
              FormatDaytimeResponse
              DeleteTcpClient
              AbortTcpClient
              AcceptTcpClient
              OpenUdpSocket
              OpenTcpSocket
              SimpLogEvent
              SimpTerminateEventLog
              SimpInitializeEventLog
OpenTcpSocket
              bind
              listen
              setsockopt
              socket
              closesocket
OpenUdpSocket
              bind
              socket
              closesocket
AcceptTcpClient
              accept
              CreateThread ThreadEntry
              AbortTcpClient
AbortTcpClient
              setsockopt
              closesocket
DeleteTcpClient
              setsockopt
              __WSAFDIsSet
              closesocket
              ioctlsocket
              AbortTcpClient
FormatDaytimeResponse
FormatQotdResponse
InitializeQotdQuotes
              SimpLogEvent
InitializeChargen
GetServicePort
              getservbyname
AnnounceServiceStatus
ControlResponse
              closesocket
              AnnounceServiceStatus
ReadRegistry
ThreadEntry
              recv
              setsockopt
              WSAGetLastError
              select
              send
              ioctlsocket
              DeleteTcpClient
DbgPrint
sendto
recvfrom
ioctlsocket
closesocket
send
accept
__WSAFDIsSet
select
WSAGetLastError
socket
WSAStartup
setsockopt
listen
bind
recv
getservbyname
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\simple\rfc1700.txt ===
Network Working Group                                        J. Reynolds
Request for Comments: 1700                                     J. Postel
STD: 2                                                               ISI
Obsoletes RFCs: 1340, 1060, 1010, 990, 960,                 October 1994
943, 923, 900, 870, 820, 790, 776, 770,
762, 758,755, 750, 739, 604, 503, 433, 349
Obsoletes IENs: 127, 117, 93
Category: Standards Track

                            ASSIGNED NUMBERS

Status of this Memo

   This memo is a status report on the parameters (i.e., numbers and
   keywords) used in protocols in the Internet community.  Distribution
   of this memo is unlimited.

OVERVIEW

This RFC is a snapshot of the ongoing process of the assignment of
protocol parameters for the Internet protocol suite.  To make the
current information readily available the assignments are kept up-to-
date in a set of online text files.  This RFC has been assembled by
catinating these files together with a minimum of formatting "glue".
The authors appologize for the somewhat rougher formatting and style
than is typical of most RFCs.

We expect that various readers will notice specific items that should be
corrected.  Please send any specific corrections via email to
<iana@isi.edu>.

Reynolds & Postel                                               [Page 1]

RFC 1700                    Assigned Numbers                October 1994

INTRODUCTION

The files in this directory document the currently assigned values for
several series of numbers used in network protocol implementations.

        ftp://ftp.isi.edu/in-notes/iana/assignments

The Internet Assigned Numbers Authority (IANA) is the central
coordinator for the assignment of unique parameter values for Internet
protocols.  The IANA is chartered by the Internet Society (ISOC) and
the Federal Network Council (FNC) to act as the clearinghouse to
assign and coordinate the use of numerous Internet protocol
parameters.

The Internet protocol suite, as defined by the Internet Engineering
Task Force (IETF) and its steering group (the IESG), contains numerous
parameters, such as internet addresses, domain names, autonomous
system numbers (used in some routing protocols), protocol numbers,
port numbers, management information base object identifiers,
including private enterprise numbers, and many others.

The common use of the Internet protocols by the Internet community
requires that the particular values used in these parameter fields be
assigned uniquely.  It is the task of the IANA to make those unique
assignments as requested and to maintain a registry of the currently
assigned values.

Requests for parameter assignments (protocols, ports, etc.) should be
sent to <iana@isi.edu>.

Requests for SNMP network management private enterprise number
assignments should be sent to <iana-mib@isi.edu>.

The IANA is located at and operated by the Information Sciences
Institute (ISI) of the University of Southern California (USC).

If you are developing a protocol or application that will require the
use of a link, socket, port, protocol, etc., please contact the IANA
to receive a number assignment.

        Joyce K. Reynolds
        Internet Assigned Numbers Authority
        USC - Information Sciences Institute
        4676 Admiralty Way
        Marina del Rey, California  90292-6695

        Electronic mail: IANA@ISI.EDU
        Phone: +1 310-822-1511

Reynolds & Postel                                               [Page 2]

RFC 1700                    Assigned Numbers                October 1994

Most of the protocols are documented in the RFC series of notes.  Some
of the items listed are undocumented.  Further information on
protocols can be found in the memo, "Internet Official Protocol
Standards" (STD 1).

Data Notations

The convention in the documentation of Internet Protocols is to
express numbers in decimal and to picture data in "big-endian" order
[COHEN].  That is, fields are described left to right, with the most
significant octet on the left and the least significant octet on the
right.

The order of transmission of the header and data described in this
document is resolved to the octet level.  Whenever a diagram shows a
group of octets, the order of transmission of those octets is the
normal order in which they are read in English.  For example, in the
following diagram the octets are transmitted in the order they are
numbered.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       1       |       2       |       3       |       4       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       5       |       6       |       7       |       8       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       9       |      10       |      11       |      12       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                       Transmission Order of Bytes

Whenever an octet represents a numeric quantity the left most bit in the
diagram is the high order or most significant bit.  That is, the bit
labeled 0 is the most significant bit.  For example, the following
diagram represents the value 170 (decimal).

                          0 1 2 3 4 5 6 7
                         +-+-+-+-+-+-+-+-+
                         |1 0 1 0 1 0 1 0|
                         +-+-+-+-+-+-+-+-+

                        Significance of Bits

Similarly, whenever a multi-octet field represents a numeric quantity
the left most bit of the whole field is the most significant bit.  When

Reynolds & Postel                                               [Page 3]

RFC 1700                    Assigned Numbers                October 1994

a multi-octet quantity is transmitted the most significant octet is
transmitted first.

Special Addresses

There are five classes of IP addresses: Class A through Class E.  Of
these, Classes A, B, and C are used for unicast addresses, Class D is
used for multicast addresses, and Class E addresses are reserved for
future use.

With the advent of classless addressing [CIDR1, CIDR2], the
network-number part of an address may be of any length, and the whole
notion of address classes becomes less important.

There are certain special cases for IP addresses.  These special cases
can be concisely summarized using the earlier notation for an IP
address:

      IP-address ::=  { <Network-number>, <Host-number> }

         or

      IP-address ::=  { <Network-number>, <Subnet-number>,
                                                      <Host-number> }

if we also use the notation "-1" to mean the field contains all 1
bits.  Some common special cases are as follows:

      (a)   {0, 0}

         This host on this network.  Can only be used as a source
         address (see note later).

      (b)   {0, <Host-number>}

         Specified host on this network.  Can only be used as a
         source address.

      (c)   { -1, -1}

         Limited broadcast.  Can only be used as a destination
         address, and a datagram with this address must never be
         forwarded outside the (sub-)net of the source.

      (d)   {<Network-number>, -1}

         Directed broadcast to specified network.  Can only be used
         as a destination address.

Reynolds & Postel                                               [Page 4]

RFC 1700                    Assigned Numbers                October 1994

      (e)   {<Network-number>, <Subnet-number>, -1}

         Directed broadcast to specified subnet.  Can only be used as
         a destination address.

      (f)   {<Network-number>, -1, -1}

         Directed broadcast to all subnets of specified subnetted
         network.  Can only be used as a destination address.

      (g)   {127, <any>}

         Internal host loopback address.  Should never appear outside
         a host.

REFERENCES

[COHEN]   Cohen, D., "On Holy Wars and a Plea for Peace", IEEE Computer
          Magazine, October 1981.

[CIDR1]   Fuller, V., T. Li, J. Yu, and K. Varadhan, "Classless
          Inter-Domain Routing (CIDR): an Address Assignment and
          Aggregation Strategy", RFC 1519, September 1993.

[CIDR2]   Rekhter, Y., and T. Li, "An Architecture for IP Address
          Allocation with CIDR", RFC 1518, September 1993.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/introduction

Reynolds & Postel                                               [Page 5]

RFC 1700                    Assigned Numbers                October 1994

VERSION NUMBERS

In the Internet Protocol (IP) [RFC791] there is a field to identify
the version of the internetwork general protocol.  This field is 4
bits in size.

Assigned Internet Version Numbers

Decimal   Keyword    Version                            References
-------   -------    -------                            ----------
    0                Reserved                                [JBP]
  1-3                Unassigned                              [JBP]
    4       IP       Internet Protocol                [RFC791,JBP]
    5       ST       ST Datagram Mode                [RFC1190,JWF]
    6       SIP      Simple Internet Protocol                [RH6]
    7       TP/IX    TP/IX: The Next Internet                [RXU]
    8       PIP      The P Internet Protocol                 [PXF]
    9       TUBA     TUBA                                    [RXC]
10-14                Unassigned                              [JBP]
   15                Reserved                                [JBP]

REFERENCES

[RFC791] Postel, J., ed., "Internet Protocol - DARPA Internet Program
         Protocol Specification", STD 5, RFC 791, USC/Information
         Sciences Institute, September 1981.

[RFC1190] Topolcic, C., Editor, "Experimental Internet Stream
          Protocol, Version 2 (ST-II)", RFC 1190, CIP Working Group,
          October 1990.

PEOPLE

[JPB] Jon Postel <postel@isi.edu>

[JWF] Jim Forgie <FORGIE@XN.LL.MIT.ED>

[RH6] Robert Hinden <Hinden@ENG.SUN.COM>

[RXU] Robert Ullmann <ariel@world.std.com>

[PXF] Paul Francis <francis@cactus.ntt.jp>

[RXC] Ross Callon <callon@wellfleet.com>

[]

Reynolds & Postel                                               [Page 6]

RFC 1700                    Assigned Numbers                October 1994

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/version-numbers

Reynolds & Postel                                               [Page 7]

RFC 1700                    Assigned Numbers                October 1994

PROTOCOL NUMBERS

In the Internet Protocol (IP) [DDN], [RFC791] there is a field, called
Protocol, to identify the next level protocol.  This is an 8 bit
field.

Assigned Internet Protocol Numbers

Decimal    Keyword     Protocol                         References
-------    -------     --------                         ----------
     0                 Reserved                              [JBP]
     1     ICMP        Internet Control Message       [RFC792,JBP]
     2     IGMP        Internet Group Management     [RFC1112,JBP]
     3     GGP         Gateway-to-Gateway              [RFC823,MB]
     4     IP          IP in IP (encasulation)               [JBP]
     5     ST          Stream                 [RFC1190,IEN119,JWF]
     6     TCP         Transmission Control           [RFC793,JBP]
     7     UCL         UCL                                    [PK]
     8     EGP         Exterior Gateway Protocol     [RFC888,DLM1]
     9     IGP         any private interior gateway          [JBP]
    10     BBN-RCC-MON BBN RCC Monitoring                    [SGC]
    11     NVP-II      Network Voice Protocol         [RFC741,SC3]
    12     PUP         PUP                             [PUP,XEROX]
    13     ARGUS       ARGUS                                [RWS4]
    14     EMCON       EMCON                                 [BN7]
    15     XNET        Cross Net Debugger            [IEN158,JFH2]
    16     CHAOS       Chaos                                 [NC3]
    17     UDP         User Datagram                  [RFC768,JBP]
    18     MUX         Multiplexing                    [IEN90,JBP]
    19     DCN-MEAS    DCN Measurement Subsystems           [DLM1]
    20     HMP         Host Monitoring                [RFC869,RH6]
    21     PRM         Packet Radio Measurement              [ZSU]
    22     XNS-IDP     XEROX NS IDP               [ETHERNET,XEROX]
    23     TRUNK-1     Trunk-1                              [BWB6]
    24     TRUNK-2     Trunk-2                              [BWB6]
    25     LEAF-1      Leaf-1                               [BWB6]
    26     LEAF-2      Leaf-2                               [BWB6]
    27     RDP         Reliable Data Protocol         [RFC908,RH6]
    28     IRTP        Internet Reliable Transaction  [RFC938,TXM]
    29     ISO-TP4     ISO Transport Protocol Class 4 [RFC905,RC77]
    30     NETBLT      Bulk Data Transfer Protocol    [RFC969,DDC1]
    31     MFE-NSP     MFE Network Services Protocol  [MFENET,BCH2]
    32     MERIT-INP   MERIT Internodal Protocol             [HWB]
    33     SEP         Sequential Exchange Protocol        [JC120]
    34     3PC         Third Party Connect Protocol         [SAF3]
    35     IDPR        Inter-Domain Policy Routing Protocol [MXS1]

Reynolds & Postel                                               [Page 8]

RFC 1700                    Assigned Numbers                October 1994

    36     XTP         XTP                                   [GXC]
    37     DDP         Datagram Delivery Protocol            [WXC]
    38     IDPR-CMTP   IDPR Control Message Transport Proto [MXS1]
    39     TP++        TP++ Transport Protocol               [DXF]
    40     IL          IL Transport Protocol                [DXP2]
    41     SIP         Simple Internet Protocol              [SXD]
    42     SDRP        Source Demand Routing Protocol       [DXE1]
    43     SIP-SR      SIP Source Route                      [SXD]
    44     SIP-FRAG    SIP Fragment                          [SXD]
    45     IDRP        Inter-Domain Routing Protocol   [Sue Hares]
    46     RSVP        Reservation Protocol           [Bob Braden]
    47     GRE         General Routing Encapsulation     [Tony Li]
    48     MHRP        Mobile Host Routing Protocol[David Johnson]
    49     BNA         BNA                          [Gary Salamon]
    50     SIPP-ESP    SIPP Encap Security Payload [Steve Deering]
    51     SIPP-AH     SIPP Authentication Header  [Steve Deering]
    52     I-NLSP      Integrated Net Layer Security  TUBA [GLENN]
    53     SWIPE       IP with Encryption                    [JI6]
    54     NHRP        NBMA Next Hop Resolution Protocol
 55-60                 Unassigned                            [JBP]
    61                 any host internal protocol            [JBP]
    62     CFTP        CFTP                            [CFTP,HCF2]
    63                 any local network                     [JBP]
    64     SAT-EXPAK   SATNET and Backroom EXPAK             [SHB]
    65     KRYPTOLAN   Kryptolan                            [PXL1]
    66     RVD         MIT Remote Virtual Disk Protocol      [MBG]
    67     IPPC        Internet Pluribus Packet Core         [SHB]
    68                 any distributed file system           [JBP]
    69     SAT-MON     SATNET Monitoring                     [SHB]
    70     VISA        VISA Protocol                        [GXT1]
    71     IPCV        Internet Packet Core Utility          [SHB]
    72     CPNX        Computer Protocol Network Executive  [DXM2]
    73     CPHB        Computer Protocol Heart Beat         [DXM2]
    74     WSN         Wang Span Network                     [VXD]
    75     PVP         Packet Video Protocol                 [SC3]
    76     BR-SAT-MON  Backroom SATNET Monitoring            [SHB]
    77     SUN-ND      SUN ND PROTOCOL-Temporary             [WM3]
    78     WB-MON      WIDEBAND Monitoring                   [SHB]
    79     WB-EXPAK    WIDEBAND EXPAK                        [SHB]
    80     ISO-IP      ISO Internet Protocol                 [MTR]
    81     VMTP        VMTP                                 [DRC3]
    82     SECURE-VMTP SECURE-VMTP                          [DRC3]
    83     VINES       VINES                                 [BXH]
    84     TTP         TTP                                   [JXS]
    85     NSFNET-IGP  NSFNET-IGP                            [HWB]
    86     DGP         Dissimilar Gateway Protocol     [DGP,ML109]
    87     TCF         TCF                                  [GAL5]
    88     IGRP        IGRP                            [CISCO,GXS]

Reynolds & Postel                                               [Page 9]

RFC 1700                    Assigned Numbers                October 1994

    89     OSPFIGP     OSPFIGP                      [RFC1583,JTM4]
    90     Sprite-RPC  Sprite RPC Protocol            [SPRITE,BXW]
    91     LARP        Locus Address Resolution Protocol     [BXH]
    92     MTP         Multicast Transport Protocol          [SXA]
    93     AX.25       AX.25 Frames                         [BK29]
    94     IPIP        IP-within-IP Encapsulation Protocol   [JI6]
    95     MICP        Mobile Internetworking Control Pro.   [JI6]
    96     SCC-SP      Semaphore Communications Sec. Pro.    [HXH]
    97     ETHERIP     Ethernet-within-IP Encapsulation     [RXH1]
    98     ENCAP       Encapsulation Header         [RFC1241,RXB3]
    99                 any private encryption scheme         [JBP]
   100     GMTP        GMTP                                 [RXB5]
101-254                Unassigned                            [JBP]
    255                Reserved                              [JBP]

REFERENCES

[CFTP] Forsdick, H., "CFTP", Network Message, Bolt Beranek and
       Newman, January 1982.

[CISCO] Cisco Systems, "Gateway Server Reference Manual", Manual
        Revision B, January 10, 1988.

[DDN] Feinler, E., Editor, "DDN Protocol Handbook", Network
      Information Center, SRI International, December 1985.

[DGP] M/A-COM Government Systems, "Dissimilar Gateway Protocol
      Specification, Draft Version", Contract no. CS901145,
      November 16, 1987.

[ETHERNET]  "The Ethernet, A Local Area Network: Data Link Layer and
            Physical Layer Specification", AA-K759B-TK, Digital
            Equipment Corporation, Maynard, MA.  Also as: "The
            Ethernet - A Local Area Network", Version 1.0, Digital
            Equipment Corporation, Intel Corporation, Xerox
            Corporation, September 1980.  And: "The Ethernet, A Local
            Area Network: Data Link Layer and Physical Layer
            Specifications", Digital, Intel and Xerox, November 1982.
            And: XEROX, "The Ethernet, A Local Area Network: Data Link
            Layer and Physical Layer Specification", X3T51/80-50,
            Xerox Corporation, Stamford, CT., October 1980.

[IEN90] Cohen, D. and J. Postel, "Multiplexing Protocol", IEN 90,
        USC/Information Sciences Institute, May 1979.

[IEN119] Forgie, J., "ST - A Proposed Internet Stream Protocol",
         IEN 119, MIT Lincoln Laboratory, September 1979.

Reynolds & Postel                                              [Page 10]

RFC 1700                    Assigned Numbers                October 1994

[IEN158] Haverty, J., "XNET Formats for Internet Protocol Version 4",
         IEN 158, October 1980.

[MFENET] Shuttleworth, B., "A Documentary of MFENet, a National
         Computer Network", UCRL-52317, Lawrence Livermore Labs,
         Livermore, California, June 1977.

[PUP] Boggs, D., J. Shoch, E. Taft, and R. Metcalfe, "PUP: An
      Internetwork Architecture", XEROX Palo Alto Research Center,
      CSL-79-10, July 1979; also in IEEE Transactions on
      Communication, Volume COM-28, Number 4, April 1980.

[SPRITE] Welch, B., "The Sprite Remote Procedure Call System",
         Technical Report, UCB/Computer Science Dept., 86/302,
         University of California at Berkeley, June 1986.

[RFC741] Cohen, D., "Specifications for the Network Voice Protocol",
         RFC 741, ISI/RR 7539, USC/Information Sciences Institute,
         March 1976.

[RFC768] Postel, J., "User Datagram Protocol", STD 6, RFC 768,
         USC/Information Sciences Institute, August 1980.

[RFC791] Postel, J., "Internet Protocol - DARPA Internet Program
         Protocol Specification", STD 5, RFC 791, DARPA, September
         1981.

[RFC792] Postel, J., "Internet Control Message Protocol - DARPA
         Internet Program Protocol Specification", STD 5, RFC 792,
         USC/Information Sciences Institute, September 1981.

[RFC793] Postel, J., "Transmission Control Protocol - DARPA
         Internet Program Protocol Specification", STD 7, RFC 793,
         USC/Information Sciences Institute, September 1981.

[RFC823] Hinden, R., and A. Sheltzer, "The DARPA Internet Gateway",
         RFC 823, BBN, September 1982.

[RFC869] Hinden, R., "A Host Monitoring Protocol", RFC 869,
         Bolt Beranek and Newman, December 1983.

[RFC888] Seamonson, L., and E. Rosen, "STUB" Exterior Gateway
         Protocol", RFC 888, BBN Communications Corporation,
         January 1984.

[RFC905] International Standards Organization, "ISO Transport Protocol
         Specification - ISO DP 8073", RFC 905, April 1984.

Reynolds & Postel                                              [Page 11]

RFC 1700                    Assigned Numbers                October 1994

[RFC908] Velten, D., R. Hinden, and J. Sax, "Reliable Data Protocol",
         RFC 908, BBN Communications Corporation, July 1984.

[RFC938] Miller, T., "Internet Reliable Transaction Protocol", RFC 938,
         ACC, February 1985.

[RFC969] Clark, D., M. Lambert, and L. Zhang, "NETBLT: A Bulk Data
         Transfer Protocol", RFC 969, MIT Laboratory for Computer
         Science, December 1985.

[RFC1112] Deering, S., "Host Extensions for IP Multicasting",
          STD 5, RFC 1112, Stanford University, August 1989.

[RFC1190] Topolcic, C., Editor, "Experimental Internet Stream
          Protocol, Version 2 (ST-II)", RFC 1190, CIP Working Group,
          October 1990.

[RFC1241] Woodburn, W., and D. Mills, " A Scheme for an Internet
          Encapsulation Protocol: Version 1", RFC 1241, SAIC,
          University of Delaware, July 1991.

[RFC1583] Moy, J., "The OSPF Specification", RFC 1583, Proteon,
          March 1994.

PEOPLE

[BCH2] Barry Howard  <Howard@NMFECC.LLNL.GOV>

[BK29] Brian Kantor  <brian@UCSD.EDU>

[BN7] <mystery contact>

[BWB6] Barry Boehm  <boehm@ARPA.MIL>

[BXH] Brian Horn  <---none--->

[BXW] Bruce Willins <---none--->

[DDC1] David Clark  <ddc@LCS.MIT.EDU>

[DLM1] David Mills  <Mills@HUEY.UDEL.EDU>

[DRC3] Dave Cheriton  <cheriton@PESCADERO.STANFORD.EDU>

[DXE1] Deborah Estrin  <estrin@usc.edu>

[DXF] Dirk Fromhein  <df@watershed.com>

Reynolds & Postel                                              [Page 12]

RFC 1700                    Assigned Numbers                October 1994

[DXM2] David Mittnacht  <---none--->

[DXP2] Dave Presotto  <presotto@reseach.att.co

[David Johnson] <mystery contact>

[GAL5] Guillermo A. Loyola  <LOYOLA@IBM.COM>

[GLENN]  K. Robert Glenn  <glenn@osi.ncsl.nist.gov>

[GXC] Greg Chesson  <Greg@SGI.COM>

[GXS] Guenther Schreiner  <snmp-admin@ira.uka.de>

[GXT1] Gene Tsudik  <tsudik@USC.EDU>

[HCF2] Harry Forsdick  <Forsdick@BBN.COM>

[HWB] Hans-Werner Braun  <HWB@MCR.UMICH.EDU>

[HXH] Howard Hart  <hch@hybrid.com>

[JBP]   Jon Postel <postel@isi.edu>

[JC120] <mystery contact>

[JFH2] Jack Haverty <jhaverty@ORACLE.COM>

[JI6] John Ioannidis  <ji@CS.COLUMBIA.EDU>

[JTM4] John Moy  <jmoy@PROTEON.COM>

[JWF] Jim Forgie  <FORGIE@XN.LL.MIT.EDU>

[JXS] Jim Stevens  <Stevens@ISI.EDU>

[KATZ]  Dave Katz <dkatz@cisco.com>

[MB] Mike Brescia  <Brescia@CCV.BBN.COM>

[MBG] Michael Greenwald  <Greenwald@SCRC-STONY-BROOK.SYMBOLICS.COM>

[ML109] Mike Little  <little@MACOM4.ARPA>

[MTR] Marshall T. Rose  <mrose@dbc.mtview.ca.us>

[MXS1] Martha Steenstrup  <MSteenst@BBN.COM>

Reynolds & Postel                                              [Page 13]

RFC 1700                    Assigned Numbers                October 1994

[NC3] J. Noel Chiappa  <JNC@XX.LCS.MIT.EDU>

[PK] Peter Kirstein <Kirstein@NSS.CS.UCL.AC.UK>

[PXL1] Paul Liu  <---none--->

[RH6] Robert Hinden  <Hinden@ENG.SUN.COM>

[RTB3]  Bob Braden <braden@isi.edu>

[RC77] <mystery contact>

[RWS4] Robert W. Scheifler  <RWS@XX.LCS.MIT.EDU>

[RXB3] Robert Woodburn <woody@cseic.saic.com>

[RXH1] Russ Housley  <Russ_Housley.McLean_CSD@xerox.com>

[SAF3] Stuart A. Friedberg  <stuart@CS.WISC.EDU>

[SC3] Steve Casner  <casner@isi.edu

[SGC] Steve Chipman  <Chipman@F.BBN.COM>

[SHB] Steven Blumenthal  <BLUMENTHAL@VAX.BBN.COM>

[Sue Hares]  Sue Hares <skh@merit.edu>

[SXA] Susie Armstrong  <Armstrong.wbst128@XEROX.COM>

[SXD] Steve Deering  <deering@PARC.XEROX.COM>

[Tony Li] Tony Li  <tli@cisco.com>

[TXM] Trudy Miller  <Trudy@ACC.COM>

[VXD] Victor Dafoulas  <---none--->

[WM3] William Melohn  <Melohn@SUN.COM>

[WXC] Wesley Craig   <Wesley.Craig@terminator.cc.umich.edu>

[ZSU] Zaw-Sing Su  <ZSu@TSCA.ISTC.SRI.>

[]

Reynolds & Postel                                              [Page 14]

RFC 1700                    Assigned Numbers                October 1994

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/protocol-numbers

Reynolds & Postel                                              [Page 15]

RFC 1700                    Assigned Numbers                October 1994

WELL KNOWN PORT NUMBERS

The Well Known Ports are controlled and assigned by the IANA and on
most systems can only be used by system (or root) processes or by
programs executed by privileged users.

Ports are used in the TCP [RFC793] to name the ends of logical
connections which carry long term conversations.  For the purpose of
providing services to unknown callers, a service contact port is
defined.  This list specifies the port used by the server process as
its contact port.  The contact port is sometimes called the
"well-known port".

To the extent possible, these same port assignments are used with the
UDP [RFC768].

The assigned ports use a small portion of the possible port numbers.
For many years the assigned ports were in the range 0-255.  Recently,
the range for assigned ports managed by the IANA has been expanded to
the range 0-1023.

Port Assignments:

Keyword         Decimal    Description                     References
-------         -------    -----------                     ----------
                  0/tcp    Reserved
                  0/udp    Reserved
#                          Jon Postel <postel@isi.edu>
tcpmux            1/tcp    TCP Port Service Multiplexer
tcpmux            1/udp    TCP Port Service Multiplexer
#                          Mark Lottor <MKL@nisc.sri.com>
compressnet       2/tcp    Management Utility
compressnet       2/udp    Management Utility
compressnet       3/tcp    Compression Process
compressnet       3/udp    Compression Process
#                          Bernie Volz <VOLZ@PROCESS.COM>
#                 4/tcp    Unassigned
#                 4/udp    Unassigned
rje               5/tcp    Remote Job Entry
rje               5/udp    Remote Job Entry
#                          Jon Postel <postel@isi.edu>
#                 6/tcp    Unassigned
#                 6/udp    Unassigned
echo              7/tcp    Echo
echo              7/udp    Echo
#                          Jon Postel <postel@isi.edu>
#                 8/tcp    Unassigned

Reynolds & Postel                                              [Page 16]

RFC 1700                    Assigned Numbers                October 1994

#                 8/udp    Unassigned
discard           9/tcp    Discard
discard           9/udp    Discard
#                          Jon Postel <postel@isi.edu>
#                10/tcp    Unassigned
#                10/udp    Unassigned
systat           11/tcp    Active Users
systat           11/udp    Active Users
#                          Jon Postel <postel@isi.edu>
#                12/tcp    Unassigned
#                12/udp    Unassigned
daytime          13/tcp    Daytime
daytime          13/udp    Daytime
#                          Jon Postel <postel@isi.edu>
#                14/tcp    Unassigned
#                14/udp    Unassigned
#                15/tcp    Unassigned [was netstat]
#                15/udp    Unassigned
#                16/tcp    Unassigned
#                16/udp    Unassigned
qotd             17/tcp    Quote of the Day
qotd             17/udp    Quote of the Day
#                          Jon Postel <postel@isi.edu>
msp              18/tcp    Message Send Protocol
msp              18/udp    Message Send Protocol
#                          Rina Nethaniel <---none--->
chargen          19/tcp    Character Generator
chargen          19/udp    Character Generator
ftp-data         20/tcp    File Transfer [Default Data]
ftp-data         20/udp    File Transfer [Default Data]
ftp              21/tcp    File Transfer [Control]
ftp              21/udp    File Transfer [Control]
#                          Jon Postel <postel@isi.edu>
#                22/tcp    Unassigned
#                22/udp    Unassigned
telnet           23/tcp    Telnet
telnet           23/udp    Telnet
#                          Jon Postel <postel@isi.edu>
                 24/tcp    any private mail system
                 24/udp    any private mail system
#                          Rick Adam <rick@UUNET.UU.NET>
smtp             25/tcp    Simple Mail Transfer
smtp             25/udp    Simple Mail Transfer
#                          Jon Postel <postel@isi.edu>
#                26/tcp    Unassigned
#                26/udp    Unassigned
nsw-fe           27/tcp    NSW User System FE
nsw-fe           27/udp    NSW User System FE

Reynolds & Postel                                              [Page 17]

RFC 1700                    Assigned Numbers                October 1994

#                          Robert Thomas <BThomas@F.BBN.COM>
#                28/tcp    Unassigned
#                28/udp    Unassigned
msg-icp          29/tcp    MSG ICP
msg-icp          29/udp    MSG ICP
#                          Robert Thomas <BThomas@F.BBN.COM>
#                30/tcp    Unassigned
#                30/udp    Unassigned
msg-auth         31/tcp    MSG Authentication
msg-auth         31/udp    MSG Authentication
#                          Robert Thomas <BThomas@F.BBN.COM>
#                32/tcp    Unassigned
#                32/udp    Unassigned
dsp              33/tcp    Display Support Protocol
dsp              33/udp    Display Support Protocol
#                          Ed Cain <cain@edn-unix.dca.mil>
#                34/tcp    Unassigned
#                34/udp    Unassigned
                 35/tcp    any private printer server
                 35/udp    any private printer server
#                          Jon Postel <postel@isi.edu>
#                36/tcp    Unassigned
#                36/udp    Unassigned
time             37/tcp    Time
time             37/udp    Time
#                          Jon Postel <postel@isi.edu>
rap              38/tcp    Route Access Protocol
rap              38/udp    Route Access Protocol
#                          Robert Ullmann <ariel@world.std.com>
rlp              39/tcp    Resource Location Protocol
rlp              39/udp    Resource Location Protocol
#                          Mike Accetta <MIKE.ACCETTA@CMU-CS-A.EDU>
#                40/tcp    Unassigned
#                40/udp    Unassigned
graphics         41/tcp    Graphics
graphics         41/udp    Graphics
nameserver       42/tcp    Host Name Server
nameserver       42/udp    Host Name Server
nicname          43/tcp    Who Is
nicname          43/udp    Who Is
mpm-flags        44/tcp    MPM FLAGS Protocol
mpm-flags        44/udp    MPM FLAGS Protocol
mpm              45/tcp    Message Processing Module [recv]
mpm              45/udp    Message Processing Module [recv]
mpm-snd          46/tcp    MPM [default send]
mpm-snd          46/udp    MPM [default send]
#                          Jon Postel <postel@isi.edu>
ni-ftp           47/tcp    NI FTP

Reynolds & Postel                                              [Page 18]

RFC 1700                    Assigned Numbers                October 1994

ni-ftp           47/udp    NI FTP
#                          Steve Kille <S.Kille@isode.com>
auditd           48/tcp    Digital Audit Daemon
auditd           48/udp    Digital Audit Daemon
#                          Larry Scott <scott@zk3.dec.com>
login            49/tcp    Login Host Protocol
login            49/udp    Login Host Protocol
#                          Pieter Ditmars <pditmars@BBN.COM>
re-mail-ck       50/tcp    Remote Mail Checking Protocol
re-mail-ck       50/udp    Remote Mail Checking Protocol
#                          Steve Dorner <s-dorner@UIUC.EDU>
la-maint         51/tcp    IMP Logical Address Maintenance
la-maint         51/udp    IMP Logical Address Maintenance
#                          Andy Malis <malis_a@timeplex.com>
xns-time         52/tcp    XNS Time Protocol
xns-time         52/udp    XNS Time Protocol
#                          Susie Armstrong <Armstrong.wbst128@XEROX>
domain           53/tcp    Domain Name Server
domain           53/udp    Domain Name Server
#                          Paul Mockapetris <PVM@ISI.EDU>
xns-ch           54/tcp    XNS Clearinghouse
xns-ch           54/udp    XNS Clearinghouse
#                          Susie Armstrong <Armstrong.wbst128@XEROX>
isi-gl           55/tcp    ISI Graphics Language
isi-gl           55/udp    ISI Graphics Language
xns-auth         56/tcp    XNS Authentication
xns-auth         56/udp    XNS Authentication
#                          Susie Armstrong <Armstrong.wbst128@XEROX>
                 57/tcp    any private terminal access
                 57/udp    any private terminal access
#                          Jon Postel <postel@isi.edu>
xns-mail         58/tcp    XNS Mail
xns-mail         58/udp    XNS Mail
#                          Susie Armstrong <Armstrong.wbst128@XEROX>
                 59/tcp    any private file service
                 59/udp    any private file service
#                          Jon Postel <postel@isi.edu>
                 60/tcp    Unassigned
                 60/udp    Unassigned
ni-mail          61/tcp    NI MAIL
ni-mail          61/udp    NI MAIL
#                          Steve Kille <S.Kille@isode.com>
acas             62/tcp    ACA Services
acas             62/udp    ACA Services
#                          E. Wald <ewald@via.enet.dec.com>
#                63/tcp    Unassigned
#                63/udp    Unassigned
covia            64/tcp    Communications Integrator (CI)

Reynolds & Postel                                              [Page 19]

RFC 1700                    Assigned Numbers                October 1994

covia            64/udp    Communications Integrator (CI)
#                          "Tundra" Tim Daneliuk
#                          <tundraix!tundra@clout.chi.il.us>
tacacs-ds        65/tcp    TACACS-Database Service
tacacs-ds        65/udp    TACACS-Database Service
#                          Kathy Huber <khuber@bbn.com>
sql*net          66/tcp    Oracle SQL*NET
sql*net          66/udp    Oracle SQL*NET
#                          Jack Haverty <jhaverty@ORACLE.COM>
bootps           67/tcp    Bootstrap Protocol Server
bootps           67/udp    Bootstrap Protocol Server
bootpc           68/tcp    Bootstrap Protocol Client
bootpc           68/udp    Bootstrap Protocol Client
#                          Bill Croft <Croft@SUMEX-AIM.STANFORD.EDU>
tftp             69/tcp    Trivial File Transfer
tftp             69/udp    Trivial File Transfer
#                          David Clark <ddc@LCS.MIT.EDU>
gopher           70/tcp    Gopher
gopher           70/udp    Gopher
#                          Mark McCahill <mpm@boombox.micro.umn.edu>
netrjs-1         71/tcp    Remote Job Service
netrjs-1         71/udp    Remote Job Service
netrjs-2         72/tcp    Remote Job Service
netrjs-2         72/udp    Remote Job Service
netrjs-3         73/tcp    Remote Job Service
netrjs-3         73/udp    Remote Job Service
netrjs-4         74/tcp    Remote Job Service
netrjs-4         74/udp    Remote Job Service
#                          Bob Braden <Braden@ISI.EDU>
                 75/tcp    any private dial out service
                 75/udp    any private dial out service
#                          Jon Postel <postel@isi.edu>
deos             76/tcp    Distributed External Object Store
deos             76/udp    Distributed External Object Store
#                          Robert Ullmann <ariel@world.std.com>
                 77/tcp    any private RJE service
                 77/udp    any private RJE service
#                          Jon Postel <postel@isi.edu>
vettcp           78/tcp    vettcp
vettcp           78/udp    vettcp
#                          Christopher Leong <leong@kolmod.mlo.dec.com>
finger           79/tcp    Finger
finger           79/udp    Finger
#                          David Zimmerman <dpz@RUTGERS.EDU>
www-http         80/tcp    World Wide Web HTTP
www-http         80/udp    World Wide Web HTTP
#                          Tim Berners-Lee <timbl@nxoc01.cern.ch>
hosts2-ns        81/tcp    HOSTS2 Name Server

Reynolds & Postel                                              [Page 20]

RFC 1700                    Assigned Numbers                October 1994

hosts2-ns        81/udp    HOSTS2 Name Server
#                          Earl Killian <EAK@MORDOR.S1.GOV>
xfer             82/tcp    XFER Utility
xfer             82/udp    XFER Utility
#                          Thomas M. Smith <tmsmith@esc.syr.ge.com>
mit-ml-dev       83/tcp    MIT ML Device
mit-ml-dev       83/udp    MIT ML Device
#                          David Reed <--none--->
ctf              84/tcp    Common Trace Facility
ctf              84/udp    Common Trace Facility
#                          Hugh Thomas <thomas@oils.enet.dec.com>
mit-ml-dev       85/tcp    MIT ML Device
mit-ml-dev       85/udp    MIT ML Device
#                          David Reed <--none--->
mfcobol          86/tcp    Micro Focus Cobol
mfcobol          86/udp    Micro Focus Cobol
#                          Simon Edwards <--none--->
                 87/tcp    any private terminal link
                 87/udp    any private terminal link
#                          Jon Postel <postel@isi.edu>
kerberos         88/tcp    Kerberos
kerberos         88/udp    Kerberos
#                          B. Clifford Neuman <bcn@isi.edu>
su-mit-tg        89/tcp    SU/MIT Telnet Gateway
su-mit-tg        89/udp    SU/MIT Telnet Gateway
#                          Mark Crispin <MRC@PANDA.COM>
dnsix            90/tcp    DNSIX Securit Attribute Token Map
dnsix            90/udp    DNSIX Securit Attribute Token Map
#                          Charles Watt <watt@sware.com>
mit-dov          91/tcp    MIT Dover Spooler
mit-dov          91/udp    MIT Dover Spooler
#                          Eliot Moss <EBM@XX.LCS.MIT.EDU>
npp              92/tcp    Network Printing Protocol
npp              92/udp    Network Printing Protocol
#                          Louis Mamakos <louie@sayshell.umd.edu>
dcp              93/tcp    Device Control Protocol
dcp              93/udp    Device Control Protocol
#                          Daniel Tappan <Tappan@BBN.COM>
objcall          94/tcp    Tivoli Object Dispatcher
objcall          94/udp    Tivoli Object Dispatcher
#                          Tom Bereiter <--none--->
supdup           95/tcp    SUPDUP
supdup           95/udp    SUPDUP
#                          Mark Crispin <MRC@PANDA.COM>
dixie            96/tcp    DIXIE Protocol Specification
dixie            96/udp    DIXIE Protocol Specification
#                Tim Howes <Tim.Howes@terminator.cc.umich.edu>
swift-rvf        97/tcp    Swift Remote Vitural File Protocol

Reynolds & Postel                                              [Page 21]

RFC 1700                    Assigned Numbers                October 1994

swift-rvf        97/udp    Swift Remote Vitural File Protocol
#                          Maurice R. Turcotte
#                <mailrus!uflorida!rm1!dnmrt%rmatl@uunet.UU.NET>
tacnews          98/tcp    TAC News
tacnews          98/udp    TAC News
#                          Jon Postel <postel@isi.edu>
metagram         99/tcp    Metagram Relay
metagram         99/udp    Metagram Relay
#                          Geoff Goodfellow <Geoff@FERNWOOD.MPK.CA.U>
newacct         100/tcp    [unauthorized use]
hostname        101/tcp    NIC Host Name Server
hostname        101/udp    NIC Host Name Server
#                          Jon Postel <postel@isi.edu>
iso-tsap        102/tcp    ISO-TSAP
iso-tsap        102/udp    ISO-TSAP
#                          Marshall Rose <mrose@dbc.mtview.ca.us>
gppitnp         103/tcp    Genesis Point-to-Point Trans Net
gppitnp         103/udp    Genesis Point-to-Point Trans Net
acr-nema        104/tcp    ACR-NEMA Digital Imag. & Comm. 300
acr-nema        104/udp    ACR-NEMA Digital Imag. & Comm. 300
#                          Patrick McNamee <--none--->
csnet-ns        105/tcp    Mailbox Name Nameserver
csnet-ns        105/udp    Mailbox Name Nameserver
#                          Marvin Solomon <solomon@CS.WISC.EDU>
3com-tsmux      106/tcp    3COM-TSMUX
3com-tsmux      106/udp    3COM-TSMUX
#                          Jeremy Siegel <jzs@NSD.3Com.COM>
rtelnet         107/tcp    Remote Telnet Service
rtelnet         107/udp    Remote Telnet Service
#                          Jon Postel <postel@isi.edu>
snagas          108/tcp    SNA Gateway Access Server
snagas          108/udp    SNA Gateway Access Server
#                          Kevin Murphy <murphy@sevens.lkg.dec.com>
pop2            109/tcp    Post Office Protocol - Version 2
pop2            109/udp    Post Office Protocol - Version 2
#                          Joyce K. Reynolds <jkrey@isi.edu>
pop3            110/tcp    Post Office Protocol - Version 3
pop3            110/udp    Post Office Protocol - Version 3
#                          Marshall Rose <mrose@dbc.mtview.ca.us>
sunrpc          111/tcp    SUN Remote Procedure Call
sunrpc          111/udp    SUN Remote Procedure Call
#                          Chuck McManis <cmcmanis@sun.com>
mcidas          112/tcp    McIDAS Data Transmission Protocol
mcidas          112/udp    McIDAS Data Transmission Protocol
#                          Glenn Davis <davis@unidata.ucar.edu>
auth            113/tcp    Authentication Service
auth            113/udp    Authentication Service
#                          Mike St. Johns <stjohns@arpa.mil>

Reynolds & Postel                                              [Page 22]

RFC 1700                    Assigned Numbers                October 1994

audionews       114/tcp    Audio News Multicast
audionews       114/udp    Audio News Multicast
#                          Martin Forssen <maf@dtek.chalmers.se>
sftp            115/tcp    Simple File Transfer Protocol
sftp            115/udp    Simple File Transfer Protocol
#                          Mark Lottor <MKL@nisc.sri.com>
ansanotify      116/tcp    ANSA REX Notify
ansanotify      116/udp    ANSA REX Notify
#                          Nicola J. Howarth <njh@ansa.co.uk>
uucp-path       117/tcp    UUCP Path Service
uucp-path       117/udp    UUCP Path Service
sqlserv         118/tcp    SQL Services
sqlserv         118/udp    SQL Services
#                          Larry Barnes <barnes@broke.enet.dec.com>
nntp            119/tcp    Network News Transfer Protocol
nntp            119/udp    Network News Transfer Protocol
#                          Phil Lapsley <phil@UCBARPA.BERKELEY.EDU>
cfdptkt         120/tcp    CFDPTKT
cfdptkt         120/udp    CFDPTKT
#                          John Ioannidis <ji@close.cs.columbia.ed>
erpc            121/tcp    Encore Expedited Remote Pro.Call
erpc            121/udp    Encore Expedited Remote Pro.Call
#                          Jack O'Neil <---none--->
smakynet        122/tcp    SMAKYNET
smakynet        122/udp    SMAKYNET
#                          Mike O'Dowd <odowd@ltisun8.epfl.ch>
ntp             123/tcp    Network Time Protocol
ntp             123/udp    Network Time Protocol
#                          Dave Mills <Mills@HUEY.UDEL.EDU>
ansatrader      124/tcp    ANSA REX Trader
ansatrader      124/udp    ANSA REX Trader
#                          Nicola J. Howarth <njh@ansa.co.uk>
locus-map       125/tcp    Locus PC-Interface Net Map Ser
locus-map       125/udp    Locus PC-Interface Net Map Ser
#                          Eric Peterson <lcc.eric@SEAS.UCLA.EDU>
unitary         126/tcp    Unisys Unitary Login
unitary         126/udp    Unisys Unitary Login
#                          <feil@kronos.nisd.cam.unisys.com>
locus-con       127/tcp    Locus PC-Interface Conn Server
locus-con       127/udp    Locus PC-Interface Conn Server
#                          Eric Peterson <lcc.eric@SEAS.UCLA.EDU>
gss-xlicen      128/tcp    GSS X License Verification
gss-xlicen      128/udp    GSS X License Verification
#                          John Light <johnl@gssc.gss.com>
pwdgen          129/tcp    Password Generator Protocol
pwdgen          129/udp    Password Generator Protocol
#               Frank J. Wacho <WANCHO@WSMR-SIMTEL20.ARMY.MIL>
cisco-fna       130/tcp    cisco FNATIVE

Reynolds & Postel                                              [Page 23]

RFC 1700                    Assigned Numbers                October 1994

cisco-fna       130/udp    cisco FNATIVE
cisco-tna       131/tcp    cisco TNATIVE
cisco-tna       131/udp    cisco TNATIVE
cisco-sys       132/tcp    cisco SYSMAINT
cisco-sys       132/udp    cisco SYSMAINT
statsrv         133/tcp    Statistics Service
statsrv         133/udp    Statistics Service
#                          Dave Mills <Mills@HUEY.UDEL.EDU>
ingres-net      134/tcp    INGRES-NET Service
ingres-net      134/udp    INGRES-NET Service
#                          Mike Berrow <---none--->
loc-srv         135/tcp    Location Service
loc-srv         135/udp    Location Service
#                          Joe Pato <apollo!pato@EDDIE.MIT.EDU>
profile         136/tcp    PROFILE Naming System
profile         136/udp    PROFILE Naming System
#                          Larry Peterson <llp@ARIZONA.EDU>
netbios-ns      137/tcp    NETBIOS Name Service
netbios-ns      137/udp    NETBIOS Name Service
netbios-dgm     138/tcp    NETBIOS Datagram Service
netbios-dgm     138/udp    NETBIOS Datagram Service
netbios-ssn     139/tcp    NETBIOS Session Service
netbios-ssn     139/udp    NETBIOS Session Service
#                          Jon Postel <postel@isi.edu>
emfis-data      140/tcp    EMFIS Data Service
emfis-data      140/udp    EMFIS Data Service
emfis-cntl      141/tcp    EMFIS Control Service
emfis-cntl      141/udp    EMFIS Control Service
#                          Gerd Beling <GBELING@ISI.EDU>
bl-idm          142/tcp    Britton-Lee IDM
bl-idm          142/udp    Britton-Lee IDM
#                          Susie Snitzer <---none--->
imap2           143/tcp    Interim Mail Access Protocol v2
imap2           143/udp    Interim Mail Access Protocol v2
#                          Mark Crispin <MRC@PANDA.COM>
news            144/tcp    NewS
news            144/udp    NewS
#                          James Gosling <JAG@SUN.COM>
uaac            145/tcp    UAAC Protocol
uaac            145/udp    UAAC Protocol
#               David A. Gomberg <gomberg@GATEWAY.MITRE.ORG>
iso-tp0         146/tcp    ISO-IP0
iso-tp0         146/udp    ISO-IP0
iso-ip          147/tcp    ISO-IP
iso-ip          147/udp    ISO-IP
#                          Marshall Rose <mrose@dbc.mtview.ca.us>
cronus          148/tcp    CRONUS-SUPPORT
cronus          148/udp    CRONUS-SUPPORT

Reynolds & Postel                                              [Page 24]

RFC 1700                    Assigned Numbers                October 1994

#                          Jeffrey Buffun <jbuffum@APOLLO.COM>
aed-512         149/tcp    AED 512 Emulation Service
aed-512         149/udp    AED 512 Emulation Service
#               Albert G. Broscius <broscius@DSL.CIS.UPENN.EDU>
sql-net         150/tcp    SQL-NET
sql-net         150/udp    SQL-NET
#                          Martin Picard <<---none--->
hems            151/tcp    HEMS
hems            151/udp    HEMS
#                          Christopher Tengi <tengi@Princeton.EDU>
bftp            152/tcp    Background File Transfer Program
bftp            152/udp    Background File Transfer Program
#                          Annette DeSchon <DESCHON@ISI.EDU>
sgmp            153/tcp    SGMP
sgmp            153/udp    SGMP
#                          Marty Schoffstahl <schoff@NISC.NYSER.NET>
netsc-prod      154/tcp    NETSC
netsc-prod      154/udp    NETSC
netsc-dev       155/tcp    NETSC
netsc-dev       155/udp    NETSC
#                          Sergio Heker <heker@JVNCC.CSC.ORG>
sqlsrv          156/tcp    SQL Service
sqlsrv          156/udp    SQL Service
#                          Craig Rogers <Rogers@ISI.EDU>
knet-cmp        157/tcp    KNET/VM Command/Message Protocol
knet-cmp        157/udp    KNET/VM Command/Message Protocol
#                          Gary S. Malkin <GMALKIN@XYLOGICS.COM>
pcmail-srv      158/tcp    PCMail Server
pcmail-srv      158/udp    PCMail Server
#                          Mark L. Lambert <markl@PTT.LCS.MIT.EDU>
nss-routing     159/tcp    NSS-Routing
nss-routing     159/udp    NSS-Routing
#                          Yakov Rekhter <Yakov@IBM.COM>
sgmp-traps      160/tcp    SGMP-TRAPS
sgmp-traps      160/udp    SGMP-TRAPS
#                          Marty Schoffstahl <schoff@NISC.NYSER.NET>
snmp            161/tcp    SNMP
snmp            161/udp    SNMP
snmptrap        162/tcp    SNMPTRAP
snmptrap        162/udp    SNMPTRAP
#                          Marshall Rose <mrose@dbc.mtview.ca.us>
cmip-man        163/tcp    CMIP/TCP Manager
cmip-man        163/udp    CMIP/TCP Manager
cmip-agent      164/tcp    CMIP/TCP Agent
smip-agent      164/udp    CMIP/TCP Agent
#                          Amatzia Ben-Artzi <---none--->
xns-courier     165/tcp    Xerox
xns-courier     165/udp    Xerox

Reynolds & Postel                                              [Page 25]

RFC 1700                    Assigned Numbers                October 1994

#                          Susie Armstrong <Armstrong.wbst128@XEROX.COM>
s-net           166/tcp    Sirius Systems
s-net           166/udp    Sirius Systems
#                          Brian Lloyd <---none--->
namp            167/tcp    NAMP
namp            167/udp    NAMP
#                          Marty Schoffstahl <schoff@NISC.NYSER.NET>
rsvd            168/tcp    RSVD
rsvd            168/udp    RSVD
#                          Neil Todd <mcvax!ist.co.uk!neil@UUNET.UU.NET>
send            169/tcp    SEND
send            169/udp    SEND
#               William D. Wisner <wisner@HAYES.FAI.ALASKA.EDU>
print-srv       170/tcp    Network PostScript
print-srv       170/udp    Network PostScript
#                          Brian Reid <reid@DECWRL.DEC.COM>
multiplex       171/tcp    Network Innovations Multiplex
multiplex       171/udp    Network Innovations Multiplex
cl/1            172/tcp    Network Innovations CL/1
cl/1            172/udp    Network Innovations CL/1
#                          Kevin DeVault <<---none--->
xyplex-mux      173/tcp    Xyplex
xyplex-mux      173/udp    Xyplex
#                          Bob Stewart <STEWART@XYPLEX.COM>
mailq           174/tcp    MAILQ
mailq           174/udp    MAILQ
#                          Rayan Zachariassen <rayan@AI.TORONTO.EDU>
vmnet           175/tcp    VMNET
vmnet           175/udp    VMNET
#                          Christopher Tengi <tengi@Princeton.EDU>
genrad-mux      176/tcp    GENRAD-MUX
genrad-mux      176/udp    GENRAD-MUX
#                          Ron Thornton <thornton@qm7501.genrad.com>
xdmcp           177/tcp    X Display Manager Control Protocol
xdmcp           177/udp    X Display Manager Control Protocol
#                          Robert W. Scheifler <RWS@XX.LCS.MIT.EDU>
nextstep        178/tcp    NextStep Window Server
NextStep        178/udp    NextStep Window Server
#                          Leo Hourvitz <leo@NEXT.COM>
bgp             179/tcp    Border Gateway Protocol
bgp             179/udp    Border Gateway Protocol
#                          Kirk Lougheed <LOUGHEED@MATHOM.CISCO.COM>
ris             180/tcp    Intergraph
ris             180/udp    Intergraph
#                          Dave Buehmann <ingr!daveb@UUNET.UU.NET>
unify           181/tcp    Unify
unify           181/udp    Unify
#                          Vinod Singh <--none--->

Reynolds & Postel                                              [Page 26]

RFC 1700                    Assigned Numbers                October 1994

audit           182/tcp    Unisys Audit SITP
audit           182/udp    Unisys Audit SITP
#                          Gil Greenbaum <gcole@nisd.cam.unisys.com>
ocbinder        183/tcp    OCBinder
ocbinder        183/udp    OCBinder
ocserver        184/tcp    OCServer
ocserver        184/udp    OCServer
#                          Jerrilynn Okamura <--none--->
remote-kis      185/tcp    Remote-KIS
remote-kis      185/udp    Remote-KIS
kis             186/tcp    KIS Protocol
kis             186/udp    KIS Protocol
#                          Ralph Droms <rdroms@NRI.RESTON.VA.US>
aci             187/tcp    Application Communication Interface
aci             187/udp    Application Communication Interface
#                          Rick Carlos <rick.ticipa.csc.ti.com>
mumps           188/tcp    Plus Five's MUMPS
mumps           188/udp    Plus Five's MUMPS
#                          Hokey Stenn <hokey@PLUS5.COM>
qft             189/tcp    Queued File Transport
qft             189/udp    Queued File Transport
#                          Wayne Schroeder <schroeder@SDS.SDSC.EDU>
gacp            190/tcp    Gateway Access Control Protocol
cacp            190/udp    Gateway Access Control Protocol
#                          C. Philip Wood <cpw@LANL.GOV>
prospero        191/tcp    Prospero Directory Service
prospero        191/udp    Prospero Directory Service
#                          B. Clifford Neuman <bcn@isi.edu>
osu-nms         192/tcp    OSU Network Monitoring System
osu-nms         192/udp    OSU Network Monitoring System
#               Doug Karl <KARL-D@OSU-20.IRCC.OHIO-STATE.EDU>
srmp            193/tcp    Spider Remote Monitoring Protocol
srmp            193/udp    Spider Remote Monitoring Protocol
#                          Ted J. Socolofsky <Teds@SPIDER.CO.UK>
irc             194/tcp    Internet Relay Chat Protocol
irc             194/udp    Internet Relay Chat Protocol
#                          Jarkko Oikarinen <jto@TOLSUN.OULU.FI>
dn6-nlm-aud     195/tcp    DNSIX Network Level Module Audit
dn6-nlm-aud     195/udp    DNSIX Network Level Module Audit
dn6-smm-red     196/tcp    DNSIX Session Mgt Module Audit Redir
dn6-smm-red     196/udp    DNSIX Session Mgt Module Audit Redir
#                          Lawrence Lebahn <DIA3@PAXRV-NES.NAVY.MIL>
dls             197/tcp    Directory Location Service
dls             197/udp    Directory Location Service
dls-mon         198/tcp    Directory Location Service Monitor
dls-mon         198/udp    Directory Location Service Monitor
#                          Scott Bellew <smb@cs.purdue.edu>
smux            199/tcp    SMUX

Reynolds & Postel                                              [Page 27]

RFC 1700                    Assigned Numbers                October 1994

smux            199/udp    SMUX
#                          Marshall Rose <mrose@dbc.mtview.ca.us>
src             200/tcp    IBM System Resource Controller
src             200/udp    IBM System Resource Controller
#                          Gerald McBrearty <---none--->
at-rtmp         201/tcp    AppleTalk Routing Maintenance
at-rtmp         201/udp    AppleTalk Routing Maintenance
at-nbp          202/tcp    AppleTalk Name Binding
at-nbp          202/udp    AppleTalk Name Binding
at-3            203/tcp    AppleTalk Unused
at-3            203/udp    AppleTalk Unused
at-echo         204/tcp    AppleTalk Echo
at-echo         204/udp    AppleTalk Echo
at-5            205/tcp    AppleTalk Unused
at-5            205/udp    AppleTalk Unused
at-zis          206/tcp    AppleTalk Zone Information
at-zis          206/udp    AppleTalk Zone Information
at-7            207/tcp    AppleTalk Unused
at-7            207/udp    AppleTalk Unused
at-8            208/tcp    AppleTalk Unused
at-8            208/udp    AppleTalk Unused
#                          Rob Chandhok <chandhok@gnome.cs.cmu.edu>
tam             209/tcp    Trivial Authenticated Mail Protocol
tam             209/udp    Trivial Authenticated Mail Protocol
#                          Dan Bernstein <brnstnd@stealth.acf.nyu.edu>
z39.50          210/tcp    ANSI Z39.50
z39.50          210/udp    ANSI Z39.50
#                          Mark Needleman
#                         <mhnur%uccmvsa.bitnet@cornell.cit.cornell.edu>
914c/g          211/tcp    Texas Instruments 914C/G Terminal
914c/g          211/udp    Texas Instruments 914C/G Terminal
#                          Bill Harrell <---none--->
anet            212/tcp    ATEXSSTR
anet            212/udp    ATEXSSTR
#                          Jim Taylor <taylor@heart.epps.kodak.com>
ipx             213/tcp    IPX
ipx             213/udp    IPX
#                          Don Provan <donp@xlnvax.novell.com>
vmpwscs         214/tcp    VM PWSCS
vmpwscs         214/udp    VM PWSCS
#                          Dan Shia <dset!shia@uunet.UU.NET>
softpc          215/tcp    Insignia Solutions
softpc          215/udp    Insignia Solutions
#                          Martyn Thomas <---none--->
atls            216/tcp    Access Technology License Server
atls            216/udp    Access Technology License Server
#                          Larry DeLuca <henrik@EDDIE.MIT.EDU>
dbase           217/tcp    dBASE Unix

Reynolds & Postel                                              [Page 28]

RFC 1700                    Assigned Numbers                October 1994

dbase           217/udp    dBASE Unix
#                          Don Gibson
#            <sequent!aero!twinsun!ashtate.A-T.COM!dong@uunet.UU.NET>
mpp             218/tcp    Netix Message Posting Protocol
mpp             218/udp    Netix Message Posting Protocol
#                          Shannon Yeh <yeh@netix.com>
uarps           219/tcp    Unisys ARPs
uarps           219/udp    Unisys ARPs
#                          Ashok Marwaha <---none--->
imap3           220/tcp    Interactive Mail Access Protocol v3
imap3           220/udp    Interactive Mail Access Protocol v3
#                          James Rice <RICE@SUMEX-AIM.STANFORD.EDU>
fln-spx         221/tcp    Berkeley rlogind with SPX auth
fln-spx         221/udp    Berkeley rlogind with SPX auth
rsh-spx         222/tcp    Berkeley rshd with SPX auth
rsh-spx         222/udp    Berkeley rshd with SPX auth
cdc             223/tcp    Certificate Distribution Center
cdc             223/udp    Certificate Distribution Center
#               Kannan Alagappan <kannan@sejour.enet.dec.com>
#               224-241    Reserved
#                          Jon Postel <postel@isi.edu>
#               242/tcp    Unassigned
#               242/udp    Unassigned
sur-meas        243/tcp    Survey Measurement
sur-meas        243/udp    Survey Measurement
#                          Dave Clark <ddc@LCS.MIT.EDU>
#               244/tcp    Unassigned
#               244/udp    Unassigned
link            245/tcp    LINK
link            245/udp    LINK
dsp3270         246/tcp    Display Systems Protocol
dsp3270         246/udp    Display Systems Protocol
#                          Weldon J. Showalter <Gamma@MINTAKA.DCA.MIL>
#               247-255    Reserved
#                          Jon Postel <postel@isi.edu>
#               256-343    Unassigned
pdap            344/tcp    Prospero Data Access Protocol
pdap            344/udp    Prospero Data Access Protocol
#                          B. Clifford Neuman <bcn@isi.edu>
pawserv         345/tcp    Perf Analysis Workbench
pawserv         345/udp    Perf Analysis Workbench
zserv           346/tcp    Zebra server
zserv           346/udp    Zebra server
fatserv         347/tcp    Fatmen Server
fatserv         347/udp    Fatmen Server
csi-sgwp        348/tcp    Cabletron Management Protocol
csi-sgwp        348/udp    Cabletron Management Protocol
#               349-370    Unassigned

Reynolds & Postel                                              [Page 29]

RFC 1700                    Assigned Numbers                October 1994

clearcase       371/tcp    Clearcase
clearcase       371/udp    Clearcase
#                          Dave LeBlang <leglang@atria.com>
ulistserv       372/tcp    Unix Listserv
ulistserv       372/udp    Unix Listserv
#                          Anastasios Kotsikonas <tasos@cs.bu.edu>
legent-1        373/tcp    Legent Corporation
legent-1        373/udp    Legent Corporation
legent-2        374/tcp    Legent Corporation
legent-2        374/udp    Legent Corporation
#                          Keith Boyce <---none--->
hassle          375/tcp    Hassle
hassle          375/udp    Hassle
#                          Reinhard Doelz <doelz@comp.bioz.unibas.ch>
nip             376/tcp    Amiga Envoy Network Inquiry Proto
nip             376/udp    Amiga Envoy Network Inquiry Proto
#                          Kenneth Dyke <kcd@cbmvax.cbm.commodore.com>
tnETOS          377/tcp    NEC Corporation
tnETOS          377/udp    NEC Corporation
dsETOS          378/tcp    NEC Corporation
dsETOS          378/udp    NEC Corporation
#                          Tomoo Fujita <tf@arc.bs1.fc.nec.co.jp>
is99c           379/tcp    TIA/EIA/IS-99 modem client
is99c           379/udp    TIA/EIA/IS-99 modem client
is99s           380/tcp    TIA/EIA/IS-99 modem server
is99s           380/udp    TIA/EIA/IS-99 modem server
#                          Frank Quick <fquick@qualcomm.com>
hp-collector    381/tcp    hp performance data collector
hp-collector    381/udp    hp performance data collector
hp-managed-node 382/tcp    hp performance data managed node
hp-managed-node 382/udp    hp performance data managed node
hp-alarm-mgr    383/tcp    hp performance data alarm manager
hp-alarm-mgr    383/udp    hp performance data alarm manager
#                          Frank Blakely <frankb@hpptc16.rose.hp.com>
arns            384/tcp    A Remote Network Server System
arns            384/udp    A Remote Network Server System
#                          David Hornsby <djh@munnari.OZ.AU>
ibm-app         385/tcp    IBM Application
ibm-app         385/tcp    IBM Application
#                          Lisa Tomita <---none--->
asa             386/tcp    ASA Message Router Object Def.
asa             386/udp    ASA Message Router Object Def.
#                          Steve Laitinen <laitinen@brutus.aa.ab.com>
aurp            387/tcp    Appletalk Update-Based Routing Pro.
aurp            387/udp    Appletalk Update-Based Routing Pro.
#                          Chris Ranch <cranch@novell.com>
unidata-ldm     388/tcp    Unidata LDM Version 4
unidata-ldm     388/udp    Unidata LDM Version 4

Reynolds & Postel                                              [Page 30]

RFC 1700                    Assigned Numbers                October 1994

#                          Glenn Davis <davis@unidata.ucar.edu>
ldap            389/tcp    Lightweight Directory Access Protocol
ldap            389/udp    Lightweight Directory Access Protocol
#                          Tim Howes <Tim.Howes@terminator.cc.umich.edu>
uis             390/tcp    UIS
uis             390/udp    UIS
#                          Ed Barron <---none--->
synotics-relay  391/tcp    SynOptics SNMP Relay Port
synotics-relay  391/udp    SynOptics SNMP Relay Port
synotics-broker 392/tcp    SynOptics Port Broker Port
synotics-broker 392/udp    SynOptics Port Broker Port
#                          Illan Raab <iraab@synoptics.com>
dis             393/tcp    Data Interpretation System
dis             393/udp    Data Interpretation System
#                          Paul Stevens <pstevens@chinacat.Metaphor.COM>
embl-ndt        394/tcp    EMBL Nucleic Data Transfer
embl-ndt        394/udp    EMBL Nucleic Data Transfer
#                          Peter Gad <peter@bmc.uu.se>
netcp           395/tcp    NETscout Control Protocol
netcp           395/udp    NETscout Control Protocol
#                          Anil Singhal <---none--->
netware-ip      396/tcp    Novell Netware over IP
netware-ip      396/udp    Novell Netware over IP
mptn            397/tcp    Multi Protocol Trans. Net.
mptn            397/udp    Multi Protocol Trans. Net.
#                          Soumitra Sarkar <sarkar@vnet.ibm.com>
kryptolan       398/tcp    Kryptolan
kryptolan       398/udp    Kryptolan
#                          Peter de Laval <pdl@sectra.se>
#               399/tcp    Unassigned
#               399/udp    Unassigned
work-sol        400/tcp    Workstation Solutions
work-sol        400/udp    Workstation Solutions
#                          Jim Ward <jimw@worksta.com>
ups             401/tcp    Uninterruptible Power Supply
ups             401/udp    Uninterruptible Power Supply
#                          Guenther Seybold <gs@hrz.th-darmstadt.de>
genie           402/tcp    Genie Protocol
genie           402/udp    Genie Protocol
#                          Mark Hankin <---none--->
decap           403/tcp    decap
decap           403/udp    decap
nced            404/tcp    nced
nced            404/udp    nced
ncld            405/tcp    ncld
ncld            405/udp    ncld
#                          Richard Jones <---none--->
imsp            406/tcp    Interactive Mail Support Protocol

Reynolds & Postel                                              [Page 31]

RFC 1700                    Assigned Numbers                October 1994

imsp            406/udp    Interactive Mail Support Protocol
#                          John Myers <jgm+@cmu.edu>
timbuktu        407/tcp    Timbuktu
timbuktu        407/udp    Timbuktu
#                          Marc Epard <marc@waygate.farallon.com>
prm-sm          408/tcp    Prospero Resource Manager Sys. Man.
prm-sm          408/udp    Prospero Resource Manager Sys. Man.
prm-nm          409/tcp    Prospero Resource Manager Node Man.
prm-nm          409/udp    Prospero Resource Manager Node Man.
#                          B. Clifford Neuman <bcn@isi.edu>
decladebug      410/tcp    DECLadebug Remote Debug Protocol
decladebug      410/udp    DECLadebug Remote Debug Protocol
#                          Anthony Berent <berent@rdgeng.enet.dec.com>
rmt             411/tcp    Remote MT Protocol
rmt             411/udp    Remote MT Protocol
#                          Peter Eriksson <pen@lysator.liu.se>
synoptics-trap  412/tcp    Trap Convention Port
synoptics-trap  412/udp    Trap Convention Port
#                          Illan Raab <iraab@synoptics.com>
smsp            413/tcp    SMSP
smsp            413/udp    SMSP
infoseek        414/tcp    InfoSeek
infoseek        414/udp    InfoSeek
#                          Steve Kirsch <stk@frame.com>
bnet            415/tcp    BNet
bnet            415/udp    BNet
#                          Jim Mertz <JMertz+RV09@rvdc.unisys.com>
silverplatter   416/tcp    Silverplatter
silverplatter   416/udp    Silverplatter
#                          Peter Ciuffetti <petec@silverplatter.com>
onmux           417/tcp    Onmux
onmux           417/udp    Onmux
#                          Stephen Hanna <hanna@world.std.com>
hyper-g         418/tcp    Hyper-G
hyper-g         418/udp    Hyper-G
#                          Frank Kappe <fkappe@iicm.tu-graz.ac.at>
ariel1          419/tcp    Ariel
ariel1          419/udp    Ariel
#                          Jonathan Lavigne <BL.JPL@RLG.Stanford.EDU>
smpte           420/tcp    SMPTE
smpte           420/udp    SMPTE
#                          Si Becker <71362.22@CompuServe.COM>
ariel2          421/tcp    Ariel
ariel2          421/udp    Ariel
ariel3          422/tcp    Ariel
ariel3          422/udp    Ariel
#                          Jonathan Lavigne  <BL.JPL@RLG.Stanford.EDU>
opc-job-start   423/tcp    IBM Operations Planning and Control Start

Reynolds & Postel                                              [Page 32]

RFC 1700                    Assigned Numbers                October 1994

opc-job-start   423/udp    IBM Operations Planning and Control Start
opc-job-track   424/tcp    IBM Operations Planning and Control Track
opc-job-track   424/udp    IBM Operations Planning and Control Track
#                          Conny Larsson  <cocke@VNET.IBM.COM>
icad-el         425/tcp    ICAD
icad-el         425/udp    ICAD
#                          Larry Stone  <lcs@icad.com>
smartsdp        426/tcp    smartsdp
smartsdp        426/udp    smartsdp
#                          Alexander Dupuy <dupuy@smarts.com>
svrloc          427/tcp    Server Location
svrloc          427/udp    Server Location
#                          <veizades@ftp.com>
ocs_cmu         428/tcp    OCS_CMU
ocs_cmu         428/udp    OCS_CMU
ocs_amu         429/tcp    OCS_AMU
ocs_amu         429/udp    OCS_AMU
#                          Florence Wyman <wyman@peabody.plk.af.mil>
utmpsd          430/tcp    UTMPSD
utmpsd          430/udp    UTMPSD
utmpcd          431/tcp    UTMPCD
utmpcd          431/udp    UTMPCD
iasd            432/tcp    IASD
iasd            432/udp    IASD
#                          Nir Baroz <nbaroz@encore.com>
nnsp            433/tcp    NNSP
nnsp            433/udp    NNSP
#                          Rob Robertson <rob@gangrene.berkeley.edu>
mobileip-agent  434/tcp    MobileIP-Agent
mobileip-agent  434/udp    MobileIP-Agent
mobilip-mn      435/tcp    MobilIP-MN
mobilip-mn      435/udp    MobilIP-MN
#                          Kannan Alagappan <kannan@sejour.lkg.dec.com>
dna-cml         436/tcp    DNA-CML
dna-cml         436/udp    DNA-CML
#                          Dan Flowers <flowers@smaug.lkg.dec.com>
comscm          437/tcp    comscm
comscm          437/udp    comscm
#                          Jim Teague <teague@zso.dec.com>
dsfgw           438/tcp    dsfgw
dsfgw           438/udp    dsfgw
#                          Andy McKeen <mckeen@osf.org>
dasp            439/tcp    dasp      Thomas Obermair
dasp            439/udp    dasp      tommy@inlab.m.eunet.de
#                          Thomas Obermair <tommy@inlab.m.eunet.de>
sgcp            440/tcp    sgcp
sgcp            440/udp    sgcp
#                          Marshall Rose <mrose@dbc.mtview.ca.us>

Reynolds & Postel                                              [Page 33]

RFC 1700                    Assigned Numbers                October 1994

decvms-sysmgt   441/tcp    decvms-sysmgt
decvms-sysmgt   441/udp    decvms-sysmgt
#                          Lee Barton <barton@star.enet.dec.com>
cvc_hostd       442/tcp    cvc_hostd
cvc_hostd       442/udp    cvc_hostd
#                          Bill Davidson <billd@equalizer.cray.com>
https           443/tcp    https  MCom
https           443/udp    https  MCom
#                          Kipp E.B. Hickman <kipp@mcom.com>
snpp            444/tcp    Simple Network Paging Protocol
snpp            444/udp    Simple Network Paging Protocol
#                          [RFC1568]
microsoft-ds    445/tcp    Microsoft-DS
microsoft-ds    445/udp    Microsoft-DS
#                          Arnold Miller <arnoldm@microsoft.com>
ddm-rdb         446/tcp    DDM-RDB
ddm-rdb         446/udp    DDM-RDB
ddm-dfm         447/tcp    DDM-RFM
ddm-dfm         447/udp    DDM-RFM
ddm-byte        448/tcp    DDM-BYTE
ddm-byte        448/udp    DDM-BYTE
#                          Jan David Fisher <jdfisher@VNET.IBM.COM>
as-servermap    449/tcp    AS Server Mapper
as-servermap    449/udp    AS Server Mapper
#                          Barbara Foss <BGFOSS@rchvmv.vnet.ibm.com>
tserver         450/tcp    TServer
tserver         450/udp    TServer
#                          Harvey S. Schultz <hss@mtgzfs3.mt.att.com>
#               451-511    Unassigned
exec            512/tcp    remote process execution;
#                          authentication performed using
#                          passwords and UNIX loppgin names
biff            512/udp    used by mail system to notify users
#                          of new mail received; currently
#                          receives messages only from
#                          processes on the same machine
login           513/tcp    remote login a la telnet;
#                          automatic authentication performed
#                          based on priviledged port numbers
#                          and distributed data bases which
#                          identify "authentication domains"
who             513/udp    maintains data bases showing who's
#                          logged in to machines on a local
#                          net and the load average of the
#                          machine
cmd             514/tcp    like exec, but automatic
#                          authentication is performed as for
#                          login server

Reynolds & Postel                                              [Page 34]

RFC 1700                    Assigned Numbers                October 1994

syslog          514/udp
printer         515/tcp    spooler
printer         515/udp    spooler
#               516/tcp    Unassigned
#               516/udp    Unassigned
talk            517/tcp    like tenex link, but across
#                          machine - unfortunately, doesn't
#                          use link protocol (this is actually
#                          just a rendezvous port from which a
#                          tcp connection is established)
talk            517/udp    like tenex link, but across
#                          machine - unfortunately, doesn't
#                          use link protocol (this is actually
#                          just a rendezvous port from which a
                           tcp connection is established)
ntalk           518/tcp
ntalk           518/udp
utime           519/tcp    unixtime
utime           519/udp    unixtime
efs             520/tcp    extended file name server
router          520/udp    local routing process (on site);
#                          uses variant of Xerox NS routing
#                          information protocol
#               521-524    Unassigned
timed           525/tcp    timeserver
timed           525/udp    timeserver
tempo           526/tcp    newdate
tempo           526/udp    newdate
#               527-529    Unassigned
courier         530/tcp    rpc
courier         530/udp    rpc
conference      531/tcp    chat
conference      531/udp    chat
netnews         532/tcp    readnews
netnews         532/udp    readnews
netwall         533/tcp    for emergency broadcasts
netwall         533/udp    for emergency broadcasts
#               534-538    Unassigned
apertus-ldp     539/tcp    Apertus Technologies Load Determination
apertus-ldp     539/udp    Apertus Technologies Load Determination
uucp            540/tcp    uucpd
uucp            540/udp    uucpd
uucp-rlogin     541/tcp    uucp-rlogin  Stuart Lynne
uucp-rlogin     541/udp    uucp-rlogin  sl@wimsey.com
#               542/tcp    Unassigned
#               542/udp    Unassigned
klogin          543/tcp
klogin          543/udp

Reynolds & Postel                                              [Page 35]

RFC 1700                    Assigned Numbers                October 1994

kshell          544/tcp    krcmd
kshell          544/udp    krcmd
#               545-549    Unassigned
new-rwho        550/tcp    new-who
new-rwho        550/udp    new-who
#               551-555    Unassigned
dsf             555/tcp
dsf             555/udp
remotefs        556/tcp    rfs server
remotefs        556/udp    rfs server
#               557-559    Unassigned
rmonitor        560/tcp    rmonitord
rmonitor        560/udp    rmonitord
monitor         561/tcp
monitor         561/udp
chshell         562/tcp    chcmd
chshell         562/udp    chcmd
#               563/tcp    Unassigned
#               563/udp    Unassigned
9pfs            564/tcp    plan 9 file service
9pfs            564/udp    plan 9 file service
whoami          565/tcp    whoami
whoami          565/udp    whoami
#               566-569    Unassigned
meter           570/tcp    demon
meter           570/udp    demon
meter           571/tcp    udemon
meter           571/udp    udemon
#               572-599    Unassigned
ipcserver       600/tcp    Sun IPC server
ipcserver       600/udp    Sun IPC server
nqs             607/tcp    nqs
nqs             607/udp    nqs
urm             606/tcp    Cray Unified Resource Manager
urm             606/udp    Cray Unified Resource Manager
#                          Bill Schiefelbein <schief@aspen.cray.com>
sift-uft        608/tcp    Sender-Initiated/Unsolicited File Transfer
sift-uft        608/udp    Sender-Initiated/Unsolicited File Transfer
#                          Rick Troth <troth@rice.edu>
npmp-trap       609/tcp    npmp-trap
npmp-trap       609/udp    npmp-trap
npmp-local      610/tcp    npmp-local
npmp-local      610/udp    npmp-local
npmp-gui        611/tcp    npmp-gui
npmp-gui        611/udp    npmp-gui
#                          John Barnes <jbarnes@crl.com>
ginad           634/tcp    ginad
ginad           634/udp    ginad

Reynolds & Postel                                              [Page 36]

RFC 1700                    Assigned Numbers                October 1994

#                          Mark Crother <mark@eis.calstate.edu>
mdqs            666/tcp
mdqs            666/udp
doom            666/tcp    doom Id Software
doom            666/tcp    doom Id Software
#                          <ddt@idcube.idsoftware.com>
elcsd           704/tcp    errlog copy/server daemon
elcsd           704/udp    errlog copy/server daemon

entrustmanager  709/tcp    EntrustManager
entrustmanager  709/udp    EntrustManager
#                          Peter Whittaker <pww@bnr.ca>
netviewdm1      729/tcp    IBM NetView DM/6000 Server/Client
netviewdm1      729/udp    IBM NetView DM/6000 Server/Client
netviewdm2      730/tcp    IBM NetView DM/6000 send/tcp
netviewdm2      730/udp    IBM NetView DM/6000 send/tcp
netviewdm3      731/tcp    IBM NetView DM/6000 receive/tcp
netviewdm3      731/udp    IBM NetView DM/6000 receive/tcp
#                          Philippe Binet  (phbinet@vnet.IBM.COM)
netgw           741/tcp    netGW
netgw           741/udp    netGW
netrcs          742/tcp    Network based Rev. Cont. Sys.
netrcs          742/udp    Network based Rev. Cont. Sys.
#                          Gordon C. Galligher <gorpong@ping.chi.il.us>
flexlm          744/tcp    Flexible License Manager
flexlm          744/udp    Flexible License Manager
#                          Matt Christiano
#                          <globes@matt@oliveb.atc.olivetti.com>
fujitsu-dev     747/tcp    Fujitsu Device Control
fujitsu-dev     747/udp    Fujitsu Device Control
ris-cm          748/tcp    Russell Info Sci Calendar Manager
ris-cm          748/udp    Russell Info Sci Calendar Manager
kerberos-adm    749/tcp    kerberos administration
kerberos-adm    749/udp    kerberos administration
rfile           750/tcp
loadav          750/udp
pump            751/tcp
pump            751/udp
qrh             752/tcp
qrh             752/udp
rrh             753/tcp
rrh             753/udp
tell            754/tcp     send
tell            754/udp     send
nlogin          758/tcp
nlogin          758/udp
con             759/tcp
con             759/udp

Reynolds & Postel                                              [Page 37]

RFC 1700                    Assigned Numbers                October 1994

ns              760/tcp
ns              760/udp
rxe             761/tcp
rxe             761/udp
quotad          762/tcp
quotad          762/udp
cycleserv       763/tcp
cycleserv       763/udp
omserv          764/tcp
omserv          764/udp
webster         765/tcp
webster         765/udp
phonebook       767/tcp    phone
phonebook       767/udp    phone
vid             769/tcp
vid             769/udp
cadlock         770/tcp
cadlock         770/udp
rtip            771/tcp
rtip            771/udp
cycleserv2      772/tcp
cycleserv2      772/udp
submit          773/tcp
notify          773/udp
rpasswd         774/tcp
acmaint_dbd     774/udp
entomb          775/tcp
acmaint_transd  775/udp
wpages          776/tcp
wpages          776/udp
wpgs            780/tcp
wpgs            780/udp
concert         786/tcp       Concert
concert         786/udp       Concert
#                             Josyula R. Rao <jrrao@watson.ibm.com>
mdbs_daemon     800/tcp
mdbs_daemon     800/udp
device          801/tcp
device          801/udp
xtreelic        996/tcp        Central Point Software
xtreelic        996/udp        Central Point Software
#                              Dale Cabell <dacabell@smtp.xtree.com>
maitrd          997/tcp
maitrd          997/udp
busboy          998/tcp
puparp          998/udp
garcon          999/tcp
applix          999/udp        Applix ac

Reynolds & Postel                                              [Page 38]

RFC 1700                    Assigned Numbers                October 1994

puprouter       999/tcp
puprouter       999/udp
cadlock         1000/tcp
ock             1000/udp
                1023/tcp       Reserved
                1024/udp       Reserved
#                              IANA <iana@isi.edu>

REGISTERED PORT NUMBERS

The Registered Ports are not controlled by the IANA and on most
systems can be used by ordinary user processes or programs executed by
ordinary users.

Ports are used in the TCP [RFC793] to name the ends of logical
connections which carry long term conversations.  For the purpose of
providing services to unknown callers, a service contact port is
defined.  This list specifies the port used by the server process as
its contact port.  While the IANA can not control uses of these ports
it does register or list uses of these ports as a convienence to the
community.

To the extent possible, these same port assignments are used with the
UDP [RFC768].

The Registered Ports are in the range 1024-65535.

Port Assignments:

Keyword         Decimal    Description                     References
-------         -------    -----------                     ----------
                1024/tcp   Reserved
                1024/udp   Reserved
#                          IANA <iana@isi.edu>
blackjack       1025/tcp   network blackjack
blackjack       1025/udp   network blackjack
iad1            1030/tcp   BBN IAD
iad1            1030/udp   BBN IAD
iad2            1031/tcp   BBN IAD
iad2            1031/udp   BBN IAD
iad3            1032/tcp   BBN IAD
iad3            1032/udp   BBN IAD
#                          Andy Malis <malis_a@timeplex.com>
instl_boots     1067/tcp   Installation Bootstrap Proto. Serv.
instl_boots     1067/udp   Installation Bootstrap Proto. Serv.
instl_bootc     1068/tcp   Installation Bootstrap Proto. Cli.

Reynolds & Postel                                              [Page 39]

RFC 1700                    Assigned Numbers                October 1994

instl_bootc     1068/udp   Installation Bootstrap Proto. Cli.
#                          David Arko <<darko@hpfcrn.fc.hp.com>
socks           1080/tcp   Socks
socks           1080/udp   Socks
#                          Ying-Da Lee <ylee@syl.dl.nec.com
ansoft-lm-1     1083/tcp   Anasoft License Manager
ansoft-lm-1     1083/udp   Anasoft License Manager
ansoft-lm-2     1084/tcp   Anasoft License Manager
ansoft-lm-2     1084/udp   Anasoft License Manager
nfa             1155/tcp   Network File Access
nfa             1155/udp   Network File Access
#                          James Powell <james@mailhost.unidata.com>
nerv            1222/tcp   SNI R&D network
nerv            1222/udp   SNI R&D network
#                          Martin Freiss <freiss.pad@sni.de>
hermes          1248/tcp
hermes          1248/udp
alta-ana-lm     1346/tcp   Alta Analytics License Manager
alta-ana-lm     1346/udp   Alta Analytics License Manager
bbn-mmc         1347/tcp   multi media conferencing
bbn-mmc         1347/udp   multi media conferencing
bbn-mmx         1348/tcp   multi media conferencing
bbn-mmx         1348/udp   multi media conferencing
sbook           1349/tcp   Registration Network Protocol
sbook           1349/udp   Registration Network Protocol
editbench       1350/tcp   Registration Network Protocol
editbench       1350/udp   Registration Network Protocol
#               Simson L. Garfinkel <simsong@next.cambridge.ma.us>
equationbuilder 1351/tcp   Digital Tool Works (MIT)
equationbuilder 1351/udp   Digital Tool Works (MIT)
#                          Terrence J. Talbot <lexcube!tjt@bu.edu>
lotusnote       1352/tcp   Lotus Note
lotusnote       1352/udp   Lotus Note
#               Greg Pflaum <iris.com!Greg_Pflaum@uunet.uu.net>
relief          1353/tcp   Relief Consulting
relief          1353/udp   Relief Consulting
#                          John Feiler <relief!jjfeiler@uu2.psi.com>
rightbrain      1354/tcp   RightBrain Software
rightbrain      1354/udp   RightBrain Software
#                          Glenn Reid <glann@rightbrain.com>
intuitive edge  1355/tcp   Intuitive Edge
intuitive edge  1355/udp   Intuitive Edge
#                          Montgomery Zukowski
#                          <monty@nextnorth.acs.ohio-state.edu>
cuillamartin    1356/tcp   CuillaMartin Company
cuillamartin    1356/udp   CuillaMartin Company
pegboard        1357/tcp   Electronic PegBoard
pegboard        1357/udp   Electronic PegBoard

Reynolds & Postel                                              [Page 40]

RFC 1700                    Assigned Numbers                October 1994

#                          Chris Cuilla
#                          <balr!vpnet!cuilla!chris@clout.chi.il.us>
connlcli        1358/tcp   CONNLCLI
connlcli        1358/udp   CONNLCLI
ftsrv           1359/tcp   FTSRV
ftsrv           1359/udp   FTSRV
#                          Ines Homem de Melo <sidinf@brfapesp.bitnet>
mimer           1360/tcp   MIMER
mimer           1360/udp   MIMER
#                          Per Schroeder  <Per.Schroder@mimer.se>
linx            1361/tcp   LinX
linx            1361/udp   LinX
#                          Steffen Schilke <---none--->
timeflies       1362/tcp   TimeFlies
timeflies       1362/udp   TimeFlies
#                          Doug Kent <mouthers@slugg@nwnexus.wa.com>
ndm-requester   1363/tcp   Network DataMover Requester
ndm-requester   1363/udp   Network DataMover Requester
ndm-server      1364/tcp   Network DataMover Server
ndm-server      1364/udp   Network DataMover Server
#                          Toshio Watanabe
#                          <watanabe@godzilla.rsc.spdd.ricoh.co.j>
adapt-sna       1365/tcp   Network Software Associates
adapt-sna       1365/udp   Network Software Associates
#                          Jeffery Chiao <714-768-401>
netware-csp     1366/tcp   Novell NetWare Comm Service Platform
netware-csp     1366/udp   Novell NetWare Comm Service Platform
#                          Laurie Lindsey <llindsey@novell.com>
dcs             1367/tcp   DCS
dcs             1367/udp   DCS
#                          Stefan Siebert <ssiebert@dcs.de>
screencast      1368/tcp   ScreenCast
screencast      1368/udp   ScreenCast
#                          Bill Tschumy <other!bill@uunet.UU.NET>
gv-us           1369/tcp   GlobalView to Unix Shell
gv-us           1369/udp   GlobalView to Unix Shell
us-gv           1370/tcp   Unix Shell to GlobalView
us-gv           1370/udp   Unix Shell to GlobalView
#               Makoto Mita <mita@ssdev.ksp.fujixerox.co.jp>
fc-cli          1371/tcp   Fujitsu Config Protocol
fc-cli          1371/udp   Fujitsu Config Protocol
fc-ser          1372/tcp   Fujitsu Config Protocol
fc-ser          1372/udp   Fujitsu Config Protocol
#               Ryuichi Horie <horie@spad.sysrap.cs.fujitsu.co.jp>
chromagrafx     1373/tcp   Chromagrafx
chromagrafx     1373/udp   Chromagrafx
#                          Mike Barthelemy <msb@chromagrafx.com>
molly           1374/tcp   EPI Software Systems

Reynolds & Postel                                              [Page 41]

RFC 1700                    Assigned Numbers                October 1994

molly           1374/udp   EPI Software Systems
#                          Jim Vlcek <vlcek@epimbe.com>
bytex           1375/tcp   Bytex
bytex           1375/udp   Bytex
#               Mary Ann Burt <bytex!ws054!maryann@uunet.UU.NET>
ibm-pps         1376/tcp   IBM Person to Person Software
ibm-pps         1376/udp   IBM Person to Person Software
#                          Simon Phipps <sphipps@vnet.ibm.com>
cichlid         1377/tcp   Cichlid License Manager
cichlid         1377/udp   Cichlid License Manager
#                          Andy Burgess <aab@cichlid.com>
elan            1378/tcp   Elan License Manager
elan            1378/udp   Elan License Manager
#                          Ken Greer <kg@elan.com>
dbreporter      1379/tcp   Integrity Solutions
dbreporter      1379/udp   Integrity Solutions
#                          Tim Dawson <tdawson%mspboss@uunet.UU.NET>
telesis-licman  1380/tcp   Telesis Network License Manager
telesis-licman  1380/udp   Telesis Network License Manager
#                          Karl Schendel, Jr. <wiz@telesis.com>
apple-licman    1381/tcp   Apple Network License Manager
apple-licman    1381/udp   Apple Network License Manager
#                          Earl Wallace <earlw@apple.com>
udt_os          1382/tcp
udt_os          1382/udp
gwha            1383/tcp   GW Hannaway Network License Manager
gwha            1383/udp   GW Hannaway Network License Manager
#                          J. Gabriel Foster <fop@gwha.com>
os-licman       1384/tcp   Objective Solutions License Manager
os-licman       1384/udp   Objective Solutions License Manager
#               Donald Cornwell <don.cornwell@objective.com>
atex_elmd       1385/tcp   Atex Publishing License Manager
atex_elmd       1385/udp   Atex Publishing License Manager
#                          Brett Sorenson <bcs@atex.com>
checksum        1386/tcp   CheckSum License Manager
checksum        1386/udp   CheckSum License Manager
#                          Andreas Glocker <glocker@sirius.com>
cadsi-lm        1387/tcp   Computer Aided Design Software Inc LM
cadsi-lm        1387/udp   Computer Aided Design Software Inc LM
#                          Sulistio Muljadi
objective-dbc   1388/tcp   Objective Solutions DataBase Cache
objective-dbc   1388/udp   Objective Solutions DataBase Cache
#                          Donald Cornwell
iclpv-dm        1389/tcp   Document Manager
iclpv-dm        1389/udp   Document Manager
iclpv-sc        1390/tcp   Storage Controller
iclpv-sc        1390/udp   Storage Controller
iclpv-sas       1391/tcp   Storage Access Server

Reynolds & Postel                                              [Page 42]

RFC 1700                    Assigned Numbers                October 1994

iclpv-sas       1391/udp   Storage Access Server
iclpv-pm        1392/tcp   Print Manager
iclpv-pm        1392/udp   Print Manager
iclpv-nls       1393/tcp   Network Log Server
iclpv-nls       1393/udp   Network Log Server
iclpv-nlc       1394/tcp   Network Log Client
iclpv-nlc       1394/udp   Network Log Client
iclpv-wsm       1395/tcp   PC Workstation Manager software
iclpv-wsm       1395/udp   PC Workstation Manager software
#               A.P. Hobson <A.P.Hobson@bra0112.wins.icl.co.uk>
dvl-activemail  1396/tcp   DVL Active Mail
dvl-activemail  1396/udp   DVL Active Mail
audio-activmail 1397/tcp   Audio Active Mail
audio-activmail 1397/udp   Audio Active Mail
video-activmail 1398/tcp   Video Active Mail
video-activmail 1398/udp   Video Active Mail
#                          Ehud Shapiro <udi@wisdon.weizmann.ac.il>
cadkey-licman   1399/tcp   Cadkey License Manager
cadkey-licman   1399/udp   Cadkey License Manager
cadkey-tablet   1400/tcp   Cadkey Tablet Daemon
cadkey-tablet   1400/udp   Cadkey Tablet Daemon
#                          Joe McCollough <joe@cadkey.com>
goldleaf-licman 1401/tcp   Goldleaf License Manager
goldleaf-licman 1401/udp   Goldleaf License Manager
#                          John Fox <---none--->
prm-sm-np       1402/tcp   Prospero Resource Manager
prm-sm-np       1402/udp   Prospero Resource Manager
prm-nm-np       1403/tcp   Prospero Resource Manager
prm-nm-np       1403/udp   Prospero Resource Manager
#                          B. Clifford Neuman <bcn@isi.edu>
igi-lm          1404/tcp   Infinite Graphics License Manager
igi-lm          1404/udp   Infinite Graphics License Manager
ibm-res         1405/tcp   IBM Remote Execution Starter
ibm-res         1405/udp   IBM Remote Execution Starter
netlabs-lm      1406/tcp   NetLabs License Manager
netlabs-lm      1406/udp   NetLabs License Manager
dbsa-lm         1407/tcp   DBSA License Manager
dbsa-lm         1407/udp   DBSA License Manager
#                          Scott Shattuck <ss@dbsa.com>
sophia-lm       1408/tcp   Sophia License Manager
sophia-lm       1408/udp   Sophia License Manager
#                          Eric Brown <sst!emerald!eric@uunet.UU.net>
here-lm         1409/tcp   Here License Manager
here-lm         1409/udp   Here License Manager
#                          David Ison  <here@dialup.oar.net>
hiq             1410/tcp   HiQ License Manager
hiq             1410/udp   HiQ License Manager
#                          Rick Pugh <rick@bilmillennium.com>

Reynolds & Postel                                              [Page 43]

RFC 1700                    Assigned Numbers                October 1994

af              1411/tcp   AudioFile
af              1411/udp   AudioFile
#                          Jim Gettys <jg@crl.dec.com>
innosys         1412/tcp   InnoSys
innosys         1412/udp   InnoSys
innosys-acl     1413/tcp   Innosys-ACL
innosys-acl     1413/udp   Innosys-ACL
#                          Eric Welch <--none--->
ibm-mqseries    1414/tcp   IBM MQSeries
ibm-mqseries    1414/udp   IBM MQSeries
#                          Roger Meli <rmmeli%winvmd@vnet.ibm.com>
dbstar          1415/tcp   DBStar
dbstar          1415/udp   DBStar
#                          Jeffrey Millman <jcm@dbstar.com>
novell-lu6.2    1416/tcp   Novell LU6.2
novell-lu6.2    1416/udp   Novell LU6.2
#                          Peter Liu <--none--->
timbuktu-srv1   1417/tcp   Timbuktu Service 1 Port
timbuktu-srv1   1417/tcp   Timbuktu Service 1 Port
timbuktu-srv2   1418/tcp   Timbuktu Service 2 Port
timbuktu-srv2   1418/udp   Timbuktu Service 2 Port
timbuktu-srv3   1419/tcp   Timbuktu Service 3 Port
timbuktu-srv3   1419/udp   Timbuktu Service 3 Port
timbuktu-srv4   1420/tcp   Timbuktu Service 4 Port
timbuktu-srv4   1420/udp   Timbuktu Service 4 Port
#                          Marc Epard <marc@waygate.farallon.com>
gandalf-lm      1421/tcp   Gandalf License Manager
gandalf-lm      1421/udp   Gandalf License Manager
#                          gilmer@gandalf.ca
autodesk-lm     1422/tcp   Autodesk License Manager
autodesk-lm     1422/udp   Autodesk License Manager
#                          David Ko <dko@autodesk.com>
essbase         1423/tcp   Essbase Arbor Software
essbase         1423/udp   Essbase Arbor Software
hybrid          1424/tcp   Hybrid Encryption Protocol
hybrid          1424/udp   Hybrid Encryption Protocol
#                          Howard Hart <hch@hybrid.com>
zion-lm         1425/tcp   Zion Software License Manager
zion-lm         1425/udp   Zion Software License Manager
#                          David Ferrero <david@zion.com>
sas-1           1426/tcp   Satellite-data Acquisition System 1
sas-1           1426/udp   Satellite-data Acquisition System 1
#                          Bill Taylor <sais@ssec.wisc.edu>
mloadd          1427/tcp   mloadd monitoring tool
mloadd          1427/udp   mloadd monitoring tool
#                          Bob Braden <braden@isi.edu>
informatik-lm   1428/tcp   Informatik License Manager
informatik-lm   1428/udp   Informatik License Manager

Reynolds & Postel                                              [Page 44]

RFC 1700                    Assigned Numbers                October 1994

#                          Harald Schlangmann
#                          <schlangm@informatik.uni-muenchen.de>
nms             1429/tcp   Hypercom NMS
nms             1429/udp   Hypercom NMS
tpdu            1430/tcp   Hypercom TPDU
tpdu            1430/udp   Hypercom TPDU
#                          Noor Chowdhury <noor@hypercom.com>
rgtp            1431/tcp   Reverse Gosip Transport
rgtp            1431/udp   Reverse Gosip Transport
#                          <iwj10@cl.cam-orl.co.uk>
blueberry-lm    1432/tcp   Blueberry Software License Manager
blueberry-lm    1432/udp   Blueberry Software License Manager
#                          Steve Beigel <ublueb!steve@uunet.uu.net>
ms-sql-s        1433/tcp   Microsoft-SQL-Server
ms-sql-s        1433/udp   Microsoft-SQL-Server
ms-sql-m        1434/tcp   Microsoft-SQL-Monitor
ms-sql-m        1434/udp   Microsoft-SQL-Monitor
#                          Peter Hussey <peterhus@microsoft.com>
ibm-cics        1435/tcp   IBM CISC
ibm-cics        1435/udp   IBM CISC
#                          Geoff Meacock <gbibmswl@ibmmail.COM>
sas-2           1436/tcp   Satellite-data Acquisition System 2
sas-2           1436/udp   Satellite-data Acquisition System 2
#                          Bill Taylor <sais@ssec.wisc.edu>
tabula          1437/tcp   Tabula
tabula          1437/udp   Tabula
#                          Marcelo Einhorn
#                          <KGUNE%HUJIVM1.bitnet@taunivm.tau.ac.il>
eicon-server    1438/tcp   Eicon Security Agent/Server
eicon-server    1438/udp   Eicon Security Agent/Server
eicon-x25       1439/tcp   Eicon X25/SNA Gateway
eicon-x25       1439/udp   Eicon X25/SNA Gateway
eicon-slp       1440/tcp   Eicon Service Location Protocol
eicon-slp       1440/udp   Eicon Service Location Protocol
#                          Pat Calhoun <CALHOUN@admin.eicon.qc.ca>
cadis-1         1441/tcp   Cadis License Management
cadis-1         1441/udp   Cadis License Management
cadis-2         1442/tcp   Cadis License Management
cadis-2         1442/udp   Cadis License Management
#                          Todd Wichers <twichers@csn.org>
ies-lm          1443/tcp   Integrated Engineering Software
ies-lm          1443/udp   Integrated Engineering Software
#                          David Tong <David_Tong@integrated.mb.ca>
marcam-lm       1444/tcp   Marcam  License Management
marcam-lm       1444/udp   Marcam  License Management
#                          Therese Hunt <hunt@marcam.com>
proxima-lm      1445/tcp   Proxima License Manager
proxima-lm      1445/udp   Proxima License Manager

Reynolds & Postel                                              [Page 45]

RFC 1700                    Assigned Numbers                October 1994

ora-lm          1446/tcp   Optical Research Associates License Manager
ora-lm          1446/udp   Optical Research Associates License Manager
apri-lm         1447/tcp   Applied Parallel Research LM
apri-lm         1447/udp   Applied Parallel Research LM
#                          Jim Dillon <jed@apri.com>
oc-lm           1448/tcp   OpenConnect License Manager
oc-lm           1448/udp   OpenConnect License Manager
#                          Sue Barnhill <snb@oc.com>
peport          1449/tcp   PEport
peport          1449/udp   PEport
#                          Qentin Neill <quentin@ColumbiaSC.NCR.COM>
dwf             1450/tcp   Tandem Distributed Workbench Facility
dwf             1450/udp   Tandem Distributed Workbench Facility
#                          Mike Bert <BERG_MIKE@tandem.com>
infoman         1451/tcp   IBM Information Management
infoman         1451/udp   IBM Information Management
#                          Karen Burns <---none--->
gtegsc-lm       1452/tcp   GTE Government Systems License Man
gtegsc-lm       1452/udp   GTE Government Systems License Man
#               Mike Gregory <Gregory_Mike@msmail.iipo.gtegsc.com>
genie-lm        1453/tcp   Genie License Manager
genie-lm        1453/udp   Genie License Manager
#                          Paul Applegate <p.applegate2@genie.geis.com>
interhdl_elmd   1454/tcp   interHDL License Manager
interhdl_elmd   1454/tcp   interHDL License Manager
#                          Eli Sternheim eli@interhdl.com
esl-lm          1455/tcp   ESL License Manager
esl-lm          1455/udp   ESL License Manager
#                          Abel Chou <abel@willy.esl.com>
dca             1456/tcp   DCA
dca             1456/udp   DCA
#                          Jeff Garbers <jgarbers@netcom.com>
valisys-lm      1457/tcp    Valisys License Manager
valisys-lm      1457/udp    Valisys License Manager
#               Leslie Lincoln <leslie_lincoln@valisys.com>
nrcabq-lm       1458/tcp    Nichols Research Corp.
nrcabq-lm       1458/udp    Nichols Research Corp.
#                           Howard Cole <hcole@tumbleweed.nrcabq.com>
proshare1       1459/tcp    Proshare Notebook Application
proshare1       1459/udp    Proshare Notebook Application
proshare2       1460/tcp    Proshare Notebook Application
proshare2       1460/udp    Proshare Notebook Application
#                           Robin Kar <Robin_Kar@ccm.hf.intel.com>
ibm_wrless_lan  1461/tcp    IBM Wireless LAN
ibm_wrless_lan  1461/udp    IBM Wireless LAN
#                           <flanne@vnet.IBM.COM>
world-lm        1462/tcp    World License Manager
world-lm        1462/udp    World License Manager

Reynolds & Postel                                              [Page 46]

RFC 1700                    Assigned Numbers                October 1994

#                           Michael S Amirault <ambi@world.std.com>
nucleus         1463/tcp    Nucleus
nucleus         1463/udp    Nucleus
#                           Venky Nagar <venky@fafner.Stanford.EDU>
msl_lmd         1464/tcp    MSL License Manager
msl_lmd         1464/udp    MSL License Manager
#                           Matt Timmermans
pipes           1465/tcp    Pipes Platform
pipes           1465/udp    Pipes Platform  mfarlin@peerlogic.com
#                           Mark Farlin <mfarlin@peerlogic.com>
oceansoft-lm    1466/tcp    Ocean Software License Manager
oceansoft-lm    1466/udp    Ocean Software License Manager
#                           Randy Leonard <randy@oceansoft.com>
csdmbase        1467/tcp    CSDMBASE
csdmbase        1467/udp    CSDMBASE
csdm            1468/tcp    CSDM
csdm            1468/udp    CSDM
#               Robert Stabl <stabl@informatik.uni-muenchen.de>
aal-lm          1469/tcp    Active Analysis Limited License Manager
aal-lm          1469/udp    Active Analysis Limited License Manager
#                           David Snocken  +44 (71)437-7009
uaiact          1470/tcp    Universal Analytics
uaiact          1470/udp    Universal Analytics
#                           Mark R. Ludwig <Mark-Ludwig@uai.com>
csdmbase        1471/tcp    csdmbase
csdmbase        1471/udp    csdmbase
csdm            1472/tcp    csdm
csdm            1472/udp    csdm
#               Robert Stabl <stabl@informatik.uni-muenchen.de>
openmath        1473/tcp    OpenMath
openmath        1473/udp    OpenMath
#                           Garth Mayville <mayville@maplesoft.on.ca>
telefinder      1474/tcp    Telefinder
telefinder      1474/udp    Telefinder
#                           Jim White <Jim_White@spiderisland.com>
taligent-lm     1475/tcp    Taligent License Manager
taligent-lm     1475/udp    Taligent License Manager
#               Mark Sapsford <Mark_Sapsford@@taligent.com>
clvm-cfg        1476/tcp    clvm-cfg
clvm-cfg        1476/udp    clvm-cfg
#                           Eric Soderberg <seric@cup.hp.com>
ms-sna-server   1477/tcp    ms-sna-server
ms-sna-server   1477/udp    ms-sna-server
ms-sna-base     1478/tcp    ms-sna-base
ms-sna-base     1478/udp    ms-sna-base
#                           Gordon Mangione <gordm@microsoft.com>
dberegister     1479/tcp    dberegister
dberegister     1479/udp    dberegister

Reynolds & Postel                                              [Page 47]

RFC 1700                    Assigned Numbers                October 1994

#                           Brian Griswold <brian@dancingbear.com>
pacerforum      1480/tcp    PacerForum
pacerforum      1480/udp    PacerForum
#                           Peter Caswell <pfc@pacvax.pacersoft.com>
airs            1481/tcp    AIRS
airs            1481/udp    AIRS
#                           Bruce Wilson, 905-771-6161
miteksys-lm     1482/tcp    Miteksys License Manager
miteksys-lm     1482/udp    Miteksys License Manager
#                           Shane McRoberts <mcroberts@miteksys.com>
afs             1483/tcp    AFS License Manager
afs             1483/udp    AFS License Manager
#                           Michael R. Pizolato <michael@afs.com>
confluent       1484/tcp    Confluent License Manager
confluent       1484/udp    Confluent License Manager
#                           James Greenfiel <jim@pa.confluent.com>
lansource       1485/tcp    LANSource
lansource       1485/udp    LANSource
#                           Doug Scott <lansourc@hookup.net>
nms_topo_serv   1486/tcp    nms_topo_serv
nms_topo_serv   1486/udp    nms_topo_serv
#                           Sylvia Siu <Sylvia_Siu@Novell.CO>
localinfosrvr   1487/tcp    LocalInfoSrvr
localinfosrvr   1487/udp    LocalInfoSrvr
#               Brian Matthews <brian_matthews@ibist.ibis.com>
docstor         1488/tcp    DocStor
docstor         1488/udp    DocStor
#                           Brian Spears <bspears@salix.com>
dmdocbroker     1489/tcp    dmdocbroker
dmdocbroker     1489/udp    dmdocbroker
#                           Razmik Abnous <abnous@documentum.com>
insitu-conf     1490/tcp    insitu-conf
insitu-conf     1490/udp    insitu-conf
#                           Paul Blacknell <paul@insitu.com>
anynetgateway   1491/tcp    anynetgateway
anynetgateway   1491/udp    anynetgateway
#                           Dan Poirier <poirier@VNET.IBM.COM>
stone-design-1  1492/tcp    stone-design-1
stone-design-1  1492/udp    stone-design-1
#                           Andrew Stone <andrew@stone.com>
netmap_lm       1493/tcp    netmap_lm
netmap_lm       1493/udp    netmap_lm
#                           Phillip Magson <philm@extro.ucc.su.OZ.AU>
ica             1494/tcp    ica
ica             1494/udp    ica
#                           John Richardson, Citrix Systems
cvc             1495/tcp    cvc
cvc             1495/udp    cvc

Reynolds & Postel                                              [Page 48]

RFC 1700                    Assigned Numbers                October 1994

#                           Bill Davidson <billd@equalizer.cray.com>
liberty-lm      1496/tcp    liberty-lm
liberty-lm      1496/udp    liberty-lm
#                           Jim Rogers <trane!jimbo@pacbell.com>
rfx-lm          1497/tcp    rfx-lm
rfx-lm          1497/udp    rfx-lm
#                           Bill Bishop <bil@rfx.rfx.com>
watcom-sql      1498/tcp    Watcom-SQL
watcom-sql      1498/udp    Watcom-SQL
#                           Rog Skubowius <rwskubow@ccnga.uwaterloo.ca>
fhc             1499/tcp    Federico Heinz Consultora
fhc             1499/udp    Federico Heinz Consultora
#                           Federico Heinz <federico@heinz.com>
vlsi-lm         1500/tcp    VLSI License Manager
vlsi-lm         1500/udp    VLSI License Manager
#                           Shue-Lin Kuo <shuelin@mdk.sanjose.vlsi.com>
sas-3           1501/tcp    Satellite-data Acquisition System 3
sas-3           1501/udp    Satellite-data Acquisition System 3
#                           Bill Taylor <sais@ssec.wisc.edu>
shivadiscovery  1502/tcp    Shiva
shivadiscovery  1502/udp    Shiva
#                           Jonathan Wenocur <jhw@Shiva.COM>
imtc-mcs        1503/tcp    Databeam
imtc-mcs        1503/udp    Databeam
#                           Jim Johnstone <jjohnstone@databeam.com>
evb-elm         1504/tcp    EVB Software Engineering License Manager
evb-elm         1504/udp    EVB Software Engineering License Manager
#                           B.G. Mahesh < mahesh@sett.com>
funkproxy       1505/tcp    Funk Software, Inc.
funkproxy       1505/udp    Funk Software, Inc.
#                           Robert D. Vincent <bert@willowpond.com>
#               1506-1523   Unassigned
ingreslock      1524/tcp    ingres
ingreslock      1524/udp    ingres
orasrv          1525/tcp    oracle
orasrv          1525/udp    oracle
prospero-np     1525/tcp    Prospero Directory Service non-priv
prospero-np     1525/udp    Prospero Directory Service non-priv
pdap-np         1526/tcp    Prospero Data Access Prot non-priv
pdap-np         1526/udp    Prospero Data Access Prot non-priv
#                           B. Clifford Neuman <bcn@isi.edu>
tlisrv          1527/tcp    oracle
tlisrv          1527/udp    oracle
coauthor        1529/tcp    oracle
coauthor        1529/udp    oracle
issd            1600/tcp
issd            1600/udp
nkd             1650/tcp

Reynolds & Postel                                              [Page 49]

RFC 1700                    Assigned Numbers                October 1994

nkd             1650/udp
proshareaudio   1651/tcp   proshare conf audio
proshareaudio   1651/udp   proshare conf audio
prosharevideo   1652/tcp   proshare conf video
prosharevideo   1652/udp   proshare conf video
prosharedata    1653/tcp   proshare conf data
prosharedata    1653/udp   proshare conf data
prosharerequest 1654/tcp   proshare conf request
prosharerequest 1654/udp   proshare conf request
prosharenotify  1655/tcp   proshare conf notify
prosharenotify  1655/udp   proshare conf notify
#                          <gunner@ibeam.intel.com>
netview-aix-1   1661/tcp   netview-aix-1
netview-aix-1   1661/udp   netview-aix-1
netview-aix-2   1662/tcp   netview-aix-2
netview-aix-2   1662/udp   netview-aix-2
netview-aix-3   1663/tcp   netview-aix-3
netview-aix-3   1663/udp   netview-aix-3
netview-aix-4   1664/tcp   netview-aix-4
netview-aix-4   1664/udp   netview-aix-4
netview-aix-5   1665/tcp   netview-aix-5
netview-aix-5   1665/udp   netview-aix-5
netview-aix-6   1666/tcp   netview-aix-6
netview-aix-6   1666/udp   netview-aix-6
#               Martha Crisson <CRISSON@ralvm12.vnet.ibm.com>
licensedaemon   1986/tcp   cisco license management
licensedaemon   1986/udp   cisco license management
tr-rsrb-p1      1987/tcp   cisco RSRB Priority 1 port
tr-rsrb-p1      1987/udp   cisco RSRB Priority 1 port
tr-rsrb-p2      1988/tcp   cisco RSRB Priority 2 port
tr-rsrb-p2      1988/udp   cisco RSRB Priority 2 port
tr-rsrb-p3      1989/tcp   cisco RSRB Priority 3 port
tr-rsrb-p3      1989/udp   cisco RSRB Priority 3 port
#PROBLEMS!===================================================
mshnet          1989/tcp   MHSnet system
mshnet          1989/udp   MHSnet system
#               Bob Kummerfeld <bob@sarad.cs.su.oz.au>
#PROBLEMS!===================================================
stun-p1         1990/tcp   cisco STUN Priority 1 port
stun-p1         1990/udp   cisco STUN Priority 1 port
stun-p2         1991/tcp   cisco STUN Priority 2 port
stun-p2         1991/udp   cisco STUN Priority 2 port
stun-p3         1992/tcp   cisco STUN Priority 3 port
stun-p3         1992/udp   cisco STUN Priority 3 port
#PROBLEMS!===================================================
ipsendmsg       1992/tcp   IPsendmsg
ipsendmsg       1992/udp   IPsendmsg
#               Bob Kummerfeld <bob@sarad.cs.su.oz.au>

Reynolds & Postel                                              [Page 50]

RFC 1700                    Assigned Numbers                October 1994

#PROBLEMS!===================================================
snmp-tcp-port   1993/tcp   cisco SNMP TCP port
snmp-tcp-port   1993/udp   cisco SNMP TCP port
stun-port       1994/tcp   cisco serial tunnel port
stun-port       1994/udp   cisco serial tunnel port
perf-port       1995/tcp   cisco perf port
perf-port       1995/udp   cisco perf port
tr-rsrb-port    1996/tcp   cisco Remote SRB port
tr-rsrb-port    1996/udp   cisco Remote SRB port
gdp-port        1997/tcp   cisco Gateway Discovery Protocol
gdp-port        1997/udp   cisco Gateway Discovery Protocol
x25-svc-port    1998/tcp   cisco X.25 service (XOT)
x25-svc-port    1998/udp   cisco X.25 service (XOT)
tcp-id-port     1999/tcp   cisco identification port
tcp-id-port     1999/udp   cisco identification port
callbook        2000/tcp
callbook        2000/udp
dc              2001/tcp
wizard          2001/udp    curry
globe           2002/tcp
globe           2002/udp
mailbox         2004/tcp
emce            2004/udp    CCWS mm conf
berknet         2005/tcp
oracle          2005/udp
invokator       2006/tcp
raid-cc         2006/udp    raid
dectalk         2007/tcp
raid-am         2007/udp
conf            2008/tcp
terminaldb      2008/udp
news            2009/tcp
whosockami      2009/udp
search          2010/tcp
pipe_server     2010/udp
raid-cc         2011/tcp    raid
servserv        2011/udp
ttyinfo         2012/tcp
raid-ac         2012/udp
raid-am         2013/tcp
raid-cd         2013/udp
troff           2014/tcp
raid-sf         2014/udp
cypress         2015/tcp
raid-cs         2015/udp
bootserver      2016/tcp
bootserver      2016/udp
cypress-stat    2017/tcp

Reynolds & Postel                                              [Page 51]

RFC 1700                    Assigned Numbers                October 1994

bootclient      2017/udp
terminaldb      2018/tcp
rellpack        2018/udp
whosockami      2019/tcp
about           2019/udp
xinupageserver  2020/tcp
xinupageserver  2020/udp
servexec        2021/tcp
xinuexpansion1  2021/udp
down            2022/tcp
xinuexpansion2  2022/udp
xinuexpansion3  2023/tcp
xinuexpansion3  2023/udp
xinuexpansion4  2024/tcp
xinuexpansion4  2024/udp
ellpack         2025/tcp
xribs           2025/udp
scrabble        2026/tcp
scrabble        2026/udp
shadowserver    2027/tcp
shadowserver    2027/udp
submitserver    2028/tcp
submitserver    2028/udp
device2         2030/tcp
device2         2030/udp
blackboard      2032/tcp
blackboard      2032/udp
glogger         2033/tcp
glogger         2033/udp
scoremgr        2034/tcp
scoremgr        2034/udp
imsldoc         2035/tcp
imsldoc         2035/udp
objectmanager   2038/tcp
objectmanager   2038/udp
lam             2040/tcp
lam             2040/udp
interbase       2041/tcp
interbase       2041/udp
isis            2042/tcp
isis            2042/udp
isis-bcast      2043/tcp
isis-bcast      2043/udp
rimsl           2044/tcp
rimsl           2044/udp
cdfunc          2045/tcp
cdfunc          2045/udp
sdfunc          2046/tcp

Reynolds & Postel                                              [Page 52]

RFC 1700                    Assigned Numbers                October 1994

sdfunc          2046/udp
dls             2047/tcp
dls             2047/udp
dls-monitor     2048/tcp
dls-monitor     2048/udp
shilp           2049/tcp
shilp           2049/udp
dlsrpn          2065/tcp   Data Link Switch Read Port Number
dlsrpn          2065/udp   Data Link Switch Read Port Number
dlswpn          2067/tcp   Data Link Switch Write Port Number
dlswpn          2067/udp   Data Link Switch Write Port Number
ats             2201/tcp   Advanced Training System Program
ats             2201/udp   Advanced Training System Program
rtsserv         2500/tcp   Resource Tracking system server
rtsserv         2500/udp   Resource Tracking system server
rtsclient       2501/tcp   Resource Tracking system client
rtsclient       2501/udp   Resource Tracking system client
#                          Aubrey Turner
#               <S95525ta%etsuacad.bitnet@ETSUADMN.ETSU.EDU>
hp-3000-telnet  2564/tcp   HP 3000 NS/VT block mode telnet
www-dev         2784/tcp   world wide web - development
www-dev         2784/udp   world wide web - development
NSWS            3049/tcp
NSWS            3049/udp
ccmail          3264/tcp   cc:mail/lotus
ccmail          3264/udp   cc:mail/lotus
dec-notes       3333/tcp   DEC Notes
dec-notes       3333/udp   DEC Notes
#                          Kim Moraros <moraros@via.enet.dec.com>
mapper-nodemgr    3984/tcp     MAPPER network node manager
mapper-nodemgr    3984/udp     MAPPER network node manager
mapper-mapethd    3985/tcp     MAPPER TCP/IP server
mapper-mapethd    3985/udp     MAPPER TCP/IP server
mapper-ws_ethd    3986/tcp     MAPPER workstation server
mapper-ws_ethd    3986/udp     MAPPER workstation server
#                 John C. Horton <jch@unirsvl.rsvl.unisys.com>
bmap            3421/tcp   Bull Apprise portmapper
bmap            3421/udp   Bull Apprise portmapper
#                          Jeremy Gilbert <J.Gilbert@ma30.bull.com>
udt_os          3900/tcp   Unidata UDT OS
udt_os          3900/udp   Unidata UDT OS
#                          James Powell <james@mailhost.unidata.com>
nuts_dem        4132/tcp   NUTS Daemon
nuts_dem        4132/udp   NUTS Daemon
nuts_bootp      4133/tcp   NUTS Bootp Server
nuts_bootp      4133/udp   NUTS Bootp Server
#                          Martin Freiss <freiss.pad@sni.>
unicall         4343/tcp   UNICALL

Reynolds & Postel                                              [Page 53]

RFC 1700                    Assigned Numbers                October 1994

unicall         4343/udp   UNICALL
#                          James Powell <james@enghp.unidata.comp>
krb524          4444/tcp   KRB524
krb524          4444/udp   KRB524
#                          B. Clifford Neuman <bcn@isi.edu>
rfa             4672/tcp   remote file access server
rfa             4672/udp   remote file access server
commplex-main   5000/tcp
commplex-main   5000/udp
commplex-link   5001/tcp
commplex-link   5001/udp
rfe             5002/tcp   radio free ethernet
rfe             5002/udp   radio free ethernet
telelpathstart  5010/tcp   TelepathStart
telelpathstart  5010/udp   TelepathStart
telelpathattack 5011/tcp   TelepathAttack
telelpathattack 5011/udp   TelepathAttack
#               Helmuth Breitenfellner <hbreitenf@vnet.imb.com>
mmcc            5050/tcp   multimedia conference control tool
mmcc            5050/udp   multimedia conference control tool
rmonitor_secure 5145/tcp
rmonitor_secure 5145/udp
aol             5190/tcp   America-Online
aol             5190/udp   America-Online
#                          Marty Lyons <marty@aol.com>
padl2sim        5236/tcp
padl2sim        5236/udp
hacl-hb         5300/tcp        # HA cluster heartbeat
hacl-hb         5300/udp        # HA cluster heartbeat
hacl-gs         5301/tcp        # HA cluster general services
hacl-gs         5301/udp        # HA cluster general services
hacl-cfg        5302/tcp        # HA cluster configuration
hacl-cfg        5302/udp        # HA cluster configuration
hacl-probe      5303/tcp        # HA cluster probing
hacl-probe      5303/udp        # HA cluster probing
hacl-local      5304/tcp
hacl-local      5304/udp
hacl-test       5305/tcp
hacl-test       5305/udp
#                               Eric Soderberg <seric@hposl102.cup.hp>
x11             6000-6063/tcp   X Window System
x11             6000-6063/udp   X Window System
#               Stephen Gildea <gildea@expo.lcs.mit.edu>
sub-process     6111/tcp   HP SoftBench Sub-Process Control
sub-process     6111/udp   HP SoftBench Sub-Process Control
meta-corp       6141/tcp   Meta Corporation License Manager
meta-corp       6141/udp   Meta Corporation License Manager
#                          Osamu Masuda <--none--->

Reynolds & Postel                                              [Page 54]

RFC 1700                    Assigned Numbers                October 1994

aspentec-lm     6142/tcp   Aspen Technology License Manager
aspentec-lm     6142/udp   Aspen Technology License Manager
#                          Kevin Massey <massey@aspentec.com>
watershed-lm    6143/tcp   Watershed License Manager
watershed-lm    6143/udp   Watershed License Manager
#                          David Ferrero <david@zion.com>
statsci1-lm     6144/tcp   StatSci License Manager - 1
statsci1-lm     6144/udp   StatSci License Manager - 1
statsci2-lm     6145/tcp   StatSci License Manager - 2
statsci2-lm     6145/udp   StatSci License Manager - 2
#                          Scott Blachowicz <scott@statsci.com>
lonewolf-lm     6146/tcp   Lone Wolf Systems License Manager
lonewolf-lm     6146/udp   Lone Wolf Systems License Manager
#                          Dan Klein <dvk@lonewolf.com>
montage-lm      6147/tcp   Montage License Manager
montage-lm      6147/udp   Montage License Manager
#                          Michael Ubell <michael@montage.com>
xdsxdm          6558/udp
xdsxdm          6558/tcp
afs3-fileserver 7000/tcp   file server itself
afs3-fileserver 7000/udp   file server itself
afs3-callback   7001/tcp   callbacks to cache managers
afs3-callback   7001/udp   callbacks to cache managers
afs3-prserver   7002/tcp   users & groups database
afs3-prserver   7002/udp   users & groups database
afs3-vlserver   7003/tcp   volume location database
afs3-vlserver   7003/udp   volume location database
afs3-kaserver   7004/tcp   AFS/Kerberos authentication service
afs3-kaserver   7004/udp   AFS/Kerberos authentication service
afs3-volser     7005/tcp   volume managment server
afs3-volser     7005/udp   volume managment server
afs3-errors     7006/tcp   error interpretation service
afs3-errors     7006/udp   error interpretation service
afs3-bos        7007/tcp   basic overseer process
afs3-bos        7007/udp   basic overseer process
afs3-update     7008/tcp   server-to-server updater
afs3-update     7008/udp   server-to-server updater
afs3-rmtsys     7009/tcp   remote cache manager service
afs3-rmtsys     7009/udp   remote cache manager service
ups-onlinet     7010/tcp   onlinet uninterruptable power supplies
ups-onlinet     7010/udp   onlinet uninterruptable power supplies
#                          Brian Hammill <hamill@dolphin.exide.com>
font-service    7100/tcp   X Font Service
font-service    7100/udp   X Font Service
#                          Stephen Gildea <gildea@expo.lcs.mit.edu>
fodms           7200/tcp   FODMS FLIP
fodms           7200/udp   FODMS FLIP
#           David Anthony <anthony@power.amasd.anatcp.rockwell.com>

Reynolds & Postel                                              [Page 55]

RFC 1700                    Assigned Numbers                October 1994

man             9535/tcp
man             9535/udp
isode-dua       17007/tcp
isode-dua       17007/udp

REFERENCES

[RFC768] Postel, J., "User Datagram Protocol", STD 6, RFC 768,
         USC/Information Sciences Institute, August 1980.

[RFC793] Postel, J., ed., "Transmission Control Protocol - DARPA
         Internet Program Protocol Specification", STD 7, RFC 793,
         USC/Information Sciences Institute, September 1981.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/port-numbers

Reynolds & Postel                                              [Page 56]

RFC 1700                    Assigned Numbers                October 1994

INTERNET MULTICAST ADDRESSES

Host Extensions for IP Multicasting [RFC1112] specifies the
extensions required of a host implementation of the Internet Protocol
(IP) to support multicasting.  Current addresses are listed below.

224.0.0.0  Base Address (Reserved)                   [RFC1112,JBP]
224.0.0.1  All Systems on this Subnet                [RFC1112,JBP]
224.0.0.2  All Routers on this Subnet                        [JBP]
224.0.0.3  Unassigned                                        [JBP]
224.0.0.4  DVMRP    Routers                          [RFC1075,JBP]
224.0.0.5  OSPFIGP  OSPFIGP All Routers             [RFC1583,JXM1]
224.0.0.6  OSPFIGP  OSPFIGP Designated Routers      [RFC1583,JXM1]
224.0.0.7  ST Routers                               [RFC1190,KS14]
224.0.0.8  ST Hosts                                 [RFC1190,KS14]
224.0.0.9  RIP2 Routers                                    [GSM11]
224.0.0.10 IGRP Routers                           [Dino Farinacci]
224.0.0.11 Mobile-Agents                            [Bill Simpson]
224.0.0.12-224.0.0.255 Unassigned                            [JBP]

224.0.1.0  VMTP Managers Group                      [RFC1045,DRC3]
224.0.1.1  NTP      Network Time Protocol           [RFC1119,DLM1]
224.0.1.2  SGI-Dogfight                                      [AXC]
224.0.1.3  Rwhod                                             [SXD]
224.0.1.4  VNP                                              [DRC3]
224.0.1.5  Artificial Horizons - Aviator                     [BXF]
224.0.1.6  NSS - Name Service Server                        [BXS2]
224.0.1.7  AUDIONEWS - Audio News Multicast                 [MXF2]
224.0.1.8  SUN NIS+ Information Service                     [CXM3]
224.0.1.9  MTP Multicast Transport Protocol                  [SXA]
224.0.1.10 IETF-1-LOW-AUDIO                                  [SC3]
224.0.1.11 IETF-1-AUDIO                                      [SC3]
224.0.1.12 IETF-1-VIDEO                                      [SC3]
224.0.1.13 IETF-2-LOW-AUDIO                                  [SC3]
224.0.1.14 IETF-2-AUDIO                                      [SC3]
224.0.1.15 IETF-2-VIDEO                                      [SC3]
224.0.1.16 MUSIC-SERVICE                        [Guido van Rossum]
224.0.1.17 SEANET-TELEMETRY                        [Andrew Maffei]
224.0.1.18 SEANET-IMAGE                            [Andrew Maffei]
224.0.1.19 MLOADD                                         [Braden]
224.0.1.20 any private experiment                            [JBP]
224.0.1.21 DVMRP on MOSPF                               [John Moy]
224.0.1.22 SVRLOC                               <veizades@ftp.com>
224.0.1.23 XINGTV                                 <hgxing@aol.com>
224.0.1.24 microsoft-ds                    <arnoldm@microsoft.com>
224.0.1.25 nbc-pro                      <bloomer@birch.crd.ge.com>
224.0.1.26 nbc-pfn                      <bloomer@birch.crd.ge.com>
224.0.1.27-224.0.1.255  Unassigned                           [JBP]

Reynolds & Postel                                              [Page 57]

RFC 1700                    Assigned Numbers                October 1994

224.0.2.1  "rwho" Group (BSD) (unofficial)                   [JBP]
224.0.2.2  SUN RPC PMAPPROC_CALLIT                          [BXE1]

224.0.3.000-224.0.3.255 RFE Generic Service                 [DXS3]
224.0.4.000-224.0.4.255 RFE Individual Conferences          [DXS3]
224.0.5.000-224.0.5.127 CDPD Groups                  [Bob Brenner]
224.0.5.128-224.0.5.255 Unassigned                          [IANA]
224.0.6.000-224.0.6.127 Cornell ISIS Project           [Tim Clark]
224.0.6.128-224.0.6.255 Unassigned                          [IANA]

224.1.0.0-224.1.255.255  ST Multicast Groups        [RFC1190,KS14]
224.2.0.0-224.2.255.255  Multimedia Conference Calls         [SC3]

224.252.0.0-224.255.255.255 DIS transient groups     [Joel Snyder]

232.0.0.0-232.255.255.255  VMTP transient groups    [RFC1045,DRC3]

These addresses are listed in the Domain Name Service under MCAST.NET
and 224.IN-ADDR.ARPA.

Note that when used on an Ethernet or IEEE 802 network, the 23
low-order bits of the IP Multicast address are placed in the low-order
23 bits of the Ethernet or IEEE 802 net multicast address
1.0.94.0.0.0.  See the next section on "IANA ETHERNET ADDRESS BLOCK".

REFERENCES

[RFC1045] Cheriton, D., "VMTP: Versatile Message Transaction
          Protocol Specification", RFC 1045, Stanford University,
          February 1988.

[RFC1075] Waitzman, D., C. Partridge, and S. Deering "Distance Vector
          Multicast Routing Protocol", RFC-1075, BBN STC, Stanford
          University, November 1988.

[RFC1112] Deering, S., "Host Extensions for IP Multicasting",
          STD 5, RFC 1112, Stanford University, August 1989.

[RFC1119] Mills, D., "Network Time Protocol (Version 1), Specification
          and Implementation", STD 12, RFC 1119, University of
          Delaware, July 1988.

[RFC1190] Topolcic, C., Editor, "Experimental Internet Stream
          Protocol, Version 2 (ST-II)", RFC 1190, CIP Working Group,
          October 1990.

[RFC1583] Moy, J., "The OSPF Specification", RFC 1583, Proteon,
          March 1994.

Reynolds & Postel                                              [Page 58]

RFC 1700                    Assigned Numbers                October 1994

PEOPLE

<arnoldm@microsoft.com>

[AXC] Andrew Cherenson <arc@SGI.COM>

[Bob Brenner]

<bloomer@birch.crd.ge.com>

[Braden] Bob Braden <braden@isi.edu

[BXE1] Brendan Eic <brendan@illyria.wpd.sgi.com>

[BXF] Bruce Factor <ahi!bigapple!bruce@uunet.UU.NET>

[BXS2] Bill Schilit <schilit@parc.xerox.com>

[CXM3] Chuck McManis <cmcmanis@sun.com>

[Tim Clark]

[DLM1] David Mills <Mills@HUEY.UDEL.EDU>

[DRC3] Dave Cheriton <cheriton@PESCADERO.STANFORD.EDU>

[DXS3] Daniel Steinber <Daniel.Steinberg@Eng.Sun.COM>

[Dino Farinacci]

[GSM11] Gary S. Malkin <GMALKIN@XYLOGICS.COM>

<hgxing@aol.com>

[IANA] IANA <iana@isi.edu>

[JBP] Jon Postel <postel@isi.edu>

[JXM1] Jim Miner <miner@star.com>

[KS14] <mystery contact>

[Andrew Maffei]

[John Moy] John Moy <jmoy@PROTEON.COM>

[MXF2] Martin Forssen <maf@dtek.chalmers.se>

Reynolds & Postel                                              [Page 59]

RFC 1700                    Assigned Numbers                October 1994

[Guido van Rossum]

[SC3] Steve Casner <casner@isi.edu>

[Joel Snyder]

[SXA] Susie Armstrong <Armstrong.wbst128@XEROX.COM>

[SXD] Steve Deering <deering@PARC.XEROX.COM>

<veizades@ftp.com>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/multicast-addresses

Reynolds & Postel                                              [Page 60]

RFC 1700                    Assigned Numbers                October 1994

SUN RPC NUMBERS

To obtain SUN Remote Procedure Call (RPC) numbers send an e-mail
request to "rpc@sun.com".

The RPC port management service ('portmap' in SunOS versions less than
5.0 and 'rpcbind' in SunOS versions greater than 5.0) "registers" the
IP port number that is allocated to a particular service when that
service is created. It does not allocate ports on behalf of those
services.

For an exact specification of the semantics refer to the source code
of svcudp_create() and svctcp_create() in the archives.  In short
however is that these interfaces, and svc_tli_create their Transport
Independent RPC equivalent, take either a user specified port number
or RPC_ANY (-1) which effectively means "I don't care."  In the "I
don't care" case the create code simply calls socket(2) or t_open(3n)
which allocates an IP port based on the rules:

        if euid of the requesting process is 0 (i.e., root)
                allocate the next available port number in the
                reserved port range.
        else
                allocate the next available port in the non-reserved
                range.

Port numbers count up sequentially.

Can a port that is "assigned" can be used when the assignee's service
is not present?  Say port 501 is assigned to the "jeans" service.  On
a machine that does not have the "jeans" service, nor has any clients
that might be expecting to use it, is port 501 available for other
uses?  Any dynamic allocation process, like the portmapper, that
chooses the next unused port might allocate port 501 dynamically to a
process that asked for a "I don't care" port.  So any dynamic
allocation scheme may pick an unused port that happened to correspond
to a port number that had been "assigned" but was currently unused.

While it might be desirable, it is impossible to guarantee that any
unused port, even though officially assigned to a service, is not
picked by a dynamic allocator since such an assignment might occur
long after the delivery of the system into a site that doesn't watch
for the latest list.

There is the restriction that only "superuser" on BSD derived systems
such as SunOS can bind to a port number that is less than 1024.  So
programs have used this information in the past to identify whether or

Reynolds & Postel                                              [Page 61]

RFC 1700                    Assigned Numbers                October 1994

not the service they were talking to was started by the superuser on
the remote system.  Making this assumption is dangerous because not
all system enforce this restriction.

Sun RPC services use ports that are currently unused.  If someone
noted that an RPC service was using port 781, it would be just as
happy using port 891, or 951.  The service doesn't care what port it
gets, remote clients will query the portmapper to ask it what port
number was assigned to the service when it was started.  The key is
that the port was not currently in use.  The only port that ONC/RPC
must have is 111 its assigned port for the portmap service.

The most common complaint comes when people put a new service on their
system.  When they configure their systems they put the new service
configuration commands at the end of their system startup scripts.
During startup, several network services may be started. Those
services that are ONC/RPC based just pick the next available port,
those that have pre-assigned ports bind to their pre-assigned port.
Clearly the correct sequence is to have all services that need a
particular port to be started first (or if they are "latent" services
that are started by inetd, to have inetd started).  Finally, the RPC
services should be started as they will be assigned unused ports. (In
the BSD networking code (which we use) the algorithm for picking
ports is in the file in_pcb.c, function in_pcbbind().)

Services should be started in this order:

   a) Services that will "run" continuously and have an assigned
      port. Note that this includes rpcbind (nee portmap) that has
      port 111 assigned to it.

   b) inetd - which will automatically create sockets for those
      services that have reserved ports but only run on demand
      (like finger)

   c) RPC services - which will automatically pick unused ports and
      maximize efficiency of the "IP Port" namespace.

The include file /usr/include/netinet/in.h defines a constant
IPPORT_RESERVED to be 1024.  The relevant text is:

   /*
    * Ports < IPPORT_RESERVED are reserved for
    * privileged processes (e.g. root).
    * Ports > IPPORT_USERRESERVED are reserved
    * for servers, not necessarily privileged.
    */
   #define IPPORT_RESERVED         1024

Reynolds & Postel                                              [Page 62]

RFC 1700                    Assigned Numbers                October 1994

   #define IPPORT_USERRESERVED     5000

Portmap does not allocate ports, the kernel allocates ports.  The code
that does this is part of nearly every UNIX system in the world (and
since the BSD code is 'free' it is often the same code).  RPC services
ask the kernel to allocate them a port by calling the "bind()" system
call.  The parameter they pass is "INADDR_ANY" which means "allocate
me any IP port you want".  The kernel does that by looking at all of
the ports that are currently in use and picking one that is not
currently used.  The number picked is either less that 1024 if the
process is privledged, or greater than 1024 if the process is not
privledged.  After the kernel has allocated a port, the service
registers this allocation with portmap.  The portmapper is merely a
registry of previously allocated ports.  Note "allocated" here is
being used in the sense that they are used by an open socket, not
assigned a well known name.

The role of /etc/services is to provide an idea to people who are
looking at network traffic as to where a packet may have originated
from or is headed to.  For services like finger that have assigned
ports, they can just hard code the port they want into their
executable. (it isn't like it will change, and if they read it from
/etc/services and someone had mistyped the port number it won't
interoperate with clients anyway!)

It is not practical to read the /etc/services file into the kernel to
prevent it from giving out port numbers that are "pre-assigned", nor
is it generally desirable since with the correct ordering of startup
it is completely unneccesary.

Editors Note: This information was supplied by Chuck McManis of Sun.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/sun-rpc-numbers

Reynolds & Postel                                              [Page 63]

RFC 1700                    Assigned Numbers                October 1994

IP OPTION NUMBERS

The Internet Protocol (IP) has provision for optional header fields
identified by an option type field.  Options 0 and 1 are exactly one
octet which is their type field.  All other options have their one
octet type field, followed by a one octet length field, followed by
length-2 octets of option data.  The option type field is sub-divided
into a one bit copied flag, a two bit class field, and a five bit
option number.  These taken together form an eight bit value for the
option type field.  IP options are commonly refered to by this value.

Copy Class Number Value Name                            Reference
---- ----- ------ ----- ------------------------------- ---------
   0     0      0     0 EOOL   - End of Options List    [RFC791,JBP]
   0     0      1     1 NOP    - No Operation           [RFC791,JBP]
   1     0      2   130 SEC    - Security                  [RFC1108]
   1     0      3   131 LSR    - Loose Source Route     [RFC791,JBP]
   0     2      4    68 TS     - Time Stamp             [RFC791,JBP]
   1     0      5   133 E-SEC  - Extended Security         [RFC1108]
   1     0      6   134 CIPSO  - Commercial Security           [???]
   0     0      7     7 RR     - Record Route           [RFC791,JBP]
   1     0      8   136 SID    - Stream ID              [RFC791,JBP]
   1     0      9   137 SSR    - Strict Source Route    [RFC791,JBP]
   0     0     10    10 ZSU    - Experimental Measurement      [ZSu]
   0     0     11    11 MTUP   - MTU Probe                 [RFC1191]
   0     0     12    12 MTUR   - MTU Reply                 [RFC1191]
   1     2     13   205 FINN   - Experimental Flow Control    [Finn]
   1     0     14   142 VISA   - Expermental Access Control [Estrin]
   0     0     15    15 ENCODE - ???                      [VerSteeg]
   1     0     16   144 IMITD  - IMI Traffic Descriptor        [Lee]
   1     0     17   145 EIP    - ???                       [RFC1358]
   0     2     18    82 TR     - Traceroute                [RFC1393]
   1     0     19   147 ADDEXT - Address Extension    [Ullmann IPv7]

IP TIME TO LIVE PARAMETER

The current recommended default time to live (TTL) for the
Internet Protocol (IP) [45,105] is 64.

IP TOS PARAMETERS

This documents the default Type-of-Service values that are currently
recommended for the most important Internet protocols.

Reynolds & Postel                                              [Page 64]

RFC 1700                    Assigned Numbers                October 1994

TOS Value       Description                             Reference
---------       --------------------------              ---------
  0000          Default                                 [RFC1349]
  0001          Minimize Monetary Cost                  [RFC1349]
  0010          Maximize Reliability                    [RFC1349]
  0100          Maximize Throughput                     [RFC1349]
  1000          Minimize Delay                          [RFC1349]
  1111          Maximize Security                       [RFC1455]

The TOS value is used to indicate "better".  Only one TOS value or
property can be requested in any one IP datagram.

Generally, protocols which are involved in direct interaction with a
human should select low delay, while data transfers which may involve
large blocks of data are need high throughput.  Finally, high reliability
is most important for datagram-based Internet management functions.

Application protocols not included in these tables should be able to
make appropriate choice of low delay (8 decimal, 1000 binary) or high
throughput (4 decimal, 0100 binary).

The following are recommended values for TOS:

            ----- Type-of-Service Value -----

Protocol           TOS Value

TELNET (1)         1000                 (minimize delay)

FTP
  Control          1000                 (minimize delay)
  Data (2)         0100                 (maximize throughput)

TFTP               1000                 (minimize delay)

SMTP (3)
  Command phase    1000                 (minimize delay)
  DATA phase       0100                 (maximize throughput)

Domain Name Service
  UDP Query        1000                 (minimize delay)
  TCP Query        0000
  Zone Transfer    0100                 (maximize throughput)

NNTP               0001                 (minimize monetary cost)

ICMP

Reynolds & Postel                                              [Page 65]

RFC 1700                    Assigned Numbers                October 1994

  Errors           0000
  Requests         0000 (4)
  Responses        <same as request> (4)

Any IGP            0010                 (maximize reliability)

EGP                0000

SNMP               0010                 (maximize reliability)

BOOTP              0000

Notes:

(1) Includes all interactive user protocols (e.g., rlogin).

(2) Includes all bulk data transfer protocols (e.g., rcp).

(3) If the implementation does not support changing the TOS
during the lifetime of the connection, then the
recommended TOS on opening the connection is the default
TOS (0000).

(4) Although ICMP request messages are normally sent with
the default TOS, there are sometimes good reasons why they
would be sent with some other TOS value.  An ICMP
response always uses the same TOS value as was used in the
corresponding ICMP request message.

An application may (at the request of the user) substitute
0001 (minimize monetary cost) for any of the above values.

REFERENCES

[RFC791] Postel, J., "Internet Protocol - DARPA Internet Program
         Protocol Specification", STD 5, RFC 791, DARPA, September
         1981.

[RFC1108] Kent, S., "U.S. Department of Defense Security Options for
          the Internet Protocol", RFC 1108, BBN Communications,
          November 1991.

[RFC1191] Mogul, J., and S. Deering, "Path MTU Discovery", RFC 1191,
          DECWRL, Stanford University, November 1990.

[RFC1349] Almquist, P., "Type of Service in the Internet Protocol
          Suite", RFC 1349, Consultant, July 1992.

Reynolds & Postel                                              [Page 66]

RFC 1700                    Assigned Numbers                October 1994

[RFC1358] Chapin, L., Chair, "Charter of the Internet Architecture
          Board (IAB)", RFC 1358, Internet Architecture Board, August
          1992.

[RFC1393] Malkin, G., "Traceroute Using an IP Option", RFC 1393,
          Xylogics, Inc., January 1993.

[RFC1455] Eastlake, D., "Physical Link Security Type of Service",
          RFC 1455, Digital Equipment Corporation, May 1993.

[Ullmann IPv7]

PEOPLE

[Estrin] Deborah Estrin <Estrin@usc.edu>

[Finn] Greg Finn <Finn@isi.edu>

[JBP] Jon Postel <postel@isi.edu>

[Ullmann] Robert Ullmann <ariel@world.std.com>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/ip-parameters

Reynolds & Postel                                              [Page 67]

RFC 1700                    Assigned Numbers                October 1994

ICMP TYPE NUMBERS

The Internet Control Message Protocol (ICMP) has many messages that
are identified by a "type" field.

Type    Name                                    Reference
----    -------------------------               ---------
  0     Echo Reply                               [RFC792]
  1     Unassigned                                  [JBP]
  2     Unassigned                                  [JBP]
  3     Destination Unreachable                  [RFC792]
  4     Source Quench                            [RFC792]
  5     Redirect                                 [RFC792]
  6     Alternate Host Address                      [JBP]
  7     Unassigned                                  [JBP]
  8     Echo                                     [RFC792]
  9     Router Advertisement                    [RFC1256]
 10     Router Selection                        [RFC1256]
 11     Time Exceeded                            [RFC792]
 12     Parameter Problem                        [RFC792]
 13     Timestamp                                [RFC792]
 14     Timestamp Reply                          [RFC792]
 15     Information Request                      [RFC792]
 16     Information Reply                        [RFC792]
 17     Address Mask Request                     [RFC950]
 18     Address Mask Reply                       [RFC950]
 19     Reserved (for Security)                    [Solo]
 20-29  Reserved (for Robustness Experiment)        [ZSu]
 30     Traceroute                              [RFC1393]
 31     Datagram Conversion Error               [RFC1475]
 32     Mobile Host Redirect              [David Johnson]
 33     IPv6 Where-Are-You                 [Bill Simpson]
 34     IPv6 I-Am-Here                     [Bill Simpson]
 35     Mobile Registration Request        [Bill Simpson]
 36     Mobile Registration Reply          [Bill Simpson]
 37-255 Reserved                                    [JBP]

Many of these ICMP types have a "code" field.  Here we list the types
again with their assigned code fields.

Type    Name                                    Reference
----    -------------------------               ---------
  0     Echo Reply                               [RFC792]

        Codes
            0  No Code

  1     Unassigned                                  [JBP]

Reynolds & Postel                                              [Page 68]

RFC 1700                    Assigned Numbers                October 1994

  2     Unassigned                                  [JBP]

  3     Destination Unreachable                  [RFC792]

        Codes
            0  Net Unreachable
            1  Host Unreachable
            2  Protocol Unreachable
            3  Port Unreachable
            4  Fragmentation Needed and Don't Fragment was Set
            5  Source Route Failed
            6  Destination Network Unknown
            7  Destination Host Unknown
            8  Source Host Isolated
            9  Communication with Destination Network is
               Administratively Prohibited
           10  Communication with Destination Host is
               Administratively Prohibited
           11  Destination Network Unreachable for Type of Service
           12  Destination Host Unreachable for Type of Service

  4     Source Quench                            [RFC792]
        Codes
            0  No Code

  5     Redirect                                 [RFC792]

        Codes
            0  Redirect Datagram for the Network (or subnet)
            1  Redirect Datagram for the Host
            2  Redirect Datagram for the Type of Service and Network
            3  Redirect Datagram for the Type of Service and Host

  6     Alternate Host Address                      [JBP]

        Codes
            0  Alternate Address for Host

  7     Unassigned                                  [JBP]

  8     Echo                                     [RFC792]

        Codes
            0  No Code

  9     Router Advertisement                    [RFC1256]

        Codes

Reynolds & Postel                                              [Page 69]

RFC 1700                    Assigned Numbers                October 1994

            0  No Code

 10     Router Selection                        [RFC1256]

        Codes
            0  No Code

 11     Time Exceeded                            [RFC792]

        Codes
            0  Time to Live exceeded in Transit
            1  Fragment Reassembly Time Exceeded

 12     Parameter Problem                        [RFC792]

        Codes
            0  Pointer indicates the error
            1  Missing a Required Option        [RFC1108]
            2  Bad Length

 13     Timestamp                                [RFC792]

        Codes
            0  No Code

 14     Timestamp Reply                          [RFC792]

        Codes
            0  No Code

 15     Information Request                      [RFC792]

        Codes
            0  No Code

 16     Information Reply                        [RFC792]

        Codes
            0  No Code

 17     Address Mask Request                     [RFC950]

        Codes
            0  No Code

 18     Address Mask Reply                       [RFC950]

Reynolds & Postel                                              [Page 70]

RFC 1700                    Assigned Numbers                October 1994

        Codes
            0  No Code

 19     Reserved (for Security)                    [Solo]

 20-29  Reserved (for Robustness Experiment)        [ZSu]

 30     Traceroute                              [RFC1393]

 31     Datagram Conversion Error               [RFC1475]

 32     Mobile Host Redirect              [David Johnson]

 33     IPv6 Where-Are-You                 [Bill Simpson]

 34     IPv6 I-Am-Here                     [Bill Simpson]

 35     Mobile Registration Request        [Bill Simpson]

 36     Mobile Registration Reply          [Bill Simpson]

REFERENCES

[RFC792] Postel, J., "Internet Control Message Protocol", STD 5,
         RFC 792, USC/Information Sciences Institute, September 1981.

[RFC950] Mogul, J., and J. Postel, "Internet Standard Subnetting
         Procedure", STD 5, RFC 950, Stanford, USC/Information
         Sciences Institute, August 1985.

[RFC1108] Kent, S., "U.S. Department of Defense Security Options for
          the Internet Protocol", RFC 1108, November 1991.

[RFC1256] Deering, S., Editor, "ICMP Router Discovery Messages", RFC
          1256, Xerox PARC, September 1991.

[RFC1393] Malkin, G., "Traceroute Using an IP Option", RFC 1393,
          Xylogics, Inc., January 1993.

[RFC1475] Ullmann, R., "TP/IX: The Next Internet", RFC 1475, Process
          Software Corporation, June 1993.

PEOPLE

[JBP] Jon Postel <postel@isi.edu>

[David Johnson]

Reynolds & Postel                                              [Page 71]

RFC 1700                    Assigned Numbers                October 1994

[Bill Simpson]  <Bill.Simpson@um.cc.umich.edu> September, 1994.

[Solo]

[ZSu] Zaw-Sing Su <ZSu@TSCA.ISTC.SRI.COM>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/icmp-parameters

Reynolds & Postel                                              [Page 72]

RFC 1700                    Assigned Numbers                October 1994

TCP OPTION NUMBERS

The Transmission Control Protocol (TCP) has provision for optional
header fields identified by an option kind field.  Options 0 and 1 are
exactly one octet which is their kind field.  All other options have
their one octet kind field, followed by a one octet length field,
followed by length-2 octets of option data.

Kind   Length   Meaning                           Reference
----   ------   -------------------------------   ---------
  0        -    End of Option List                 [RFC793]
  1        -    No-Operation                       [RFC793]
  2        4    Maximum Segment Lifetime           [RFC793]
  3        3    WSOPT - Window Scale              [RFC1323]
  4        2    SACK Permitted                    [RFC1072]
  5        N    SACK                              [RFC1072]
  6        6    Echo (obsoleted by option 8)      [RFC1072]
  7        6    Echo Reply (obsoleted by option 8)[RFC1072]
  8       10    TSOPT - Time Stamp Option         [RFC1323]
  9        2    Partial Order Connection Permitted[RFC1693]
 10        5    Partial Order Service Profile     [RFC1693]
 11             CC                                 [Braden]
 12             CC.NEW                             [Braden]
 13             CC.ECHO                            [Braden]
 14         3   TCP Alternate Checksum Request    [RFC1146]
 15         N   TCP Alternate Checksum Data       [RFC1146]
 16             Skeeter                           [Knowles]
 17             Bubba                             [Knowles]
 18         3   Trailer Checksum Option    [Subbu & Monroe]

TCP ALTERNATE CHECKSUM NUMBERS

Number  Description                     Reference
------- ------------------------------- ----------
   0    TCP Checksum                    [RFC-1146]
   1    8-bit Fletchers's algorithm     [RFC-1146]
   2    16-bit Fletchers's algorithm    [RFC-1146]
   3    Redundant Checksum Avoidance    [Kay]

REFERENCES

[KAY] Kay, J. and Pasquale, J., "Measurement, Analysis, and
      Improvement of UDP/IP Throughput for the DECstation 5000,"
      Proceedings of the Winter 1993 Usenix Conference, January 1993
      (available for anonymous FTP in

Reynolds & Postel                                              [Page 73]

RFC 1700                    Assigned Numbers                October 1994

      ucsd.edu:/pub/csl/fastnet/fastnet.tar.Z). <jkay@ucsd.edu>

[RFC793] Postel, J., "Transmission Control Protocol - DARPA Internet
         Program Protocol Specification", STD 7, RFC 793, DARPA,
         September 1981.

[RFC1323] Jacobson, V., Braden, R., and D. Borman, "TCP Extensions for
          High Performance", RFC 1323, LBL, ISI, Cray Research, May
          1992.

[RFC1072] Jacobson, V., and R. Braden, "TCP Extensions for Long-Delay
          Paths", RFC 1072, LBL, ISI, October 1988.

[RFC1693]  ?????

[RFC1146] Zweig, J., and C. Partridge, "TCP Alternate Checksum
          Options", RFC 1146, UIUC, BBN, March 1990.

PEOPLE

[Braden]  Bob Braden <braden@isi.edu>

[Knowles] Stev Knowles <stev@ftp.com>

[Kay] J. Kay <jkay@ucsd.edu>

[Subbu & Monroe] <mystery contact>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/tcp-parameters

Reynolds & Postel                                              [Page 74]

RFC 1700                    Assigned Numbers                October 1994

TELNET OPTIONS

The Telnet Protocol has a number of options that may be negotiated.
These options are listed here.  "Internet Official Protocol Standards"
(STD 1) provides more detailed information.

Options  Name                                              References
-------  -----------------------                           ----------
   0     Binary Transmission                             [RFC856,JBP]
   1     Echo                                            [RFC857,JBP]
   2     Reconnection                                  [NIC50005,JBP]
   3     Suppress Go Ahead                               [RFC858,JBP]
   4     Approx Message Size Negotiation               [ETHERNET,JBP]
   5     Status                                          [RFC859,JBP]
   6     Timing Mark                                     [RFC860,JBP]
   7     Remote Controlled Trans and Echo                [RFC726,JBP]
   8     Output Line Width                             [NIC50005,JBP]
   9     Output Page Size                              [NIC50005,JBP]
  10     Output Carriage-Return Disposition              [RFC652,JBP]
  11     Output Horizontal Tab Stops                     [RFC653,JBP]
  12     Output Horizontal Tab Disposition               [RFC654,JBP]
  13     Output Formfeed Disposition                     [RFC655,JBP]
  14     Output Vertical Tabstops                        [RFC656,JBP]
  15     Output Vertical Tab Disposition                 [RFC657,JBP]
  16     Output Linefeed Disposition                     [RFC657,JBP]
  17     Extended ASCII                                  [RFC698,JBP]
  18     Logout                                          [RFC727,MRC]
  19     Byte Macro                                      [RFC735,JBP]
  20     Data Entry Terminal                     [RFC1043,RFC732,JBP]
  22     SUPDUP                                   [RFC736,RFC734,MRC]
  22     SUPDUP Output                                   [RFC749,MRC]
  23     Send Location                                  [RFC779,EAK1]
  24     Terminal Type                                 [RFC1091,MS56]
  25     End of Record                                   [RFC885,JBP]
  26     TACACS User Identification                      [RFC927,BA4]
  27     Output Marking                                  [RFC933,SXS]
  28     Terminal Location Number                        [RFC946,RN6]
  29     Telnet 3270 Regime                             [RFC1041,JXR]
  30     X.3 PAD                                       [RFC1053,SL70]
  31     Negotiate About Window Size                  [RFC1073,DW183]
  32     Terminal Speed                                [RFC1079,CLH3]
  33     Remote Flow Control                           [RFC1372,CLH3]
  34     Linemode                                      [RFC1184,DB14]
  35     X Display Location                            [RFC1096,GM23]
  36     Environment Option                            [RFC1408,DB14]
  37     Authentication Option                         [RFC1409,DB14]
  38     Encryption Option                                     [DB14]
  39     New Environment Option                        [RFC1572,DB14]

Reynolds & Postel                                              [Page 75]

RFC 1700                    Assigned Numbers                October 1994

  40     TN3270E                                            [RFC1647]
 255     Extended-Options-List                           [RFC861,JBP]

Telnet Authentication Types

In [RFC1409], a list of authentication types is introduced.  Additions
to the list are registerd by the IANA and documented here.

Type       Description                  Reference
  0        NULL                         [RFC1409]
  1        KERBEROS_V4                  [RFC1409]
  2        KERBEROS_V5                  [RFC1409]
  3        SPX                          [RFC1409]
  4-5      Unassigned
  6        RSA                          [RFC1409]
  7-9      Unassigned
 10        LOKI                         [RFC1409]
 11        SSA                          [Schoch]

REFERENCES

[ETHERNET] "The Ethernet, A Local Area Network: Data Link Layer and
           Physical Layer Specification", AA-K759B-TK, Digital
           Equipment Corporation, Maynard, MA.  Also as: "The
           Ethernet - A Local Area Network", Version 1.0, Digital
           Equipment Corporation, Intel Corporation, Xerox
           Corporation, September 1980.  And: "The Ethernet, A Local
           Area Network: Data Link Layer and Physical Layer
           Specifications", Digital, Intel and Xerox, November 1982.
           And: XEROX, "The Ethernet, A Local Area Network: Data Link
           Layer and Physical Layer Specification", X3T51/80-50, Xerox
           Corporation, Stamford, CT., October 1980.

[NIC50005] DDN Protocol Handbook, "Telnet Reconnection Option",
           "Telnet Output Line Width Option", "Telnet Output Page Size
           Option", NIC 50005, December 1985.

[RFC652] Crocker, D., "Telnet Output Carriage-Return Disposition
         Option", RFC 652, UCLA-NMC, October 1974.

[RFC653] Crocker, D., "Telnet Output Horizontal Tabstops Option",
         RFC 653, UCLA-NMC, October 1974.

[RFC654] Crocker, D., "Telnet Output Horizontal Tab Disposition
         Option", RFC 654, UCLA-NMC, October 1974.

[RFC655] Crocker, D., "Telnet Output Formfeed Disposition Option",
         RFC 655, UCLA-NMC, October 1974.

Reynolds & Postel                                              [Page 76]

RFC 1700                    Assigned Numbers                October 1994

[RFC656] Crocker, D., "Telnet Output Vertical Tabstops Option",
         RFC 656, UCLA-NMC, October 1974.

[RFC657] Crocker, D., "Telnet Output Vertical Tab Disposition Option",
         RFC 657, UCLA-NMC, October 1974.

[RFC658] Crocker, D., "Telnet Output Linefeed Disposition", RFC 658,
         UCLA-NMC, October 1974.

[RFC698] Tovar, "Telnet Extended ASCII Option", RFC 698, Stanford
         University-AI, July 1975.

[RFC726] Postel, J. and D. Crocker, "Remote Controlled Transmission
         and Echoing Telnet Option", RFC 726, SRI-ARC, UC Irvine,
         March 1977.

[RFC727] Crispin, M., "Telnet Logout Option", RFC 727, Stanford
         University-AI, April 1977.

[RFC734] Crispin, M., "SUPDUP Protocol", RFC 734, Stanford,
         October 1977.

[RFC735] Crocker, D. and R. Gumpertz, "Revised Telnet Byte Marco
         Option", RFC 735, Rand, CMU, November 1977.

[RFC736] Crispin, M., "Telnet SUPDUP Option", Stanford University-AI,
         RFC 736, Stanford, October 1977.

[RFC749] Greenberg, B., "Telnet SUPDUP-OUTPUT Option", RFC 749,
         MIT-Multics, September 1978.

[RFC779] Killian, E., "Telnet Send-Location Option", RFC 779,
         LLL, April 1981.

[RFC856] Postel, J. and J. Reynolds, "Telnet Binary Transmission",
         STD 27, RFC 856, USC/Information Sciences Institute, May
         1983.

[RFC857] Postel, J. and J. Reynolds, "Telnet Echo Option", STD 28, RFC
         857, USC/Information Sciences Institute, May 1983.

[RFC858] Postel, J. and J. Reynolds, "Telnet Suppress Go Ahead
         Option", STD 29, RFC 858, USC/Information Sciences Institute,
         May 1983.

[RFC859] Postel, J. and J. Reynolds, "Telnet Status Option", STD 30,
         RFC 859, USC/Information Sciences Institute, May 1983.

Reynolds & Postel                                              [Page 77]

RFC 1700                    Assigned Numbers                October 1994

[RFC860] Postel, J. and J. Reynolds, "Telnet Timing Mark Option",
         STD 31, RFC 860, USC/Information Sciences Institute, May
         1983.

[RFC861] Postel, J. and J. Reynolds, "Telnet Extended Options - List
         Option", STD 32, RFC 861, USC/Information Sciences Institute,
         May 1983.

[RFC885] Postel, J., "Telnet End of Record Option", RFC 885,
         USC/Information Sciences Institute, December 1983.

[RFC927] Anderson, B., "TACACS User Identification Telnet Option",
         RFC 927, BBN, December 1984.

[RFC933] Silverman, S., "Output Marking Telnet Option", RFC 933,
         MITRE, January 1985.

[RFC946] Nedved, R., "Telnet Terminal Location Number Option",
         RFC 946, Carnegie-Mellon University, May 1985.

[RDC1041] Rekhter, J., "Telnet 3270 Regime Option", RFC 1041,
          IBM, January 1988.

[RFC1043] Yasuda, A., and T. Thompson, "TELNET Data Entry Terminal
          Option DODIIS Implementation", RFC 1043, DIA, February 1988.

[RFC1053] Levy, S., and T. Jacobson, "Telnet X.3 PAD Option",
          RFC 1053, Minnesota Supercomputer Center, April 1988.

[RFC1073] Waitzman, D., "Telnet Window Size Option", RFC 1073,
          BBN STC, October, 1988.

[RFC1079] Hedrick, C., "Telnet Terminal Speed Option", RFC 1079,
          Rutgers University, December 1988.

[RFC1091] VanBokkelen, J., "Telnet Terminal Type Option",
          RFC 1091, FTP Software, Inc., February 1989.

[RFC1096] Marcy, G., "Telnet X Display Location Option", RFC 1096,
          Carnegie Mellon University, March 1989.

[RFC1184] Borman, D., Editor, "Telnet Linemode Option",
          RFC 1184, Cray Research, Inc., October 1990.

[RFC1372] Hedrick, C., and D. Borman, "Telnet Remote Flow Control
         Option", RFC 1372, Rutgers University, Cray Research, Inc.,
         October 1992.

Reynolds & Postel                                              [Page 78]

RFC 1700                    Assigned Numbers                October 1994

[RFC1408] Borman, D., Editor, "Telnet Environment Option", RFC 1408,
          Cray Research, Inc., January 1993.

[RFC1409] Borman, D., Editor, "Telnet Authentication Option", RFC
          1409, Cray Research, Inc., January 1993.

[RFC1572] Alexander, S., Editor, "Telnet Environment Option", RFC1572,
          Lachman Technology, Inc., January 1994.

[RFC1647] Kelly, B., "TN3270 Enhancements", RFC1647, Auburn
          University, July 1994.

PEOPLE

[BA4] Brian Anderson <baanders@CCQ.BBN.CO>

[CLH3] Charles Hedrick  <HEDRICK@ARAMIS.RUTGERS.EDU>

[DB14] Dave Borman <dab@CRAY.COM>

[DW183] David Waitzman <dwaitzman@BBN.COM>

[EAK4] Earl Kill <EAK@MORDOR.S1.GOV>

[GM23] Glenn Marcy  <Glenn.Marcy@A.CS.CMU.EDU>

[JBP] Jon Postel <postel@isi.edu>

[MRC] Mark Crispin <MRC@WSMR-SIMTEL20.ARMY.MIL>

[MS56] Marvin Solomon <solomon@CS.WISC.EDU>

[RN6] Rudy Nedved <Rudy.Nedved@CMU-CS-A.>

[Schoch]  Steven Schoch <schoch@sheba.arc.nasa.gov>

[SL70] Stuart Levy <slevy@UC.MSC.UMN.EDU>

[SXS] Steve Silverman <Blankert@MITRE-GATEWAY.ORG>

[YXR] Yakov Rekhter  <Yakov@IBM.COM>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/telnet-options

Reynolds & Postel                                              [Page 79]

RFC 1700                    Assigned Numbers                October 1994

DOMAIN NAME SYSTEM PARAMETERS

The Internet Domain Naming System (DOMAIN) includes several
parameters.  These are documented in [RFC1034] and [RFC1035].  The
CLASS parameter is listed here.  The per CLASS parameters are defined
in separate RFCs as indicated.

Domain System Parameters:

Decimal   Name                                          References
--------  ----                                          ----------
       0  Reserved                                           [PM1]
       1  Internet (IN)                              [RFC1034,PM1]
       2  Unassigned                                         [PM1]
       3  Chaos (CH)                                         [PM1]
       4  Hessoid (HS)                                       [PM1]
 5-65534  Unassigned                                         [PM1]
   65535  Reserved                                           [PM1]

In the Internet (IN) class the following TYPEs and QTYPEs are defined:

TYPE            value and meaning

A               1 a host address                         [RFC1035]
NS              2 an authoritative name server           [RFC1035]
MD              3 a mail destination (Obsolete - use MX) [RFC1035]
MF              4 a mail forwarder (Obsolete - use MX)   [RFC1035]
CNAME           5 the canonical name for an alias        [RFC1035]
SOA             6 marks the start of a zone of authority [RFC1035]
MB              7 a mailbox domain name (EXPERIMENTAL)   [RFC1035]
MG              8 a mail group member (EXPERIMENTAL)     [RFC1035]
MR              9 a mail rename domain name (EXPERIMENTAL)[RFC1035]
NULL            10 a null RR (EXPERIMENTAL)              [RFC1035]
WKS             11 a well known service description      [RFC1035]
PTR             12 a domain name pointer                 [RFC1035]
HINFO           13 host information                      [RFC1035]
MINFO           14 mailbox or mail list information      [RFC1035]
MX              15 mail exchange                         [RFC1035]
TXT             16 text strings                          [RFC1035]

RP              17 for Responsible Person                [RFC1183]
AFSDB           18 for AFS Data Base location            [RFC1183]
X25             19 for X.25 PSDN address                 [RFC1183]
ISDN            20 for ISDN address                      [RFC1183]
RT              21 for Route Through                     [RFC1183]

NSAP            22 for NSAP address, NSAP style A record [RFC1348]
NSAP-PTR        23 for domain name pointer, NSAP style   [RFC1348]

Reynolds & Postel                                              [Page 80]

RFC 1700                    Assigned Numbers                October 1994

SIG             24 for security signature        [Donald Eastlake]
KEY             25 for security key              [Donald Eastlake]

PX              26 X.400 mail mapping information        [RFC1664]

GPOS            27 Geographical Position           [Craig Farrell]

AAAA            28 IP6 Address                     [Susan Thomson]

AXFR            252 transfer of an entire zone           [RFC1035]
MAILB           253 mailbox-related RRs (MB, MG or MR)   [RFC1035]
MAILA           254 mail agent RRs (Obsolete - see MX)   [RFC1035]
*               255 A request for all records            [RFC1035]

REFERENCES

[RFC1034] Mockapetris, P., "Domain Names - Concepts and
          Facilities", STD 13, RFC 1034, USC/Information Sciences
          Institute, November 1987.

[RFC1035] Mockapetris, P., "Domain Names - Implementation and
          Specification", STD 13, RFC 1035, USC/Information Sciences
          Institute, November 1987.

[RFC1183] Everhart, C., Mamakos, L., Ullmann, R., and P. Mockapetris,
          Editors, "New DNS RR Definitions", RFC 1183, Transarc,
          University of Maryland, Prime Computer, USC/Information
          Sciences Institute, October 1990.

[RFC1348] Manning, B., "DNS NSAP RRs", RFC 1348, Rice University,
          July 1992.

[RFC1664] Allocchio, C., Bonito, A., Cole, B., Giordano, S., and R.
          Hagens, "Using the Internet DNS to Distribute RFC1327 Mail
          Address Mapping Tables", GARR-Italy, Cisco Systems Inc.,
          Centro Svizzero Calcolo Scientifico, Advanced Network &
          Services, August 1994.

PEOPLE

[Susan Thomson] Susan Thomson <set@swift.bellcore.com>

[PM1] Paul Mockapetris <pvm@isi.edu>

[Donald Eastlake] Donald E. Eastlake, III <dee@ranger.enet.dec.com>

Reynolds & Postel                                              [Page 81]

RFC 1700                    Assigned Numbers                October 1994

[Craig Farrell]

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/dns-parameters

Reynolds & Postel                                              [Page 82]

RFC 1700                    Assigned Numbers                October 1994

MAIL ENCODING HEADER FIELD KEYWORDS

[RFC1505] specifies an initial list of keywords for the experimental
encoding header field (EHF-MAIL), and provides that additional
keywords may be registered with the IANA.

Keyword         Description                             Reference
_______         ___________                          ____________

EDIFACT         EDIFACT format                          [RFC1505]
EDI-X12         EDI X12 format                         [ANSI-X12]
EVFU            FORTRAN format                          [RFC1505]
FS              File System format                      [RFC1505]
Hex             Hex binary format                       [RFC1505]
LZJU90          LZJU90 format                           [RFC1505]
LZW             LZW format                              [RFC1505]
Message         Encapsulated Message                     [RFC822]
PEM, PEM-Clear  Privacy Enhanced Mail                   [RFC1421]
PGP             Pretty Good Privacy                     [RFC1505]
Postscript      Postscript format                    [POSTSCRIPT]
Shar            Shell Archive format                    [RFC1505]
Signature       Signature                               [RFC1505]
Tar             Tar format                              [RFC1505]
Text            Text                                   [IS-10646]
uuencode        uuencode format                         [RFC1505]
URL             external URL-reference                  [RFC1505]

MAIL ENCRYPTION TYPES

[RFC822] specifies that Encryption Types for mail may be assigned.
There are currently no RFC 822 encryption types assigned.  Please use
instead the Mail Privacy procedures defined in [RFC1421, RFC1422,
RFC1423].

ESMTP MAIL KEYWORDS

[RFC1651] specifies that extension to SMTP can be identified with
keywords.

Keywords        Description                              Reference

Reynolds & Postel                                              [Page 83]

RFC 1700                    Assigned Numbers                October 1994

------------    --------------------------------         ---------
SEND            Send as mail                              [RFC821]
SOML            Send as mail or terminal                  [RFC821]
SAML            Send as mail and terminal                 [RFC821]
EXPN            Expand the mailing list                   [RFC821]
HELP            Supply helpful information                [RFC821]
TURN            Turn the operation around                 [RFC821]
8BITMIME        Use 8-bit data                           [RFC1652]
SIZE            Message size declaration                 [RFC1653]
VERB            Verbose                              [Eric Allman]
ONEX            One message transaction only         [Eric Allman]

MAIL EXTENSION TYPES

The Simple Mail Transfer Protocol [RFC821] specifies a set of
commands or services for mail transfer.  A general procedure for
extending the set of services is defined in [RFC1651].  The set of
service extensions is listed here.

Service Ext   EHLO Keyword Parameters Verb       Reference
-----------   ------------ ---------- ---------- ---------
Send             SEND         none       SEND     [RFC821]
Send or Mail     SOML         none       SOML     [RFC821]
Send and Mail    SAML         none       SAML     [RFC821]
Expand           EXPN         none       EXPN     [RFC821]
Help             HELP         none       HELP     [RFC821]
Turn             TURN         none       TURN     [RFC821]
8 Bit MIME       8BITMIME     none       none    [RFC1652]
Size             SIZE         number     none    [RFC1653]

MAIL SYSTEM NAMES

In some places, an identification of other mail systems is used.

One of these is in "The COSINE and Internet X.500 Schema" (section
9.3.18) [RFC1274].  The mail system names listed here are used as the
legal values in that schema under the "otherMailbox" attribute
"mailboxType" type (which must be a PrintableString).

Another place is in "Mapping between X.400(1988) / ISO 10021 and RFC
822" (section 4.2.2) [RFC1327].  The names listed here are used as

Reynolds & Postel                                              [Page 84]

RFC 1700                    Assigned Numbers                October 1994

the legal values in that schema under the "std-or-address" attribute
"registered-dd-type" type (which must be a "key-string").

Note that key-string = <a-z, A-Z, 0-9, and "-" >.

Mail System Name        Description                     Reference
----------------        ------------------------------- ---------
mcimail                 MCI Mail

MAIL TRANSMISSION TYPES

The Simple Mail Transfer Protocol [RFC821] and the Standard for the
Format of ARPA Internet Text Messages [RFC822] specify that a set of
"Received" lines will be prepended to the headers of electronic mail
messages as they are transported through the Internet.  These received
line may optionally include either or both a "via" phrase and/or a
"with" phrase.  The legal values for the phrases are listed here.  The
via phrase is intended to indicate the link or physical medium over
which the message was transferred.  The with phrase is intended to
indicate the protocol or logical process that was used to transfer the
message.

VIA link types  Description                             Reference
--------------  ----------------------------            ---------
UUCP            Unix-to-Unix Copy Program                   [???]

WITH protocol types  Description                        Reference
-------------------  ----------------------------       ---------
SMTP                 Simple Mail Transfer Protocol       [RFC821]
ESMTP                SMTP with Service Extensions       [RFC1651]

REFERENCES

[ANSI-X12]

[POSTSCRIPT] Adobe Systems Inc., "PostScript Langpuage Reference
Manual", 2nd Edition, 2nd Printing, January 1991.

[IS-10646]

Reynolds & Postel                                              [Page 85]

RFC 1700                    Assigned Numbers                October 1994

[RFC821] Postel, J., "Simple Mail Transfer Protocol", STD 10, RFC 821,
         USC/Information Sciences Institute, August 1982.

[RFC822] Crocker, D., "Standard for the Format of ARPA-Internet Text
         Messages", STD 11, RFC 822, UDEL, August 1982.

[RFC1274] Barker, P., and S. Kille, "The COSINE and Internet X.500
          Schema", RFC 1274, University College London, November 1991.

[RFC1327] Hardcastle-Kille, S., "Mapping between X.400(1988) / ISO
          10021 and RFC 822", RFC 1327, University College London,
          May 1992.

[RFC1421] Linn, J., "Privacy Enhancement for Internet Electronic
          Mail: Part I: Message Encipherment and Authentication
          Procedures", RFC 1421, IAB IRTF PSRG, IETF PEM WG,
          February 1993.

[RFC1422] Kent, S., "Privacy Enhancement for Internet
          Electronic Mail: Part II -- Certificate-Based Key
          Management", BBN, IAB IRTF PSRG, IETF PEM, February 1993.

[RFC1423] Balenson, D., "Privacy Enhancement for Internet Electronic
          Mail: Part III -- Algorithms, Modes, and Identifiers",
          RFC 1423, TIS, IAB IRTF PSRG, IETF PEM WG, February 1993.

[RFC1505] Costanzo, A., Robinson, D., and R. Ullmann, "Encoding Header
          Field for Internet Messages", RFC 1505, AKC Consulting,
          Computervision Corporation, August 1993.

[RFC1651] Klensin, J., Freed, N., Rose, M., Stefferud, E., and D.
          Crocker, "SMTP Service Extensions", RFC 1651, MCI, Innosoft,
          Dover Beach Consulting, Inc., Network Management Associates,
          Inc., Silicon Graphics, Inc., July 1994.

[RFC1652] Klensin, J., Freed, N., Rose, M., Stefferud, E., and D.
          Crocker, "SMTP Service Extension for 8bit-MIMEtransport",
          RFC 1652, MCI, Innosoft, Dover Beach Consulting, Inc.,
          Network Management Associates, Inc., Silicon Graphics, Inc.,
          July 1994.

[RFC1653] Klensin, J., Freed, N., and K. Moore, "SMTP Service
          Extension for Message Size Declaration", RFC 1653,
          MCI, Innosoft, University of Tennessee, July 1994.

PEOPLE

Reynolds & Postel                                              [Page 86]

RFC 1700                    Assigned Numbers                October 1994

[Eric Allman]

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/mail-parameters

Reynolds & Postel                                              [Page 87]

RFC 1700                    Assigned Numbers                October 1994

BOOTP AND DHCP PARAMETERS

The Bootstrap Protocol (BOOTP) [RFC951] describes an IP/UDP
bootstrap protocol (BOOTP) which allows a diskless client machine to
discover its own IP address, the address of a server host, and the
name of a file to be loaded into memory and executed.  The Dynamic
Host Configuration Protocol (DHCP) [RFC1531] provides a framework for
automatic configuration of IP hosts.  The "DHCP Options and BOOTP
Vendor Information Extensions" [RFC1533] describes the additions to the
Bootstrap Protocol (BOOTP) which can also be used as options with the
Dynamic Host Configuration Protocol (DHCP).

BOOTP Vendor Extensions and DHCP Options are listed below:

   Tag     Name          Data Length    Meaning
   ---     ----          -----------    -------
    0      Pad               0          None
    1      Subnet Mask       4          Subnet Mask Value
    2      Time Offset       4          Time Offset in
                                        Seconds from UTC
    3      Gateways          N          N/4 Gateway addresses
    4      Time Server       N          N/4 Timeserver addresses
    5      Name Server       N          N/4 IEN-116 Server addresses
    6      Domain Server     N          N/4 DNS Server addresses
    7      Log Server        N          N/4 Logging Server addresses
    8      Quotes Server     N          N/4 Quotes Server addresses
    9      LPR Server        N          N/4 Printer Server addresses
   10      Impress Server    N          N/4 Impress Server addresses
   11      RLP Server        N          N/4 RLP Server addresses
   12      Hostname          N          Hostname string
   13      Boot File Size    2          Size of boot file in 512 byte
                                        chunks
   14      Merit Dump File              Client to dump and name
                                        the file to dump it to
   15      Domain Name       N          The DNS domain name of the
                                        client
   16      Swap Server       N          Swap Server addeess
   17      Root Path         N          Path name for root disk
   18      Extension File    N          Path name for more BOOTP info

   19      Forward On/Off    1          Enable/Disable IP Forwarding
   20      SrcRte On/Off     1          Enable/Disable Source Routing
   21      Policy Filter     N          Routing Policy Filters
   22      Max DG Assembly   2          Max Datagram Reassembly Size
   23      Default IP TTL    1          Default IP Time to Live
   24      MTU Timeout       4          Path MTU Aging Timeout
   25      MTU Plateau       N          Path MTU  Plateau Table

Reynolds & Postel                                              [Page 88]

RFC 1700                    Assigned Numbers                October 1994

   26      MTU Interface     2          Interface MTU Size
   27      MTU Subnet        1          All Subnets are Local
   28      Broadcast Address 4          Broadcast Address
   29      Mask Discovery    1          Perform Mask Discovery
   30      Mask Supplier     1          Provide Mask to Others
   31      Router Discovery  1          Perform Router Discovery
   32      Router Request    4          Router Solicitation Address
   33      Static Route      N          Static Routing Table
   34      Trailers          1          Trailer Encapsulation
   35      ARP Timeout       4          ARP Cache Timeout
   36      Ethernet          1          Ethernet Encapsulation
   37      Default TCP TTL   1          Default TCP Time to Live
   38      Keepalive Time    4          TCP Keepalive Interval
   39      Keepalive Data    1          TCP Keepalive Garbage
   40      NIS Domain        N          NIS Domain Name
   41      NIS Servers       N          NIS Server Addresses
   42      NTP Servers       N          NTP Server Addresses
   43      Vendor Specific   N          Vendor Specific Information
   44      NETBIOS Name Srv  N          NETBIOS Name Servers
   45      NETBIOS Dist Srv  N          NETBIOS Datagram Distribution
   46      NETBIOS Note Type 1          NETBIOS Note Type
   47      NETBIOS Scope     N          NETBIOS Scope
   48      X Window Font     N          X Window Font Server
   49      X Window Manmager N          X Window Display Manager
   50      Address Request   4          Requested IP Address
   51      Address Time      4          IP Address Lease Time
   52      Overload          1          Overloaf "sname" or "file"
   53      DHCP Msg Type     1          DHCP Message Type
   54      DHCP Server Id    4          DHCP Server Identification
   55      Parameter List    N          Parameter Request List
   56      DHCP Message      N          DHCP Error Message
   57      DHCP Max Msg Size 2          DHCP Maximum Message Size
   58      Renewal Time      4          DHCP Renewal (T1) Time
   59      Rebinding Time    4          DHCP Rebinding (T2) Time
   60      Class Id          N          Class Identifier
   61      Client Id         N          Client Identifier
   62      Netware/IP Domain N          Netware/IP Domain Name
   63      Netware/IP Option N          Netware/IP sub Options

   64-127  Unassigned
   128-154 Reserved

   255     End               0          None

REFERENCES

Reynolds & Postel                                              [Page 89]

RFC 1700                    Assigned Numbers                October 1994

[RFC951]  Croft, B., and J. Gilmore, "BOOTSTRAP Protocol (BOOTP)",
          RFC-951, Stanford and SUN Microsytems, September 1985.

[RFC1531]  Droms, R., "Dynamic Host Configuration Protocol", Bucknell
           University, October 1993.

[RFC1533]  Alexander, S., and R. Droms, "DHCP Options and BOOTP Vendor
           Extensions", Lachman Technology, Inc., Bucknell University,
           October 1993.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/bootp-and-dhcp-
parameters

Reynolds & Postel                                              [Page 90]

RFC 1700                    Assigned Numbers                October 1994

ADDRESS FAMILY NUMBERS

Several protocols deal with multiple address families.  The 16-bit
assignments are listed here.

Number    Description                                          Reference
------    ---------------------------------------------------- ---------
     0    Reserved
     1    IP (IP version 4)
     2    IP6 (IP version 6)
     3    NSAP
     4    HDLC (8-bit multidrop)
     5    BBN 1822
     6    802 (includes all 802 media plus Ethernet "canonical format")
     7    E.163
     8    E.164 (SMDS, Frame Relay, ATM)
     9    F.69 (Telex)
    10    X.121 (X.25, Frame Relay)
    11    IPX
    12    Appletalk
    13    Decnet IV
    14    Banyan Vines
 65535    Reserved

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/address-family-numbers

Reynolds & Postel                                              [Page 91]

RFC 1700                    Assigned Numbers                October 1994

FOOBAR AF NUMBERS

In the FTP Operation Over Big Address Records (FOOBAR) Protocol
[RFC1639] there is a field, called "address family" or "af", to
identify the lower level protocol addresses in use.  This is an 8 bit
field.  The first 16 assignments (0-15) of the af value are exactly
the same as the IP Version number.  The assignment for values 16-255
are listed here.

Assigned FOOBAR Address Families

Decimal   Keyword    Address Family                     References
-------   -------    --------------                     ----------
    16    IPX        Novell IPX
17-254               Unassigned
   255               Reserved

REFERENCES

[RFC1639] Piscitello, D., "FTP Operation Over Big Address Records
          (FOOBAR)", Core Competence, Inc., June 1994.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/foobar-af-numbers

Reynolds & Postel                                              [Page 92]

RFC 1700                    Assigned Numbers                October 1994

DIRECTORY SYSTEM NAMES

In the representation of distinquished names (and possibly other
contexts) of the X.500 Directory system, several unique keywords may
be necessary.  For example, in the string representation of
distinguished names [RFC1485].

Keyword  Attribute (X.520 keys)
-------  ---------------------------------
 CN       CommonName
 L        LocalityName
 ST       StateOrProvinceName
 O        OrganizationName
 OU       OrganizationalUnitName
 C        CountryName

REFERENCES

[RFC1485]  Hardcastle-Kille, S., "A String Representation of
           Distinguished Names (OSI-DS 23 (v5))", RFC1485, ISODE
           Consortium, July 1993.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/directory-system-names

Reynolds & Postel                                              [Page 93]

RFC 1700                    Assigned Numbers                October 1994

PUBLISHER IDENTIFICATION CODE

The RFC "A Format for E-Mailing Bibliographic Records" [RFC1357]
establishs a "publisher-ID" code.  The IANA registry of these codes is
listed here.

Code   Publisher                                               Reference
------ ------------------------------------------------------- ---------
DUMMY  for testing only                                         [RFC1357]
TEST   for testing only                                         [RFC1357]
ISI    Information Sciences Institute                               [JBP]
          of the University of Southern California
UMCS   University of Manchester Computer Science Department         [TXC]

REFERENCES

[RFC1357] Cohen, D., Editor, "A Format for E-mailing Bibliographic
          Records", RFC 1357, USC/Information Sciences Institute,
          July 1992.

PEOPLE

[JBP] Jon Postel <postel@isi.edu>

[TXC] Tim Clement <timc@cs.man.ac.uk>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/publisher-id

Reynolds & Postel                                              [Page 94]

RFC 1700                    Assigned Numbers                October 1994

OSPF AUTHENTICATION CODES

The Open Shotrest Path First (OSPF) protocols has a provision for
authentication, and the type of authentication can me indicated by a
code number.  The following are the registered authentication codes.

Code    Authentication Method                             Reference
----    ---------------------                             ---------
   0    No Authentication                                 [RFC1583]
   1    Simple Password Authentication                    [RFC1583]
2-65535 Reserved

REFERENCES

[RFC1583] Moy, J., "OSPF Version 2", RFC 1583, Proteon, Inc., March
          1994.

[RFC1584] Moy, J., "Multicast Extensions to OSPF", RFC 1584, Proteon,
          Inc., March 1994.

[RFC1585] Moy, J., "MOSPF: Analysis and Experience", RFC 1585,
          Proteon, Inc., March 1994.

[RFC1586] deSouza, O., and M. Rodrigues, "Guidelines for Running OSPF
          Over Frame Relay Networks", RFC 1586, AT&T Bell
          Laboratories, March 1994.

[RFC1587] Coltun, R., and V. Fuller, "The OSPF NSSA Option", RFC 1587,
          RainbowBridge Communications, BARRNet, March 1994.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/ospf-authentication-
codes

Reynolds & Postel                                              [Page 95]

RFC 1700                    Assigned Numbers                October 1994

MEDIA TYPES

[RFC1521] specifies that Content Types, Content Subtypes, Character
Sets, Access Types, and Conversion values for MIME mail will be
assigned and listed by the IANA.

Content Types and Subtypes
--------------------------

Type            Subtype         Description                 Reference
----            -------         -----------                 ---------
text            plain                                   [RFC1521,NSB]
                richtext                                [RFC1521,NSB]
                tab-separated-values                   [Paul Lindner]

multipart       mixed                                   [RFC1521,NSB]
                alternative                             [RFC1521,NSB]
                digest                                  [RFC1521,NSB]
                parallel                                [RFC1521,NSB]
                appledouble                [MacMime,Patrik Faltstrom]
                header-set                             [Dave Crocker]

message         rfc822                                  [RFC1521,NSB]
                partial                                 [RFC1521,NSB]
                external-body                           [RFC1521,NSB]
                news                        [RFC 1036, Henry Spencer]

application     octet-stream                            [RFC1521,NSB]
                postscript                              [RFC1521,NSB]
                oda                                     [RFC1521,NSB]
                atomicmail                           [atomicmail,NSB]
                andrew-inset                       [andrew-inset,NSB]
                slate                           [slate,terry crowley]
                wita              [Wang Info Transfer,Larry Campbell]
                dec-dx            [Digital Doc Trans, Larry Campbell]
                dca-rft        [IBM Doc Content Arch, Larry Campbell]
                activemessage                          [Ehud Shapiro]
                rtf                                    [Paul Lindner]
                applefile                  [MacMime,Patrik Faltstrom]
                mac-binhex40               [MacMime,Patrik Faltstrom]
                news-message-id              [RFC1036, Henry Spencer]
                news-transmission            [RFC1036, Henry Spencer]
                wordperfect5.1                         [Paul Lindner]
                pdf                                    [Paul Lindner]
                zip                                    [Paul Lindner]
                macwriteii                             [Paul Lindner]

Reynolds & Postel                                              [Page 96]

RFC 1700                    Assigned Numbers                October 1994

                msword                                 [Paul Lindner]
                remote-printing                         [RFC1486,MTR]

image           jpeg                                    [RFC1521,NSB]
                gif                                     [RFC1521,NSB]
                ief             Image Exchange Format       [RFC1314]
                tiff            Tag Image File Format           [MTR]

audio           basic                                   [RFC1521,NSB]

video           mpeg                                    [RFC1521,NSB]
                quicktime                              [Paul Lindner]

The "media-types" directory contains a subdirectory for each content
type and each of those directories contains a file for each content
subtype.

                               |-application-
                               |-audio-------
                               |-image-------
                 |-media-types-|-message-----
                               |-multipart---
                               |-text--------
                               |-video-------

   URL = ftp://ftp.isi.edu/in-notes/iana/assignments/media-types

Character Sets
--------------

All of the character sets listed the section on Character Sets are
registered for use with MIME as MIME Character Sets.  The
correspondance between the few character sets listed in the MIME
specification [RFC1521] and the list in that section are:

Type           Description                                  Reference
----           -----------                                  ---------
US-ASCII       see ANSI_X3.4-1968 below                 [RFC1521,NSB]
ISO-8859-1     see ISO_8859-1:1987 below                [RFC1521,NSB]
ISO-8859-2     see ISO_8859-2:1987 below                [RFC1521,NSB]
ISO-8859-3     see ISO_8859-3:1988 below                [RFC1521,NSB]
ISO-8859-4     see ISO_8859-4:1988 below                [RFC1521,NSB]
ISO-8859-5     see ISO_8859-5:1988 below                [RFC1521,NSB]
ISO-8859-6     see ISO_8859-6:1987 below                [RFC1521,NSB]
ISO-8859-7     see ISO_8859-7:1987 below                [RFC1521,NSB]
ISO-8859-8     see ISO_8859-8:1988 below                [RFC1521,NSB]
ISO-8859-9     see ISO_8859-9:1989 below                [RFC1521,NSB]

Reynolds & Postel                                              [Page 97]

RFC 1700                    Assigned Numbers                October 1994

Access Types
------------

Type           Description                                  Reference
----           -----------                                  ---------
FTP                                                     [RFC1521,NSB]
ANON-FTP                                                [RFC1521,NSB]
TFTP                                                    [RFC1521,NSB]
AFS                                                     [RFC1521,NSB]
LOCAL-FILE                                              [RFC1521,NSB]
MAIL-SERVER                                             [RFC1521,NSB]

Conversion Values
-----------------

Conversion values or Content Transfer Encodings.

Type           Description                                  Reference
----           -----------                                  ---------
7BIT                                                    [RFC1521,NSB]
8BIT                                                    [RFC1521,NSB]
BASE64                                                  [RFC1521,NSB]
BINARY                                                  [RFC1521,NSB]
QUOTED-PRINTABLE                                        [RFC1521,NSB]

MIME / X.400 MAPPING TABLES

MIME to X.400 Table

    MIME content-type          X.400 Body Part             Reference
    -----------------          ------------------          ---------
    text/plain
      charset=us-ascii         ia5-text                     [RFC1494]
      charset=iso-8859-x       EBP - GeneralText            [RFC1494]
    text/richtext              no mapping defined           [RFC1494]
    application/oda            EBP - ODA                    [RFC1494]
    application/octet-stream   bilaterally-defined          [RFC1494]
    application/postscript     EBP - mime-postscript-body   [RFC1494]
    image/g3fax                g3-facsimile                 [RFC1494]
    image/jpeg                 EBP - mime-jpeg-body         [RFC1494]
    image/gif                  EBP - mime-gif-body          [RFC1494]
    audio/basic                no mapping defined           [RFC1494]
    video/mpeg                 no mapping defined           [RFC1494]

    Abbreviation: EBP - Extended Body Part

Reynolds & Postel                                              [Page 98]

RFC 1700                    Assigned Numbers                October 1994

X.400 to MIME Table

                             Basic Body Parts

    X.400 Basic Body Part      MIME content-type           Reference
    ---------------------      --------------------        ---------
    ia5-text                   text/plain;charset=us-ascii [RFC1494]
    voice                      No Mapping Defined          [RFC1494]
    g3-facsimile               image/g3fax                 [RFC1494]
    g4-class1                  no mapping defined          [RFC1494]
    teletex                    no mapping defined          [RFC1494]
    videotex                   no mapping defined          [RFC1494]
    encrypted                  no mapping defined          [RFC1494]
    bilaterally-defined        application/octet-stream    [RFC1494]
    nationally-defined         no mapping defined          [RFC1494]
    externally-defined         See Extended Body Parts     [RFC1494]

    X.400 Extended Body Part  MIME content-type            Reference
    ------------------------- --------------------         ---------
    GeneralText               text/plain;charset=iso-8859-x[RFC1494]
    ODA                       application/oda              [RFC1494]
    mime-postscript-body      application/postscript       [RFC1494]
    mime-jpeg-body            image/jpeg                   [RFC1494]
    mime-gif-body             image/gif                    [RFC1494]

REFERENCES

[MacMime] Work in Progress.

[RFC1036] Horton, M., and R. Adams, "Standard for Interchange of
          USENET Messages", RFC 1036, AT&T Bell Laboratories,
          Center for Seismic Studies, December 1987.

[RFC1494] Alvestrand, H., and S. Thompson, "Equivalences between 1988
          X.400 and RFC-822 Message Bodies", RFC 1494, SINTEF DELAB,
          Soft*Switch, Inc., August 1993.

[RFC1521] Borenstien, N., and N. Freed, "MIME (Multipurpose Internet
          Mail Extensions) Part One: Mechanisms for Specifying and
          Describing the Format of Internet Message Bodies", RFC 1521,
          Bellcore, Innosoft, September 1993.

PEOPLE

[Larry Campbell]

[Dave Crocker]  Dave Crocker <dcrocker@mordor.stanford.edu>

Reynolds & Postel                                              [Page 99]

RFC 1700                    Assigned Numbers                October 1994

[Terry Crowley]

[NSB] Nathaniel Borenstein <nsb@bellcore.com>

[MTR] Marshall Rose <mrose@dbc.mtview.ca.us>

[Paul Lindner]

[PXF] Patrik Faltstrom <paf@nada.kth.se>

[Ehud Shapiro]

[Henry Spencer]

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/media-types/media-
types

Reynolds & Postel                                             [Page 100]

RFC 1700                    Assigned Numbers                October 1994

CHARACTER SETS

These are the official names for character sets that may be used in
the Internet and may be referred to in Internet documentation.  These
names are expressed in ANSI_X3.4-1968 which is commonly called
US-ASCII or simply ASCII.  The character set most commonly use in the
Internet and used especially in protocol standards is US-ASCII, this
is strongly encouraged.  The use of the name US-ASCII is also
encouraged.

The character set names may be up to 40 characters taken from the
printable characters of US-ASCII.  However, no distinction is made
between use of upper and lower case letters.

Character Set                                               Reference
-------------                                               ---------

Name: ANSI_X3.4-1968                                   [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-6
Alias: ANSI_X3.4-1986
Alias: ISO_646.irv:1991
Alias: ASCII
Alias: ISO646-US
Alias: US-ASCII
Alias: us
Alias: IBM367
Alias: cp367

Name: ISO-10646-UCS-2
Source: the 2-octet Basic Multilingual Plane, aka Unicode
        this needs to specify network byte order: the standard
        does not specify (it is a 16-bit integer space)

Name: ISO-10646-UCS-4
Source: the full code space. (same comment about byte order,
        these are 31-bit numbers.

Name: ISO-10646-UTF-1
Source: Universal Transfer Format (1), this is the multibyte
        encoding, that subsets ASCII-7. It does not have byte
        ordering issues.

Name: ISO_646.basic:1983                                [RFC1345,KXS2]
Source: ECMA registry
Alias: ref

Reynolds & Postel                                             [Page 101]

RFC 1700                    Assigned Numbers                October 1994

Name: INVARIANT                                         [RFC1345,KXS2]

Name: ISO_646.irv:1983                                  [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-2
Alias: irv

Name: BS_4730                                           [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-4
Alias: ISO646-GB
Alias: gb
Alias: uk

Name: NATS-SEFI                                         [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-8-1

Name: NATS-SEFI-ADD                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-8-2

Name: NATS-DANO                                         [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-9-1

Name: NATS-DANO-ADD                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-9-2

Name: SEN_850200_B                                      [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-10
Alias: FI
Alias: ISO646-FI
Alias: ISO646-SE
Alias: se

Name: SEN_850200_C                                      [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-11
Alias: ISO646-SE2
Alias: se2

Name: KS_C_5601-1987                                    [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-149
Alias: KS_C_5601-1989

Reynolds & Postel                                             [Page 102]

RFC 1700                    Assigned Numbers                October 1994

Alias: KSC_5601
Alias: korean

Name: ISO-2022-KR                                       [RFC1557,Choi]
Source: RFC-1557 (see also KS_C_5601-1987)

Name: EUC-KR                                            [RFC1557,Choi]
Source: RFC-1557 (see also KS_C_5861-1992)

Name: ISO-2022-JP                                      [RFC1468,Murai]
Source: RFC-1468

Name: ISO-2022-JP-2                                     [RFC1554,Ohta]
Source: RFC-1554

Name: JIS_C6220-1969-jp                                 [RFC1345,KXS2]
Source: ECMA registry
Alias: JIS_C6220-1969
Alias: iso-ir-13
Alias: katakana
Alias: x0201-7

Name: JIS_C6220-1969-ro                                 [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-14
Alias: jp
Alias: ISO646-JP

Name: IT                                                [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-15
Alias: ISO646-IT

Name: PT                                                [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-16
Alias: ISO646-PT

Name: ES                                                [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-17
Alias: ISO646-ES

Name: greek7-old                                        [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-18

Name: latin-greek                                       [RFC1345,KXS2]

Reynolds & Postel                                             [Page 103]

RFC 1700                    Assigned Numbers                October 1994

Source: ECMA registry
Alias: iso-ir-19

Name: DIN_66003                                         [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-21
Alias: de
Alias: ISO646-DE

Name: NF_Z_62-010_(1973)                                [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-25
Alias: ISO646-FR1

Name: Latin-greek-1                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-27

Name: ISO_5427                                          [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-37

Name: JIS_C6226-1978                                    [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-42

Name: BS_viewdata                                       [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-47

Name: INIS                                              [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-49

Name: INIS-8                                            [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-50

Name: INIS-cyrillic                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-51

Name: ISO_5427:1981                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-54

Name: ISO_5428:1980                                     [RFC1345,KXS2]
Source: ECMA registry

Reynolds & Postel                                             [Page 104]

RFC 1700                    Assigned Numbers                October 1994

Alias: iso-ir-55

Name: GB_1988-80                                        [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-57
Alias: cn
Alias: ISO646-CN

Name: GB_2312-80                                        [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-58
Alias: chinese

Name: NS_4551-1                                         [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-60
Alias: ISO646-NO
Alias: no

Name: NS_4551-2                                          [RFC1345,KXS2]
Source: ECMA registry
Alias: ISO646-NO2
Alias: iso-ir-61
Alias: no2

Name: NF_Z_62-010                                        [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-69
Alias: ISO646-FR
Alias: fr

Name: videotex-suppl                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-70

Name: PT2                                                [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-84
Alias: ISO646-PT2

Name: ES2                                                [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-85
Alias: ISO646-ES2

Name: MSZ_7795.3                                         [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-86

Reynolds & Postel                                             [Page 105]

RFC 1700                    Assigned Numbers                October 1994

Alias: ISO646-HU
Alias: hu

Name: JIS_C6226-1983                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-87
Alias: x0208
Alias: JIS_X0208-1983

Name: greek7                                             [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-88

Name: ASMO_449                                           [RFC1345,KXS2]
Source: ECMA registry
Alias: ISO_9036
Alias: arabic7
Alias: iso-ir-89

Name: iso-ir-90                                          [RFC1345,KXS2]
Source: ECMA registry

Name: JIS_C6229-1984-a                                   [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-91
Alias: jp-ocr-a

Name: JIS_C6229-1984-b                                   [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-92
Alias: ISO646-JP-OCR-B
Alias: jp-ocr-b

Name: JIS_C6229-1984-b-add                               [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-93
Alias: jp-ocr-b-add

Name: JIS_C6229-1984-hand                                [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-94
Alias: jp-ocr-hand

Name: JIS_C6229-1984-hand-add                            [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-95
Alias: jp-ocr-hand-add

Reynolds & Postel                                             [Page 106]

RFC 1700                    Assigned Numbers                October 1994

Name: JIS_C6229-1984-kana                                [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-96

Name: ISO_2033-1983                                      [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-98
Alias: e13b

Name: ANSI_X3.110-1983                                   [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-99
Alias: CSA_T500-1983
Alias: NAPLPS

Name: ISO_8859-1:1987                                    [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-100
Alias: ISO_8859-1
Alias: ISO-8859-1
Alias: latin1
Alias: l1
Alias: IBM819
Alias: CP819

Name: ISO_8859-2:1987                                    [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-101
Alias: ISO_8859-2
Alias: ISO-8859-2
Alias: latin2
Alias: l2

Name: T.61-7bit                                          [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-102

Name: T.61-8bit                                          [RFC1345,KXS2]
Alias: T.61
Source: ECMA registry
Alias: iso-ir-103

Name: ISO_8859-3:1988                                    [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-109
Alias: ISO_8859-3
Alias: ISO-8859-3
Alias: latin3

Reynolds & Postel                                             [Page 107]

RFC 1700                    Assigned Numbers                October 1994

Alias: l3

Name: ISO_8859-4:1988                                    [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-110
Alias: ISO_8859-4
Alias: ISO-8859-4
Alias: latin4
Alias: l4

Name: ECMA-cyrillic                                      [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-111

Name: CSA_Z243.4-1985-1                                  [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-121
Alias: ISO646-CA
Alias: csa7-1
Alias: ca

Name: CSA_Z243.4-1985-2                                  [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-122
Alias: ISO646-CA2
Alias: csa7-2

Name: CSA_Z243.4-1985-gr                                 [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-123

Name: ISO_8859-6:1987                                    [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-127
Alias: ISO_8859-6
Alias: ISO-8859-6
Alias: ECMA-114
Alias: ASMO-708
Alias: arabic

Name: ISO_8859-6-E                                       [RFC1556,IANA]
Source: RFC-1556

Name: ISO_8859-6-I                                       [RFC1556,IANA]
Source: RFC-1556

Name: ISO_8859-7:1987                                    [RFC1345,KXS2]
Source: ECMA registry

Reynolds & Postel                                             [Page 108]

RFC 1700                    Assigned Numbers                October 1994

Alias: iso-ir-126
Alias: ISO_8859-7
Alias: ISO-8859-7
Alias: ELOT_928
Alias: ECMA-118
Alias: greek
Alias: greek8

Name: T.101-G2                                            [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-128

Name: ISO_8859-8:1988                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-138
Alias: ISO_8859-8
Alias: ISO-8859-8
Alias: hebrew

Name: ISO_8859-8-E                                  [RFC1556,Nussbacher]
Source: RFC-1556

Name: ISO_8859-8-I                                  [RFC1556,Nussbacher]
Source: RFC-1556

Name: CSN_369103                                          [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-139

Name: JUS_I.B1.002                                        [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-141
Alias: ISO646-YU
Alias: js
Alias: yu

Name: ISO_6937-2-add                                      [RFC1345,KXS2]
Source: ECMA registry and ISO 6937-2:1983
Alias: iso-ir-142

Name: IEC_P27-1                                           [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-143

Name: ISO_8859-5:1988                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-144
Alias: ISO_8859-5

Reynolds & Postel                                             [Page 109]

RFC 1700                    Assigned Numbers                October 1994

Alias: ISO-8859-5
Alias: cyrillic

Name: JUS_I.B1.003-serb                                   [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-146
Alias: serbian

Name: JUS_I.B1.003-mac                                    [RFC1345,KXS2]
Source: ECMA registry
Alias: macedonian
Alias: iso-ir-147

Name: ISO_8859-9:1989                                     [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-148
Alias: ISO_8859-9
Alias: ISO-8859-9
Alias: latin5
Alias: l5

Name: greek-ccitt                                         [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-150

Name: NC_NC00-10:81                                       [RFC1345,KXS2]
Source: ECMA registry
Alias: cuba
Alias: iso-ir-151
Alias: ISO646-CU

Name: ISO_6937-2-25                                       [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-152

Name: GOST_19768-74                                       [RFC1345,KXS2]
Source: ECMA registry
Alias: ST_SEV_358-88
Alias: iso-ir-153

Name: ISO_8859-supp                                       [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-154
Alias: latin1-2-5

Name: ISO_10367-box                                       [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-155

Reynolds & Postel                                             [Page 110]

RFC 1700                    Assigned Numbers                October 1994

Name: latin6                                              [RFC1345,KXS2]
Source: ECMA registry
Alias: iso-ir-157
Alias: l6

Name: latin-lap                                           [RFC1345,KXS2]
Source: ECMA registry
Alias: lap
Alias: iso-ir-158

Name: JIS_X0212-1990                                      [RFC1345,KXS2]
Source: ECMA registry
Alias: x0212
Alias: iso-ir-159

Name: DS_2089                                             [RFC1345,KXS2]
Source: Danish Standard, DS 2089, February 1974
Alias: DS2089
Alias: ISO646-DK
Alias: dk

Name: us-dk                                               [RFC1345,KXS2]

Name: dk-us                                               [RFC1345,KXS2]

Name: JIS_X0201                                           [RFC1345,KXS2]
Alias: X0201

Name: KSC5636                                             [RFC1345,KXS2]
Alias: ISO646-KR

Name: DEC-MCS                                             [RFC1345,KXS2]
Source: VAX/VMS User's Manual,
        Order Number: AI-Y517A-TE, April 1986.
Alias: dec

Name: hp-roman8                                           [RFC1345,KXS2]
Source: LaserJet IIP Printer User's Manual,
        HP part no 33471-90901, Hewlet-Packard, June 1989.
Alias: roman8
Alias: r8

Name: macintosh                                           [RFC1345,KXS2]
Source: The Unicode Standard ver1.0, ISBN 0-201-56788-1, Oct 1991
Alias: mac

Name: IBM037                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990

Reynolds & Postel                                             [Page 111]

RFC 1700                    Assigned Numbers                October 1994

Alias: cp037
Alias: ebcdic-cp-us
Alias: ebcdic-cp-ca
Alias: ebcdic-cp-wt
Alias: ebcdic-cp-nl

Name: IBM038                                              [RFC1345,KXS2]
Source: IBM 3174 Character Set Ref, GA27-3831-02, March 1990
Alias: EBCDIC-INT
Alias: cp038

Name: IBM273                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP273

Name: IBM274                                              [RFC1345,KXS2]
Source: IBM 3174 Character Set Ref, GA27-3831-02, March 1990
Alias: EBCDIC-BE
Alias: CP274

Name: IBM275                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: EBCDIC-BR
Alias: cp275

Name: IBM277                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: EBCDIC-CP-DK
Alias: EBCDIC-CP-NO

Name: IBM278                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP278
Alias: ebcdic-cp-fi
Alias: ebcdic-cp-se

Name: IBM280                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP280
Alias: ebcdic-cp-it

Name: IBM281                                              [RFC1345,KXS2]
Source: IBM 3174 Character Set Ref, GA27-3831-02, March 1990
Alias: EBCDIC-JP-E
Alias: cp281

Name: IBM284                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990

Reynolds & Postel                                             [Page 112]

RFC 1700                    Assigned Numbers                October 1994

Alias: CP284
Alias: ebcdic-cp-es

Name: IBM285                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP285
Alias: ebcdic-cp-gb

Name: IBM290                                              [RFC1345,KXS2]
Source: IBM 3174 Character Set Ref, GA27-3831-02, March 1990
Alias: cp290
Alias: EBCDIC-JP-kana

Name: IBM297                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp297
Alias: ebcdic-cp-fr

Name: IBM420                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990,
        IBM NLS RM p 11-11
Alias: cp420
Alias: ebcdic-cp-ar1

Name: IBM423                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp423
Alias: ebcdic-cp-gr

Name: IBM424                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp424
Alias: ebcdic-cp-he

Name: IBM437                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp437
Alias: 437

Name: IBM500                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP500
Alias: ebcdic-cp-be
Alias: ebcdic-cp-ch

Name: IBM850                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp850

Reynolds & Postel                                             [Page 113]

RFC 1700                    Assigned Numbers                October 1994

Alias: 850

Name: IBM851                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp851
Alias: 851

Name: IBM852                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp852
Alias: 852

Name: IBM855                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp855
Alias: 855

Name: IBM857                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp857
Alias: 857

Name: IBM860                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp860
Alias: 860

Name: IBM861                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp861
Alias: 861
Alias: cp-is

Name: IBM862                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp862
Alias: 862

Name: IBM863                                              [RFC1345,KXS2]
Source: IBM Keyboard layouts and code pages, PN 07G4586 June 1991
Alias: cp863
Alias: 863

Name: IBM864                                              [RFC1345,KXS2]
Source: IBM Keyboard layouts and code pages, PN 07G4586 June 1991
Alias: cp864

Name: IBM865                                              [RFC1345,KXS2]

Reynolds & Postel                                             [Page 114]

RFC 1700                    Assigned Numbers                October 1994

Source: IBM DOS 3.3 Ref (Abridged), 94X9575 (Feb 1987)
Alias: cp865
Alias: 865

Name: IBM868                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP868
Alias: cp-ar

Name: IBM869                                              [RFC1345,KXS2]
Source: IBM Keyboard layouts and code pages, PN 07G4586 June 1991
Alias: cp869
Alias: 869
Alias: cp-gr

Name: IBM870                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP870
Alias: ebcdic-cp-roece
Alias: ebcdic-cp-yu

Name: IBM871                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP871
Alias: ebcdic-cp-is

Name: IBM880                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp880
Alias: EBCDIC-Cyrillic

Name: IBM891                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp891

Name: IBM903                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp903

Name: IBM904                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: cp904
Alias: 904

Name: IBM905                                              [RFC1345,KXS2]
Source: IBM 3174 Character Set Ref, GA27-3831-02, March 1990
Alias: CP905
Alias: ebcdic-cp-tr

Reynolds & Postel                                             [Page 115]

RFC 1700                    Assigned Numbers                October 1994

Name: IBM918                                              [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP918
Alias: ebcdic-cp-ar2

Name: IBM1026                                             [RFC1345,KXS2]
Source: IBM NLS RM Vol2 SE09-8002-01, March 1990
Alias: CP1026

Name: EBCDIC-AT-DE                                        [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-AT-DE-A                                      [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-CA-FR                                        [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-DK-NO                                        [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-DK-NO-A                                      [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-FI-SE                                        [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-FI-SE-A                                      [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-FR                                           [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-IT                                           [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-PT                                           [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-ES                                           [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-ES-A                                         [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-ES-S                                         [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Reynolds & Postel                                             [Page 116]

RFC 1700                    Assigned Numbers                October 1994

Name: EBCDIC-UK                                           [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: EBCDIC-US                                           [RFC1345,KXS2]
Source: IBM 3270 Char Set Ref Ch 10, GA27-2837-9, April 1987

Name: UNKNOWN-8BIT                                             [RFC1428]

Name: MNEMONIC                                            [RFC1345,KXS2]
Source: RFC 1345, also known as "mnemonic+ascii+38"

Name: MNEM                                                [RFC1345,KXS2]
Source: RFC 1345, also known as "mnemonic+ascii+8200"

Name: VISCII                                                   [RFC1456]
Source: RFC 1456

Name: VIQR                                                     [RFC1456]
Source: RFC 1456

Name: KOI8-R                                                   [RFC1489]
Source: RFC 1489, based on GOST-19768-74, ISO-6937/8,
        INIS-Cyrillic, ISO-5427.

Name: UNICODE-1-1                                              [RFC1641]
Source: RFC 1641

Name: UNICODE-1-1-UTF-7                                        [RFC1642]
Source: RFC 1642

REFERENCES

[RFC1345]  Simonsen, K., "Character Mnemonics & Character Sets",
           RFC 1345, Rationel Almen Planlaegning, Rationel Almen
           Planlaegning, June 1992.

[RFC1428]  Vaudreuil, G., "Transition of Internet Mail from
           Just-Send-8 to 8bit-SMTP/MIME", RFC1428, CNRI, February
           1993.

[RFC1456]  Vietnamese Standardization Working Group, "Conventions for
           Encoding the Vietnamese Language VISCII: VIetnamese
           Standard Code for Information Interchange VIQR: VIetnamese
           Quoted-Readable Specification Revision 1.1", RFC 1456, May
           1993.

[RFC1468]  Murai, J., Crispin, M., and E. van der Poel, "Japanese
           Character Encoding for Internet Messages", RFC 1468,

Reynolds & Postel                                             [Page 117]

RFC 1700                    Assigned Numbers                October 1994

           Keio University, Panda Programming, June 1993.

[RFC1489]  Chernov, A., "Registration of a Cyrillic Character Set",
           RFC1489, RELCOM Development Team, July 1993.

[RFC1554]  Ohta, M., and K. Handa, "ISO-2022-JP-2: Multilingual
           Extension of ISO-2022-JP", RFC1554, Tokyo Institute of
           Technology, ETL, December 1993.

[RFC1556]  Nussbacher, H., "Handling of Bi-directional Texts in MIME",
           RFC1556, Israeli Inter-University, December 1993.

[RFC1557]  Choi, U., Chon, K., and H. Park, "Korean Character Encoding
           for Internet Messages", KAIST, Solvit Chosun Media,
           December 1993.

[RFC1641]  Goldsmith, D., and M. Davis, "Using Unicode with MIME",
           RFC1641, Taligent, Inc., July 1994.

[RFC1642]  Goldsmith, D., and M. Davis, "UTF-7", RFC1642, Taligent,
           Inc., July 1994.

PEOPLE

[KXS2] Keld Simonsen <Keld.Simonsen@dkuug.dk>

[Choi] Uhhyung Choi <uhhyung@kaist.ac.kr>

[Murai] Jun Murai <jun@wide.ad.jp>

[Ohta] Masataka Ohta <mohta@cc.titech.ac.jp>

[Nussbacher] Hank Nussbacher <hank@vm.tau.ac.il>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets

Reynolds & Postel                                             [Page 118]

RFC 1700                    Assigned Numbers                October 1994

NETWORK MANAGEMENT PARAMETERS

For the management of hosts and gateways on the Internet a data
structure for the information has been defined.  This data structure
should be used with any of several possible management protocols, such
as the "Simple Network Management Protocol" (SNMP) [RFC1157], or the
"Common Management Information Protocol over TCP" (CMOT) [RFC1095].

The data structure is the "Structure and Indentification of Management
Information for TCP/IP-based Internets" (SMI) [RFC1155], and the
"Management Information Base for Network Management of TCP/IP-based
Internets" (MIB-II) [RFC1213].

The SMI includes the provision for panrameters or codes to indicate
experimental or private data structures.  These parameter assignments
are listed here.

The older "Simple Gateway Monitoring Protocol" (SGMP) [RFC1028] also
defined a data structure.  The parameter assignments used with SGMP
are included here for historical completeness.

The network management object identifiers are under the iso (1), org
(3), dod (6), internet (1), or 1.3.6.1, branch of the name space.

The major branches are:

1                   iso
1.3                 org
1.3.6               dod
1.3.6.1             internet
1.3.6.1.1           directory
1.3.6.1.2           mgmt
1.3.6.1.2.1         mib-2
1.3.6.1.2.1.2.2.1.3 ifType
1.3.6.1.2.1.10      transmission
1.3.6.1.2.1.10.23   transmission.ppp
1.3.6.1.2.1.27      application
1.3.6.1.2.1.28      mta
1.3.6.1.3           experimental
1.3.6.1.4           private
1.3.6.1.4.1         enterprise
1.3.6.1.5           security
1.3.6.1.6           SNMPv2
1.3.6.1.7           mail

SMI Network Management Directory Codes:

Prefix: iso.org.dod.internet.directory (1.3.6.1.1.)

Reynolds & Postel                                             [Page 119]

RFC 1700                    Assigned Numbers                October 1994

Decimal   Name          Description                     References
-------   ----          -----------                     ----------
    all   Reserved      Reserved for future use             [IANA]

SMI Network Management MGMT Codes:

Prefix: iso.org.dod.internet.mgmt (1.3.6.1.2.)

Decimal   Name          Description                     References
-------   ----          -----------                     ----------
      0   Reserved                                          [IANA]
      1   MIB                                                [KZM]

Prefix: iso.org.dod.internet.mgmt.mib-2 (1.3.6.1.2.1)

Decimal   Name          Description                     References
-------   ----          -----------                     ----------
      0   Reserved      Reserved                            [IANA]
      1   system        System                       [RFC1213,KZM]
      2   interfaces    Interfaces                   [RFC1213,KZM]
      3   at            Address Translation          [RFC1213,KZM]
      4   ip            Internet Protocol            [RFC1213,KZM]
      5   icmp          Internet Control Message     [RFC1213,KZM]
      6   tcp           Transmission Control Protocol[RFC1213,KZM]
      7   udp           User Datagram Protocol       [RFC1213,KZM]
      8   egp           Exterior Gateway Protocol    [RFC1213,KZM]
      9   cmot          CMIP over TCP                [RFC1213,KZM]
     10   transmission  Transmission                 [RFC1213,KZM]
     11   snmp          Simple Network Management    [RFC1213,KZM]
     12   GenericIF     Generic Interface Extensions
--                                           [RFC1229,RFC1239,KZM]
     13   Appletalk     Appletalk Networking         [RFC1243,SXW]
     14   ospf          Open Shortest Path First    [RFC1253,FB77]
     15   bgp           Border Gateway Protocol          [RFC1657]
     16   rmon          Remote Network Monitoring    [RFC1271,SXW]
     17   bridge        Bridge Objects               [RFC1286,EXD]
     18   DecnetP4      Decnet Phase 4          [RFC1559, Saperia]
     19   Character     Character Streams                [RFC1658]
     20   snmpParties   SNMP Parties                 [RFC1353,KZM]
     21   snmpSecrets   SNMP Secrets                 [RFC1353,KZM]
     22   snmpDot3RptrMgt                                [RFC1516]
     23   rip-2         Routing Information Protocol     [RFC1389]
     24   ident         Identification Protocol          [RFC1414]
     25   host          Host Resources                   [RFC1514]
     26   snmpDot3MauMgt 802.3 Medium Attachment Units   [RFC1515]
     27   application   Network Services Monitoring      [RFC1565]
     28   mta           Mail Monitoring                  [RFC1566]
     29   dsa           X.500 Directory Monitoring       [RFC1567]

Reynolds & Postel                                             [Page 120]

RFC 1700                    Assigned Numbers                October 1994

     30   IANAifType    Interface Types                  [RFC1573]
     31   ifMIB         Interface Types                  [RFC1573]
     32   dns           Domain Name System               [RFC1611]
     33   upsMIB        Uninterruptible Power Supplies   [RFC1628]
     34   sannauMIB     SNA NAU MIB                      [RFC1665]
     35   etherMIB      Ethernet-like generic objects    [RFC1650]
     36   sipMIB        SMDS inteface objects            [RFC1694]
     37   atmMIB        ATM objects                      [RFC1695]
     38   mdmMIB        Dial-up modem objects            [RFC1696]
     39   rdbmsMIB      relational database objects      [RFC1697]

Prefix: iso.org.dod.internet.mgmt.mib-2.interface (1.3.6.1.2.1.2)

(1.3.6.1.2.1.2.2.1.3)

ifType definitions

Decimal   Name          Description
-------   ----          -----------
      1   other         none of the following            [RFC1213]
      2   regular1822   BBN Report 1822                  [RFC1213]
      3   hdh1822       BBN Report 1822                  [RFC1213]
      4   ddn-x25       BBN Report 1822                  [RFC1213]
      5   x25           X.25                             [RFC1382]
      6   ethernet-csmacd                                [RFC1213]
      7   IEEE802.3     CSMACD--like Objects          [RF1284,JXC]
      8   IEEE802.4     Token Bus-like Objects
--                                           [RFC1230,RFC1239,KZM]
      9   IEEE802.5     Token Ring-like Objects
--                                           [RFC1231,RFC1239,KZM]
     10   iso88026-man                                   [RFC1213]
     11   starLan                                        [RFC1213]
     12   proteon-10Mbit                                 [RFC1213]
     13   proteon-80Mbit                                 [RFC1213]
     14   hyperchannel                                   [RFC1213]
     15   FDDI          FDDI Objects               [RFC1285,JDC20]
     16   lapb          LAP B                            [RFC1381]
     17   sdlc                                           [RFC1213]
     18   ds1           T1/E1 Carrier Objects            [RFC1406]
     19   e1            obsolete
     20   basicISDN                                      [RFC1213]
     21   primaryISDN                                    [RFC1213]
     22   propPointToPointSerial                         [RFC1213]
     23   ppp           Point-to-Point Protocol          [RFC1471]
     24   softwareLoopback                               [RFC1213]
     25   eon                                            [RFC1213]
     26   ethernet-3Mbit                                 [RFC1213]
     27   nsip                                           [RFC1213]

Reynolds & Postel                                             [Page 121]

RFC 1700                    Assigned Numbers                October 1994

     28   slip                                           [RFC1213]
     29   ultra                                          [RFC1213]
     30   ds3           DS3/E3 Interface Objects         [RFC1407]
     31   sip           SMDS Interface Objects       [RFC1304,TXC]
     32   frame-relay   Frame Relay Objects          [RFC1315,CXB]
     33   RS-232        RS-232 Objects                   [RFC1659]
     34   Parallel      Parallel Printer Objects         [RFC1660]
     35   arcnet        ARC network
     36   arcnet-plus   ARC network plus
     37   atm           ATM
     38   MIOX25        MIOX25                           [RFC1461]
     39   SONET         SONET or SDH
     40   x25ple        X.25 packet level                [RFC1382]
     41   iso88022llc   802.2 LLC
     42   localTalk
     43   smds-dxi      SMDS DXI
     44   frameRelayService Frame Relay DCE
     45   v35           V.35
     46   hssi          HSSI
     47   hippi         HIPPI
     48   modem         generic modem
     49   aal5          AAL5 over ATM
     50   sonetPath
     51   sonetVT
     52   smds-icip     SMDS Inter-Carrier Interface Protocol
     53   propVirtual   proprietary vitural/internal interface
     54   propMultiLink proprietary multi-link multiplexing
     55   IEEE802.12    100BaseVG
     56   fibre-channel Fibre Channel

Prefix: iso.org.dod.internet.mgmt.mib-2.transmission (1.3.6.1.2.1.10)

Decimal   Name          Description
-------   ----          -----------
      5   x25           X.25                             [RFC1382]
      7   IEEE802.3     CSMACD--like Objects             [RFC1650]
      8   IEEE802.4     Token Bus-like Objects
--                                           [RFC1230,RFC1239,KZM]
      9   IEEE802.5     Token Ring-like Objects
--                                           [RFC1231,RFC1239,KZM]
     15   FDDI          FDDI Objects               [RFC1285,JDC20]
     16   lapb          LAP B                            [RFC1381]
     18   ds1           T1 Carrier Objects               [RFC1406]
     19   e1            E1 Carrier Objects               [RFC1406]
     23   ppp           Point-to-Point Protocol          [RFC1471]
     30   ds3           DS3/E3 Interface Objects         [RFC1407]
     31   sip           SMDS Interface Objects           [RFC1694]
     32   frame-relay   Frame Relay Objects          [RFC1315,CXB]

Reynolds & Postel                                             [Page 122]

RFC 1700                    Assigned Numbers                October 1994

     33   RS-232        RS-232 Objects                   [RFC1659]
     34   Parallel      Parallel Printer Objects         [RFC1660]
     35   arcnet        ARC network
     36   arcnet-plus   ARC network plus
     37   atm           ATM
     38   MIOX25        MIOX25                           [RFC1461]
     39   sonetMIB      SONET MIB                        [RFC1595]
     44   frnetservMIB  Frame Relay Service MIB for DCE  [RFC1596]

Prefix: iso.org.dod.internet.mgmt.mib-2.transmission (1.3.6.1.2.1.10)

(1.3.6.1.2.1.10.23)

Decimal   Name          Description                     References
-------   ----          -----------                     ----------
      1   pppLcp        ppp link control                [RFC1471]
      2   pppSecurity   ppp security                    [RFC1472]
      3   pppIp         ppp IP network control          [RFC1473]
      4   pppBridge     ppp bridge networl control      [RFC1474]

Prefix: iso.org.dod.internet.mgmt.mib-2.application (1.3.6.1.2.1.27)

(1.3.6.1.2.1.27.2.1.3)

   assocApplicationProtocol OBJECT-TYPE
       SYNTAX OBJECT IDENTIFIER
       MAX-ACCESS read-only
       STATUS current
       DESCRIPTION
         "An identification of the protocol being used for the
          application.  For an OSI Application, this will be the
          Application Context.  For Internet applications, the IANA
          maintains a registry of the OIDs which correspond to
          well-known applications.  If the application protocol is
          not listed in the registry, an OID value of the form
          {applTCPProtoID port} or {applUDProtoID port} are used for
          TCP-based and UDP-based protocols, respectively. In either
          case 'port' corresponds to the primary port number being
          used by the protocol."
       ::= {assocEntry 3}

Decimal   Name          Description
-------   ----          -----------
     0    Reserved

(1.3.6.1.2.1.27.3)

(1.3.6.1.2.1.27.4)

Reynolds & Postel                                             [Page 123]

RFC 1700                    Assigned Numbers                October 1994

   -- OIDs of the form {applTCPProtoID port} are intended to be used
   -- for TCP-based protocols that don't have OIDs assigned by other
   -- means. {applUDPProtoID port} serves the same purpose for
   -- UDP-based protocols. In either case 'port' corresponds to
   -- the primary port number being used by the protocol. For example,
   -- assuming no other OID is assigned for SMTP, an OID of
   -- {applTCPProtoID 25} could be used, since SMTP is a TCP-based
   -- protocol that uses port 25 as its primary port.

Prefix: iso.org.dod.internet.mgmt.mib-2.mta (1.3.6.1.2.1.28)

(1.3.6.1.2.1.28.2.1.24)

   mtaGroupMailProtocol OBJECT-TYPE
       SYNTAX OBJECT IDENTIFIER
       MAX-ACCESS read-only
       STATUS current
       DESCRIPTION
         "An identification of the protocol being used by this group.
         For an group employing OSI protocols, this will be the
         Application Context.  For Internet applications, the IANA
         maintains a registry of the OIDs which correspond to
         well-known message transfer protocols.  If the application
         protocol is not listed in the registry, an OID value of the
         form {applTCPProtoID port} or {applUDProtoID port} are used
         for TCP-based and UDP-based protocols, respectively.  In
         either case 'port' corresponds to the primary port number
         being used by the group.  applTCPProtoID and applUDPProtoID
         are defined in [5]."
       ::= {mtaGroupEntry 24}

Decimal   Name          Description
-------   ----          -----------
     0    Reserved

SMI Network Management Experimental Codes:

Prefix: iso.org.dod.internet.experimental (1.3.6.1.3.)

Decimal   Name          Description                     References
-------   ----          -----------                     ----------
      0   Reserved                                          [JKR1]
      1   CLNS          ISO CLNS Objects                     [GS2]
  *   2   T1-Carrier    T1 Carrier Objects                  [FB77]
  *   3   IEEE802.3     Ethernet-like Objects                [JXC]
  *   4   IEEE802.5     Token Ring-like Objects              [EXD]
  *   5   DECNet-PHIV   DECNet Phase IV                     [JXS2]
  *   6   Interface     Generic Interface Objects            [KZM]

Reynolds & Postel                                             [Page 124]

RFC 1700                    Assigned Numbers                October 1994

  *   7   IEEE802.4     Token Bus-like Objects               [KZM]
  *   8   FDDI          FDDI Objects                       [JDC20]
      9   LANMGR-1      LAN Manager V1 Objects              [JXG1]
     10   LANMGR-TRAPS  LAN Manager Trap Objects            [JXG1]
     11   Views         SNMP View Objects                    [CXD]
     12   SNMP-AUTH     SNMP Authentication Objects          [KZM]
  *  13   BGP           Border Gateway Protocol            [SW159]
  *  14   Bridge        Bridge MIB                          [FB77]
  *  15   DS3           DS3 Interface Type                   [TXB]
  *  16   SIP           SMDS Interface Protocol              [TXB]
  *  17   Appletalk     Appletalk Networking                 [SXW]
  *  18   PPP           PPP Objects                         [FJK2]
  *  19   Character MIB Character MIB                      [BS221]
  *  20   RS-232 MIB    RS-232 MIB                         [BS221]
  *  21   Parallel MIB  Parallel MIB                       [BS221]
     22   atsign-proxy  Proxy via Community                  [RXF]
  *  23   OSPF          OSPF MIB                            [FB77]
     24   Alert-Man     Alert-Man                            [LS8]
     25   FDDI-Synoptics FDDI-Synoptics                     [DXP1]
  *  26   Frame Relay   Frame Relay MIB                      [CXB]
  *  27   rmon          Remote Network Management MIB        [SXW]
     28   IDPR          IDPR MIB                           [RAW44]
     29   HUBMIB        IEEE 802.3 Hub MIB                  [DXM5]
     30   IPFWDTBLMIB   IP Forwarding Table MIB             [FB77]
     31   LATM MIB                                           [TXB]
     32   SONET MIB                                          [TXB]
     33   IDENT                                              [MTR]
     34   MIME-MHS                                           [MTR]
     35   MAUMIB        IEEE 802.3 Mau MIB                  [DXM5]
     36   Host Resources Host Resources MIB                  [SXW]
     37   ISIS-MIB      Integrated ISIS protocol MIB         [CXG]
     38   Chassis       Chassis MIB                        [JDC20]
     39   ups           ups                                [JDC20]
     40   App-Mon       Application Monitoring MIB           [TXK]
     41   ATM UNI       ATM                                 [MXA1]
     42   FC            Fibre Channel                       [JXC4]
*    43   DNS           Domain Name Service          [Rob Austein]
     44   X.25          X.25 MIB                     [Dean Throop]
     45   Frame Relay Serv.  Frame Relay Service MIB   [Tracy Cox]
     46   Madman-Applications                          [Ned Freed]
     47   Madman-MTA                                   [Ned Freed]
     48   Madman-DSA                                   [Ned Freed]
     49   Modem                                 [Steve Waldbusser]
     50   SNA NAU                                [Deirdre Kostick]
     51   SDLC          SDLC                       [Jeff Hilgeman]
     52   DNS           Domain Name Service          [Jon Saperia]
     53   network-objects IP info ix X.500             [Johannsen]
     54   printmib                               [Joel Gyllenskog]

Reynolds & Postel                                             [Page 125]

RFC 1700                    Assigned Numbers                October 1994

     55   rdbmsmib                                 [Robert Purvey]
     56   sipMIB                                     [Tracy Brown]
     57   stIImib       ST-II protocol MIB        [Hartmut Wittig]
     58   802.5 SSR MIB 802.5 Station Source Routing MIB     [KZM]

  * = obsoleted

SMI Private Codes:

Prefix: iso.org.dod.internet.private (1.3.6.1.4)

Decimal   Name          Description                     References
-------   ----          -----------                     ----------
      0   Reserved                                          [JKR1]
      1   enterprise    private enterprises                 [JKR1]

SMI Private Enterprise Codes:

Prefix: iso.org.dod.internet.private.enterprise (1.3.6.1.4.1)

See the file "enterprise-numbers".

SMI Security Codes:

Prefix: iso.org.dod.internet.security (1.3.6.1.5)

Decimal   Name          Description                     References
-------   ----          -----------                     ----------
      0   Reserved                                          [JKR1]
      1   kerberosV4    Kerberos version 4 objects         [1,BCN]
      2   kerberosV5    Kerberos version 5 objects         [2,BCN]

SMI SNMPv2 Codes:

Prefix: iso.org.dod.internet.snmpv2 (1.3.6.1.6)

SMI mail Codes:

Prefix: iso.org.dod.internet.mail (1.3.6.1.7)

   1     mime-mhs

REFERENCES

[1]       Miller, S.P., B.C. Neuman, J.I. Schiller, and J.H. Saltzer,
          "Project Athena Technical Plan Section E.2.1: Kerberos
          Authentication and Authorization System", Project Athena,

Reynolds & Postel                                             [Page 126]

RFC 1700                    Assigned Numbers                October 1994

          MIT, December 1987.

[2]       Kohl, J., and B.C. Neuman, "The Kerberos Network
          Authentication Service (V5)" work in progress, September
          1992.

[RFC1028] Davin, J., J. Case, M. Fedor, and M. Schoffstall, "A Simple
          Gateway Monitoring Protocol", RFC 1028, Proteon, Inc.,
          University of Tennessee at Knoxville, Cornell University,
          Rensselaer Polytechnic Institute, November 1987.

[RFC1095] Warrier, U., and L. Besaw, "The Common Management
          Information Services and Protocol over TCP/IP (CMOT)",
          RFC 1095, Unisys Corp., Hewlett-Packard, April 1989.

[RFC1155] Rose, M., and K. McCloghrie, "Structure and Identification
          of Management Information for TCP/IP-based internets",
          STD 16, RFC 1155, Performance Systems International, Hughes
          LAN Systems, May 1990.

[RFC1157] Case, J., M. Fedor, M. Schoffstall, and J. Davin,
          "A Simple Network Management Protocol", STD 15, RFC 1157,
          SNMP Research, Performance Systems International,
          Performance Systems International, MIT Laboratory for
          Computer Science, May 1990.

[RFC1213] McCloghrie, K., and M. Rose, "Management Information Base
          for Network Management of TCP/IP-based internets: MIB-II",
          STD 17, RFC 1213, Hughes LAN Systems, Performance Systems
          International, March 1991.

[RFC1229] McCloghrie, K., Editor, "Extensions to the Generic-Interface
          MIB", RFC 1229, Hughes LAN Systems, Inc., May 1991.

[RFC1230] McCloghrie, K., and R. Fox, "IEEE 802.4 Token Bus MIB",
          RFC 1230, Hughes LAN Systems, Inc., Synoptics, Inc.,
          May 1991.

[RFC1231] McCloghrie, K., Fox, R., and E. Decker, "IEEE 802.5 Token
          Ring MIB", RFC 1231, Hughes LAN Systems, Inc., Synoptics,
          Inc., cisco Systems, Inc., May 1991.

[RFC1239] Reynolds, J., "Reassignment of Experimental MIBs to
          Standard MIBs", RFC 1239, USC/Information Sciences
          Institute, ISI, June 1991.

[RFC1243] Waldbusser, S., Editor, "AppleTalk Management Information
          Base", RFC 1243, Carnegie Mellon University, July 1991.

Reynolds & Postel                                             [Page 127]

RFC 1700                    Assigned Numbers                October 1994

[RFC1253] Baker, F., and R. Coltun, "OSPF Version 2 Management
          Information Base", RFC 1253, ACC, Computer Science Center,
          August 1991.

[RFC1271] Waldbusser, S., "Remote Network Monitoring Management
          Information Base", RFC 1271, Carnegie Mellon University,
          November 1991.

[RFC1284] Cook, J., Editor, "Definitions of Managed Objects
          for the Ethernet-like Interface Types", RFC 1284, Chipcom
          Corporation, December 1991.

[RFC1285] Case, J., "FDDI Management Information Base", RFC 1285,
          SNMP Research, Incorporated, January 1992.

[RFC1286] Decker, E., Langille, P., Rijsinghani, A., and K.
          McCloghrie, "Definitions of Managed Objects for Bridges",
          RFC 1286, cisco Systems, Inc., DEC, Hughes LAN Systems,
          Inc., December 1991.

[RFC1304] Cox, T., and K. Tesnik, Editors, "Definitions of Managed
          Objects for the SIP Interface Type", RFC 1304, Bell
          Communications Research, February 1992.

[RFC1315] Brown, C., Baker, F., and C. Carvalho, "Management
          Information Base for Frame Relay DTEs", RFC 1315, Wellfleet
          Communications, Inc., Advanced Computer Communications,
          April 1992.

[RFC1353] McCloghrie, K., Davin, J., and J. Galvin, "Definitions of
          Managed Objects for Administration of SNMP Parties",
          RFC 1353, Hughes LAN Systems, Inc., MIT Laboratory for
          Computer Science, Trusted Information Systems, Inc.,
          July 1992.

[RFC1381] Throop, D., and F. Baker, "SNMP MIB Extension for X.25
          LAPB", RFC 1381, Data General Corporation, Advanced Computer
          Communications, November 1992.

[RFC1382] Throop, D., Editor, "SNMP MIB Extension for the X.25 Packet
          Layer", RFC 1382, Data General Corporation, November 1992.

[RFC1389] Malkin, G., and F. Baker, "RIP Version 2 MIB Extension", RFC
          1389, Xylogics, Inc., Advanced Computer Communications,
          January 1993.

[RFC1406] Baker, F., and J. Watt, Editors, "Definitions of Managed
          Objects for the DS1 and E1 Interface Types", RFC 1406,

Reynolds & Postel                                             [Page 128]

RFC 1700                    Assigned Numbers                October 1994

          Advanced Computer Communications, Newbridge Networks
          Corporation, January 1993.

[RFC1407] Cox, T., and K. Tesink, "Definitions of Managed Objects
          for the DS3/E3 Interface Type", RFC 1407, Bell
          Communications Research, January 1993.

[RFC1414] St. Johns, M., and M. Rose, "Identification MIB", RFC 1414,
          US Department of Defense, Dover Beach Consulting, Inc.,
          February 1993.

[RFC1461] Throop, D., "SNMP MIB extension for Multiprotocol
          Interconnect over X.25", RFC 1461, Data General Corporation,
          May 1993.

[RFC1471] Kastenholz, F., "The Definitions of Managed Objects for
          the Link Control Protocol of the Point-to-Point Protocol",
          RFC 1471, FTP Software, Inc., June 1993.

[RFC1472] Kastenholz, F., "The Definitions of Managed Objects for
          the Security Protocols of the Point-to-Point Protocol", RFC
          1472, FTP Software, Inc., June 1993.

[RFC1473] Kastenholz, F., "The Definitions of Managed Objects for
          the IP Network Control Protocol of the Point-to-Point
          Protocol", RFC 1473, FTP Software, Inc., June 1993.

[RFC1474] Kastenholz, F., "The Definitions of Managed Objects for
          the Bridge Network Control Protocol of the Point-to-Point
          Protocol" RFC 1474, FTP Software, Inc., June 1993.

[RFC1514] Grillo, P., and S. Waldbusser, "Host Resources MIB", RFC
          1514, Network Innovations, Intel Corporation, Carnegie
          Mellon University, September 1993.

[RFC1515] McMaster, D., McCloghrie, K., and S. Roberts, "Definitions
          of Managed Objects for IEEE 802.3 Medium Attachment Units
          (MAUs)", RFC 1515, SynOptics Communications, Inc., Hughes
          LAN Systems, Inc., Farallon Computing, Inc., September 1993.

[RFC1516] McMaster, D., and K. McCloghrie, "Definitions of Managed
          Objects for IEEE 802.3 Repeater Devices", RFC 1516,
          SynOptics Communications, Inc., Hughes LAN Systems, Inc.,
          September 1993.

[RFC1559] Saperia, J., "DECnet Phase IV MIB Extensions", RFC 1559,
          Digital Equipment Corporation, December 1993.

Reynolds & Postel                                             [Page 129]

RFC 1700                    Assigned Numbers                October 1994

[RFC1565] Kille, S., WG Chair, and N. Freed, Editor, "Network Services
          Monitoring MIB", RFC 1565, ISODE Consortium and Innosoft,
          January 1994.

[RFC1566] Kille, S., WG Chair, and N. Freed, Editor, "Mail Monitoring
          MIB", RFC 1566, ISODE Consortium, Innosoft, January 1994.

[RFC1567] Mansfield, G., and S. Kille, "X.500 Directory Monitoring
          MIB", RFC 1567, AIC Systems Laboratory, ISODE Consortium,
          January 1994.

[RFC1573] McCloghrie, K., and F. Kastenholz, "Evolution of the
          Interfaces Group of MIB-II", RFC 1573, Hughes LAN Systems,
          FTP Software, January 1994.

[RFC1595] Brown, T., and K. Tesink, Editors, "Definitions of Managed
          Objects for the SONET/SDH Interface Type", RFC 1595,
          Bell Communications Research, March 1994.

[RFC1596] Brown, T., Editor, Definitions of Managed Objects for Frame
          Relay Service", RFC 1596, Bell Communications Research,
          March 1994.

[RFC1611] Austein, R., and J. Saperia, "DNS Server MIB Extensions",
          RFC 1611, Epilogue Technology Corporation, Digital Equipment
          Corporation, May 1994.

[RFC1628] Case, J., Editor, "UPS Management Information Base", RFC
          1628, SNMP Research, Incorporated, May 1994.

[RFC1650] Kastenholz, F., "Definitions of Managed Objects for
          the Ethernet-like Interface Types using SMIv2", RFC 1650,
          FTP Software, Inc., August 1994.

[RFC1657] Willis, S., Burruss, J., and J. Chu, Editor, "Definitions of
          Managed Objects for the Fourth Version of the Border Gateway
          Protocol (BGP-4) using SMIv2", RFC 1657, Wellfleet
          Communications Inc., IBM Corp., July 1994.

[RFC1658] Stewart, B., "Definitions of Managed Objects for Character
          Stream Devices using SMIv2", RFC 1658, Xyplex, Inc., July
          1994.

[RFC1659] Stewart, B., "Definitions of Managed Objects for RS-232-like
          Hardware Devices using SMIv2", RFC 1659, Xyplex, Inc., July
          1994.

[RFC1660] Stewart, B., "Definitions of Managed Objects for

Reynolds & Postel                                             [Page 130]

RFC 1700                    Assigned Numbers                October 1994

          Parallel-printer-like Hardware Devices using SMIv2", RFC
          1660, Xyplex, Inc., July
          1994.

[RFC1665] Kielczewski, Z., Kostick, D., and K. Shih, Editors,
          "Definitions of Managed Objects for SNA NAUs using SMIv2",
          RFC 1665, Eicon Technology Corporation, Bell Communications
          Research, Novell, July 1994.

[RFC1694] Brown, T., and K. Tesink, Editors, "Definitions of Managed
          Objects for SMDS Interfaces using SMIv2", RFC 1694, Bell
          Communications Research, August 1994.

[RFC1695] Ahmed, M., and K. Tesink, Editors, "Definitions of Managed
          Objects for ATM Management Version 8.0 using SMIv2", RFC
          1695, Bell Communications Research, August 1994.

[RFC1696] Barnes, J., Brown, L., Royston, R., and S. Waldbusser,
          "Modem Management Information Base (MIB) using SMIv2", RFC
          1696, Xylogics, Inc., Motorola, US Robotics, Inc., Carnegie
          Mellon University, August 1994.

[RFC1697] Brower, D., Editor, Purvy, B., RDBMSMIB Working Group Chair,
          Daniel, A., Sinykin, M., and J. Smith, "Relational Database
          Management System (RDBMS) Management Information Base (MIB)
          using SMIv2", RFC 1697, The ASK Group, INGRES DBMS
          Development, Oracle Corporation, Informix Software, Inc.,
          Oracle Corporation, August 1994.

PEOPLE

[Rob Austein]

[BCN] B. Clifford Neuman <bcn@isi.edu>

[BS221] Bob Stewart <STEWART@XYPLEX.COM>

[CXB]  Caralyn Brown <cbrown%wellfleet.com@talcott.harvard.edu>

[CXD] Chuck Davin <jrd@ptt.lcs.mit.edu>

[CXG] Chris Gunner <gunner@dsmail.lkg.dec.com>

[Dean Throop]

[DXM5] Donna McMaster <mcmaster@synoptics.com>

[DXP1] David Perkins <dperkins@synoptics.com>

Reynolds & Postel                                             [Page 131]

RFC 1700                    Assigned Numbers                October 1994

[EXD] Eric Decker <cire@cisco.com>

[FB77] Fred Baker <fbaker@acc.com>

[FJK2]

[GS2] Greg Satz  <satz@CISCO.COM>

[IANA] IANA <iana@isi.edu>

[JDC20] Jeffrey Case <case@UTKUX1.UTK.EDU>

[JKR1] Joyce K. Reynolds <jkrey@isi.edu>

[JXC] John Cook <cook@chipcom.com>

[JXG1] Jim Greuel <jimg%hpcndpc@hplabs.hp.com>

[JXS2] Jon Saperia <saperia@tcpjon.enet.dec.com>

[Jeff Hilgeman]

[Johannsen]

[KZM] Keith McCloghrie <KZM@HLS.COM>

[LS8] Louis Steinberg <lou@ARAMIS.RUTGERS.EDU>

[MXA1] Masuma Ahmed <mxa@mail.bellcore.com>

[MTR] Marshall Rose <mrose@dbc.mtview.ca.us>

[RAW44] Robert A. Woodburn <WOODY@SPARTA.COM>

[JXC4] John Chu <jychu@watson.ibm.com>

[Ned Freed]

[Deirdre Kostick]

[Joel Gyllenskog] Joel Gyllenskog <jgyllens@hpdmd48.boi.hp.com>

[Robert Purvey] Robert Purvey <bpurvy@us.oracle.com>

[RXF] Richard Fox <rfox@synoptics.com>

[Jon Saperia] Jon Saperia <saperia@tcpjon.enet.dec.com>

Reynolds & Postel                                             [Page 132]

RFC 1700                    Assigned Numbers                October 1994

[SW159] Steven Willis <swillis@WELLFLEET.COM>

[SXW] Steve Waldbusser <sw01+@andrew.cmu.edu>

[TXB] Tracy Brown <tacox@mail.bellcore.com>

[TXK] Teemu Kurki <grus@funet.fi>

[Hartmut Wittig]

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/smi-numbers

Reynolds & Postel                                             [Page 133]

RFC 1700                    Assigned Numbers                October 1994

PRIVATE ENTERPRISE NUMBERS

SMI Network Management Private Enterprise Codes:

Prefix: iso.org.dod.internet.private.enterprise (1.3.6.1.4.1)

This file is

          ftp://ftp.isi.edu/in-notes/iana/assignments/enterprise-numbers

Decimal   Name                                                References
-------   ----                                                ----------
      0   Reserved                     Joyce K. Reynolds <jkrey@isi.edu>
      1   Proteon                     John A. Shriver  <jas@PROTEON.COM>
      2   IBM                      Vik Chandra  <vc@ralvm6.vnet.ibm.com>
      3   CMU                    Steve Waldbusser <sw01+@andrew.cmu.edu>
      4   Unix             Keith Sklower  <sklower@okeeffe.berkeley.edu>
      5   ACC                          Art Berggreen  <art@SALT.ACC.COM>
      6   TWG           John Lunny  <jlunny@eco.twg.com>  (703) 847-4500
      7   CAYMAN                          Beth Miaoulis  beth@cayman.com
      8   PSI                   Marty Schoffstahl  schoff@NISC.NYSER.NET
      9   cisco                                Greg Satz  satz@CISCO.COM
     10   NSC                               Geof Stone  geof@NETWORK.COM
     11   HP               R. Dwight Schettler  rds%hpcndm@HPLABS.HP.COM
     12   Epilogue                      Karl Auerbac  karl@empirical.com
     13   U of Tennessee              Jeffrey Case   case@UTKUX1.UTK.EDU
     14   BBN                         Robert Hinden <hinden@ENG.SUN.COM>
     15   Xylogics, Inc.      John R. LoVerso  loverso@westford.ccur.com
     16   Timeplex                      Laura Bridge  laura@uunet.UU.NET
     17   Canstar                   Sanand Patel  sanand@HUB.TORONTO.EDU
     18   Wellfleet                   Caralyn Brown cbrown@wellfleet.com
     19   TRW                 Jay Frederking  jayf@blackhole.ind.TRW.COM
     20   MIT                            Jon Rochlis  jon@ATHENA.MIT.EDU
     21   EON                                 Michael Waters  ---none---
     22   Spartacus                Yoav Kluger  ykluger@HAWK.ULOWELL.EDU
     23   Novell                        Steve Bostock  steveb@novell.com
     24   Spider Systems                  Peter Reid  peter@spider.co.uk
     25   NSFNET                    Hans-Werner Braun  HWB@MCR.UMICH.EDU
     26   Hughes LAN Systems               Keith McCloghrie  KZM@HLS.COM
     27   Intergraph                  Guy Streeter  guy@guy.bll.ingr.com
     28   Interlan                Bruce Taber  taber@europa.InterLan.COM
     29   Vitalink Communications
     30   Ulana                     Bill Anderson  wda@MITRE-BEDFORD.ORG
     31   NSWC            Stephen Northcutt  SNORTHC@RELAY-NSWC.NAVY.MIL
     32   Santa Cruz Operation            Keith Reynolds  keithr@SCO.COM
     33   Xyplex                          Bob Stewart STEWART@XYPLEX.COM
     34   Cray                     Hunaid Engineer  hunaid@OPUS.CRAY.COM
     35   Bell Northern Research            Glenn Waters  gwaters@BNR.CA

Reynolds & Postel                                             [Page 134]

RFC 1700                    Assigned Numbers                October 1994

     36   DEC                    Ron Bhanukitsiri  rbhank@DECVAX.DEC.COM
     37   Touch                                  Brad Benson  ---none---
     38   Network Research Corp.              Bill Versteeg  bvs@NCR.COM
     39   Baylor College of Medicine        Stan Barber  SOB@BCM.TMC.EDU
     40   NMFECC-LLNL           Steven Hunter  hunter@CCC.MFECC.LLNL.GOV
     41   SRI                      David Wolfe  ctabka@TSCA.ISTC.SRI.COM
     42   Sun Microsystems                     Dennis Yaro  yaro@SUN.COM
     43   3Com                           Jeremy Siegel  jzs@NSD.3Com.COM
     44   CMC                                   Dave Preston  ---none---
     45   SynOptics                David Perkins  dperkins@synoptics.com
     46   Cheyenne Software             Reijane Huai  sibal@CSD2.NYU.EDU
     47   Prime Computer   Mike Spina  WIZARD%enr.prime.com@RELAY.CS.NET
     48   MCNC/North Carolina   Data Network Ken Whitfield  ken@MCNC.ORG
     49   Chipcom                            John Cook  cook@chipcom.com
     50   Optical Data Systems                    Josh Fielk  ---none---
     51   gated                  Jeffrey C. Honig  jch@gated.cornell.edu
     52   Cabletron Systems                        Roger Dev  ---none---
     53   Apollo Computers            Jeffrey Buffun  jbuffum@APOLLO.COM
     54   DeskTalk Systems, Inc.               David Kaufman  ---none---
     55   SSDS                                   Ron Strich   ---none---
     56   Castle Rock Computing                  John Sancho  ---none---
     57   MIPS Computer Systems       Charles Marker II  marker@MIPS.COM
     58   TGV, Inc.                         Ken Adelman  Adelman@TGV.COM
     59   Silicon Graphics, Inc.               Ronald Jacoby  rj@SGI.COM
     60   University of British Columbia Don McWilliam mcwillm@CC.UBC.CA
     61   Merit                               Bill Norton  wbn@MERIT.EDU
     62   FiberCom                          Eric Rubin  err@FIBERCOM.COM
     63   Apple Computer Inc                  Jim Hayes  Hayes@APPLE.COM
     64   Gandalf                               Henry Kaijak  ---none---
     65   Dartmouth              Philip Koch   Philip.Koch@DARTMOUTH.EDU
     66   David Systems           Kathryn de Graaf  degraaf@davidsys.com
     67   Reuter                                 Bob Zaniolo  ---none---
     68   Cornell                  Laurie Collinsworth  ljc1@cornell.edu
     69   LMS                  L. Michael Sabo  Sabo@DOCKMASTER.NCSC.MIL
     70   Locus Computing Corp.  Arthur Salazar lcc.arthur@SEAS.UCLA.EDU
     71   NASA                   Steve Schoch   SCHOCH@AMES.ARC.NASA.GOV
     72   Retix                                  Alex Martin  ---none---
     73   Boeing                               Jerry Geisler  ---none---
     74   AT&T                            Rich Bantel  rgb@mtung.att.com
     75   Ungermann-Bass                      Didier Moretti  ---none---
     76   Digital Analysis Corporation
                               Skip Koppenhaver stubby!skip@uunet.UU.NET
     77   LAN Manager        Doug Karl KARL-D@OSU-20.IRCC.OHIO-STATE.EDU
     78   Netlabs                       Jonathan Biggar  jon@netlabs.com
     79   ICL                                    Jon Infante  ---none---
     80   Auspex Systems            Brian A. Ehrmantraut  bae@auspex.com
     81   Lannet Company                        Efrat Ramati  ---none---
     82   Network Computing Devices  Dave Mackie lupine!djm@UUNET.UU.NET

Reynolds & Postel                                             [Page 135]

RFC 1700                    Assigned Numbers                October 1994

     83   Raycom Systems                        Bruce Willins ---none---
     84   Pirelli Focom Ltd.                         Sam Lau  ---none---
     85   Datability Software Systems     Larry Fischer lfischer@dss.com
     86   Network Application Technology           Y.C. Wang  ---none---
     87   LINK (Lokales Informatik-Netz Karlsruhe)
                                Guenther Schreiner snmp-admin@ira.uka.de
     88   NYU                        Bill Russell  russell@cmcl2.NYU.EDU
     89   RND                                Rina Nethaniel   ---none---
     90   InterCon Systems Corporation Amanda Walker AMANDA@INTERCON.COM
     91   Coral Network Corporation      Jason Perreault jason@coral.com
     92   Webster Computer Corporation  Robert R. Elz  kre@munnari.oz.au
     93   Frontier Technologies Corporation
                                          Prakash Ambegaonkar ---none---
     94   Nokia Data Communications              Douglas Egan ---none---
     95   Allen-Bradely Company
                      Bill King abvax!calvin.icd.ab.com!wrk@uunet.UU.NET
     96   CERN
                 Jens T. Rasmussen jenst%cernvax.cern.ch@CUNYVM.CUNY.EDU
     97   Sigma Network Systems, Inc.
                                     Ken Virgile signet!ken@xylogics.COM
     98   Emerging Technologies, Inc.
                                Dennis E. Baasch etinc!dennis@uu.psi.com
     99   SNMP Research                Jeffrey Case  case@UTKUX1.UTK.EDU
    100 Ohio State University
                            Shamim Ahmed ahmed@nisca.ircc.ohio-state.edu
    101 Ultra Network Technologies Julie Dmytryk
                                        Julie_Dmytryk.MKT@usun.ultra.com
    102   Microcom                           Annmarie Freitas ---none---
    103   Martin Marietta Astronautic Group    David Rageth DAVE@MMC.COM
    104   Micro Technology                Mike Erlinger  mike@lexcel.com
    105   Process Software Corporation      Bernie Volz VOLZ@PROCESS.COM
    106   Data General Corporation
                                Joanna Karwowska karwowska@dg-rtp.dg.com
    107   Bull Company         Anthony Berent berent@rdgeng.enet.dec.com
    108   Emulex Corporation                     Jeff Freeman ---none---
    109   Warwick University Computing Services
                             Israel Drori raanan@techunix.technion.ac.il
    110   Network General Corporation
                                   James Davidson ngc!james@uunet.UU.NET
    111   Oracle                          John Hanley jhanley@oracle.com
    112   Control Data Corporation Nelluri L. Reddy reddy@uc.msc.umn.edu
    113   Hughes Aircraft Company           Keith McCloghrie KZM@HLS.COM
    114   Synernetics, Inc.                    Jas Parmar jas@synnet.com
    115   Mitre                               Bede McCall bede@mitre.org
    116   Hitachi, Ltd.                        Hirotaka Usuda ---none---
    117   Telebit                       Mark S. Lewis mlewis@telebit.com
    118   Salomon Technology Services          Paul Maurer II ---none---
    119   NEC Corporation                              Yoshiyuki Akiyama

Reynolds & Postel                                             [Page 136]

RFC 1700                    Assigned Numbers                October 1994

                           kddlab!ccs.mt.nec.co.jp!y-akiyam@uunet.uu.net
    120   Fibermux               Michael Sung msung@ccrelay.fibermux.com
    121   FTP Software Inc.                Stev Knowles stev@vax.ftp.com
    122   Sony                   Takashi Hagiwara Hagiwara@Sm.Sony.Co.Jp
    123   Newbridge Networks Corporation           James Watt ---none---
    124   Racal-Milgo Information Systems            Maurice R. Turcotte
                           mailrus!uflorida!rm1!dnmrt%rmatl@uunet.UU.NET
    125   CR SYSTEMS                        Soren H. Sorensen ---none---
    126   DSET Corporation               Dan Shia dset!shia@uunet.UU.NET
    127   Computone                            Bill Versteeg bvs@NCR.COM
    128   Tektronix, Inc.        Dennis Thomas dennist@tektronix.TEK.COM
    129   Interactive Systems Corporation
                                      Steve Alexander stevea@i88.isc.com
    130 Banyan Systems Inc.
                  Deepak Taneja eepak=Taneja%Eng%Banyan@Thing.banyan.com
    131   Sintrom Datanet Limited
    132   Bell Canada              Mark Fabbi markf@gpu.utcs.utoronto.ca
    133   Crosscomm Corporation  Reuben Sivan crossc!rsivan@uunet.UU.NET
    134   Rice University             Catherine Foulston cathyf@rice.edu
    135   T3Plus Networking, Inc.     Harley Frazee harley@io.t3plus.com
    136   Concurrent Computer Corporation
                               John R. LoVerso loverso@westford.ccur.com
    137   Basser                       Paul O'Donnell paulod@cs.su.oz.au
    138   Luxcom
    139   Artel                            Jon Ziegler Ziegler@Artel.com
    140   Independence Technologies, Inc. (ITI)
                                      Gerard Berthet gerard@indetech.com
    141   Frontier Software Development        Narendra Popat ---none---
    142   Digital Computer Limited               Osamu Fujiki ---none---
    143   Eyring, Inc.                           Ron Holt ron@Eyring.COM
    144   Case Communications                     Peter Kumik ---none---
    145   Penril DataComm, Inc.    Keith Hogan keith%penril@uunet.uu.net
    146   American Airlines                     Bill Keatley  ---none---
    147   Sequent Computer Systems           Scott Hahn  sdh@sequent.com
    148   Bellcore                 Kaj Tesink  kaj@nvuxr.cc.bellcore.com
    149   Konkord Communications      Ken Jones konkord!ksj@uunet.uu.net
    150   University of Washington
                         Christopher Wheeler cwheeler@cac.washignton.edu
    151   Develcon            Sheri Mayhew zaphod!sherim@herald.usask.ca
    152   Solarix Systems             Paul Afshar paul@solar1.portal.com
    153   Unifi Communications Corp.      Yigal Hochberg yigal@unifi.com
    154   Roadnet                                Dale Shelton ---none---
    155   Network Systems Corp.
                              Nadya K. El-Afandi nadya@khara.network.com
    156   ENE (European Network Engineering)        Peter Cox ---none---
    157   Dansk Data Elektronik A/S           Per Bech Hansen pbh@dde.dk
    158   Morning Star Technologies        Karl Fox karl@MorningStar.Com
    159   Dupont EOP                          Oscar Rodriguez ---none---

Reynolds & Postel                                             [Page 137]

RFC 1700                    Assigned Numbers                October 1994

    160   Legato Systems, Inc.             Jon Kepecs  kepecs@Legato.COM
    161   Motorola SPS               Vince Enriquez enriquez@sps.mot.com
    162   European Space Agency (ESA)
                              Eduardo EDUATO%ESOC.BITNET@CUNYVM.CUNY.EDU
    163   BIM                             Bernard Lemercier bl@sunbim.be
    164   Rad Data Communications Ltd.             Oft Israel ---none---
    165   Intellicom                               Paul Singh ---none---
    166   Shiva Corporation                    Phil Budne phil@Shiva.COM
    167   Fujikura America                        Debbie Reed ---none---
    168   Xlnt Designs INC (XDI)               Mike Anello mike@xlnt.com
    169   Tandem Computers                          Rex Davis ---none---
    170   BICC                          David A. Brown fzbicdb@uk.ac.ucl
    171   D-Link Systems, Inc.                Henry P. Nagai  ---none---
    172   AMP, Inc.                                Rick Downs ---none---
    173   Netlink                              Mauro Zallocco ---none---
    174   C. Itoh Electronics                     Larry Davis ---none---
    175   Sumitomo Electric Industries (SEI)
                                           Kent Tsuno tsuno@sumitomo.com
    176   DHL Systems, Inc.
                      David B. Gurevich dgurevic@rhubarb.ssf-sys.dhl.com
    177   Network Equipment Technologies    Mark Tom marktom@tom.net.com
    178   APTEC Computer Systems   Larry Burton ssds!larryb@uunet.UU.NET
    179   Schneider & Koch & Co, Datensysteme GmbH Thomas Ruf tom@rsp.de
    180   Hill Air Force Base   Russell G. Wilson rwilson@oodis01.af.mil
    181   ADC Kentrox               Bruce Kropp ktxc8!bruce@uunet.UU.NET
    182   Japan Radio Co.   Nagayuki Kojima nkojima@lab.nihonmusen.co.jp
    183   Versitron                               Matt Harris ---none---
    184   Telecommunication Systems             Hugh Lockhart ---none---
    185   Interphase                            Gil Widdowson ---none---
    186   Toshiba Corporation    Mike Asagami toshiba@mothra.nts.uci.edu
    187   Clearpoint Research Corp.
    188   Ascom                      Andrew Smith andrew@hasler.ascom.ch
    189   Fujitsu America                           Chung Lam ---none---
    190   NetCom Solutions, Inc.                   Dale Cabell---none---
    191   NCR             Cheryl Krupczak clefor@secola.columbia.ncr.com
    192   Dr. Materna GmbH                   Torsten Beyer tb@Materna.de
    193   Ericsson Business Communications     Gunnar Nilsson ---none---
    194   Metaphor Computer Systems              Paul Rodwick ---none---
    195   Patriot Partners                       Paul Rodwick ---none---
    196   The Software Group Limited (TSG)
                              Ragnar Paulson tsgfred!ragnar@uunet.UU.NET
    197   Kalpana, Inc.                         Anil Bhavnani ---none---
    198   University of Waterloo
                              R. J. White snmp-tech@watmath.waterloo.edu
    199   CCL/ITRI
                Ming-Perng Chen N100CMP0%TWNITRI1.BITNET@CUNYVM.CUNY.EDU
    200   Coeur Postel            Professor Kynikos   Special Consultant
    201   Mitsubish Cable Industries, Ltd.      Masahiko Hori ---none---

Reynolds & Postel                                             [Page 138]

RFC 1700                    Assigned Numbers                October 1994

    202   SMC                                   Lance Sprung  ---none---
    203   Crescendo Communication, Inc.         Prem Jain  prem@cres.com
    204   Goodall Software Engineering    Doug Goodall   goodall@crl.com
    205   Intecom                                 Brad Parke  ---none---
    206   Victoria University of Wellington
                                  Jonathan Stone jonathan@isor.vuw.ac.nz
    207   Allied Telesis, Inc.
                        Scott Holley SCOTT_CLINTON_HOLLEY@cup.portal.com
    208   Dowty Network Systems A/S         Hartvig Ekner  hj@dowtyns.dk
    209   Protools                                   Glen Arp ---none---
    210   Nippon Telegraph and Telephone Corp.
                    Toshiharu Sugawara sugawara%wink.ntt.jp@RELAY.CS.NET
    211   Fujitsu Limited  Ippei Hayashi hayashi@sysrap.cs.fujitsu.co.jp
    212   Network Peripherals Inc.    Creighton Chong cchong@fastnet.com
    213   Netronix, Inc.                         Jacques Roth ---none---
    214   University of Wisconsin - Madison
                      Dave Windorski DAVID.WINDORSKI@MAIL.ADMIN.WISC.EDU
    215   NetWorth, Inc.                         Craig Scott  ---none---
    216   Tandberg Data A/S          Harald Hoeg haho%huldra.uucp@nac.no
    217   Technically Elite Concepts, Inc.
                              Russell S. Dietz Russell_Dietz@Mcimail.com
    218   Labtam Australia Pty. Ltd.
                               Michael Podhorodecki michael@labtam.oz.au
    219   Republic Telcom Systems, Inc.
                           Steve Harris rtsc!harris@boulder.Colorado.edu
    220   ADI Systems, Inc.                          Paul Liu ---none---
    221   Microwave Bypass Systems, Inc.           Tad Artis  ---none---
    222   Pyramid Technology Corp.         Richard Rein rein@pyramid.com
    223   Unisys_Corp                           Lawrence Brow ---none---
    224   LANOPTICS LTD., Israel
                             Israel Drori raanan@techunix.technion.ac.il
    225   NKK Corporation                         J. Yoshida  ---none---
    226   MTrade UK Ltd.                     Peter Delchiappo ---none---
    227   Acals                    Patrick Cheng pcheng@dill.ind.trw.com
    228   ASTEC, Inc.                    Hiroshi Fujii fujii@astec.co.jp
    229   Delmarva Power       John K. Scoggin, Jr. scoggin@delmarva.com
    230   Telematics International, Inc.          Kevin Smith ---none---
    231   Siemens Nixdorf Informations Syteme AG
                                             Gunther Kroenert ---none---
    232   Compaq
    233   NetManage, Inc.          William Dunn netmanage@cup.portal.com
    234   NCSU Computing Center        David Joyner david@unity.ncsu.edu
    235   Empirical Tools and Technologies
                                        Karl Auerbach karl@empirical.com
    236   Samsung Group                    Hong K. Paik paik@samsung.com
    237   Takaoka Electric Mfg. Co., Ltd.
               Hidekazu Hagiwara hagiwara@takaoka.takaoka-electric.co.jp
    238   Netrix Systems Corporation        Eldon S. Mast esm@netrix.com

Reynolds & Postel                                             [Page 139]

RFC 1700                    Assigned Numbers                October 1994

    239   WINDATA                               Bob Rosenbaum ---none---
    240   RC International A/S                 Carl H. Dreyer chd@rci.dk
    241   Netexp Research                       Henk Boetzkes ---none---
    242   Internode Systems Pty Ltd
                                 Simon Hackett simon@ucs.adelaide.edu.au
    243   netCS Informationstechnik GmbH
                                  Oliver Korfmacher okorf@bunt.netcs.com
    244   Lantronix                  Rich Lyman  rich@alecto.gordian.com
    245   Avatar Consultants
                    Kory Hamzeh ames!avatar.com!kory@harvard.harvard.edu
    246   Furukawa Electoric Co. Ltd.
             Shoji Fukutomi kddlab!polo.furukawa.co.jp!fuku@uunet.UU.NET
    247   AEG Electrcom                           R. Nurnberg ---none---
    248   Richard Hirschmann GmbH & Co.
                              Heinz Nisi mia@intsun.rus.uni-stuttgart.de
    249   G2R Inc.                             Khalid Hireche ---none---
    250   University of Michigan
                             Tim Howes Tim.Howes@terminator.cc.umich.edu
    251   Netcomm, Ltd.                    W.R. Maynard-Smith ---none---
    252   Sable Technology Corporation         Rodney Thayer  ---none---
    253   Xerox              Edwards E. Reed ipcontact.cin_ops@xerox.com
    254   Conware Computer Consulting GmbH
                                        Michael Sapich sapich@conware.de
    255   Compatible Systems Corp.        John Gawf  gawf@compatible.com
    256   Scitec Communications Systems Ltd.    Stephen Lewis ---none---
    257   Transarc Corporation        Pat Barron Pat_Barron@TRANSARC.COM
    258   Matsushita Electric Industrial Co., Ltd.
                                         Nob Mizuno mizuno@isl.mei.co.jp
    259   ACCTON Technology                        Don Rooney ---none---
    260   Star-Tek, Inc.                   Carl Madison carl@startek.com
    261   Codenoll Tech. Corp.                     Dan Willie ---none---
    262   Formation, Inc.                       Carl Marcinik ---none---
    263   Seiko Instruments, Inc. (SII)    Yasuyoshi Watanabe ---none---
    264   RCE (Reseaux de Communication d'Entreprise S.A.)
                                   Etienne Baudras-Chardigny  ---none---
    265   Xenocom, Inc.               Sean Welch welch@raven.ulowell.edu
    266   KABELRHEYDT                         Hubert Theissen ---none---
    267   Systech Computer Corporation
                                 Brian Petry systech!bpetry@uunet.UU.NET
    268   Visual                             Brian O'Shea bos@visual.com
    269   SDD (Scandinavian Airlines Data Denmark A/S)
                                                  Per Futtrup ---none---
    270   Zenith Electronics Corporation            David Lin ---none---
    271   TELECOM FINLAND                        Petri Jokela ---none---
    272   BinTec Computersystems               Marc Sheldon ms@BinTec.DE
    273   EUnet Germany                   Marc Sheldon ms@Germany.EU.net
    274   PictureTel Corporation              Oliver Jones oj@pictel.com
    275   Michigan State University             Lih-Er Wey WEYLE@msu.edu

Reynolds & Postel                                             [Page 140]

RFC 1700                    Assigned Numbers                October 1994

    276   GTE Telecom Incorporated              Grant Gifford ---none---
    277   Cascade Communications Corp.
                                      Chikong Shue alpo!chi@uunet.uu.net
    278   Hitachi Cable, Ltd.                   Takahiro Asai ---none---
    279   Olivetti                 Marco Framba  framba@orc.olivetti.com
    280   Vitacom Corporation         Parag Rastogi parag@cup.portal.com
    281   INMOS                         Graham Hudspith  gwh@inmos.co.uk
    282   AIC Systems Laboratories Ltd.  Glenn Mansfield glenn@aic.co.jp
    283   Cameo Communications, Inc.               Alan Brind ---none---
    284   Diab Data AB                        Mats Lindstrom mli@diab.se
    285   Olicom A/S                         Lars Povlsen krus@olicom.dk
    286   Digital-Kienzle Computersystems    Hans Jurgen Dorr ---none---
    287   CSELT(Centro Studi E Laboratori Telecomunicazioni)
                                  Paolo Coppo coppo@cz8700.cselt.stet.it
    288   Electronic Data Systems     Mark Holobach holobach@tis.eds.com
    289   McData Corporation      Glenn Levitt gpl0363@mcmail.mcdata.com
    290   Harris Corporation       David Rhein davidr@ssd.csd.harris.com
    291   Technology Dynamics, Inc. Chip Standifer TDYNAMICS@MCIMAIL.COM
    292   DATAHOUSE Information Systems Ltd.           Kim Le ---none---
    293   DSIR Network Group  Tony van der Peet srghtvp@grv.dsir.govt.nz
    294   Texas Instruments      Blair Sanders Blair_Sanders@mcimail.com
    295   PlainTree Systems Inc.     Paul Chefurka chefurka@plntree.UUCP
    296   Hedemann Software Development
                              Stefan Hedemann 100015.2504@compuserve.com
    297   Fuji Xerox Co., Ltd.                              Hiroshi Kume
                     Kume%KSPB%Fuji_Xerox@tcpgw.netg.ksp.fujixerox.co.jp
    298   Asante Technology                    Hsiang Ming Ma ---none---
    299   Stanford University
                             RL "Bob" Morgan morgan@jessica.stanford.edu
    300   Digital Link                            Jimmy Tu  jimmy@dl.com
    301   Raylan Corporation            Mark S. Lewis mlewis@telebit.com
    302   Datacraft                         Alan Lloyd alan@datacraft.oz
    303   Hughes                            Keith McCloghrie KZM@HLS.COM
    304   Farallon Computing, Inc.             Steven Sweeney ---none---
    305   GE Information Services              Steve Bush sfb@ncoast.org
    306   Gambit Computer Communications         Zohar Seigal ---none---
    307   Livingston Enterprises, Inc.
                                      Steve Willens steve@livingston.com
    308   Star Technologies                     Jim Miner miner@star.com
    309   Micronics Computers Inc.         Darren Croke dc@micronics.com
    310   Basis, Inc.                    Heidi Stettner heidi@mtxinu.COM
    311   Microsoft               John M. Ballard jballard@microsoft.com
    312   US West Advance Technologies
                                  Donna Hopkins dmhopki@uswat.uswest.com
    313   University College London Shaw C. Chuang S.Chuang@cs.ucl.ac.uk
    314   Eastman Kodak Company   W. James Colosky wjc@tornado.kodak.com
    315   Network Resources Corporation       Kathy Weninger  ---none---
    316   Atlas Telecom             Bruce Kropp ktxc8!bruce@uunet.UU.NET

Reynolds & Postel                                             [Page 141]

RFC 1700                    Assigned Numbers                October 1994

    317   Bridgeway                          Umberto Vizcaino ---none---
    318   American Power Conversion Corp.
                                   Peter C. Yoest apc!yoest@uunet.uu.net
    319   DOE Atmospheric Radiation Measurement Project
                                     Paul Krystosek krystosk@eid.anl.gov
    320   VerSteeg CodeWorks                   Bill Versteeg bvs@NCR.COM
    321   Verilink Corp                        Bill Versteeg bvs@NCR.COM
    322   Sybus Corportation        Mark T. Dauscher mdauscher@sybus.com
    323   Tekelec                                  Bob Grady  ---none---
    324   NASA Ames Research Cente       Nick Cuccia cuccia@nas.nasa.gov
    325   Simon Fraser University           Robert Urquhart quipu@sfu.ca
    326   Fore Systems, Inc.                    Eric Cooper ecc@fore.com
    327   Centrum Communications, Inc.             Vince Liu  ---none---
    328   NeXT Computer, Inc.
                            Lennart Lovstrand Lennart_Lovstrand@NeXT.COM
    329   Netcore, Inc.                           Skip Morton ---none---
    330   Northwest Digital Systems             Brian Dockter ---none---
    331   Andrew Corporation                         Ted Tran ---none---
    332   DigiBoard                        Dror Kessler  dror@digibd.com
    333   Computer Network Technology Corp.   Bob Meierhofer  ---none---
    334   Lotus Development Corp.      Bill Flanagan bflanagan@lotus.com
    335   MICOM Communication Corporation
                                      Donna Beatty SYSAD@prime.micom.com
    336   ASCII Corporation            Toshiharu Ohno tony-o@ascii.co.jp
    337   PUREDATA Research                Tony Baxter tony@puredata.com
    338   NTT DATA               Yasuhiro Kohata    kohata@rd.nttdata.jp
    339   Empros Systems International   David Taylor dtaylor@ems.cdc.ca
    340   Kendall Square Research (KSR)     Dave Hudson tdh@uunet.UU.NET
    341   Martin Marietta Energy Systems     Gary Haney  haneyg@ornl.gov
    342   Network Innovations            Pete Grillo pl0143@mail.psi.net
    343   Intel Corporation          Brady Orand borand@pcocd2.intel.com
    344   Proxar                           Ching-Fa Hwang cfh@proxar.com
    345   Epson Research Center    Richard Schneider  rschneid@epson.com
    346   Fibernet                            George Sandoval ---none---
    347   Box Hill Systems Corporation        Tim Jones  tim@boxhill.com
    348   American Express Travel Related Services
                                        Jeff Carton jcarton@amex-trs.com
    349   Compu-Shack  Tomas Vocetka OPLER%CSEARN.bitnet@CUNYVM.CUNY.EDU
    350   Parallan Computer, Inc.               Charles Dulin ---none---
    351   Stratacom                         Clyde Iwamoto cki@strata.com
    352   Open Networks Engineering, Inc.      Russ Blaesing rrb@one.com
    353   ATM Forum                         Keith McCloghrie KZM@HLS.COM
    354   SSD Management, Inc.                      Bill Rose ---none---
    355   Automated Network Management, Inc.   Carl Vanderbeek ---none--
    356   Magnalink Communications Corporation
                                            David E. Kaufman  ---none---
    357   TIL Systems, Ltd.                   Garry McCracken ---none---
    358   Skyline Technology, Inc.                   Don Weir ---none---

Reynolds & Postel                                             [Page 142]

RFC 1700                    Assigned Numbers                October 1994

    359   Nu-Mega Technologies, Inc.              Dirk Smith  ---none---
    360   Morgan Stanley & Co. Inc.
                                 Victor Kazdoba vsk@katana.is.morgan.com
    361   Integrated Business Network            Michael Bell ---none---
    362   L & N Technologies, Ltd.               Steve Loring ---none---
    363   Cincinnati Bell Information Systems, Inc.
                                         Deron Meranda dmeranda@cbis.COM
    364   OSCOM International
                             Farhad Fozdar f_fozdar@fennel.cc.uwa.edu.au
    365   MICROGNOSIS                Paul Andon pandon@micrognosis.co.uk
    366   Datapoint Corporation     Lee Ziegenhals lcz@sat.datapoint.com
    367   RICOH Co. Ltd.
                  Toshio Watanabe watanabe@godzilla.rsc.spdd.ricoh.co.jp
    368   Axis Communications AB              Martin Gren martin@axis.se
    369   Pacer Software               Wayne Tackabury wft@pacersoft.com
    370   Axon Networks Inc.            Robin Iddon axon@cix.clink.co.uk
    371   Brixton Systems, Inc.       Peter S. Easton easton@brixton.com
    372   GSI                   Etienne Demailly etienne.demailly@gsi.fr
    373   Tatung Co., Ltd.
                  Chih-Yi Chen TCCISM1%TWNTTIT.BITNET@pucc.Princeton.EDU
    374   DIS Research LTD.                 Ray Compton rayc@command.com
    375   Quotron Systems, Inc.
                               Richard P. Stubbs richard@atd.quotron.com
    376   Dassault Electronique
                               Olivier J. Caleff caleff@dassault-elec.fr
    377   Corollary, Inc.               James L. Gula gula@corollary.com
    378   SEEL, Ltd.                              Ken Ritchie ---none---
    379   Lexcel                           Mike Erlinger mike@lexcel.com
    380   Sophisticated Technologies, Inc.
                                 Bill Parducci 70262.1267@compuserve.com
    381   OST                                         A. Pele ---none---
    382   Megadata Pty Ltd.      Andrew McRae andrew@megadata.mega.oz.au
    383   LLNL Livermore Computer Center
                                Dan Nessett nessett@ocfmail.ocf.llnl.gov
    384   Dynatech Communications  Graham Welling s8000!gcw@uunet.uu.net
    385   Symplex Communications Corp.             Cyrus Azar ---none---
    386   Tribe Computer Works               Ken Fujimoto fuji@tribe.com
    387   Taligent, Inc.            Lorenzo Aguilar lorenzo@taligent.com
    388   Symbol Technologies, Inc.
                      John Kramer +1-408-369-2679 jkramer@psd.symbol.com
    389   Lancert                                 Mark Hankin ---none---
    390   Alantec                          Paul V. Fries pvf@alantec.com
    391   Ridgeback Solutions
                           Errol Ginsberg bacchus!zulu!errol@uu2.psi.com
    392   Metrix, Inc.                 D. Venkatrangan venkat@metrix.com
    393   Excutive Systems/XTree Company
                                       Dale Cabell cabell@smtp.xtree.com
    394   NRL Communication Systems Branch

Reynolds & Postel                                             [Page 143]

RFC 1700                    Assigned Numbers                October 1994

                                        R. K. Nair nair@itd.nrl.navy.mil
    395   I.D.E. Corporation                        Rob Spade ---none---
    396   Matsushita Electric Works, Ltd.
                                    Claude Huss claude@trc.mew.mei.co.jp
    397   MegaPAC                                  Ian George ---none---
    398   Pilkington Communication Systems      Dave Atkinson ---none---
    399   Hitachi Computer Products (America), Inc.
                                    Masha Golosovker masha@hicomb.hi.com
    400   METEO FRANCE                 Remy Giraud  Remy.Giraud@meteo.fr
    401   PRC Inc.                          Jim Noble  noble_jim@prc.com
    402   Wal*Mart Stores, Inc.     Mike Fitzgerel  mlfitzg@wal-mart.com
    403   Nissin Electric Company, Ltd.   Aki Komatsuzaki (408) 737-0274
    404   Distributed Support Information Standard
                                            Mike Migliano <mike@uwm.edu>
    405   SMDS Interest Group (SIG)
                                Elysia C. Tan <ecmt1@sword.bellcore.com>
    406   SolCom Systems Ltd.                    Hugh Evans  0506 873855
    407   Bell Atlantic  Colin deSa socrates!bm5ld15@bagout.BELL-ATL.COM
    408   Advanced Multiuser Technologies Corporation
    409   Mitsubishi Electric Corporation
                            Yoshitaka Ogawa <ogawa@nkai.cow.melco.co.jp>
    410   C.O.L. Systems, Inc.         Frank Castellucci  (914) 277-4312
    411   University of Auckland
                               Nevil Brownlee < n.brownlee@aukuni.ac.nz>
    412   Desktop Management Task Force (DMTF)
                                   Dave Perkins <dperkins@synoptics.com>
    413   Klever Computers, Inc.  Tom Su  408-735-7723    kci@netcom.com
    414   Amdahl Corporation              Steve Young  sy@uts.admahl.com
    415   JTEC Pty, Ltd.                       Jan Bartel  (02) 809 6933
    416   Matra Communcation         Hong-Loc Nguyen  (33.1) 34.60.85.25
    417   HAL Computer Systems       Michael A. Petonic  petonic@hal.com
    418   Lawrence Berkeley Laboratory       Russ Wright  wright@lbl.gov
    419   Dale Computer Corporation          Dean Craven  1-800-336-7483
    420 IPTC, Universitaet of Tuebingen
                   Andreas J. Haug <ahaug@mailserv.zdv.uni-tuebingen.de>
    421   Bytex Corporation
                        Mary Ann Burt <bytex!ws054!maryann@uunet.UU.NET>
    422   Cogwheel, Inc.                   Brian Ellis  bri@Cogwheel.COM
    423   Lanwan Technologies                 Thomas Liu  (408) 986-8899
    424   Thomas-Conrad Corporation             Karen Boyd  512-836-1935
    425   TxPort                              Bill VerSteeg  bvs@ver.com
    426   Compex, Inc.             Andrew Corlett  BDA@ORION.OAC.UCI.EDU
    427   Evergreen Systems, Inc.             Bill Grace  (415) 897-8888
    428   HNV, Inc.                 James R. Simons  jrs@denver.ssds.COM
    429   U.S. Robotics, Inc.               Chris Rozman  chrisr@usr.com
    430   Canada Post Corporation          Walter Brown  +1 613 722-8843
    431   Open Systems Solutions, Inc.         David Ko  davidk@ossi.com
    432   Toronto Stock Exchange               Paul Kwan  (416) 947-4284

Reynolds & Postel                                             [Page 144]

RFC 1700                    Assigned Numbers                October 1994

    433   MamakosTransSys Consulting
                                   Louis A. Mamakos   louie@transsys.com
    434   EICON                      Vartan Narikian  vartan@eicon.qc.ca
    435   Jupiter Systems                Russell Leefer  rml@jupiter.com
    436   SSTI                             Philip Calas (33) 61 44 19 51
    437   Grand Junction Networks  Randy Ryals  randyr@grandjunction.com
    438   Anasazi, Inc.                   Chad Larson (chad@anasazi.com)
    439   Edward D. Jones and Company        John Caruso  (314) 851-3422
    440   Amnet, Inc.                          Richard Mak mak@amnet.COM
    441   Chase Research                           Kevin Gage ---none---
    442   PEER Networks                    Randy Presuhn  randy@peer.com
    443   Gateway Communications, Inc.            Ed Fudurich ---none---
    444   Peregrine Systems              Eric Olinger eric@peregrine.com
    445   Daewoo Telecom               SeeYoung Oh oco@scorpio.dwt.co.kr
    446   Norwegian Telecom Research        Paul Hoff paalh@brage.nta.no
    447   WilTel  Anil Prasad                     anil_prasad@wiltel.com
    448   Ericsson-Camtec                        Satish Popat ---none---
    449   Codex                                Thomas McGinty ---none---
    450   Basis                          Heidi Stettner heidi@mtxinu.COM
    451   AGE Logic                                Syd Logan syd@age.com
    452   INDE Electronics                   Gordon Day gday@inde.ubc.ca
    453   ISODE Consortium                 Steve Kille S.Kille@isode.com
    454   J.I. Case                     Mike Oswald mike@helios.uwsp.edu
    455   Trillium                 Jeff Lawrence j_lawrence@trillium.com
    456   Bacchus Inc.     Errol Ginsberg bacchus!zulu!errol@uu2.psi.com
    457   MCC                           Doug Rosenthal rosenthal@mcc.com
    458   Stratus Computer                 Dave Snay  dks@sw.stratus.com
    459   Quotron              Richard P. Stubbs richard@atd.quotron.com
    460   Beame & Whiteside                  Carl Beame beame@ns.bws.com
    461   Cellular Technical Services             Greg Hummel ---none---
    462   Shore Microsystems, Inc.           Gordon Elam  (309) 229-3009
    463   Telecommunications Techniques Corp.  Tom Nisbet  nisbet@tt.com
    464   DNPAP (Technical University Delft)
                   Jan van Oorschot <bJan.vOorschot@dnpap.et.tudelft.nl>
    465   Plexcom, Inc.                     Bruce Miller  (805) 522-3333
    466   Tylink                         Stavros Mohlulis (508) 285-0033
    467   Brookhaven National Laboratory
                                        Dave Stampf drs@bach.ccd.bnl.gov
    468   Computer Communication Systems
                            Gerard Laborde <Gerard.Laborde@sp1.y-net.fr>
    469   Norand Corp.                         Rose Gorrell 319-269-3100
    470   MUX-LAP                        Philippe Labrosse  514-735-2741
    471   Premisys Communications, Inc
                        Mike MacFaden <premisys!mike@fernwood.mpk.ca.us>
    472   Bell South Telecommunications       Johnny Walker 205-988-7105
    473   J. Stainsbury PLC                 Steve Parker  44-71-921-7550
    474   Ki Research Inc                Toni Barckley  410-290-0355x220
    475 Wandel and Goltermann Technologies

Reynolds & Postel                                             [Page 145]

RFC 1700                    Assigned Numbers                October 1994

                         David Walters 919-941-5730x4203 <walter@wg.com>
    476   Emerson Computer Power
                            Roger Draper  714-457-3638  rdraper@cerf.net
    477   Network Software Associates        Jeffery Chiao  714-768-4013
    478   Procter and Gamble           Peter Marshall  513-983-1100x5988
    479 Meridian Technology Corporation
                        Kenneth B. Denson <kdenson@magic.meridiantc.com>
    480   QMS, Inc.                           Bill Lott  lott@imagen.com
    481   Network Express        Tom Jarema  313-761-5051  ITOH@MSEN.COM
    482   LANcity Corporation               Pam Yassini  pam@lancity.com
    483   Dayna Communications, Inc.
                                  Sanchaita Datta  datta@signus.utah.edu
    484   kn-X Ltd.                               Sam Lau  44 943 467007
    485   Sync Research, Inc.                Alan Bartky  (714) 588-2070
    486   PremNet                  Ken Huang  HuangK@rimail.interlan.com
    487   SIAC                               Peter Ripp   (212) 383-9061
    488   New York Stock Exchange            Peter Ripp   (212) 383-9061
    489   American Stock Exchange            Peter Ripp   (212) 383-9061
    490   FCR Software, Inc.                   Brad Parker  brad@fcr.com
    491   National Medical Care, Inc.      Robert Phelan  (617) 466-9850
    492   Dialogue Communication Systemes, S.A.
                                       Klaus Handke   +(49) 30 802 24 97
    493   NorTele                            Bjorn Kvile  +47 2 48 89 90
    494   Madge Networks, Inc.
                      Duncan Greatwood dgreatwo@madge.mhs.compuserve.com
    495   Memotec Communications   Graham Higgins ghiggins@teleglobe.com
    496   CTON  Nick Hennenfent                        nicholas@cton.com
    497   Leap Technology, Inc.         George Economou  george@leap.com
    498   General DataComm, Inc.       William Meltzer   meltzer@gdc.com
    499   ACE Communications, Ltd.              Danny On  972-3-570-1423
    500   Automatic Data Processing (ADP)      Alex Rosin (201) 714-3982
    501   Programa SPRITEL                              Alberto Martinez
                              Martinez_Alberto_SPRITEL@euskom.spritel.es
    502   Adacom                              Aial Haorch  972-4-899-899
    503   Metrodata Ltd            Nick Brown  100022.767@compuserve.com
    504   Ellemtel Telecommunication Systems Laboratories
                        Richard G Bruvik  Richard.Bruvik@eua.ericsson.se
    505   Arizona Public Service          Duane Booher  DBOOHER@APSC.COM
    506   NETWIZ, Ltd.,    Emanuel Wind  eumzvir@techunix.technion.ac.il
    507   Science and Engineering Research Council (SERC)    Paul Kummer
                                                P.Kummer@daresbury.ac.uk
    508   The First Boston Corporation                        Kevin Chou
                                       csfb1!dbadmin4!kchou@uunet.UU.NET
    509   Hadax Electronics Inc.                       Marian Kramarczyk
                                               73477.2731@compuserve.com
    510   VTKK            Markku Lamminluoto  lamminluoto@vtkes1.vtkk.fi
    511   North Hills Israel Ltd.   Carmi Cohen  carmi@north.hellnet.org
    512   TECSIEL                       R. Burlon   sr@teculx.tecsiel.it

Reynolds & Postel                                             [Page 146]

RFC 1700                    Assigned Numbers                October 1994

    513   Bayerische Motoren Werke (BMW) AG             Michael Connolly
                                                    mconnolly@net.bmw.de
    514   CNET Technologies                       Nelson Su 408-954-8000
    515   MCI   Kurt Robohm                          krobohm@mcimail.com
    516   Human Engineering AG (HEAG)                        Urs Brunner
                                              ubrunner@clients.switch.ch
    517   FileNet Corporation                 Joe Raby  raby@filenet.com
    518   NFT-Ericsson                    Kjetil Donasen  +47 2 84 24 00
    519   Dun & Bradstreet                    Vic Smagovic  908-464-2079
    520   Intercomputer Communications      Brian Kean  513-745-0500x244
    521   Defense Intelligence Agency
                              Barry Atkinson   DIA-DMS@DDN-CONUS.DDN.MIL
    522   Telesystems SLW Inc.                   Joe Magony 416-441-9966
    523   APT Communications                  David Kloper  301-831-1182
    524   Delta Airlines                           Jim Guy  404-715-2948
    525   California Microwave                 Kevin Braun  408-720-6520
    526   Avid Technology Inc                 Steve Olynyk  508-640-3328
    527   Integro Advanced Computer Systems
                                         Pascal Turbiez  +33-20-08-00-40
    528   RPTI                                Chris Shin  886-2-918-3006
    529   Ascend Communications Inc.            Marc Hyman  510-769-6001
    530   Eden Computer Systems Inc.          Louis Brando  305-591-7752
    531   Kawasaki-Steel Corp
                           Tomoo Watanabe  nrd@info.kawasaki-steel.co.jp
    532   Barclays                     Malcolm Houghton  +44 202 671 212
    533   B.U.G., Inc.                 Isao Tateishi  tateishi@bug.co.jp
    534   Exide Electronics      Brian Hammill  hamill@dolphin.exide.com
    535   Superconducting Supercollider Lab.
                           Carl W. Kalbfleisch    cwk@irrational.ssc.gov
    536   Triticom                             Jim Bales  (612) 937-0772
    537   Universal Instruments Corp.
                    Tom Dinnel   BA06791%BINGVAXA.bitnet@CUNYVM.CUNY.EDU
    538   Information Resources, Inc.         Jeff Gear  jjg@infores.com
    539   Applied Innovation, Inc.   Dean Dayton  dean@aicorp.cmhnet.org
    540   Crypto AG                      Roland Luthi  luthi@iis.ethz.ch
    541   Infinite Networks, Ltd.          Sean Harding  +44 923 710 277
    542   Rabbit Software                     Bill Kwan  kwan@rabbit.com
    543   Apertus Technologies       Stuart Stanley  stuarts@apertus.com
    544   Equinox Systems, Inc.       Monty Norwood  1-800-275-3500 x293
    545   Hayes Microcomputer Products
                     Chris Roussel hayes!hayes.com!croussel@uunet.UU.NET
    546   Empire Technologies Inc. Cheryl Krupczak  cheryl@cc.gatech.edu
    547   Glaxochem, Ltd.                     Andy Wilson  0229 52261547
    548   KPY Network Partners, Corp.
                                  Gordon Vickers   sccs@pizza.netcom.com
    549   Agent Technology, Inc.  Ibi Dhilla  idhilla@genesis.nred.ma.us
    550   Dornier GMBH                Arens Heinrech  49-7545-8 ext 9337
    551   Telxon Corporation      Frank Ciotti  frankc@teleng.telxon.com

Reynolds & Postel                                             [Page 147]

RFC 1700                    Assigned Numbers                October 1994

    552   Entergy Corporation                 Louis Cureau  504-364-7630
    553   Garrett Communications Inc.        Igor Khasin  (408) 980-9752
    554   Agile Networks, Inc.          Dave Donegan  ddonegan@agile.com
    555   Larscom                           Sameer Jayakar  415-969-7572
    556   Stock Equipment                    Karl Klebenow  216-543-6000
    557   ITT Corporation      Kevin M. McCauley  kmm@vaxf.acdnj.itt.com
    558   Universal Data Systems, Inc.
                           Howard Cunningham   70400.3671@compuserve.com
    559   Sonix Communications, Ltd.      David Webster  +44 285 641 651
    560   Paul Freeman Associates, Inc.
                                      Pete Wilson  pwilson@world.std.com
    561   John S. Barnes, Corp.              Michael Lynch  704-878-4107
    562   Northern Telecom, Ltd.
                             Glenn Waters  613-763-3933 <gwaters@bnr.ca>
    563   CAP Debris       Patrick Preuss  ppr@lfs.hamburg.cap-debris.de
    564   Telco Systems NAC            Harry Hirani  Harry@telco-nac.com
    565   Tosco Refining Co                 Fred Sanderson  510-602-4358
    566   Russell Info Sys                      Atul Desai  714-362-4040
    567   University of Salford   Richard Letts  R.J.Letts@salford.ac.uk
    568   NetQuest Corp.         Jerry Jacobus  netquest@tigger.jvnc.net
    569   Armon Networking Ltd.    Yigal Jacoby  yigal@armon.hellnet.org
    570   IA Corporation                Didier Fort  Didier.Fort@lia.com
    571   AU-System Communicaton AB           Torbjorn Ryding  8-7267572
    572   GoldStar Information & Communications, Ltd.
                                      Soo N. Kim  ksn@giconet.gsic.co.kr
    573   SECTRA AB                        Tommy Pedersen  tcp@sectra.se
    574   ONEAC Corporation                Bill Elliot  ONEACWRE@AOL.COM
    575   Tree Technologies           Michael Demjanenko  (716) 688-4640
    576   GTE Government Systems         Henry Hernandez  (617) 455-2942
    577   Denmac Systems, Inc.            Andy Denenberg  (708) 291-7760
    578   Interlink Computer Sciences, Inc.
                                         Mike Mazurek  mfm@interlink.com
    579   Bridge Information Systems, Inc. Stephen Harvey (314) 567-8482
    580   Leeds and Northrup Australia (LNA) Nigel Cook nigelc@lna.oz.au
    581   BHA Computer                       David Hislop  rob@bha.oz.au
    582   Newport Systems Solutions, Inc.
                                       Pauline Chen  paulinec@netcom.com
    583   Atrium Technologies     Narender Reddy Vangati  vnr@atrium.com
    584   ROBOTIKER                 Maribel Narganes  maribel@teletek.es
    585   PeerLogic Inc.          Ratinder Ahuja  ratinder@peerlogic.com
    586   Digital Transmittion Systems        Bill VerSteeg  bvs@ver.com
    587   Far Point Communications            Bill VerSteeg  bvs@ver.com
    588   Xircom                              Bill VerSteeg  bvs@ver.com
    589   Mead Data Central         Stephanie Bowman  steph@meaddata.com
    590   Royal Bank of Canada                    N. Lim  (416) 348-5197
    591   Advantis, Inc.                       Janet Brehm  813 878-4298
    592   Chemical Banking Corp.  Paul McDonnell  pmcdonnl@world.std.com
    593   Eagle Technology                    Ted Haynes  (408) 441-4043

Reynolds & Postel                                             [Page 148]

RFC 1700                    Assigned Numbers                October 1994

    594   British Telecom               Ray Smyth  rsmyth@bfsec.bt.co.uk
    595   Radix BV                     P. Groenendaal  project2@radix.nl
    596   TAINET Communication System Corp.
                                    Joseph Chen  +886-2-6583000 (R.O.C.)
    597   Comtek Services Inc.              Steve Harris  (703) 506-9556
    598   Fair Issac   Steve Pasadis  apple.com!fico!sxp  (415) 472-2211
    599   AST Research Inc.                      Bob Beard  bobb@ast.com
    600   Soft*Star s.r.l. Ing. Enrico Badella softstar@pol88a.polito.it
    601   Bancomm                            Joe Fontes  jwf@bancomm.com
    602   Trusted Information Systems, Inc.
                                         James M. Galvin  galvin@tis.com
    603   Harris & Jeffries, Inc.         Deepak Shahane  hjinc@CERF.NET
    604   Axel Technology Corp.               Henry Ngai  (714) 455-1688
    605   GN Navtel, Inc.                       Joe Magony  416-479-8090
    606   CAP debis                    Patrick Preuss  +49 40 527 28 366
    607   Lachman Technology, Inc.  Steve Alexander   stevea@lachman.com
    608   Galcom Networking Ltd.
                             Zeev Greenblatt  galnet@vax.trendline.co.il
    609   BAZIS                            M. van Luijt  martin@bazis.nl
    610   SYNAPTEL                       Eric Remond  remond@synaptel.fr
    611   Investment Management Services, Inc.
                                J. Laurens Troost  rens@stimpys.imsi.com
    612   Taiwan Telecommunication Lab
                 Dennis Tseng   LOUIS%TWNMOCTL.BITNET@pucc.Princeton.EDU
    613   Anagram Corporation        Michael Demjanenko   (716) 688-4640
    614   Univel                      John Nunneley  jnunnele@univel.com
    615   University of California, San Diego
                                        Arthur Bierer   abierer@ucsd.edu
    616   CompuServe   Ed Isaacs, Brian Biggs  SYSADM@csi.compuserve.com
    617   Telstra - OTC Australia
                  Peter Hanselmann    peterhan@turin.research.otc.com.au
    618   Westinghouse Electric Corp.
                                Ananth Kupanna   ananth@access.digex.com
    619   DGA Ltd.              Tom L. Willis  twillis@pintu.demon.co.uk
    620   Elegant Communications Inc.
                                  Robert Story  Robert.Story@Elegant.COM
    621   Experdata                  Claude Lubin  clubin@expdat.gna.org
    622   Unisource Business Networks Sweden AB
                                               Goran Sterner gsr@tip.net
    623   Molex, Inc.                    Steven Joffe  molex@mcimail.com
    624   Quay Financial Software            Mick Fleming  mickf@quay.ie
    625   VMX Inc.                     Joga Ryali  joga@vmxi.cerfnet.com
    626   Hypercom, Inc.                  Noor Chowdhury  (602) 548-2113
    627   University of Guelph   Kent Percival  Percival@CCS.UoGuelph.CA
    628   DIaLOGIKa                  Juergen Jungfleisch  0 68 97 9 35-0
    629   NBASE Switch Communication
                            Sergiu Rotenstein  75250.1477@compuserve.com
    630   Anchor Datacomm B.V.      Erik Snoek  sdrierik@diamond.sara.nl

Reynolds & Postel                                             [Page 149]

RFC 1700                    Assigned Numbers                October 1994

    631   PACDATA                     John Reed  johnr@hagar.pacdata.com
    632   University of Colorado         Evi Nemeth  evi@cs.colorado.edu
    633   Tricom Communications Limited
                                  Robert Barrett  0005114429@mcimail.com
    634   Santix Software GmbH
                       Michael Santifaller   santi%mozart@santix.guug.de
    635   FastComm Communications Corp.
                               Bill Flanagan   70632.1446@compuserve.com
    636   The Georgia Institute of Technology
                      Michael Mealling   michael.mealling@oit.gatech.edu
    637   Alcatel Data Networks
                        Douglas E. Johnson doug.e.johnson@adn.sprint.com
    638   GTECH                             Brian Ruptash  bar@gtech.com
    639   UNOCAL Corporation                     Peter Ho  ho@unocal.com
    640   First Pacific Network             Randy Hamilton  408-703-2763
    641   Lexmark International              Don Wright  don@lexmark.com
    642   Qnix Computer             Sang Weon, Yoo  swyoo@qns.qnix.co.kr
    643   Jigsaw Software Concepts (Pty) Ltd.
                                   Willem van Biljon  wvb@itu2.sun.ac.za
    644   VIR, Inc.                          Mark Cotton  (215) 364-7955
    645   SFA Datacomm Inc.           Don Lechthaler  lech@world.std.com
    646   SEIKO Telecommunication Systems, Inc.
                                        Lyn T. Robertson  (503) 526-5638
    647   Unified Management              Andy Barnhouse  (612) 561-4944
    648   RADLINX Ltd.                Ady Lifshes  ady%rndi@uunet.uu.net
    649   Microplex Systems Ltd.            Henry Lee  hyl@microplex.com
    650   Objecta Elektronik & Data AB      Johan Finnved  jf@objecta.se
    651   Phoenix Microsystems                Bill VerSteeg  bvs@ver.com
    652   Distributed Systems International, Inc.
                                              Ron Mackey  rem@dsiinc.com
    653   Evolving Systems, Inc.   Judith C. Bettinger judy@evolving.com
    654   SAT GmbH           Walter Eichelburg  100063.74@compuserve.com
    655   CeLAN Technology, Inc.                Mark Liu  886--35-772780
    656   Landmark Systems Corp.
                               Steve Sonnenberg  steves@socrates.umd.edu
    657   Netone Systems Co., Ltd.
                                 YongKui Shao  syk@new-news.netone.co.jp
    658   Loral Data Systems     Jeff Price  jprice@cps070.lds.loral.com
    659   Cellware Broadband Technology   Michael Roth  mike@cellware.de
    660   Mu-Systems                Gaylord Miyata  miyata@world.std.com
    661   IMC Networks Corp.                  Jerry Roby  (714) 724-1070
    662   Octel Communications Corp.         Alan Newman  (408) 321-5182
    663   RIT Technologies LTD.      Ghiora Drori  drori@dcl.hellnet.org
    664   Adtran                                Jeff Wells  205-971-8000
    665   PowerPlay Technologies, Inc.        Ray Caruso  rayman@csn.org
    666   Oki Electric Industry Co., Ltd.
                                Shigeru Urushibara  uru@cs1.cs.oki.co.jp
    667   Specialix International  Jeremy Rolls  jeremyr@specialix.co.uk

Reynolds & Postel                                             [Page 150]

RFC 1700                    Assigned Numbers                October 1994

    668   INESC (Instituto de Engenharia de Sistemas e Computadores)
                                      Pedro Ramalho Carlos  prc@inesc.pt
    669   Globalnet Communications         Real Barriere  (514) 651-6164
    670   Product Line Engineer SVEC Computer Corp.
                                  Rich Huang   msumgr@enya.cc.fcu.edu.tw
    671   Printer Systems Corp.              Bill Babson  bill@prsys.com
    672   Contec Micro Electronics USA       David Sheih  (408) 434-6767
    673   Unix Integration Services         Chris Howard   chris@uis.com
    674   Dell Computer Corporation        Steven Blair  sblair@dell.com
    675   Whittaker Electronic Systems   Michael McCune  mccune@cerf.net
    676   QPSX Communications          David Pascoe    davidp@qpsx.oz.au
    677   Loral WDl      Mike Aronson  Mike_Aronson@msgate.wdl.loral.com
    678   Federal Express Corp.             Randy Hale    (901) 369-2152
    679   E-COMMS Inc.                    Harvey Teale    (206) 857-3399
    680   Software Clearing House                 Tom Caris   ca@sch.com
    681   Antlow Computers LTD.               C. R. Bates  44-635-871829
    682   Emcom Corp.                       Mike Swartz   emcom@cerf.net
    683   Extended Systems, Inc.
                               Al Youngwerth alberty@tommy.extendsys.com
    684   Sola Electric                     Mike Paulsen  (708) 439-2800
    685   Esix Systems, Inc.           Anthony Chung  esix@esix.tony.com
    686   3M/MMM                           Chris Amley   ccamley@mmm.com
    687   Cylink Corp.                          Ed Chou    ed@cylink.com
    688   Znyx Advanced Systems Division, Inc.
                                          Alan Deikman  aland@netcom.com
    689   Texaco, Inc.                      Jeff Lin     linj@Texaco.com
    690   McCaw Cellular Communication Corp. Tri Phan tri.phan@mccaw.com
    691   ASP Computer Product Inc. Elise Moss 71053.1066@compuserve.com
    692   HiPerformance Systems              Mike Brien  +27-11-806-1000
    693   Regionales Rechenzentrum
                   Sibylle Schweizer  unrz54@daphne.rrze.uni-erlangen.de
    694   SAP AG                          Dr. Uwe Hommel  +49 62 27 34 0
    695   ElectroSpace System Inc.
                               Dr. Joseph Cleveland e03353@esitx.esi.org
    696   ( Unassigned )
    697   MultiPort Software     Reuben Sivan  72302.3262@compuserve.com
    698   Combinet, Inc.               Samir Sawhney  samir@combinet.com
    699   TSCC                               Carl Wist    carlw@tscc.com
    700   Teleos Communications Inc.    Bill Nayavich  wln@teleoscom.com
    701   Alta Research                   Amy Saperstein  (305) 428-8535
    702   Independence Blue Cross              Bill Eshbach  esh@ibx.com
    703   ADACOM Station Interconnectivity LTD.
                                            Itay Kariv  +9 72 48 99 89 9
    704   MIROR Systems                     Frank Kloes  +27 12 911 0003
    705   Merlin Gerin               Adam Stolinski  (714) 557-1637 x249
    706   Owen-Corning Fiberglas     Tom Mann mann.td@ocf.compuserve.com
    707   Talking Networks Inc.          Terry Braun  tab@lwt.mtxinu.com
    708   Cubix Corporation             Rebekah Marshall  (702) 883-7611

Reynolds & Postel                                             [Page 151]

RFC 1700                    Assigned Numbers                October 1994

    709   Formation Inc.          Bob Millis  bobm@formail.formation.com
    710   Lannair Ltd.                    Pablo Brenner pablo@lannet.com
    711   LightStream Corp.       Chris Chiotasso  chris@lightstream.com
    712   LANart Corp.                Doron I. Gartner  doron@lanart.com
    713   University of Stellenbosch   Graham Phillips phil@cs.sun.ac.za
    714   Wyse Technology                     Bill Rainey  bill@wyse.com
    715   DSC Communications Corp.        Colm Bergin  cbergin@cpdsc.com
    716   NetEc                      Thomas Krichel  netec@uts.mcc.ac.uk
    717   Breltenbach Software Engineering Hilmar Tuneke +02 92 49 70 00
    718   Victor Company of Japan,Limited
                           Atsushi Sakamoto   101176.2703@compuserve.com
    719   Japan Direx Corporation        Teruo Tomiyama  +81 3 3498 5050
    720   NECSY Network Control Systems S.p.A. Piero Fiozzo fip@necsy.it
    721   ISDN Systems Corp.             Jeff Milloy  p00633@psilink.com
    722   Zero-One Technologies, LTD.     Curt Chen  + 88 62 56 52 32 33
    723   Radix Technologies, Inc.        Steve Giles  giless@delphi.com
    724   National Institute of Standards and Technology
                                     Jim West   west@mgmt3.ncsl.nist.gov
    725   Digital Technology Inc.     Chris Gianattasio  gto@lanhawk.com
    726   Castelle Corp.                   Waiming Mok  wmm@castelle.com
    727   Presticom Inc.          Martin Dube  76270.2672@compuserve.com
    728   Showa Electric Wire & Cable Co., Ltd.
                                  Robert O'Grady  kfn@tanuki.twics.co.jp
    729   SpectraGraphics                Jack Hinkle  hinkle@spectra.com
    730   Connectware Inc.                 Rick Downs  rxd4@acsysinc.com
    731   Wind River Systems                     Emily Hipp hipp@wrs.com
    732   RADWAY International Ltd. Doron Kolton  0005367977@mcimail.com
    733   System Management ARTS, Inc. Alexander Dupuy  dupuy@smarts.com
    734   Persoft, Inc.      Steven M. Entine  entine@pervax.persoft.com
    735   Xnet Technology Inc.      Esther Chung  estchung@xnet-tech.com
    736   Unison-Tymlabs                    Dean Andrews  ada@unison.com
    737   Micro-Matic Research   Patrick Lemli 73677.2373@compuserve.com
    738   B.A.T.M. Advance Technologies
                                      Nahum Killim bcrystal@actcom.co.il
    739   University of Copenhagen         Kim H|glund  shotokan@diku.dk
    740   Network Security Systems, Inc.
                                      Carleton Smith  rpitt@nic.cerf.net
    741   JNA Telecommunications             Sean Cody  seanc@jna.com.au
    742   Encore Computer Corporation    Tony Shafer  tshafer@encore.com
    743   Central Intelligent Agency         Carol Jobusch  703 242-2485
    744   ISC (GB) Limited      Mike Townsend  miket@cix.compulink.co.uk
    745   Digital Communication Associates Ravi Shankar shankarr@dca.com
    746   CyberMedia Inc.                Unni Warrier   unni@cs.ucla.edu
    747   Distributed Systems International, Inc.
                                               Ron Mackey rem@dsiinc.com
    748   Peter Radig EDP-Consulting       Peter Radig  +49 69 9757 6100
    749   Vicorp Interactive Systems           Phil Romine  phil@vis.com
    750   Inet Inc.                        Bennie Lopez  brl@inetinc.com

Reynolds & Postel                                             [Page 152]

RFC 1700                    Assigned Numbers                October 1994

    751   Argonne National Laboratory  Michael Shaffer mashaffer@anl.gov
    752   Tek Logix                          Peter Palsall  905 625-4121
    753   North Western University            Phil Draughon  jpd@nwu.edu
    754   Astarte Fiber Networks     James Garnett  garnett@catbelly.com
    755   Diederich & Associates, Inc.
                                  Douglas Capitano dlcapitano@delphi.com
    756   Florida Power Corporation        Bob England  rengland@fpc.com
    757   ASK/INGRES                  Howard Dernehl   howard@ingres.com
    758   Open Network Enterprise         Spada Stefano  +39 39 245-8101
    759   The Home Depot               Keith Porter  ktp01@homedepot.com
    760   Pan Dacom Telekommunikations   Jens Andresen  +49 40 644 09 71
    761   NetTek                          Steve Kennedy  steve@gbnet.com
    762   Karlnet Corp.                       Doug Kall  kbridge@osu.edu
    763   Efficient Networks, Inc.          Thirl Johnson (214) 991-3884
    764   Fiberdata                          Jan Fernquist  +46 828 8383
    765   Lanser                           Emil Smilovici (514) 485-7104
    766   Telebit Communications A/S     Peder Chr. Norgaard pcn@tbit.dk
    767   HILAN GmbH           Markus Pestinger  markus@lahar.ka.sub.org
    768   Network Computing Inc.
                           Fredrik Noon fnoon@ncimail.mhs.compuserve.com
    769   Walgreens Company                 Denis Renaud  (708) 818-4662
    770   Internet Initiative Japan Inc. Toshiharu Ohno tony-o@iij.ad.jp
    771   GP van Niekerk Ondernemings
                        Gerrit van Niekerk  gvanniek@dos-lan.cs.up.ac.za
    772   DSP & Telecoms Research Group
                  Patrick McGleenon  p.mcgleenon@ee.queens-belfast.ac.uk
    773   Securities Industry Automation Corporation
                                       Chiu Szeto  cszeto@prism.poly.edu
    774   SYNaPTICS                       David Gray  david@synaptics.ie
    775   Data Switch Corporation         Joe Welfeld  jwelfeld@dasw.com
    776   Telindus Distribution  Karel Van den Bogaert  kava@telindus.be
    777   MAXM Systems Corporation  Gary Greathouse ggreathouse@maxm.com
    778   Fraunhofer Gesellschaft
                               Jan Gottschick jan.gottschick@isst.fhg.de
    779   EQS Business Services           Ken Roberts   kroberts@esq.com
    780   CNet Technology Inc.     Repus Hsiung  idps17@shts.seed.net.tw
    781   Datentechnik GmbH           Thomas Pischinger  +43 1 50100 266
    782   Network Solutions Inc.          Dave Putman   davep@netsol.com
    783   Viaman Software                Vikram Duvvoori  info@viman.com
    784   Schweizerische Bankgesellschaft Zuerich
                           Roland Bernet  Roland.Bernet@zh014.ubs.ubs.ch
    785   University of Twente - TIOS      Aiko Pras  pras@cs.utwente.nl
    786   Simplesoft Inc.               Sudhir Pendse  sudhir@netcom.com
    787   Stony Brook, Inc.               Ken Packert p01006@psilink.com
    788   Unified Systems Solutions, Inc.
                              Steven Morgenthal  smorgenthal@attmail.com
    789   Network Appliance Corporation
                                     Varun Mehta  varun@butch.netapp.com

Reynolds & Postel                                             [Page 153]

RFC 1700                    Assigned Numbers                October 1994

    790   Ornet Data Communication Technologies Ltd.
                                              Haim Kurz haim@ornet.co.il
    791   Computer Associates International
                                  Glenn Gianino giagl01@usildaca.cai.com
    792   Multipoint Network Inc.    Michael Nguyen  mike@multipoint.com
    793   NYNEX Science & Technology          Lily Lau  llau@nynexst.com
    794   Commercial Link Systems    Wiljo Heinen  wiljo@freeside.cls.de
    795   Adaptec Inc.                    Tom Battle  tab@lwt.mtxinu.com
    796   Softswitch                       Charles Springer  cjs@ssw.com
    797   Link Technologies, Inc.                 Roy Chu  royc@wyse.com
    798   IIS                      Olry Rappaport   iishaifa@attmail.com
    799   Mobile Solutions Inc.    Dale Shelton  dshelton@srg.srg.af.mil
    800   Xylan Corp.                        Burt Cyr     burt@xylan.com
    801   Airtech Software Forge Limited
                                 Callum Paterson tsf@cix.compulink.co.uk
    802   National Semiconductor Maurice Turcotte  mturc@atlanta.nsc.com
    803   Video Lottery Technologies     Angelo Lovisa  ange@awd.cdc.com
    804   National Semiconductor Corp   Waychi Doo   wcd@berlioz.nsc.com
    805   Applications Management Corp
                         Terril (Terry) Steichen tjs@washington.ssds.com
    806   Travelers Insurance Company   Eric Miner  ustrv67v@ibmmail.com
    807   Taiwan International Standard Electronics Ltd.
                                        B. J. Chen  bjchen@taisel.com.tw
    808   US Patent and Trademark Office Rick Randall  randall@uspto.gov
    809   Hynet, LTD.                    Amir Fuhrmann  amf@teleop.co.il
    810   Aydin, Corp.                   Rick Veher       (215) 657-8600
    811   ADDTRON Technology Co., LTD.       Tommy Tasi  +8 86-2-4514507
    812   Fannie Mae                        David King   s4ujdk@fnma.com
    813   MultiNET Services         Hubert Martens   martens@multinet.de
    814   GECKO mbH                          Holger Dopp    hdo@gecko.de
    815   Memorex Telex                Mike Hill     hill@raleng.mtc.com
    816   Advanced Communications Networks (ACN) SA
                                              Antoine Boss +41 38 247434
    817   Telekurs AG         Jeremy Brookfield  bkj@iris.F2.telekurs.ch
    818   Victron bv                    Jack Stiekema    jack@victron.nl
    819   CF6 Company                   Francois Caron    +331 4696 0060
    820   Walker Richer and Quinn Inc.
                                  Rebecca Higgins  rebecca@elmer.wrq.com
    821   Saturn Systems  Paul Parker  paul_parker@parker.fac.cs.cmu.edu
    822   Mitsui Marine and Fire Insurance Co. LTD.
                                             Kijuro Ikeda +813 5389 8111
    823   Loop Telecommunication International, Inc.
                                          Charng-Show Li +886 35 787 696
    824   Telenex Corporation                 James Krug  (609) 866-1100
    825   Bus-Tech, Inc.      Charlie Zhang   chun@eecs.cory.berkley.edu
    826   ATRIE             Fred B.R. Tuang    cmp@fddi3.ccl.itri.org.tw
    827   Gallagher & Robertson A/S         Arild Braathen  arild@gar.no
    828   Networks Northwest, Inc. John J. Hansen jhansen@networksnw.com

Reynolds & Postel                                             [Page 154]

RFC 1700                    Assigned Numbers                October 1994

    829   Conner Peripherials  Richard Boyd  rboyd@mailserver.conner.com
    830   Elf Antar France                 P. Noblanc  +33 1 47 44 45 46
    831   Lloyd Internetworking          Glenn McGregor  glenn@lloyd.com
    832   Datatec Industries, Inc.     Chris Wiener  cwiener@datatec.com
    833   TAICOM   Scott Tseng                 cmp@fddi3.ccl.itri.org.tw
    834   Brown's Operating System Services Ltd.
                             Alistair Bell  alistair@ichthya.demon.co.uk
    835   MiLAN Technology Corp.            Gopal Hegde  gopal@milan.com
    836   NetEdge Systems, Inc.  Dave Minnich   Dave_Minnich@netedge.com
    837   NetFrame Systems   George Mathew    george_mathew@netframe.com
    838   Xedia Corporation     Colin Kincaid  colin%madway.uucp@dmc.com
    839   Pepsi                          Niraj Katwala  niraj@netcom.com
    840   Tricord Systems, Inc.      Mark Dillon  mdillon@tricord.mn.org
    841   Proxim Inc.                   Russ Reynolds  proxim@netcom.com
    842   Applications Plus, Inc.     Joel Estes  joele@hp827.applus.com
    843   Pacific Bell                Aijaz Asif  saasif@srv.PacBell.COM
    844   Supernet                    Sharon Barkai  sharon@supernet.com
    845   TPS-Teleprocessing Systems    Manfred Gorr  gorr@tpscad.tps.de
    846   Technology Solutions Company   Niraj Katwala  niraj@netcom.com
    847   Computer Site Technologies           Tim Hayes  (805) 967-3494
    848   NetPort Software             John Bartas  jbartas@sunlight.com
    849   Alon Systems          Menachem Szus  70571.1350@compuserve.com
    850   Tripp Lite             Lawren Markle  72170.460@compuserve.com
    851   NetComm Limited
                         Paul Ripamonti paulri@msmail.netcomm.pronet.com
    852   Precision Systems, Inc. (PSI)
                                     Fred Griffin  cheryl@empiretech.com
    853   Objective Systems Integrators     Ed Reeder  Ed.Reeder@osi.com
    854   Simpact Associates Inc.
                            Robert Patterson  bpatterson@dcs.simpact.com
    855   Systems Enhancement Corporation
                                    Steve Held 71165.2156@compuserve.com
    856   Information Integration, Inc.        Gina Sun  iiii@netcom.com
    857   CETREL S.C.                    Louis Reinard  ssc-re@cetrel.lu
    858   ViaTech Development
                        Theodore J. Collins III ted.collins@vtdev.mn.org
    859   Olivetti North America  Tom Purcell tomp@mail.spk.olivetti.com
    860   WILMA      Nikolaus Schaller  hns@ldv.e-technik.tu-muenchen.de
    861   ILX Systems Inc.                   Peter Mezey  peterm@ilx.com
    862   Total Peripherals Inc.              Mark Ustik  (508) 393-1777
    863   SunNetworks Consultant John Brady  jbrady@fedeast.east.sun.com
    864   Arkhon Technologies, Inc.         Joe Wang  rkhon@nic.cerf.net
    865   Computer Sciences Corporation
                                      George M. Dands  dands@sed.csc.com
    866   Philips.TRT                   Thibault Muchery  +33 14128 7000
    867   Katron Technologies Inc.           Robert Kao  +88 627 991 064
    868   Transition Engineering Inc.
                                   Hemant Trivedi  hemant@transition.com

Reynolds & Postel                                             [Page 155]

RFC 1700                    Assigned Numbers                October 1994

    869   Altos Engineering Applications, Inc.
                           Wes Weber or Dave Erhart  altoseng@netcom.com
    870   Nicecom Ltd.                 Arik Ramon  arik@nicecom.nice.com
    871   Fiskars/Deltec                     Carl Smith   (619) 291-2973
    872   AVM GmbH              Andreas Stockmeier  stocki@avm-berlin.de
    873   Comm Vision               Richard Havens    (408) 923 0301 x22
    874   Institute for Information Industry
                                       Peter Pan peterpan@pdd.iii.org.tw
    875   Legent Corporation             Gary Strohm  gstrohm@legent.com
    876   Network Automation                Doug Jackson  +64 6 285 1711
    877   NetTech                 Marshall Sprague  marshall@nettech.com
    878   Coman Data Communications Ltd.
                                      Zvi Sasson coman@nms.cc.huji.ac.il
    879   Skattedirektoratet           Karl Olav Wroldsen  +47 2207 7162
    880   Client-Server Technologies       Timo Metsaportti  timo@itf.fi
    881   Societe Internationale de Telecommunications Aeronautiques
                                Chuck Noren  chuck.noren@es.atl.sita.int
    882   Maximum Strategy Inc.        Paul Stolle  pstolle@maxstrat.com
    883   Integrated Systems, Inc.             Michael Zheng  mz@isi.com
    884   E-Systems, Melpar         Rick Silton  rsilton@melpar.esys.com
    885   Reliance Comm/Tec        Mark Scott  73422.1740@compuserve.com
    886   Summa Four Inc.                    Paul Nelson  (603) 625-4050
    887   J & L Information Systems          Rex Jackson  (818) 709-1778
    888   Forest Computer Inc.               Dave Black  dave@forest.com
    889   Palindrome Corp.   Jim Gast  jgast@palindro.mhs.compuserve.com
    890   ZyXEL Communications Corp.  Harry Chou  howie@csie.nctu.edu.tw
    891   Network Managers (UK) Ltd,   Mark D Dooley  mark@netmgrs.co.uk
    892   Sensible Office Systems Inc.      Pat Townsend  (712) 276-0034
    893   Informix Software         Anthony Daniel  anthony@informix.com
    894   Dynatek Communications           Howard Linton  (703) 490-7205
    895   Versalynx Corp.                    Dave Fisler  (619) 536-8023
    896   Potomac Scheduling Communications Company
                                    David Labovitz  del@access.digex.net
    897   Sybase Inc.                   Dave Meldrum  meldrum@sybase.com
    898   DiviCom Inc.                         Eyal Opher  eyal@divi.com
    899   Datus elektronische Informationssysteme GmbH
                                        Hubert Mertens marcus@datus.uucp
    900   Matrox Electronic Systems Limited
                           Marc-Andre Joyal  marc-andre.joyal@matrox.com
    901   Digital Products, Inc.        Ross Dreyer  rdreyer@digprod.com
    902   Scitex Corp. Ltd.          Yoav Chalfon  yoav_h@ird.scitex.com
    903   RAD Vision          Oleg Pogorelik  radvis@vax.trendline.co.il
    904   Tran Network Systems            Paul Winkeler  paulw@revco.com
    905   Scorpion Logic                     Sean Harding  +09 2324 5672
    906   Inotech Inc.                       Eric Jacobs  (703) 641-0469
    907   Controlled Power Co.        Yu Chin  76500,3160@compuserve.com
    908   Elsag Bailey Incorporate Derek McKearney  mckearney@bailey.com
    909   J.P. Morgan              Chung Szeto  szeto_chung@jpmorgan.com

Reynolds & Postel                                             [Page 156]

RFC 1700                    Assigned Numbers                October 1994

    910   Clear Communications Corp.          Kurt Hall  khall@clear.com
    911   General Technology Inc.         Perry Rockwell  (407) 242-2733
    912   Adax Inc.                          Jory Gessow   jory@adax.com
    913   Mtel Technologies, Inc.     Jon Robinson  552-3355@mcimail.com
    914   Underscore, Inc.            Jeff Schnitzer  jds@underscore.com
    915   SerComm Corp.                        Ben Lin   +8 862-577-5400
    916   Baxter Healthcare Corporation
                      Joseph Sturonas  sturonaj@mpg.mcgawpark.baxter.com
    917   Tellus Technology               Ron Cimorelli   (510) 498-8500
    918   Continuous Electron Beam Accelerator Facility
                                             Paul Banta  banta@cebaf.gov
    919   Canoga Perkins                   Margret Siska  (818) 718-6300
    920   R.I.S Technologies              Fabrice Lacroix  +33 7884 6400
    921   INFONEX Corp.            Kazuhiro Watanabe  kazu@infonex.co.jp
    922   WordPerfect Corp.           Douglas Eddy  eddy@wordperfect.com
    923   NRaD                          Russ Carleton  roccor@netcom.com
    924   Hong Kong Telecommunications Ltd.     K. S. Luk +8 52 883 3183
    925   Signature Systems               Doug Goodall   goodall@crl.com
    926   Alpha Technologies LTD.          Guy Pothiboon  (604) 430-8908
    927   PairGain Technologies, Inc.       Ken Huang  kenh@pairgain.com
    928   Sonic Systems             Sudhakar Ravi  sudhakar@sonicsys.com
    929   Steinbrecher Corp.       Kary Robertson  krobertson@delphi.com
    930   Centillion Networks, Inc.     Derek Pitcher   derek@lanspd.com
    931   Network Communication Corp.
                     Tracy Clark  ncc!central!tracyc@netcomm.attmail.com
    932   Sysnet A.S.                   Carstein Seeberg  case@sysnet.no
    933   Telecommunication Systems Lab Gerald Maguire maguire@it.kth.se
    934   QMI                             Scott Brickner  (410) 573-0013
    935   Phoenixtec Power Co., LTD.       An-Hsiang Tu  +8 862 646 3311
    936   Hirakawa Hewtech Corp.     H. Ukaji  lde02513@niftyserve.or.jp
    937   No Wires Needed B.V.       Arnoud Zwemmer  roana@cs.utwente.nl
    938   Primary Access               Kerstin Lodman  lodman@priacc.com
    939   Enterprises.FDSW            Dag Framstad  dag.framstad@fdsw.no
    940   Grabner & Kapfer GnbR          Vinzenz Grabner  zen@wsr.ac.att
    941   Nemesys Research Ltd.         Michael Dixon  mjd@nemesys.co.uk
    942   Pacific Communication Sciences, Inc. (PSCI)
                                      Yvonne Kammer mib-contact@pcsi.com
    943   Level One Communications, Inc.
                                      Moshe Kochinski  moshek@level1.com
    944   Fast Track, Inc.     Andrew H. Dimmick  adimmick@world.std.com
    945   Andersen Consulting, OM/NI Practice
                                         Greg Tilford p00919@psilink.com
    946   Bay Technologies Pty Ltd.   Paul Simpson  pauls@baytech.com.au
    947   Integrated Network Corp.      Daniel Joffe wandan@integnet.com
    948   Epoch, Inc.                       David Haskell  deh@epoch.com
    949   Wang Laboratories Inc.         Pete Reilley  pvr@wiis.wang.com
    950   Polaroid Corp.       Sari Germanos  sari@temerity.polaroid.com
    951   Sunrise Sierra                    Gerald Olson  (510) 443-1133

Reynolds & Postel                                             [Page 157]

RFC 1700                    Assigned Numbers                October 1994

    952   Silcon Group                   Bjarne Bonvang  +45 75 54 22 55
    953   Coastcom                  Donald Pickerel  dpickere@netcom.com
    954   4th DIMENSION SOFTWARE LTD.
                       Thomas Segev/Ely Hofner autumn@zeus.datasrv.co.il
    955   SEIKO SYSTEMS Inc.              Kiyoshi Ishida  ishi@ssi.co.jp
    956   PERFORM                    Jean-Hugues Robert  +33 42 27 29 32
    957   TV/COM International              Jean Tellier  (619) 675-1376
    958   Network Integration, Inc.
                           Scott C. Lemon  slemon@nii.mhs.compuserve.com
    959   Sola Electric, A Unit of General Signal
                                  Bruce Rhodes 72360,2436@compuserve.com
    960   Gradient Technologies, Inc.  Geoff Charron  geoff@gradient.com
    961   Tokyo Electric Co., Ltd.           A. Akiyama  +81 558 76 9606
    962   Codonics, Inc.                     Joe Kulig  jjk@codonics.com
    963   Delft Technical University Mark Schenk m.schenk@ced.tudelft.nl
    964   Carrier Access Corp.        Roger Koenig  tomquick@carrier.com
    965   eoncorp                           Barb Wilson  wilsonb@eon.com
    966   Naval Undersea Warfare Center
                           Mark Lovelace  lovelace@mp34.nl.nuwc.navy.mil
    967   AWA Limited                   Mike Williams    +61 28 87 71 11
    968   Distinct Corp.           Tarcisio Pedrotti  tarci@distinct.com
    969   National Technical University of Athens
                             Theodoros Karounos karounos@phgasos.ntua.gr
    970   BGS Systems, Inc.                       Amr Hafez  amr@bgs.com
    971   McCaw Wireless Data Inc.     Brian Bailey  bbailey@airdata.com
    972   Bekaert                  Koen De Vleeschauwer  kdv@bekaert.com
    973   Epic Data Inc.        Vincent Lim  vincent_lim@epic.wimsey.com
    974   Prodigy Services Co.              Ed Ravin  elr@wp.prodigy.com
    975   First Pacific Networks (FPN)     Randy Hamilton  randy@fpn.com
    976   Xylink Ltd.         Bahman Rafatjoo  100117.665@compuserve.com
    977   Relia Technologies Corp.  Fred Chen  fredc@relia1.relia.com.tw
    978   Legacy Storage Systems Inc.
                            James Hayes james@lss-chq.mhs.compuserve.com
    979   Digicom, SPA                   Claudio Biotti  +39 3312 0 0122
    980   Ark Telecom                       Alan DeMars  alan@arktel.com
    981   National Security Agency (NSA)
                                Cynthia Stewart maedeen@romulus.ncsc.mil
    982  Southwestern Bell Corporation
                                      Brian Bearden bb8840@swuts.sbc.com
    983  Virtual Design Group, Inc.
                                Chip Standifer 70650.3316@compuserve.com
    984  Rhone Poulenc                Olivier Pignault   +33 1348 2 4053
    985  Swiss Bank Corporation        Neil Todd  toddn@gb.swissbank.com
    986  ATEA N.V.             Walter van Brussel  p81710@banyan.atea.be
    987  Computer Communications Specialists, Inc.
                                        Carolyn Zimmer  cczimmer@crl.com
    988  Object Quest, Inc.             Michael L. Kornegay  mlk@bir.com
    989  DCL System International, Ltd.   Gady Amit gady-a@dcl-see.co.il

Reynolds & Postel                                             [Page 158]

RFC 1700                    Assigned Numbers                October 1994

    990  SOLITON SYSTEMS K.K.             Masayuki Yamai  +81 33356 6091
    991  U S Software                       Don Dunstan  ussw@netcom.com
    992  Systems Research and Applications Corporation
                                        Todd Herr herrt@smtplink.sra.com
    993  University of Florida           Todd Hester  todd@circa.ufl.edu
    994  Dantel, Inc.                       John Litster  (209) 292-1111
    995  Multi-Tech Systems, Inc.    Dale Martenson  (612) 785-3500 x519
    996  Softlink Ltd.     Moshe Leibovitch  softlink@zeus.datasrv.co.il
    997  ProSum                        Christian Bucari  +33.1.4590.6231
    998  March Systems Consultancy, Ltd.
                                     Ross Wakelin  r.wakelin@march.co.uk
    999  Hong Technology, Inc.            Walt Milnor  brent@oceania.com
   1000  Internet Assigned Numbers Authority                iana@isi.edu
   1001  PECO Energy Co.                  Rick Rioboli  u002rdr@peco.com
   1002  United Parcel Service        Steve Pollini  nrd1sjp@nrd.ups.com
   1003  Storage Dimensions, Inc.     Michael Torhan  miketorh@xstor.com
   1004  ITV Technologies, Inc.               Jacob Chen  itv@netcom.com
   1005  TCPSI             Victor San Jose   Victor.Sanjose@sp1.y-net.es
   1006  Promptus Communications, Inc.     Paul Fredette  (401) 683-6100
   1007  Norman Data Defense Systems
                                   Kristian A. Bognaes  norman@norman.no
   1008  Pilot Network Services, Inc.     Rob Carrade  carrade@pilot.net
   1009  Integrated Systems Solutions Corporation
                                           Chris Cowan cc@austin.ibm.com
   1010  SISRO                 Kamp Alexandre  100074.344@compuserve.com
   1011  NetVantage                       Kevin Bailey  speed@kaiwan.com
   1012  Marconi S.p.A.             Giuseppe Grasso  gg@relay.marconi.it
   1013  SURECOM                         Mike S. T. Hsieh  +886.25.92232
   1014  Royal Hong Kong Jockey Club
                                   Edmond Lee 100267.3660@compuserve.com
   1015  Gupta                            Howard Cohen  hcohen@gupta.com
   1016  Tone Software Corporation       Neil P. Harkins  (714) 991-9460
   1017  Opus Telecom                     Pace Willisson  pace@blitz.com
   1018  Cogsys Ltd.          Niall Teasdale  niall@hedgehog.demon.co.uk
   1019  Komatsu, Ltd.              Akifumi Katsushima  +81 463.22.84.30
   1020  ROI Systems, Inc                   Michael Wong  (801) 942-1752
   1021  Lightning Instrumentation SA    Mike O'Dowd  odowd@lightning.ch
   1022  TimeStep Corp.          Stephane Lacelle slacelle@newbridge.com
   1023  INTELSAT                       Ivan Giron  i.giron@intelsat.int
   1024  Network Research Corporation Japan, Ltd.
                                Tsukasa Ueda  100156.2712@compuserve.com
   1025  Relational Development, Inc.  Steven Smith  rdi@ins.infonet.net
   1026  Emerald Systems, Corp. Robert A. Evans Jr. (619) 673-2161 x5120
   1027  Mitel, Corp.                    Tom Quan  tq@software.mitel.com
   1028  Software AG                        Peter Cohen  sagpc@sagus.com
   1029  MillenNet, Inc.                       Manh Do    (510) 770-9390
   1030  NK-EXA Corp.           Ken'ichi Hayami  hayami@dst.nk-exa.co.jp
   1031  BMC Software                     Chris Sharp  csharp@patrol.com

Reynolds & Postel                                             [Page 159]

RFC 1700                    Assigned Numbers                October 1994

   1032  StarFire Enterprises, Inc.          Lew Gaiter  lg@starfire.com
   1033  Hybrid Networks, Inc.           Doug Muirhead  dougm@hybrid.com
   1034  Quantum Software GmbH          Thomas Omerzu  omerzu@quantum.de
   1035  Openvision Technologies Limited
                             Andrew Lockhart  alockhart@openvision.co.uk
   1036  Healthcare Communications, Inc. (HCI)
                                    Larry Streepy streepy@healthcare.com
   1037  SAIT Systems                          Hai Dotu    +3223.7053.11
   1038  SAT                              Mleczko Alain  +33.1.4077.1156
   1039  CompuSci Inc.,                   Bob Berry  bberry@compusci.com
   1040  Aim Technology                 Ganesh Rajappan  ganeshr@aim.com
   1041  CIESIN                      Kalpesh Unadkat  kalpesh@ciesin.org
   1042  Systems & Technologies International
                                            Howard Smith  ghamex@aol.com
   1043  Israeli Electric Company (IEC) Yoram Harlev yoram@yor.iec.co.il
   1044  Phoenix Wireless Group, Inc.
                                  Gregory M. Buchanan  buchanan@pwgi.com
   1045  SWL                  Bill Kight  wkightgrci.com  (410) 290.7245
   1046  nCUBE                            Greg Thompson  gregt@ncube.com
   1047  Cerner, Corp.             Dennis Avondet  (816) 221.1024  X2432
   1048  Andersen Consulting        Mark Lindberg  mlindber@andersen.com
   1049  Lincoln Telephone Company     Bob Morrill  root@si6000.ltec.com
   1050  Acer                                    Jay Tao  jtao@Altos.COM
   1051  Cedros                        Juergen Haakert  +49.2241.9701.80
   1052  AirAccess                  Ido Ophir  100274.365@compuserve.com
   1053  Expersoft Corporation        David Curtis  curtis@expersoft.com
   1054  Eskom                    Sanjay Lakhani h00161@duvi.eskom.co.za
   1055  SBE, Inc.                         Vimal Vaidya   vimal@sbei.com
   1056  EBS, Inc.                        Emre Gundogan  baroque@ebs.com
   1057  American Computer and Electronics, Corp.
                                               Tom Abraham  tha@acec.com
   1058  Syndesis Limited                 Wil Macaulay  wil@syndesis.com
   1059  Isis Distributed Systems, Inc.   Ken Chapman  kchapman@isis.com
   1060  Priority Call Management   Greg Schumacher  gregs@world.std.com
   1061  Koelsch & Altmann GmbH
                           Christian Schreyer  100142.154@compuserve.com
   1062  WIPRO INFOTECH LTD. Chandrashekar Kapse  kapse@wipinfo.soft.net
   1063  Controlware                          Uli Blatz  ublatz@cware.de
   1064  Mosaic Software                W.van Biljon willem@mosaic.co.za
   1065  Canon Information Systems
                            Victor Villalpando  vvillalp@cisoc.canon.com
   1066  AmericaOnline               Andrew R. Scholnick  andrew@aol.net
   1067  Whitetree Network Technologies, Inc.
                                           Carl Yang cyang@whitetree.com
   1068  Xetron Corp.                    Dave Alverson  davea@xetron.com
   1069  Target Concepts, Inc.               Bill Price  bprice@tamu.edu
   1070  DMH Software          Yigal Hochberg  72144.3704@compuserve.com
   1071  Innosoft International, Inc.    Jeff Allison  jeff@innosoft.com

Reynolds & Postel                                             [Page 160]

RFC 1700                    Assigned Numbers                October 1994

   1072  Controlware GmbH                     Uli Blatz  ublatz@cware.de
   1073  Telecommunications Industry Association (TIA)
                                      Mike Youngberg   mikey@synacom.com
   1074  Boole & Babbage                      Rami Rubin  rami@boole.com
   1075  System Engineering Support, Ltd.  Vince Taylor  +44 454.614.638
   1076  SURFnet               Ton Verschuren  Ton.Verschuren@surfnet.nl
   1077  OpenConnect Systems, Inc.        Mark Rensmeyer  mrensme@oc.com
   1078  PDTS (Process Data Technology and Systems)
                        Martin Gutenbrunner  GUT@pdts.mhs.compuserve.com
   1079  Cornet, Inc.                          Nat Kumar  (703) 658-3400
   1080  NetStar, Inc.                  John K. Renwick  jkr@netstar.com
   1081  Semaphore Communications, Corp.  Jimmy Soetarman (408) 980-7766
   1082  Casio Computer Co., Ltd.      Shouzo Ohdate  ohdate@casio.co.jp
   1083  CSIR            Frikkie Strecker fstreck@marge.mikom.csir.co.za
   1084  APOGEE Communications      Olivier Caleff  caleff@apogee-com.fr
   1085  Information Management Company   Michael D. Liss  mliss@imc.com
   1086  Wordlink, Inc.                    Mike Aleckson  (314) 878-1422
   1087  PEER                            Avinash S. Rao  arao@cranel.com
   1088  Telstra Corp.  Michael Scollay        michaels@ind.tansu.com.au
   1089  Net X, Inc.  Sridhar Kodela  techsupp@netx.unicomp.net
   1090  PNC PLC     Gordon Tees        +44 716.061.200

To request an assignment of an Enterprise Number send the complete
company name, address, and phone number; and the contact's person
complete name, address, phone number, and email mailbox in an email
message to <iana-mib@isi.edu>.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/enterprise-numbers

Reynolds & Postel                                             [Page 161]

RFC 1700                    Assigned Numbers                October 1994

SGMP Vendor Specific Codes: [obsolete]

Prefix: 1,255,

Decimal   Name                                          References
-------   ----                                          ----------
      0   Reserved                                          [JKR1]
      1   Proteon                                           [JS18]
      2   IBM                                                [JXR]
      3   CMU                                                [SXW]
      4   Unix                                               [MS9]
      5   ACC                                               [AB20]
      6   TWG                                                [MTR]
      7   CAYMAN                                            [BXM2]
      8   NYSERNET                                           [MS9]
      9   cisco                                              [GS2]
     10   BBN                                                [RH6]
     11   Unassigned                                        [JKR1]
     12   MIT                                               [JR35]
 13-254   Unassigned                                        [JKR1]
    255   Reserved                                          [JKR1]

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/sgmp-vendor-specific-
codes

Reynolds & Postel                                             [Page 162]

RFC 1700                    Assigned Numbers                October 1994

ADDRESS RESOLUTION PROTOCOL PARAMETERS

The Address Resolution Protocol (ARP) specified in [RFC826] has
several parameters.  The assigned values for these parameters are
listed here.

REVERSE ADDRESS RESOLUTION PROTOCOL OPERATION CODES

The Reverse Address Resolution Protocol (RARP) specified in [RFC903]
uses the "Reverse" codes below.

DYNAMIC REVERSE ARP

The Dynamic Reverse Address Resolution Protocol (DRARP) uses the
"DRARP" codes below.  For further information, contact: David Brownell
(suneast!helium!db@Sun.COM).

INVERSE ADDRESS RESOULUTION PROTOCOL

The Inverse Address Resolution Protocol (IARP) specified in [RFC1293]
uses the "InARP" codes below.

Assignments:

Number Operation Code (op)                       Reference
------ --------------------------                ---------
     1  REQUEST                                  [RFC826]
     2  REPLY                                    [RFC826]
     3  request Reverse                          [RFC903]
     4  reply Reverse                            [RFC903]
     5  DRARP-Request                    [David Brownell]
     6  DRARP-Reply                      [David Brownell]
     7  DRARP-Error                      [David Brownell]
     8  InARP-Request                           [RFC1293]
     9  InARP-Reply                             [RFC1293]
    10  ARP-NAK                            [Mark Laubach]

Number Hardware Type (hrd)                           References
------ -----------------------------------           ----------
     1 Ethernet (10Mb)                                    [JBP]
     2 Experimental Ethernet (3Mb)                        [JBP]
     3 Amateur Radio AX.25                                [PXK]
     4 Proteon ProNET Token Ring                          [JBP]
     5 Chaos                                              [GXP]
     6 IEEE 802 Networks                                  [JBP]
     7 ARCNET                                             [JBP]
     8 Hyperchannel                                       [JBP]
     9 Lanstar                                             [TU]

Reynolds & Postel                                             [Page 163]

RFC 1700                    Assigned Numbers                October 1994

    10 Autonet Short Address                             [MXB1]
    11 LocalTalk                                         [JKR1]
    12 LocalNet (IBM PCNet or SYTEK LocalNET)             [JXM]
    13 Ultra link                                        [RXD2]
    14 SMDS                                              [GXC1]
    15 Frame Relay                                        [AGM]
    16 Asynchronous Transmission Mode (ATM)              [JXB2]
    17 HDLC                                               [JBP]
    18 Fibre Channel                            [Yakov Rekhter]
    19 Asynchronous Transmission Mode (ATM)      [Mark Laubach]
    20 Serial Line                                        [JBP]
    21 Asynchronous Transmission Mode (ATM)              [MXB1]

Protocol Type (pro)

Use the same codes as listed in the section called "Ethernet Numbers
of Interest" (all hardware types use this code set for the protocol
type).

REFERENCES

[RFC826] Plummer, D., "An Ethernet Address Resolution Protocol or
         Converting Network Protocol Addresses to 48-bit Ethernet
         Addresses for Transmission on Ethernet Hardware", STD 37, RFC
         826, MIT-LCS, November 1982.

[RFC903] Finlayson, R., Mann, T., Mogul, J., and M. Theimer, "A
         Reverse Address Resolution Protocol", STD 38, RFC 903,
         Stanford University, June 1984.

[RFC1293] Bradley, T., and C. Brown, "Inverse Address Resolution
          Protocol", RFC 1293, Wellfleet Communications, Inc.,
          January 1992.

PEOPLE

[AGM] Andy Malis <malis_a@timeplex.com>

[GXC1] George Clapp <meritec!clapp@bellcore.bellcore.com>

[GXP] Gill Pratt <gill%mit-ccc@MC.LCS.MIT.EDU>

[JBP] Jon Postel <postel@isi.edu>

[JKR1] Joyce K. Reynolds <jkrey@isi.edu>

Reynolds & Postel                                             [Page 164]

RFC 1700                    Assigned Numbers                October 1994

[JXM] Joseph Murdock <---none--->

[MXB1] Mike Burrows <burrows@SRC.DEC.COM>

[PXK] Philip Koch <Philip.Koch@DARTMOUTH.EDU>

[RXD2] Rajiv Dhingra <rajiv@ULTRA.COM>

[TU] Tom Unger <tom@CITI.UMICH>

[David Brownell]

[Mark Laubach]

[Yakov Rekhter] <Yakov@IBM.COM>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/arp-parameters

Reynolds & Postel                                             [Page 165]

RFC 1700                    Assigned Numbers                October 1994

IEEE 802 NUMBERS OF INTEREST

Some of the networks of all classes are IEEE 802 Networks.  These
systems may use a Link Service Access Point (LSAP) field in much the
same way the MILNET uses the "link" field.  Further, there is an
extension of the LSAP header called the Sub-Network Access Protocol
(SNAP).

The IEEE likes to describe numbers in binary in bit transmission
order, which is the opposite of the big-endian order used throughout
the Internet protocol documentation.

Assignments:

   Link Service Access Point   Description                References
   -------------------------   -----------                ----------
   IEEE     Internet
   binary   binary    decimal
   00000000 00000000        0   Null LSAP                      [IEEE]
   01000000 00000010        2   Indiv LLC Sublayer Mgt         [IEEE]
   11000000 00000011        3   Group LLC Sublayer Mgt         [IEEE]
   00100000 00000100        4   SNA Path Control               [IEEE]
   01100000 00000110        6   Reserved (DOD IP)        [RFC768,JBP]
   01110000 00001110       14   PROWAY-LAN                     [IEEE]
   01110010 01001110       78   EIA-RS 511                     [IEEE]
   01111010 01011110       94   ISI IP                          [JBP]
   01110001 10001110      142   PROWAY-LAN                     [IEEE]
   01010101 10101010      170   SNAP                           [IEEE]
   01111111 11111110      254   ISO CLNS IS 8473         [RFC926,JXJ]
   11111111 11111111      255   Global DSAP                    [IEEE]

These numbers (and others) are assigned by the IEEE Standards Office.
The address is:

IEEE Registration Authority
c/o Iris Ringel
IEEE Standards Dept
445 Hoes Lane, P.O. Box 1331
Piscataway, NJ 08855-1331
Phone +1 908 562 3813
Fax: +1 908 562 1571

The fee is $1000 and it takes 10 working days after receipt of the
request form and fee.  They will not do anything via fax or phone.

At an ad hoc special session on "IEEE 802 Networks and ARP", held
during the TCP Vendors Workshop (August 1986), an approach to a

Reynolds & Postel                                             [Page 166]

RFC 1700                    Assigned Numbers                October 1994

consistent way to send DoD-IP datagrams and other IP related protocols
(such as the Address Resolution Protocol (ARP)) on 802 networks was
developed, using the SNAP extension (see [RFC1042]).

REFERENCES

[RFC768] Postel, J., "User Datagram Protocol", STD 6, RFC 768,
         USC/Information Sciences Institute, August 1980.

[RFC926] International Standards Organization, "Protocol for Providing
         the Connectionless-Mode Network Services", RFC 926, ISO,
         December 1984.

[RFC1042] Postel, J., and J. Reynolds, "A Standard for the
          Transmission of IP Datagrams over IEEE 802 Networks", STD
          43, RFC 1042, USC/Information Sciences Institute, February
          1988.

PEOPLE

[JBP] Jon Postel <postel@isi.edu>

[JXJ] <mystery contact>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/ieee-802-numbers

Reynolds & Postel                                             [Page 167]

RFC 1700                    Assigned Numbers                October 1994

ETHER TYPES

Many of the networks of all classes are Ethernets (10Mb) or
Experimental Ethernets (3Mb).  These systems use a message "type"
field in much the same way the ARPANET uses the "link" field.

If you need an Ether Type, contact:

Xerox Systems Institute
3400 Hillview Ave.
PO BOX 10034
Palo Alto, CA 94303

Phone: 415-813-7164
Contact: Fonda Lix Pallone

The following list of EtherTypes is contributed unverified information
from various sources.

Assignments:

Ethernet          Exp. Ethernet    Description          References
-------------     -------------   -----------           ----------
decimal  Hex      decimal  octal
   000   0000-05DC   -       -    IEEE802.3 Length Field   [XEROX]
   257   0101-01FF   -       -    Experimental             [XEROX]
   512   0200        512   1000   XEROX PUP (see 0A00)   [8,XEROX]
   513   0201        -      -     PUP Addr Trans (see 0A01)[XEROX]
         0400                     Nixdorf                  [XEROX]
  1536   0600       1536   3000   XEROX NS IDP         [133,XEROX]
         0660                     DLOG                     [XEROX]
         0661                     DLOG                     [XEROX]
  2048   0800        513   1001   Internet IP (IPv4)     [105,JBP]
  2049   0801        -      -     X.75 Internet            [XEROX]
  2050   0802        -      -     NBS Internet             [XEROX]
  2051   0803        -      -     ECMA Internet            [XEROX]
  2052   0804        -      -     Chaosnet                 [XEROX]
  2053   0805        -      -     X.25 Level 3             [XEROX]
  2054   0806        -      -     ARP                     [88,JBP]
  2055   0807        -      -     XNS Compatability        [XEROX]
  2076   081C        -      -     Symbolics Private         [DCP1]
  2184   0888-088A   -      -     Xyplex                   [XEROX]
  2304   0900        -      -     Ungermann-Bass net debugr[XEROX]
  2560   0A00        -      -     Xerox IEEE802.3 PUP      [XEROX]
  2561   0A01        -      -     PUP Addr Trans           [XEROX]
  2989   0BAD        -      -     Banyan Systems           [XEROX]
  4096   1000        -      -     Berkeley Trailer nego    [XEROX]
  4097   1001-100F   -      -     Berkeley Trailer encap/IP[XEROX]

Reynolds & Postel                                             [Page 168]

RFC 1700                    Assigned Numbers                October 1994

  5632   1600        -      -     Valid Systems            [XEROX]
 16962   4242        -      -     PCS Basic Block Protocol [XEROX]
 21000   5208        -      -     BBN Simnet               [XEROX]
 24576   6000        -      -     DEC Unassigned (Exp.)    [XEROX]
 24577   6001        -      -     DEC MOP Dump/Load        [XEROX]
 24578   6002        -      -     DEC MOP Remote Console   [XEROX]
 24579   6003        -      -     DEC DECNET Phase IV Route[XEROX]
 24580   6004        -      -     DEC LAT                  [XEROX]
 24581   6005        -      -     DEC Diagnostic Protocol  [XEROX]
 24582   6006        -      -     DEC Customer Protocol    [XEROX]
 24583   6007        -      -     DEC LAVC, SCA            [XEROX]
 24584   6008-6009   -      -     DEC Unassigned           [XEROX]
 24586   6010-6014   -      -     3Com Corporation         [XEROX]
 28672   7000        -      -     Ungermann-Bass download  [XEROX]
 28674   7002        -      -     Ungermann-Bass dia/loop  [XEROX]
 28704   7020-7029   -      -     LRT                      [XEROX]
 28720   7030        -      -     Proteon                  [XEROX]
 28724   7034        -      -     Cabletron                [XEROX]
 32771   8003        -      -     Cronus VLN            [131,DT15]
 32772   8004        -      -     Cronus Direct         [131,DT15]
 32773   8005        -      -     HP Probe                 [XEROX]
 32774   8006        -      -     Nestar                   [XEROX]
 32776   8008        -      -     AT&T                     [XEROX]
 32784   8010        -      -     Excelan                  [XEROX]
 32787   8013        -      -     SGI diagnostics            [AXC]
 32788   8014        -      -     SGI network games          [AXC]
 32789   8015        -      -     SGI reserved               [AXC]
 32790   8016        -      -     SGI bounce server          [AXC]
 32793   8019        -      -     Apollo Computers         [XEROX]
 32815   802E        -      -     Tymshare                 [XEROX]
 32816   802F        -      -     Tigan, Inc.              [XEROX]
 32821   8035        -      -     Reverse ARP             [48,JXM]
 32822   8036        -      -     Aeonic Systems           [XEROX]
 32824   8038        -      -     DEC LANBridge            [XEROX]
 32825   8039-803C   -      -     DEC Unassigned           [XEROX]
 32829   803D        -      -     DEC Ethernet Encryption  [XEROX]
 32830   803E        -      -     DEC Unassigned           [XEROX]
 32831   803F        -      -     DEC LAN Traffic Monitor  [XEROX]
 32832   8040-8042   -      -     DEC Unassigned           [XEROX]
 32836   8044        -      -     Planning Research Corp.  [XEROX]
 32838   8046        -      -     AT&T                     [XEROX]
 32839   8047        -      -     AT&T                     [XEROX]
 32841   8049        -      -     ExperData                [XEROX]
 32859   805B        -      -     Stanford V Kernel exp.   [XEROX]
 32860   805C        -      -     Stanford V Kernel prod.  [XEROX]
 32861   805D        -      -     Evans & Sutherland       [XEROX]
 32864   8060        -      -     Little Machines          [XEROX]
 32866   8062        -      -     Counterpoint Computers   [XEROX]

Reynolds & Postel                                             [Page 169]

RFC 1700                    Assigned Numbers                October 1994

 32869   8065        -      -     Univ. of Mass. @ Amherst [XEROX]
 32870   8066        -      -     Univ. of Mass. @ Amherst [XEROX]
 32871   8067        -      -     Veeco Integrated Auto.   [XEROX]
 32872   8068        -      -     General Dynamics         [XEROX]
 32873   8069        -      -     AT&T                     [XEROX]
 32874   806A        -      -     Autophon                 [XEROX]
 32876   806C        -      -     ComDesign                [XEROX]
 32877   806D        -      -     Computgraphic Corp.      [XEROX]
 32878   806E-8077   -      -     Landmark Graphics Corp.  [XEROX]
 32890   807A        -      -     Matra                    [XEROX]
 32891   807B        -      -     Dansk Data Elektronik    [XEROX]
 32892   807C        -      -     Merit Internodal           [HWB]
 32893   807D-807F   -      -     Vitalink Communications  [XEROX]
 32896   8080        -      -     Vitalink TransLAN III    [XEROX]
 32897   8081-8083   -      -     Counterpoint Computers   [XEROX]
 32923   809B        -      -     Appletalk                [XEROX]
 32924   809C-809E   -      -     Datability               [XEROX]
 32927   809F        -      -     Spider Systems Ltd.      [XEROX]
 32931   80A3        -      -     Nixdorf Computers        [XEROX]
 32932   80A4-80B3   -      -     Siemens Gammasonics Inc. [XEROX]
 32960   80C0-80C3   -      -     DCA Data Exchange Cluster[XEROX]
         80C4                     Banyan Systems           [XEROX]
         80C5                     Banyan Systems           [XEROX]
 32966   80C6        -      -     Pacer Software           [XEROX]
 32967   80C7        -      -     Applitek Corporation     [XEROX]
 32968   80C8-80CC   -      -     Intergraph Corporation   [XEROX]
 32973   80CD-80CE   -      -     Harris Corporation       [XEROX]
 32975   80CF-80D2   -      -     Taylor Instrument        [XEROX]
 32979   80D3-80D4   -      -     Rosemount Corporation    [XEROX]
 32981   80D5        -      -     IBM SNA Service on Ether [XEROX]
 32989   80DD        -      -     Varian Associates        [XEROX]
 32990   80DE-80DF   -      -     Integrated Solutions TRFS[XEROX]
 32992   80E0-80E3   -      -     Allen-Bradley            [XEROX]
 32996   80E4-80F0   -      -     Datability               [XEROX]
 33010   80F2        -      -     Retix                    [XEROX]
 33011   80F3        -      -     AppleTalk AARP (Kinetics)[XEROX]
 33012   80F4-80F5   -      -     Kinetics                 [XEROX]
 33015   80F7        -      -     Apollo Computer          [XEROX]
 33023   80FF-8103   -      -     Wellfleet Communications [XEROX]
 33031   8107-8109   -      -     Symbolics Private        [XEROX]
 33072   8130        -      -     Hayes Microcomputers     [XEROX]
 33073   8131        -      -     VG Laboratory Systems    [XEROX]
         8132-8136                Bridge Communications    [XEROX]
 33079   8137-8138   -      -     Novell, Inc.             [XEROX]
 33081   8139-813D   -      -     KTI                      [XEROX]
         8148                     Logicraft                [XEROX]
         8149                     Network Computing Devices[XEROX]
         814A                     Alpha Micro              [XEROX]

Reynolds & Postel                                             [Page 170]

RFC 1700                    Assigned Numbers                October 1994

 33100   814C        -      -     SNMP                      [JKR1]
         814D                     BIIN                     [XEROX]
         814E                     BIIN                     [XEROX]
         814F                     Technically Elite Concept[XEROX]
         8150                     Rational Corp            [XEROX]
         8151-8153                Qualcomm                 [XEROX]
         815C-815E                Computer Protocol Pty Ltd[XEROX]
         8164-8166                Charles River Data System[XEROX]
         817D-818C                Protocol Engines         [XEROX]
         818D                     Motorola Computer        [XEROX]
         819A-81A3                Qualcomm                 [XEROX]
         81A4                     ARAI Bunkichi            [XEROX]
         81A5-81AE                RAD Network Devices      [XEROX]
         81B7-81B9                Xyplex                   [XEROX]
         81CC-81D5                Apricot Computers        [XEROX]
         81D6-81DD                Artisoft                 [XEROX]
         81E6-81EF                Polygon                  [XEROX]
         81F0-81F2                Comsat Labs              [XEROX]
         81F3-81F5                SAIC                     [XEROX]
         81F6-81F8                VG Analytical            [XEROX]
         8203-8205                Quantum Software         [XEROX]
         8221-8222                Ascom Banking Systems    [XEROX]
         823E-8240                Advanced Encryption Syste[XEROX]
         827F-8282                Athena Programming       [XEROX]
         8263-826A                Charles River Data System[XEROX]
         829A-829B                Inst Ind Info Tech       [XEROX]
         829C-82AB                Taurus Controls          [XEROX]
         82AC-8693                Walker Richer & Quinn    [XEROX]
         8694-869D                Idea Courier             [XEROX]
         869E-86A1                Computer Network Tech    [XEROX]
         86A3-86AC                Gateway Communications   [XEROX]
         86DB                     SECTRA                   [XEROX]
         86DE                     Delta Controls           [XEROX]
 34543   86DF        -      -     ATOMIC                     [JBP]
         86E0-86EF                Landis & Gyr Powers      [XEROX]
         8700-8710                Motorola                 [XEROX]
         8A96-8A97                Invisible Software       [XEROX]
 36864   9000        -      -     Loopback                 [XEROX]
 36865   9001        -      -     3Com(Bridge) XNS Sys Mgmt[XEROX]
 36866   9002        -      -     3Com(Bridge) TCP-IP Sys  [XEROX]
 36867   9003        -      -     3Com(Bridge) loop detect [XEROX]
 65280   FF00        -      -     BBN VITAL-LanBridge cache[XEROX]
         FF00-FF0F                ISC Bunker Ramo          [XEROX]

The standard for transmission of IP datagrams over Ethernets and
Experimental Ethernets is specified in [RFC894] and [RFC895]
respectively.

Reynolds & Postel                                             [Page 171]

RFC 1700                    Assigned Numbers                October 1994

NOTE:  Ethernet 48-bit address blocks are assigned by the IEEE.

IEEE Registration Authority
c/o Iris Ringel
IEEE Standards Department
445 Hoes Lane, P.O. Box 1331
Piscataway, NJ 08855-1331
Phone +1 908 562 3813
Fax: +1 908 562 1571

IANA ETHERNET ADDRESS BLOCK

The IANA owns an Ethernet address block which may be used for
multicast address asignments or other special purposes.

The address block in IEEE binary is:  0000 0000 0000 0000 0111 1010

In the normal Internet dotted decimal notation this is 0.0.94 since
the bytes are transmitted higher order first and bits within bytes are
transmitted lower order first (see "Data Notation" in the
Introduction).

IEEE CSMA/CD and Token Bus bit transmission order: 00 00 5E

IEEE Token Ring bit transmission order: 00 00 7A

Appearance on the wire (bits transmitted from left to right):

    0                           23                            47
    |                           |                             |
    1000 0000 0000 0000 0111 1010 xxxx xxx0 xxxx xxxx xxxx xxxx
    |                                     |
    Multicast Bit                         0 = Internet Multicast
                                          1 = Assigned by IANA for
                                              other uses

Appearance in memory (bits transmitted right-to-left within octets,
octets transmitted left-to-right):

    0                           23                            47
    |                           |                             |
    0000 0001 0000 0000 0101 1110 0xxx xxxx xxxx xxxx xxxx xxxx
            |                     |
            Multicast Bit         0 = Internet Multicast

Reynolds & Postel                                             [Page 172]

RFC 1700                    Assigned Numbers                October 1994

                                  1 = Assigned by IANA for other uses

The latter representation corresponds to the Internet standard
bit-order, and is the format that most programmers have to deal with.
Using this representation, the range of Internet Multicast addresses
is:

       01-00-5E-00-00-00  to  01-00-5E-7F-FF-FF  in hex, or

       1.0.94.0.0.0  to  1.0.94.127.255.255  in dotted decimal

ETHERNET VENDOR ADDRESS COMPONENTS

Ethernet hardware addresses are 48 bits, expressed as 12 hexadecimal
digits (0-9, plus A-F, capitalized).  These 12 hex digits consist of
the first/left 6 digits (which should match the vendor of the Ethernet
interface within the station) and the last/right 6 digits which
specify the interface serial number for that interface vendor.

Ethernet addresses might be written unhyphenated (e.g., 123456789ABC),
or with one hyphen (e.g., 123456-789ABC), but should be written
hyphenated by octets (e.g., 12-34-56-78-9A-BC).

These addresses are physical station addresses, not multicast nor
broadcast, so the second hex digit (reading from the left) will be
even, not odd.

At present, it is not clear how the IEEE assigns Ethernet block
addresses.  Whether in blocks of 2**24 or 2**25, and whether
multicasts are assigned with that block or separately.  A portion of
the vendor block address is reportedly assigned serially, with the
other portion intentionally assigned randomly.  If there is a global
algorithm for which addresses are designated to be physical (in a
chipset) versus logical (assigned in software), or globally-assigned
versus locally-assigned addresses, some of the known addresses do not
follow the scheme (e.g., AA0003; 02xxxx).

00000C  Cisco
00000E  Fujitsu
00000F  NeXT
000010  Sytek
00001D  Cabletron
000020  DIAB (Data Intdustrier AB)
000022  Visual Technology
00002A  TRW

Reynolds & Postel                                             [Page 173]

RFC 1700                    Assigned Numbers                October 1994

000032  GPT Limited (reassigned from GEC Computers Ltd)
00005A  S & Koch
00005E  IANA
000065  Network General
00006B  MIPS
000077  MIPS
00007A  Ardent
000089  Cayman Systems  Gatorbox
000093  Proteon
00009F  Ameristar Technology
0000A2  Wellfleet
0000A3  Network Application Technology
0000A6  Network General (internal assignment, not for products)
0000A7  NCD             X-terminals
0000A9  Network Systems
0000AA  Xerox           Xerox machines
0000B3  CIMLinc
0000B7  Dove            Fastnet
0000BC  Allen-Bradley
0000C0  Western Digital
0000C5  Farallon phone net card
0000C6  HP Intelligent Networks Operation (formerly Eon Systems)
0000C8  Altos
0000C9  Emulex          Terminal Servers
0000D7  Dartmouth College (NED Router)
0000D8  3Com? Novell?   PS/2
0000DD  Gould
0000DE  Unigraph
0000E2  Acer Counterpoint
0000EF  Alantec
0000FD  High Level Hardvare (Orion, UK)
000102  BBN             BBN internal usage (not registered)
0020AF  3COM ???
001700  Kabel
008064  Wyse Technology / Link Technologies
00802B  IMAC ???
00802D  Xylogics, Inc.  Annex terminal servers
00808C  Frontier Software Development
0080C2  IEEE 802.1 Committee
0080D3  Shiva
00AA00  Intel
00DD00  Ungermann-Bass
00DD01  Ungermann-Bass
020701  Racal InterLan
020406  BBN             BBN internal usage (not registered)
026086  Satelcom MegaPac (UK)
02608C  3Com            IBM PC; Imagen; Valid; Cisco
02CF1F  CMC             Masscomp; Silicon Graphics; Prime EXL

Reynolds & Postel                                             [Page 174]

RFC 1700                    Assigned Numbers                October 1994

080002  3Com (Formerly Bridge)
080003  ACC (Advanced Computer Communications)
080005  Symbolics       Symbolics LISP machines
080008  BBN
080009  Hewlett-Packard
08000A  Nestar Systems
08000B  Unisys
080011  Tektronix, Inc.
080014  Excelan         BBN Butterfly, Masscomp, Silicon Graphics
080017  NSC
08001A  Data General
08001B  Data General
08001E  Apollo
080020  Sun             Sun machines
080022  NBI
080025  CDC
080026  Norsk Data (Nord)
080027  PCS Computer Systems GmbH
080028  TI              Explorer
08002B  DEC
08002E  Metaphor
08002F  Prime Computer  Prime 50-Series LHC300
080036  Intergraph      CAE stations
080037  Fujitsu-Xerox
080038  Bull
080039  Spider Systems
080041  DCA Digital Comm. Assoc.
080045  ???? (maybe Xylogics, but they claim not to know this number)
080046  Sony
080047  Sequent
080049  Univation
08004C  Encore
08004E  BICC
080056  Stanford University
080058  ???             DECsystem-20
08005A  IBM
080067  Comdesign
080068  Ridge
080069  Silicon Graphics
08006E  Concurrent      Masscomp
080075  DDE (Danish Data Elektronik A/S)
08007C  Vitalink        TransLAN III
080080  XIOS
080086  Imagen/QMS
080087  Xyplex          terminal servers
080089  Kinetics        AppleTalk-Ethernet interface
08008B  Pyramid
08008D  XyVision        XyVision machines

Reynolds & Postel                                             [Page 175]

RFC 1700                    Assigned Numbers                October 1994

080090  Retix Inc       Bridges
484453  HDS ???
800010  AT&T
AA0000  DEC             obsolete
AA0001  DEC             obsolete
AA0002  DEC             obsolete
AA0003  DEC             Global physical address for some DEC machines
AA0004  DEC             Local logical address for systems running
                        DECNET

ETHERNET MULTICAST ADDRESSES

An Ethernet multicast address consists of the multicast bit, the
23-bit vendor component, and the 24-bit group identifier assigned by
the vendor.  For example, DEC is assigned the vendor component
08-00-2B, so multicast addresses assigned by DEC have the first
24-bits 09-00-2B (since the multicast bit is the low-order bit of the
first byte, which is "the first bit on the wire").

Ethernet                Type
Address                 Field   Usage

Multicast Addresses:

01-00-5E-00-00-00-      0800    Internet Multicast        [RFC1112]
01-00-5E-7F-FF-FF
01-00-5E-80-00-00-      ????    Internet reserved by IANA
01-00-5E-FF-FF-FF
01-80-C2-00-00-00       -802-   Spanning tree (for bridges)
09-00-02-04-00-01?      8080?   Vitalink printer
09-00-02-04-00-02?      8080?   Vitalink management
09-00-09-00-00-01       8005    HP Probe
09-00-09-00-00-01       -802-   HP Probe
09-00-09-00-00-04       8005?   HP DTC
09-00-1E-00-00-00       8019?   Apollo DOMAIN
09-00-2B-00-00-00       6009?   DEC MUMPS?
09-00-2B-00-00-01       8039?   DEC DSM/DTP?
09-00-2B-00-00-02       803B?   DEC VAXELN?
09-00-2B-00-00-03       8038    DEC Lanbridge Traffic Monitor (LTM)
09-00-2B-00-00-04       ????    DEC MAP End System Hello
09-00-2B-00-00-05       ????    DEC MAP Intermediate System Hello
09-00-2B-00-00-06       803D?   DEC CSMA/CD Encryption?
09-00-2B-00-00-07       8040?   DEC NetBios Emulator?
09-00-2B-00-00-0F       6004    DEC Local Area Transport (LAT)
09-00-2B-00-00-1x       ????    DEC Experimental
09-00-2B-01-00-00       8038    DEC LanBridge Copy packets

Reynolds & Postel                                             [Page 176]

RFC 1700                    Assigned Numbers                October 1994

                                (All bridges)
09-00-2B-01-00-01       8038    DEC LanBridge Hello packets
                                (All local bridges)
                                1 packet per second, sent by the
                                designated LanBridge
09-00-2B-02-00-00       ????    DEC DNA Lev. 2 Routing Layer routers?
09-00-2B-02-01-00       803C?   DEC DNA Naming Service Advertisement?
09-00-2B-02-01-01       803C?   DEC DNA Naming Service Solicitation?
09-00-2B-02-01-02       803E?   DEC DNA Time Service?
09-00-2B-03-xx-xx       ????    DEC default filtering by bridges?
09-00-2B-04-00-00       8041?   DEC Local Area Sys. Transport (LAST)?
09-00-2B-23-00-00       803A?   DEC Argonaut Console?
09-00-4E-00-00-02?      8137?   Novell IPX
09-00-56-00-00-00-      ????    Stanford reserved
09-00-56-FE-FF-FF
09-00-56-FF-00-00-      805C    Stanford V Kernel, version 6.0
09-00-56-FF-FF-FF
09-00-77-00-00-01       ????    Retix spanning tree bridges
09-00-7C-02-00-05       8080?   Vitalink diagnostics
09-00-7C-05-00-01       8080?   Vitalink gateway?
0D-1E-15-BA-DD-06       ????    HP
AB-00-00-01-00-00       6001    DEC Maintenance Operation Protocol
                                (MOP) Dump/Load Assistance
AB-00-00-02-00-00       6002    DEC Maintenance Operation Protocol
                                (MOP) Remote Console
                                1 System ID packet every 8-10 minutes,
                                by every:
                                DEC LanBridge
                                DEC DEUNA interface
                                DEC DELUA interface
                                DEC DEQNA interface
                                (in a certain mode)
AB-00-00-03-00-00       6003    DECNET Phase IV end node Hello
                                packets 1 packet every 15 seconds,
                                sent by each DECNET host
AB-00-00-04-00-00       6003    DECNET Phase IV Router Hello packets
                                1 packet every 15 seconds, sent by
                                the DECNET router
AB-00-00-05-00-00       ????    Reserved DEC through
AB-00-03-FF-FF-FF
AB-00-03-00-00-00       6004    DEC Local Area Transport (LAT) - old
AB-00-04-00-xx-xx       ????    Reserved DEC customer private use
AB-00-04-01-xx-yy       6007    DEC Local Area VAX Cluster groups
                                Sys. Communication Architecture (SCA)
CF-00-00-00-00-00       9000    Ethernet Configuration Test protocol
                                (Loopback)

Broadcast Address:

Reynolds & Postel                                             [Page 177]

RFC 1700                    Assigned Numbers                October 1994

FF-FF-FF-FF-FF-FF       0600    XNS packets, Hello or gateway search?
                                6 packets every 15 seconds, per XNS
                                station
FF-FF-FF-FF-FF-FF       0800    IP (e.g. RWHOD via UDP) as needed
FF-FF-FF-FF-FF-FF       0804    CHAOS
FF-FF-FF-FF-FF-FF       0806    ARP (for IP and CHAOS) as needed
FF-FF-FF-FF-FF-FF       0BAD    Banyan
FF-FF-FF-FF-FF-FF       1600    VALID packets, Hello or gateway
                                search?
                                1 packets every 30 seconds, per VALID
                                station
FF-FF-FF-FF-FF-FF       8035    Reverse ARP
FF-FF-FF-FF-FF-FF       807C    Merit Internodal (INP)
FF-FF-FF-FF-FF-FF       809B    EtherTalk

REFERENCES

[RFC894]  Hornig, C., "A Standard for the Transmission of IP Datagrams
          over Ethernet Networks, STD 41, RFC 894, Symbolics,
          April 1984.

[RFC895]  Postel, J., "A Standard for the Transmission of IP Datagrams
          over Experimental Ethernet Networks, STD 42, RFC 895,
          USC/Information Sciences Institute, April 1984.

[RFC1112]  Deeering, S., "Host Extensions for IP Multicasting",
           STD 5, RFC 1112, Stanford University, August 1989.

PEOPLE

[AXC] Andrew Cherenson <arc@SGI.COM>

[DCP1] David Plummer <DCP@SCRC-QUABBIN.ARPA>

[DT15] Daniel Tappan <Tappan@BBN.COM>

[HWB] Hans-Werner Braun <HWB@MCR.UMICH.EDU>

[JBP] Jon Postel <postel@isi.edu>

[JKR1] Joyce K. Reynolds <jkrey@isi.edu>

[JXM] Joseph Murdock <---none--->

[XEROX] Fonda Pallone (415-813-7164)

Reynolds & Postel                                             [Page 178]

RFC 1700                    Assigned Numbers                October 1994

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/ethernet-numbers

Reynolds & Postel                                             [Page 179]

RFC 1700                    Assigned Numbers                October 1994

X.25 TYPE NUMBERS

CCITT defines the high order two bits of the first octet of call user
data as follows:

00 - Used for other CCITT recomendations (such as X.29)
01 - Reserved for use by "national" administrative
     authorities
10 - Reserved for use by international administrative authoorities
11 - Reserved for arbitrary use between consenting DTEs

Call User Data (hex)     Protocol                      Reference
-------------------      --------                      ---------

01                       PAD                               [GS2]
C5                       Blacker front-end descr dev       [AGM]
CC                       IP                         [RFC877,AGM]*
CD                       ISO-IP                            [AGM]
CF                       PPP                           [RFC1598]
DD                       Network Monitoring                [AGM]

*NOTE: ISO SC6/WG2 approved assignment in ISO 9577 (January 1990).

REFERENCES

[RFC877] Korb, J., "A Standard for the Transmission of IP Datagrams
         Over Public Data Networks", RFC 877, Purdue University,
         September 1983.

[RFC1598] Simpson, W., "PPPin X.25", RFC 1598, Daydreamer, March 1994.

PEOPLE

[AGM]     Andy Malis <malis_a@timeplex.com>

[GS2]     Greg Satz  <satz@CISCO.COM>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/x25-type-numbers

Reynolds & Postel                                             [Page 180]

RFC 1700                    Assigned Numbers                October 1994

PUBLIC DATA NETWORK NUMBERS

One of the Internet Class A Networks is the international system of
Public Data Networks.  This section lists the mapping between the
Internet Addresses and the Public Data Network Addresses (X.121).

Assignments:

  Internet           Public Data Net    Description     References
  --------------   -----------------   -----------      ----------
 014.000.000.000                       Reserved              [JBP]
 014.000.000.001   3110-317-00035 00   PURDUE-TN              [TN]
 014.000.000.002   3110-608-00027 00   UWISC-TN               [TN]
 014.000.000.003   3110-302-00024 00   UDEL-TN                [TN]
 014.000.000.004   2342-192-00149 23   UCL-VTEST              [PK]
 014.000.000.005   2342-192-00300 23   UCL-TG                 [PK]
 014.000.000.006   2342-192-00300 25   UK-SATNET              [PK]
 014.000.000.007   3110-608-00024 00   UWISC-IBM            [MS56]
 014.000.000.008   3110-213-00045 00   RAND-TN               [MO2]
 014.000.000.009   2342-192-00300 23   UCL-CS                 [PK]
 014.000.000.010   3110-617-00025 00   BBN-VAN-GW           [JD21]
 014.000.000.011   2405-015-50300 00   CHALMERS              [UXB]
 014.000.000.012   3110-713-00165 00   RICE                 [PAM6]
 014.000.000.013   3110-415-00261 00   DECWRL               [PAM6]
 014.000.000.014   3110-408-00051 00   IBM-SJ               [SXA3]
 014.000.000.015   2041-117-01000 00   SHAPE                 [JFW]
 014.000.000.016   2628-153-90075 00   DFVLR4-X25            [GB7]
 014.000.000.017   3110-213-00032 00   ISI-VAN-GW           [JD21]
 014.000.000.018   2624-522-80900 52   FGAN-SIEMENS-X25      [GB7]
 014.000.000.019   2041-170-10000 00   SHAPE-X25             [JFW]
 014.000.000.020   5052-737-20000 50   UQNET                 [AXH]
 014.000.000.021   3020-801-00057 50   DMC-CRC1              [VXT]
 014.000.000.022   2624-522-80329 02   FGAN-FGANFFMVAX-X25   [GB7]
 014.000.000.023   2624-589-00908 01   ECRC-X25              [PXD]
 014.000.000.024   2342-905-24242 83   UK-MOD-RSRE          [JXE2]
 014.000.000.025   2342-905-24242 82   UK-VAN-RSRE           [AXM]
 014.000.000.026   2624-522-80329 05   DFVLRSUN-X25          [GB7]
 014.000.000.027   2624-457-11015 90   SELETFMSUN-X25        [BXD]
 014.000.000.028   3110-408-00146 00   CDC-SVL             [RAM57]
 014.000.000.029   2222-551-04400 00   SUN-CNUCE            [ABB2]
 014.000.000.030   2222-551-04500 00   ICNUCEVM-CNUCE       [ABB2]
 014.000.000.031   2222-551-04600 00   SPARE-CNUCE          [ABB2]
 014.000.000.032   2222-551-04700 00   ICNUCEVX-CNUCE       [ABB2]
 014.000.000.033   2222-551-04524 00   CISCO-CNUCE          [ABB2]
 014.000.000.034   2342-313-00260 90   SPIDER-GW            [AD67]

Reynolds & Postel                                             [Page 181]

RFC 1700                    Assigned Numbers                October 1994

 014.000.000.035   2342-313-00260 91   SPIDER-EXP           [AD67]
 014.000.000.036   2342-225-00101 22   PRAXIS-X25A           [TXR]
 014.000.000.037   2342-225-00101 23   PRAXIS-X25B           [TXR]
 014.000.000.038   2403-712-30250 00   DIAB-TABY-GW          [FXB]
 014.000.000.039   2403-715-30100 00   DIAB-LKP-GW           [FXB]
 014.000.000.040   2401-881-24038 00   DIAB-TABY1-GW         [FXB]
 014.000.000.041   2041-170-10060 00   STC                  [TC27]
 014.000.000.042   2222-551-00652 60   CNUCE                [TC27]
 014.000.000.043   2422-510-05900 00   Tollpost-Globe AS     [OXG]
 014.000.000.044   2422-670-08900 00   Tollpost-Globe AS     [OXG]
 014.000.000.045   2422-516-01000 00   Tollpost-Globe AS     [OXG]
 014.000.000.046   2422-450-00800 00   Tollpost-Globe AS     [OXG]
 014.000.000.047   2422-610-00200 00   Tollpost-Globe AS     [OXG]
 014.000.000.048   2422-310-00300 00   Tollpost-Globe AS     [OXG]
 014.000.000.049   2422-470-08800 00   Tollpost-Globe AS     [OXG]
 014.000.000.050   2422-210-04600 00   Tollpost-Globe AS     [OXG]
 014.000.000.051   2422-130-28900 00   Tollpost-Globe AS     [OXG]
 014.000.000.052   2422-310-27200 00   Tollpost-Globe AS     [OXG]
 014.000.000.053   2422-250-05800 00   Tollpost-Globe AS     [OXG]
 014.000.000.054   2422-634-05900 00   Tollpost-Globe AS     [OXG]
 014.000.000.055   2422-670-08800 00   Tollpost-Globe AS     [OXG]
 014.000.000.056   2422-430-07400 00   Tollpost-Globe AS     [OXG]
 014.000.000.057   2422-674-07800 00   Tollpost-Globe AS     [OXG]
 014.000.000.058   2422-230-16900 00   Tollpost-Globe AS     [OXG]
 014.000.000.059   2422-518-02900 00   Tollpost-Globe AS     [OXG]
 014.000.000.060   2422-370-03100 00   Tollpost-Globe AS     [OXG]
 014.000.000.061   2422-516-03400 00   Tollpost-Globe AS     [OXG]
 014.000.000.062   2422-616-04400 00   Tollpost-Globe AS     [OXG]
 014.000.000.063   2422-650-23500 00   Tollpost-Globe AS     [OXG]
 014.000.000.064   2422-330-02500 00   Tollpost-Globe AS     [OXG]
 014.000.000.065   2422-350-01900 00   Tollpost-Globe AS     [OXG]
 014.000.000.066   2422-410-00700 00   Tollpost-Globe AS     [OXG]
 014.000.000.067   2422-539-06200 00   Tollpost-Globe AS     [OXG]
 014.000.000.068   2422-630-07200 00   Tollpost-Globe AS     [OXG]
 014.000.000.069   2422-470-12300 00   Tollpost-Globe AS     [OXG]
 014.000.000.070   2422-470-13000 00   Tollpost-Globe AS     [OXG]
 014.000.000.071   2422-170-04600 00   Tollpost-Globe AS     [OXG]
 014.000.000.072   2422-516-04300 00   Tollpost-Globe AS     [OXG]
 014.000.000.073   2422-530-00700 00   Tollpost-Globe AS     [OXG]
 014.000.000.074   2422-650-18800 00   Tollpost-Globe AS     [OXG]
 014.000.000.075   2422-450-24500 00   Tollpost-Globe AS     [OXG]
 014.000.000.076   2062-243-15631 00   DPT-BXL-DDC          [LZ15]
 014.000.000.077   2062-243-15651 00   DPT-BXL-DDC2         [LZ15]
 014.000.000.078   3110-312-00431 00   DPT-CHI              [LZ15]
 014.000.000.079   3110-512-00135 00   DPT-SAT-ENG          [LZ15]
 014.000.000.080   2080-941-90550 00   DPT-PAR              [LZ15]
 014.000.000.081   4545-511-30600 00   DPT-PBSC             [LZ15]
 014.000.000.082   4545-513-30900 00   DPT-HONGKONG         [LZ15]

Reynolds & Postel                                             [Page 182]

RFC 1700                    Assigned Numbers                October 1994

 014.000.000.083   4872-203-55000 00   UECI-TAIPEI          [LZ15]
 014.000.000.084   2624-551-10400 20   DPT-HANOVR           [LZ15]
 014.000.000.085   2624-569-00401 99   DPT-FNKFRT           [LZ15]
 014.000.000.086   3110-512-00134 00   DPT-SAT-SUPT         [LZ15]
 014.000.000.087   4602-3010-0103 20   DU-X25A              [JK64]
 014.000.000.088   4602-3010-0103 21   FDU-X25B             [JK64]
 014.000.000.089   2422-150-33700 00   Tollpost-Globe AS     [OXG]
 014.000.000.090   2422-271-07100 00   Tollpost-Globe AS     [OXG]
 014.000.000.091   2422-516-00100 00   Tollpost-Globe AS     [OXG]
 014.000.000.092   2422-650-18800 00   Norsk Informas.       [OXG]
 014.000.000.093   2422-250-30400 00   Tollpost-Globe AS     [OXG]
 014.000.000.094                       Leissner Data AB     [PXF1]
 014.000.000.095                       Leissner Data AB     [PXF1]
 014.000.000.096                       Leissner Data AB     [PXF1]
 014.000.000.097                       Leissner Data AB     [PXF1]
 014.000.000.098                       Leissner Data AB     [PXF1]
 014.000.000.099                       Leissner Data AB     [PXF1]
 014.000.000.100                       Leissner Data AB     [PXF1]
 014.000.000.101                       Leissner Data AB     [PXF1]
 014.000.000.102                       Leissner Data AB     [PXF1]
 014.000.000.103                       Leissner Data AB     [PXF1]
 014.000.000.104                       Leissner Data AB     [PXF1]
 014.000.000.105                       Leissner Data AB     [PXF1]
 014.000.000.106                       Leissner Data AB     [PXF1]
 014.000.000.107                       Leissner Data AB     [PXF1]
 014.000.000.108                       Leissner Data AB     [PXF1]
 014.000.000.109                       Leissner Data AB     [PXF1]
 014.000.000.110                       Leissner Data AB     [PXF1]
 014.000.000.111                       Leissner Data AB     [PXF1]
 014.000.000.112                       Leissner Data AB     [PXF1]
 014.000.000.113                       Leissner Data AB     [PXF1]
 014.000.000.114                       Leissner Data AB     [PXF1]
 014.000.000.115                       Leissner Data AB     [PXF1]
 014.000.000.116                       Leissner Data AB     [PXF1]
 014.000.000.117                       Leissner Data AB     [PXF1]
 014.000.000.118                       Leissner Data AB     [PXF1]
 014.000.000.119                       Leissner Data AB     [PXF1]
 014.000.000.120                       Leissner Data AB     [PXF1]
 014.000.000.121                       Leissner Data AB     [PXF1]
 014.000.000.122                       Leissner Data AB     [PXF1]
 014.000.000.123                       Leissner Data AB     [PXF1]
 014.000.000.124                       Leissner Data AB     [PXF1]
 014.000.000.125                       Leissner Data AB     [PXF1]
 014.000.000.126                       Leissner Data AB     [PXF1]
 014.000.000.127                       Leissner Data AB     [PXF1]
 014.000.000.128                       Leissner Data AB     [PXF1]
 014.000.000.129  2422-150-17900 00    Tollpost-Globe AS     [OXG]
 014.000.000.130  2422-150-42700 00    Tollpost-Globe AS     [OXG]

Reynolds & Postel                                             [Page 183]

RFC 1700                    Assigned Numbers                October 1994

 014.000.000.131  2422-190-41900 00    T-G Airfreight AS     [OXG]
 014.000.000.132  2422-616-16100 00    Tollpost-Globe AS     [OXG]
 014.000.000.133  2422-150-50700-00    Tollpost-Globe Int.   [OXG]
 014.000.000.134  2422-190-28100-00    Intersped AS          [OXG]

 014.000.000.135-014.255.255.254       Unassigned            [JBP]
 014.255.255.255                       Reserved              [JBP]

The standard for transmission of IP datagrams over the Public Data
Network is specified in RFC-1356 [69].

REFERENCES

[RFC877] Korb, J., "A Standard for the Transmission of IP Datagrams
         Over Public Data Networks", RFC 877, Purdue University,
         September 1983.

PEOPLE

[ABB2] A. Blasco Bonito <blasco@ICNUCEVM.CNUCE.CNR.IT>

[AD67] Andy Davis <andy@SPIDER.CO.UK>

[AXH] Arthur Harvey <harvey@gah.enet.dec.com>

[AXM] Alex Martin <---none--->

[BXD] Brian Dockter <---none--->

[FXB] <mystery contact>

[GB7] Gerd Beling <GBELING@ISI.EDU>

[JBP] Jon Postel <postel@isi.edu.

[JD21] Jonathan Dreyer <Dreyer@CCV.BBN.COM>

[JFW] Jon F. Wilkes <Wilkes@CCINT1.RSRE.MOD.UK>

[JK64] mystery contact!

[JXE2] Jeanne Evans <JME%RSRE.MOD.UK@CS.UCL.AC.UK>

[LZ15] Lee Ziegenhals <lcz@sat.datapoint.com>

[MS56] Marvin Solomon <solomon@CS.WISC.EDU>

Reynolds & Postel                                             [Page 184]

RFC 1700                    Assigned Numbers                October 1994

[MO2] Michael O'Brien <obrien@AEROSPACE.AERO.ORG>

[OXG] Oyvind Gjerstad <ogj%tglobe2.UUCP@nac.no>

[PAM6] Paul McNabb <pam@PURDUE.EDU>

[PK] Peter Kirstein <Kirstein@NSS.CS.UCL.AC.UK>

[PXD] Peter Delchiappo <---none--->

[PXF1] Per Futtrup <---none--->

[RAM57] Rex Mann <---none--->

[SXA3] Sten Andler <---none--->

[TN] Thomas Narten <narten@PURDUE.EDU>

[TC27] Thomas Calderwood <TCALDERW@BBN.COM>

[TXR] Tim Rylance <praxis!tkr@UUNET.UU.NET>

[UXB] <mystery contact>

[VXT] V. Taylor <vktaylor@NCS.DND.CA>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/public-data-network-
numbers

Reynolds & Postel                                             [Page 185]

RFC 1700                    Assigned Numbers                October 1994

MILNET LINK NUMBERS

The word "link" here refers to a field in the original MILNET Host/IMP
interface leader.  The link was originally defined as an 8-bit field.
Later specifications defined this field as the "message-id" with a
length of 12 bits.  The name link now refers to the high order 8 bits of
this 12-bit message-id field.  The Host/IMP interface is defined in BBN
Report 1822 [BBN1822].

The low-order 4 bits of the message-id field are called the sub-link.
Unless explicitly specified otherwise for a particular protocol, there
is no sender to receiver significance to the sub-link.  The sender may
use the sub-link in any way he chooses (it is returned in the RFNM by
the destination IMP), the receiver should ignore the sub-link.

Link Assignments:

Decimal   Description                                   References
-------   -----------                                   ----------
0-63      BBNCC Monitoring                                    [MB]
64-149    Unassigned                                         [JBP]
150       Xerox NS IDP                            [ETHERNET,XEROX]
151       Unassigned                                         [JBP]
152       PARC Universal Protocol                      [PUP,XEROX]
153       TIP Status Reporting                               [JGH]
154       TIP Accounting                                     [JGH]
155       Internet Protocol [regular]                 [RFC791,JBP]
156-158   Internet Protocol [experimental]            [RFC791,JBP]
159       Figleaf Link                                      [JBW1]
160       Blacker Local Network Protocol                    [DM28]
161-194   Unassigned                                         [JBP]
195       ISO-IP                                      [RFC926,RXM]
196-247   Experimental Protocols                             [JBP]
248-255   Network Maintenance                                [JGH]

MILNET LOGICAL ADDRESSES

The MILNET facility for "logical addressing" is described in [RFC878]
and [RFC1005].  A portion of the possible logical addresses are
reserved for standard uses.

There are 49,152 possible logical host addresses.  Of these, 256 are
reserved for assignment to well-known functions.  Assignments for
well-known functions are made by the IANA.  Assignments for other

Reynolds & Postel                                             [Page 186]

RFC 1700                    Assigned Numbers                October 1994

logical host addresses are made by the NIC.

Logical Address Assignments:

Decimal    Description                                  References
-------    -----------                                  ----------
0          Reserved                                          [JBP]
1          The BBN Core Gateways                              [MB]
2-254      Unassigned                                        [JBP]
255        Reserved                                          [JBP]

MILNET X.25 ADDRESS MAPPINGS

All MILNET hosts are assigned addresses by the Defense Data Network
(DDN).  The address of a MILNET host may be obtained from the Network
Information Center (NIC), represented as an ASCII text string in what
is called "host table format".  This section describes the process by
which MILNET X.25 addresses may be derived from addresses in the NIC
host table format.

A NIC host table address consists of the ASCII text string
representations of four decimal numbers separated by periods,
corresponding to the four octeted of a thirty-two bit Internet
address.  The four decimal numbers are referred to in this section as
"n", "h' "l", and "i".  Thus, a host table address may be represented
as: "n.h.l.i".  Each of these four numbers will have either one, two,
or three decimal digits and will never have a value greater than 255.
For example, in the host table, address: "10.2.0.124", n=10, h=2, l=0,
and i=124.  To convert a host table address to a MILNET X.25 address:

1.  If h < 64, the host table address corresponds to the X.25
physical address:

ZZZZ F IIIHHZZ (SS)

where:

     ZZZZ = 0000    as required

     F = 0          because the address is a physical address;

     III            is a three decimal digit respresentation of
                    "i", right-adjusted and padded with leading

Reynolds & Postel                                             [Page 187]

RFC 1700                    Assigned Numbers                October 1994

                    zeros if required;

     HH             is a two decimal digit representation of "h",
                    right-adjusted and padded with leading zeros
                    if required;

     ZZ = 00        and

     (SS)           is optional

In the example given above, the host table address 10.2.0.124
corresponds to the X.25 physical address 000001240200.

2.  If h > 64 or h = 64, the host table address corresponds to the
X.25 logical address

ZZZZ F RRRRRZZ (SS)

where:

     ZZZZ = 0000    as required

     F = 1          because the address is a logical address;

     RRRRR          is a five decimal digit representation of
                    the result "r" of the calculation

                             r = h * 256 + i

                    (Note that the decimal representation of
                    "r" will always require five digits);

     ZZ = 00        and

     (SS)           is optional

Thus, the host table address 10.83.0.207 corresponds to the X.25
logical address 000012145500.

In both cases, the "n" and "l" fields of the host table address are
not used.

REFERENCES

[BBN1822] BBN, "Specifications for the Interconnection of a Host and

Reynolds & Postel                                             [Page 188]

RFC 1700                    Assigned Numbers                October 1994

          an IMP", Report 1822, Bolt Beranek and Newman, Cambridge,
          Massachusetts, revised, December 1981.

[ETHERNET] "The Ethernet, A Local Area Network: Data Link Layer and
           Physical Layer Specification", AA-K759B-TK, Digital
           Equipment Corporation, Maynard, MA.  Also as: "The Ethernet
           - A Local Area Network", Version 1.0, Digital Equipment
           Corporation, Intel Corporation, Xerox Corporation,
           September 1980.  And: "The Ethernet, A Local Area Network:
           Data Link Layer and Physical Layer Specifications",
           Digital, Intel and Xerox, November 1982.  And: XEROX, "The
           Ethernet, A Local Area Network: Data Link Layer and
           Physical Layer Specification", X3T51/80-50, Xerox
           Corporation, Stamford, CT., October 1980.

[PUP] Boggs, D., J. Shoch, E. Taft, and R. Metcalfe, "PUP: An
      Internetwork Architecture", XEROX Palo Alto Research Center,
      CSL-79-10, July 1979; also in IEEE Transactions on
      Communication, Volume COM-28, Number 4, April 1980.

[RFC791] Postel, J., ed., "Internet Protocol - DARPA Internet Program
         Protocol Specification", STD 5, RFC 791, USC/Information
         Sciences Institute, September 1981.

[RFC878] Malis, Andrew, "The ARPANET 1822L Host Access Protocol",
         RFC 878, BBN Communications Corp., December 1983.

[RFC926] International Standards Organization, "Protocol for Providing
         the Connectionless-Mode Network Services", RFC 926, ISO,
         December 1984.

[RFC1005] Khanna, A., and A. Malis, "The ARPANET AHIP-E Host Access
          Protocol (Enhanced AHIP)", RFC 1005, BBN Communications
          Corp., May 1987.

PEOPLE

[DM28] Dennis Morris  <Morrisd@IMO-UVAX.DCA.MIL>

[JBP] Jon Postel <postel@isi.edu>

[JBW1] Joseph Walters, Jr. <JWalters@BBN.COM>

[JGH] Jim Herman <Herman@CCJ.BBN.COM>

[MB] Michael Brescia <Brescia@CCV.BBN.COM>

Reynolds & Postel                                             [Page 189]

RFC 1700                    Assigned Numbers                October 1994

[RXM] Robert Myhill <Myhill@CCS.BBN.COM>

[XEROX] Fonda Pallone <---none--->

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/milnet-parameters

Reynolds & Postel                                             [Page 190]

RFC 1700                    Assigned Numbers                October 1994

XNS PROTOCOL TYPES

Assigned well-known socket numbers

        Routing Information             1
        Echo                            2
        Router Error                    3
        Experimental                40-77

Assigned internet packet types

        Routing Information             1
        Echo                            2
        Error                           3
        Packet Exchange                 4
        Sequenced Packet                5
        PUP                            12
        DoD IP                         13
        Experimental                20-37

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/xns-protocol-types

Reynolds & Postel                                             [Page 191]

RFC 1700                    Assigned Numbers                October 1994

INTERNET / XNS PROTOCOL MAPPINGS

Below are two tables describing the arrangement of protocol fields or
type field assignments so that one could send XNS Datagrams on the
MILNET or Internet Datagrams on 10Mb Ethernet, and also protocol and
type fields so one could encapsulate each kind of Datagram in the
other.

        upper| DoD IP |  PUP   | NS IP  |
lower        |        |        |        |
--------------|--------|--------|--------|
              |  Type  |  Type  |  Type  |
3Mb Ethernet  |  1001  |  1000  |  3000  |
              |  octal |  octal |  octal |
--------------|--------|--------|--------|
              |  Type  |  Type  |  Type  |
10 Mb Ethernet|  0800  |  0200  |  0600  |
              |   hex  |   hex  |   hex  |
--------------|--------|--------|--------|
              |  Link  |  Link  |  Link  |
MILNET        |  155   |  152   |  150   |
              | decimal| decimal| decimal|
--------------|--------|--------|--------|

        upper| DoD IP |  PUP   | NS IP  |
lower        |        |        |        |
--------------|--------|--------|--------|
              |        |Protocol|Protocol|
DoD IP        |   X    |   12   |   22   |
              |        | decimal| decimal|
--------------|--------|--------|--------|
              |        |        |        |
PUP           |   ?    |   X    |   ?    |
              |        |        |        |
--------------|--------|--------|--------|
              |  Type  |  Type  |        |
NS IP         |   13   |   12   |   X    |
              | decimal| decimal|        |
--------------|--------|--------|--------|

[]

Reynolds & Postel                                             [Page 192]

RFC 1700                    Assigned Numbers                October 1994

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/ip-xns-mapping

Reynolds & Postel                                             [Page 193]

RFC 1700                    Assigned Numbers                October 1994

PRONET 80 TYPE NUMBERS

Below is the current list of PRONET 80 Type Numbers.  Note: a protocol
that is on this list does not necessarily mean that there is any
implementation of it on ProNET.

Of these, protocols 1, 14, and 20 are the only ones that have ever
been seen in ARP packets.

For reference, the header is (one byte/line):

        destination hardware address
        source hardware address
        data link header version (2)
        data link header protocol number
        data link header reserved (0)
        data link header reserved (0)

Some protocols have been known to tuck stuff in the reserved fields.

Those who need a protocol number on ProNET-10/80 should contact John
Shriver (jas@proteon.com).

1       IP
2       IP with trailing headers
3       Address Resolution Protocol
4       Proteon HDLC
5       VAX Debugging Protocol (MIT)
10      Novell NetWare (IPX and pre-IPX) (old format,
        3 byte trailer)
11      Vianetix
12      PUP
13      Watstar protocol (University of Waterloo)
14      XNS
15      Diganostics
16      Echo protocol (link level)
17      Banyan Vines
20      DECnet (DEUNA Emulation)
21      Chaosnet
23      IEEE 802.2 or ISO 8802/2 Data Link
24      Reverse Address Resolution Protocol
29      TokenVIEW-10
31      AppleTalk LAP Data Packet
33      Cornell Boot Server Location Protocol
34      Novell NetWare IPX (new format, no trailer,
        new XOR checksum)

Reynolds & Postel                                             [Page 194]

RFC 1700                    Assigned Numbers                October 1994

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/pronet80-type-numbers

Reynolds & Postel                                             [Page 195]

RFC 1700                    Assigned Numbers                October 1994

NOVELL SAP NUMBERS OF INTEREST

For the convenience of the Internet community the IANA maitains a list
of Novell Service Access Point (SAP) numbers.  This list is kept
up-to-date- by contributions from the community.  Please send
corrections and additions to IANA@ISI.EDU.

Novell SAPs
====== ====

Decimal Hex     SAP Description
======= ====    ===============

0       0000    Unknown
1       0001    User
2       0002    User Group
3       0003    Print Queue or Print Group
4       0004    File Server (SLIST source)
5       0005    Job Server
6       0006    Gateway
7       0007    Print Server or Silent Print Server
8       0008    Archive Queue
9       0009    Archive Server
10      000a    Job Queue
11      000b    Administration
15      000F    Novell TI-RPC
23      0017    Diagnostics
32      0020    NetBIOS
33      0021    NAS SNA Gateway
35      0023    NACS Async Gateway or Asynchronous Gateway
36      0024    Remote Bridge or Routing Service
38      0026    Bridge Server or Asynchronous Bridge Server
39      0027    TCP/IP Gateway Server
40      0028    Point to Point (Eicon) X.25 Bridge Server
41      0029    Eicon 3270 Gateway
42      002a    CHI Corp ???
44      002c    PC Chalkboard
45      002d    Time Synchronization Server or Asynchronous Timer
46      002e    SAP Archive Server or SMS Target Service Agent
69      0045    DI3270 Gateway
71      0047    Advertising Print Server
75      004b    Btrieve VAP/NLM 5.0
76      004c    Netware SQL VAP/NLM Server
77      004d    Xtree Network Version Netware XTree
80      0050    Btrieve VAP 4.11
82      0052    QuickLink (Cubix)
83      0053    Print Queue User
88      0058    Multipoint X.25 Eicon Router

Reynolds & Postel                                             [Page 196]

RFC 1700                    Assigned Numbers                October 1994

96      0060    STLB/NLM ???
100     0064    ARCserve
102     0066    ARCserve 3.0
114     0072    WAN Copy Utility
122     007a    TES-Netware for VMS
146     0092    WATCOM Debugger or Emerald Tape Backup Server
149     0095    DDA OBGYN ???
152     0098    Netware Access Server (Asynchronous gateway)
154     009a    Netware for VMS II or Named Pipe Server
155     009b    Netware Access Server
158     009e    Portable Netware Server or SunLink NVT
161     00a1    Powerchute APC UPS NLM
170     00aa    LAWserve ???
172     00ac    Compaq IDA Status Monitor
256     0100    PIPE STAIL ???
258     0102    LAN Protect Bindery
259     0103    Oracle DataBase Server
263     0107    Netware 386 or RSPX Remote Console
271     010f    Novell SNA Gateway
274     0112    Print Server (HP)
276     0114    CSA MUX (f/Communications Executive)
277     0115    CSA LCA (f/Communications Executive)
278     0116    CSA CM  (f/Communications Executive)
279     0117    CSA SMA (f/Communications Executive)
280     0118    CSA DBA (f/Communications Executive)
281     0119    CSA NMA (f/Communications Executive)
282     011a    CSA SSA (f/Communications Executive)
283     011b    CSA STATUS (f/Communications Executive)
286     011e    CSA APPC   (f/Communications Executive)
294     0126    SNA TEST SSA Profile
298     012a    CSA TRACE  (f/Communications Executive)
304     0130    Communications Executive
307     0133    NNS Domain Server or Netware Naming Services Domain
309     0135    Netware Naming Services Profile
311     0137    Netware 386 Print Queue or NNS Print Queue
321     0141    LAN Spool Server (Vap, Intel)
338     0152    IRMALAN Gateway
340     0154    Named Pipe Server
360     0168    Intel PICKIT Comm Server or Intel CAS Talk Server
369     171     UNKNOWN???
371     0173    Compaq
372     0174    Compaq SNMP Agent
373     0175    Compaq
384     0180    XTree Server or XTree Tools
394     18A     UNKNOWN???      Running on a Novell Server
432     01b0    GARP Gateway (net research)
433     01b1    Binfview (Lan Support Group)
447     01bf    Intel LanDesk Manager

Reynolds & Postel                                             [Page 197]

RFC 1700                    Assigned Numbers                October 1994

458     01ca    AXTEC ???
459     01cb    Netmode ???
460     1CC     UNKNOWN???      Sheva netmodem???
472     01d8    Castelle FAXPress Server
474     01da    Castelle LANPress Print Server
476     1DC     Castille FAX/Xerox 7033 Fax Server/Excel Lan Fax
496     01f0    LEGATO ???
501     01f5    LEGATO ???
563     0233    NMS Agent or Netware Management Agent
567     0237    NMS IPX Discovery or LANtern Read/Write Channel
568     0238    NMS IP Discovery or LANtern Trap/Alarm Channel
570     023a    LABtern
572     023c    MAVERICK ???
574     23E     UNKNOWN???      Running on a Novell Server
575     023f    Used by eleven various Novell Servers
590     024e    Remote Something ???
618     026a    Network Management (NMS) Service Console
619     026b    Time Synchronization Server (Netware 4.x)
632     0278    Directory Server (Netware 4.x)
772     0304    Novell SAA Gateway
776     0308    COM or VERMED 1 ???
778     030a    Gallacticom BBS
780     030c    Intel Netport 2 or HP JetDirect or HP Quicksilver
800     0320    Attachmate Gateway
807     0327    Microsoft Diagnostiocs ???
821     0335    MultiTech Systems Multisynch Comm Server
853     0355    Arcada Backup Exec
858     0358    MSLCD1 ???
865     0361    NETINELO ???
894     037e    Twelve Novell file servers in the PC3M family
895     037f    ViruSafe Notify
902     0386    HP Bridge
903     0387    HP Hub
916     0394    NetWare SAA Gateway
923     039b    Lotus Notes
951     03b7    Certus Anti Virus NLM
964     03c4    ARCserve 4.0 (Cheyenne)
967     03c7    LANspool 3.5 (Intel)
990     03de    Gupta Sequel Base Server or NetWare SQL
993     03e1    Univel Unixware
996     03e4    Univel Unixware
1020    03fc    Intel Netport
1021    03fd    Print SErver Queue ???
1034    40A     ipnServer???      Running on a Novell Server
1035    40B     UNKNOWN???
1037    40D     LVERRMAN???     Running on a Novell Server
1038    40E     LVLIC???        Running on a Novell Server
1040    410     UNKNOWN???      Running on a Novell Server

Reynolds & Postel                                             [Page 198]

RFC 1700                    Assigned Numbers                October 1994

1044    0414    Kyocera
1065    0429    Site Lock Virus (Brightworks)
1074    0432    UFHELP R ???
1075    433     Sunoptics SNMP Agent???
1100    044c    Backup ???
1111    457     Canon GP55???   Running on a Canon GP55 network printer
1115    045b    Dell SCSI Array (DSA) Monitor
1200    04b0    CD-Net (Meridian)
1217    4C1     UNKNOWN???
1299    513     Emulux NQA???   Something from Emulex
1312    0520    Site Lock Checks
1321    0529    Site Lock Checks (Brightworks)
1325    052d    Citrix OS/2 App Server
1344    536     Milan ???
1408    0580    McAfee's NetShield anti-virus
1569    621     ??              Something from Emulex
1571    623     UNKNOWN???      Running on a Novell Server
1900    076C    Xerox
2857    0b29    Site Lock
3113    0c29    Site Lock Applications
3116    0c2c    Licensing Server
9088    2380    LAI Site Lock
9100    238c    Meeting Maker
18440   4808    Site Lock Server or Site Lock Metering VAP/NLM
21845   5555    Site Lock User
25362   6312    Tapeware
28416   6f00    Rabbit Gateway (3270)
30467   7703    MODEM??
32770   8002    NetPort Printers (Intel) or LANport
32776   8008    WordPerfect Network Version
34238   85BE    Cisco Enhanced Interior Routing Protocol (EIGRP)
34952   8888    WordPerfect Network Version or Quick Network Management
36864   9000    McAfee's NetShield anti-virus
38404   9604    ??              CSA-NT_MON
61727   f11f    Site Lock Metering VAP/NLM
61951   f1ff    Site Lock
62723   F503    ??              SCA-NT
65535   ffff    Any Service or Wildcard

This file is

        ftp://ftp.isi.edu/in-notes/iana/assignments/novell-sap-numbers

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/novell-sap-numbers

Reynolds & Postel                                             [Page 199]

RFC 1700                    Assigned Numbers                October 1994

POINT-TO-POINT PROTOCOL FIELD ASSIGNMENTS

PPP DLL PROTOCOL NUMBERS

The Point-to-Point Protocol (PPP) Data Link Layer [146,147,175]
contains a 16 bit Protocol field to identify the the encapsulated
protocol.  The Protocol field is consistent with the ISO 3309 (HDLC)
extension mechanism for Address fields.  All Protocols MUST be
assigned such that the least significant bit of the most significant
octet equals "0", and the least significant bit of the least
significant octet equals "1".

Assigned PPP DLL Protocol Numbers

Value (in hex)  Protocol Name

0001            Padding Protocol
0003 to 001f    reserved (transparency inefficient)
0021            Internet Protocol
0023            OSI Network Layer
0025            Xerox NS IDP
0027            DECnet Phase IV
0029            Appletalk
002b            Novell IPX
002d            Van Jacobson Compressed TCP/IP
002f            Van Jacobson Uncompressed TCP/IP
0031            Bridging PDU
0033            Stream Protocol (ST-II)
0035            Banyan Vines
0037            reserved (until 1993)
0039            AppleTalk EDDP
003b            AppleTalk SmartBuffered
003d            Multi-Link
003f            NETBIOS Framing
0041            Cisco Systems
0043            Ascom Timeplex
0045            Fujitsu Link Backup and Load Balancing (LBLB)
0047            DCA Remote Lan
0049            Serial Data Transport Protocol (PPP-SDTP)
004b            SNA over 802.2
004d            SNA
004f            IP6 Header Compression
006f            Stampede Bridging
007d            reserved (Control Escape)             [RFC1661]
007f            reserved (compression inefficient)    [RFC1662]
00cf            reserved (PPP NLPID)
00fb            compression on single link in multilink group
00fd            1st choice compression

Reynolds & Postel                                             [Page 200]

RFC 1700                    Assigned Numbers                October 1994

00ff            reserved (compression inefficient)

0201            802.1d Hello Packets
0203            IBM Source Routing BPDU
0205            DEC LANBridge100 Spanning Tree
0231            Luxcom
0233            Sigma Network Systems

8001-801f       Not Used - reserved                   [RFC1661]
8021            Internet Protocol Control Protocol
8023            OSI Network Layer Control Protocol
8025            Xerox NS IDP Control Protocol
8027            DECnet Phase IV Control Protocol
8029            Appletalk Control Protocol
802b            Novell IPX Control Protocol
802d            reserved
802f            reserved
8031            Bridging NCP
8033            Stream Protocol Control Protocol
8035            Banyan Vines Control Protocol
8037            reserved till 1993
8039            reserved
803b            reserved
803d            Multi-Link Control Protocol
803f            NETBIOS Framing Control Protocol
807d            Not Used - reserved                   [RFC1661]
8041            Cisco Systems Control Protocol
8043            Ascom Timeplex
8045            Fujitsu LBLB Control Protocol
8047            DCA Remote Lan Network Control Protocol (RLNCP)
8049            Serial Data Control Protocol (PPP-SDCP)
804b            SNA over 802.2 Control Protocol
804d            SNA Control Protocol
804f            IP6 Header Compression Control Protocol
006f            Stampede Bridging Control Protocol
80cf            Not Used - reserved                   [RFC1661]
80fb            compression on single link in multilink group control
80fd            Compression Control Protocol
80ff            Not Used - reserved                   [RFC1661]

c021            Link Control Protocol
c023            Password Authentication Protocol
c025            Link Quality Report
c027            Shiva Password Authentication Protocol
c029            CallBack Control Protocol (CBCP)
c081            Container Control Protocol                  [KEN]
c223            Challenge Handshake Authentication Protocol
c281            Proprietary Authentication Protocol         [KEN]

Reynolds & Postel                                             [Page 201]

RFC 1700                    Assigned Numbers                October 1994

c26f            Stampede Bridging Authorization Protocol
c481            Proprietary Node ID Authentication Protocol [KEN]

Protocol field values in the "0xxx" to "3xxx" range identify the
network-layer protocol of specific datagrams, and values in the "8xxx"
to "bxxx" range identify datagrams belonging to the associated Network
Control Protocol (NCP), if any.

It is recommended that values in the "02xx" to "1exx" and "xx01" to
"xx1f" ranges not be assigned, as they are compression inefficient.

Protocol field values in the "4xxx" to "7xxx" range are used for
protocols with low volume traffic which have no associated NCP.

Protocol field values in the "cxxx" to "exxx" range identify datagrams
as Control Protocols (such as LCP).

PPP LCP AND IPCP CODES

The Point-to-Point Protocol (PPP) Link Control Protocol (LCP), [146]
the Compression Control Protocol (CCP), Internet Protocol Control
Protocol (IPCP), [147] and other control protocols, contain an 8 bit
Code field which identifies the type of packet.  These Codes are
assigned as follows:

Code       Packet Type
----       -----------
   1       Configure-Request
   2       Configure-Ack
   3       Configure-Nak
   4       Configure-Reject
   5       Terminate-Request
   6       Terminate-Ack
   7       Code-Reject
   8     * Protocol-Reject
   9     * Echo-Request
  10     * Echo-Reply
  11     * Discard-Request
  12     * Identification
  13     * Time-Remaining
  14     + Reset-Request
  15     + Reset-Reply

* LCP Only
+ CCP Only

PPP LCP CONFIGURATION OPTION TYPES

Reynolds & Postel                                             [Page 202]

RFC 1700                    Assigned Numbers                October 1994

The Point-to-Point Protocol (PPP) Link Control Protocol (LCP)
specifies a number of Configuration Options [146] which are
distinguished by an 8 bit Type field.  These Types are assigned as
follows:

Type       Configuration Option
----       --------------------
   1       Maximum-Receive-Unit
   2       Async-Control-Character-Map
   3       Authentication-Protocol
   4       Quality-Protocol
   5       Magic-Number
   6       RESERVED
   7       Protocol-Field-Compression
   8       Address-and-Control-Field-Compression
   9       FCS-Alternatives
  10       Self-Describing-Pad
  11       Numbered-Mode
  12       Multi-Link-Procedure
  13       Callback
  14       Connect-Time
  15       Compound-Frames
  16       Nominal-Data-Encapsulation
  17       Multilink-MRRU
  18       Multilink-Short-Sequence-Number-Header-Format
  19       Multilink-Endpoint-Discriminator
  20       Proprietary                                     [KEN]
  21       DCE-Identifier                            [SCHNEIDER]

PPP LCP FCS-ALTERNATIVES

The Point-to-Point Protocol (PPP) Link Control Protocol (LCP)
FCS-Alternatives Configuration Option contains an 8-bit Options field
which identifies the FCS used.  These are assigned as follows:

Bit     FCS
----    ----------
  1     Null FCS
  2     CCITT 16-Bit FCS
  4     CCITT 32-bit FCS

PPP LCP CALLBACK OPERATION FIELDS

The Point-to-Point Protocol (PPP) Link Control Protocol (LCP) Callback
Configuration Option contains an 8-bit Operations field which
identifies the format of the Message.  These are assigned as follows:

Reynolds & Postel                                             [Page 203]

RFC 1700                    Assigned Numbers                October 1994

Operation   Description
---------   ---------------------------
        0   Location determined by user authentication.
        1   Dialing string.
        2   Location identifier.
        3   E.164 number.
        4   X.500 distinguished name.
        5   unassigned
        6   Location is determined during CBCP negotiation.

PPP IPCP CONFIGURATION OPTION TYPES

The Point-to-Point Protocol (PPP) Internet Protocol Control Protocol
(IPCP) specifies a number of Configuration Options [147] which are
distinguished by an 8 bit Type field.  These Types are assigned as
follows:

Type       Configuration Option
----       --------------------
   1       IP-Addresses (deprecated)
   2       IP-Compression-Protocol
   3       IP-Address

PPP ATCP CONFIGURATION OPTION TYPES

The Point-to-Point Protocol (PPP) Apple Talk Control Protocol (ATCP)
specifies a number of Configuration Options [RFC-1378] which are
distinguished by an 8 bit Type field.  These Types are assigned as
follows:

Type       Configuration Option
----       --------------------
   1       AppleTalk-Address
   2       Routing-Protocol
   3       Suppress-Broadcasts
   4       AT-Compression-Protocol
   5       Reserved
   6       Server-information
   7       Zone-information
   8       Default-Router-Address

PPP OSINLCP CONFIGURATION OPTION TYPES

The Point-to-Point Protocol (PPP) OSI Network Layer Control Protocol
(OSINLCP) specifies a number of Configuration Options [RFC-1377] which
are distinguished by an 8 bit Type field.  These Types are assigned as
follows:

Reynolds & Postel                                             [Page 204]

RFC 1700                    Assigned Numbers                October 1994

Type       Configuration Option
----       --------------------
   1       Align-NPDU

PPP BRIDGING CONFIGURATION OPTION TYPES

The Point-to-Point Protocol (PPP) Bridging Control Protocol (BCP)
specifies a number of Configuration Options which are distinguished by
an 8 bit Type field.  These Types are assigned as follows:

Type       Configuration Option
----       --------------------
   1       Bridge-Identification
   2       Line-Identification
   3       MAC-Support
   4       Tinygram-Compression
   5       LAN-Identification
   6       MAC-Address
   7       Spanning-Tree-Protocol

PPP BRIDGING MAC TYPES

The Point-to-Point Protocol (PPP) Bridging Control Protocol (BCP)
contains an 8 bit MAC Type field which identifies the MAC
encapsulated.  These Types are assigned as follows:

Type       MAC
----       -----------
   0       Reserved
   1       IEEE 802.3/Ethernet   with cannonical addresses
   2       IEEE 802.4            with cannonical addresses
   3       IEEE 802.5            with non-cannonical addresses
   4       FDDI                  with non-cannonical addresses
 5-10      reserved
  11       IEEE 802.5            with cannonical addresses
  12       FDDI                  with cannonical addresses

PPP BRIDGING SPANNING TREE

The Point-to-Point Protocol (PPP) Bridging Control Protocol (BCP)
Spanning Tree Configuration Option contains an 8-bit Protocol field
which identifies the spanning tree used.  These are assigned as
follows:

Protocol  Spanning Tree
--------  ---------------
   0      Null - no spanning tree protocol supported
   1      IEEE 802.1D spanning tree protocol

Reynolds & Postel                                             [Page 205]

RFC 1700                    Assigned Numbers                October 1994

   2      IEEE 802.1G extended spanning tree protocol
   3      IBM source route spanning tree protocol
   4      DEC LANbridge 100 spanning tree protocol

REFERENCES

[RFC1661] Simpson, W., Editor, "The Point-to-Point Protocol (PPP)",
          STD 51, RFC 1661, Daydreamer, July 1994.

[RFC1662] Simpson, W., Editor, "PPP in HDLC-like Framing", STD 51, RFC
          1662, Daydreamer, July 1994.

PEOPLE

[KEN]  <ken@funk.com>

[SCHNEIDER] Kevin Schneider <kevin@adtran.com>

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/ppp-numbers

Reynolds & Postel                                             [Page 206]

RFC 1700                    Assigned Numbers                October 1994

MACHINE NAMES

These are the Official Machine Names as they appear in the Domain Name
System HINFO records and the NIC Host Table.  Their use is described
in [RFC952].

A machine name or CPU type may be up to 40 characters taken from the
set of uppercase letters, digits, and the two punctuation characters
hyphen and slash.  It must start with a letter, and end with a letter
or digit.

AMIGA-500
AMIGA-500/010
AMIGA-500/020
AMIGA-500/EC030
AMIGA-500/030
AMIGA-600
AMIGA-1000
AMIGA-1000/010
AMIGA-1000/020
AMIGA-1000/EC030
AMIGA-1000/030
AMIGA-1200
AMIGA-1200/EC030
AMIGA-1200/030
AMIGA-1200/EC040
AMIGA-1200/LC040
AMIGA-1200/040
AMIGA-2000
AMIGA-2000/010
AMIGA-2000/020
AMIGA-2000/EC030
AMIGA-2000/030
AMIGA-2000/LC040
AMIGA-2000/EC040
AMIGA-2000/040
AMIGA-3000
AMIGA-3000/EC040
AMIGA-3000/LC040
AMIGA-3000/040
AMIGA-3000/060
AMIGA-4000/EC030
AMIGA-4000/030
AMIGA-4000/LC040
AMIGA-4000/040
AMIGA-4000/060
ALTO

Reynolds & Postel                                             [Page 207]

RFC 1700                    Assigned Numbers                October 1994

ALTOS-6800
AMDAHL-V7
APOLLO
APPLE-MACINTOSH
APPLE-POWERBOOK
ATARI-104ST
ATT-3B1
ATT-3B2
ATT-3B20
ATT-7300
AXP
BBN-C/60
BURROUGHS-B/29
BURROUGHS-B/4800
BUTTERFLY
C/30
C/70
CADLINC
CADR
CDC-170
CDC-170/750
CDC-173
CDTV
CDTV/060
CD32
CELERITY-1200
CLUB-386
COMPAQ-386/20
COMTEN-3690
CP8040
CRAY-1
CRAY-X/MP
CRAY-2
CTIWS-117
DANDELION
DEC-10
DEC-1050
DEC-1077
DEC-1080
DEC-1090
DEC-1090B
DEC-1090T
DEC-2020T
DEC-2040
DEC-2040T
DEC-2050T
DEC-2060
DEC-2060T

Reynolds & Postel                                             [Page 208]

RFC 1700                    Assigned Numbers                October 1994

DEC-2065
DEC-AXP
DEC-FALCON
DEC-KS10
DECSTATION
DEC-VAX
DEC-VAXCLUSTER
DEC-VAXSTATION
DEC-VAX-11730
DORADO
DPS8/70M
ELXSI-6400
EVEREX-386
FOONLY-F2
FOONLY-F3
FOONLY-F4
GOULD
GOULD-6050
GOULD-6080
GOULD-9050
GOULD-9080
H-316
H-60/68
H-68
H-68/80
H-89
HONEYWELL-DPS-6
HONEYWELL-DPS-8/70
HP3000
HP3000/64
IBM-158
IBM-360/67
IBM-370/3033
IBM-3081
IBM-3084QX
IBM-3101
IBM-4331
IBM-4341
IBM-4361
IBM-4381
IBM-4956
IBM-6152
IBM-PC
IBM-PC/AT
IBM-PC/RT
IBM-PC/XT
IBM-RS/6000
IBM-SERIES/1

Reynolds & Postel                                             [Page 209]

RFC 1700                    Assigned Numbers                October 1994

IMAGEN
IMAGEN-8/300
IMSAI
INTEGRATED-SOLUTIONS
INTEGRATED-SOLUTIONS-68K
INTEGRATED-SOLUTIONS-CREATOR
INTEGRATED-SOLUTIONS-CREATOR-8
INTEL-386
INTEL-IPSC
IS-1
IS-68010
LMI
LSI-11
LSI-11/2
LSI-11/23
LSI-11/73
M68000
MAC-II
MAC-POWERBOOK
MACINTOSH
MASSCOMP
MC500
MC68000
MICROPORT
MICROVAX
MICROVAX-I
MV/8000
NAS3-5
NCR-COMTEN-3690
NEXT/N1000-316
NOW
ONYX-Z8000
PDP-11
PDP-11/3
PDP-11/23
PDP-11/24
PDP-11/34
PDP-11/40
PDP-11/44
PDP-11/45
PDP-11/50
PDP-11/70
PDP-11/73
PE-7/32
PE-3205
PERQ
PLEXUS-P/60
PLI

Reynolds & Postel                                             [Page 210]

RFC 1700                    Assigned Numbers                October 1994

PLURIBUS
PRIME-2350
PRIME-2450
PRIME-2755
PRIME-9655
PRIME-9755
PRIME-9955II
PRIME-2250
PRIME-2655
PRIME-9955
PRIME-9950
PRIME-9650
PRIME-9750
PRIME-2250
PRIME-750
PRIME-850
PRIME-550II
PYRAMID-90
PYRAMID-90MX
PYRAMID-90X
RIDGE
RIDGE-32
RIDGE-32C
ROLM-1666
RS/6000
S1-MKIIA
SMI
SEQUENT-BALANCE-8000
SIEMENS
SILICON-GRAPHICS
SILICON-GRAPHICS-IRIS
SGI-IRIS-2400
SGI-IRIS-2500
SGI-IRIS-3010
SGI-IRIS-3020
SGI-IRIS-3030
SGI-IRIS-3110
SGI-IRIS-3115
SGI-IRIS-3120
SGI-IRIS-3130
SGI-IRIS-4D/20
SGI-IRIS-4D/20G
SGI-IRIS-4D/25
SGI-IRIS-4D/25G
SGI-IRIS-4D/25S
SGI-IRIS-4D/50
SGI-IRIS-4D/50G
SGI-IRIS-4D/50GT

Reynolds & Postel                                             [Page 211]

RFC 1700                    Assigned Numbers                October 1994

SGI-IRIS-4D/60
SGI-IRIS-4D/60G
SGI-IRIS-4D/60T
SGI-IRIS-4D/60GT
SGI-IRIS-4D/70
SGI-IRIS-4D/70G
SGI-IRIS-4D/70GT
SGI-IRIS-4D/80GT
SGI-IRIS-4D/80S
SGI-IRIS-4D/120GTX
SGI-IRIS-4D/120S
SGI-IRIS-4D/210GTX
SGI-IRIS-4D/210S
SGI-IRIS-4D/220GTX
SGI-IRIS-4D/220S
SGI-IRIS-4D/240GTX
SGI-IRIS-4D/240S
SGI-IRIS-4D/280GTX
SGI-IRIS-4D/280S
SGI-IRIS-CS/12
SGI-IRIS-4SERVER-8
SPERRY-DCP/10
SUN
SUN-2
SUN-2/50
SUN-2/100
SUN-2/120
SUN-2/130
SUN-2/140
SUN-2/150
SUN-2/160
SUN-2/170
SUN-3/50
SUN-3/60
SUN-3/75
SUN-3/80
SUN-3/110
SUN-3/140
SUN-3/150
SUN-3/160
SUN-3/180
SUN-3/200
SUN-3/260
SUN-3/280
SUN-3/470
SUN-3/480
SUN-4/60
SUN-4/110

Reynolds & Postel                                             [Page 212]

RFC 1700                    Assigned Numbers                October 1994

SUN-4/150
SUN-4/200
SUN-4/260
SUN-4/280
SUN-4/330
SUN-4/370
SUN-4/390
SUN-50
SUN-100
SUN-120
SUN-130
SUN-150
SUN-170
SUN-386i/250
SUN-68000
SYMBOLICS-3600
SYMBOLICS-3670
SYMMETRIC-375
SYMULT
TANDEM-TXP
TANDY-6000
TEK-6130
TI-EXPLORER
TP-4000
TRS-80
UNIVAC-1100
UNIVAC-1100/60
UNIVAC-1100/62
UNIVAC-1100/63
UNIVAC-1100/64
UNIVAC-1100/70
UNIVAC-1160
UNKNOWN
VAX
VAX-11/725
VAX-11/730
VAX-11/750
VAX-11/780
VAX-11/785
VAX-11/790
VAX-11/8600
VAX-8600
VAXCLUSTER
VAXSTATION
WANG-PC002
WANG-VS100
WANG-VS400
WYSE-386

Reynolds & Postel                                             [Page 213]

RFC 1700                    Assigned Numbers                October 1994

WYSE-WN5004
WYSE-WN5008
WYSE-WN5104
WYSE-WN5108
WYSE-WX15C
WYSE-WX17C
WYSE-WX17M
WYSE-WX19C
WYSE-WX19M
WYSE-WYX14M
WYSE-WYX5
XEROX-1108
XEROX-8010
ZENITH-148

REFERENCES

[RFC952] Harrenstien, K., Stahl, M., and E. Feinler, "DoD Internet
         Host Table Specification", RFC 952, SRI, October 1985.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/machine-names

Reynolds & Postel                                             [Page 214]

RFC 1700                    Assigned Numbers                October 1994

OPERATING SYSTEM NAMES

These are the Official System Names as they appear in the Domain Name
System HINFO records and the NIC Host Table.  Their use is described in
[RFC952].

A system name may be up to 40 characters taken from the set of
uppercase letters, digits, and the three punctuation characters
hyphen, period, and slash.  It must start with a letter, and end with
a letter or digit.

AEGIS
AMIGA-OS-1.2
AMIGA-OS-1.3
AMIGA-OS-2.0
AMIGA-OS-2.1
AMIGA-OS-3.0
AMIGA-OS-3.1
APOLLO
AIX/370
AIX-PS/2
BS-2000
CEDAR
CGW
CHORUS
CHRYSALIS
CMOS
CMS
COS
CPIX
CTOS
CTSS
DCN
DDNOS
DOMAIN
DOS
EDX
ELF
EMBOS
EMMOS
EPOS
FOONEX
FORTH
FUZZ
GCOS
GPOS

Reynolds & Postel                                             [Page 215]

RFC 1700                    Assigned Numbers                October 1994

HDOS
IMAGEN
INTERCOM
IMPRESS
INTERLISP
IOS
IRIX
ISI-68020
ITS
LISP
LISPM
LOCUS
MACOS
MINOS
MOS
MPE5
MPE/V
MPE/IX
MSDOS
MULTICS
MUSIC
MUSIC/SP
MVS
MVS/SP
NEXUS
NMS
NONSTOP
NOS-2
NTOS
OPENVMS
OS/DDP
OS/2
OS4
OS86
OSX
PCDOS
PERQ/OS
PLI
PSDOS/MIT
PRIMOS
RMX/RDOS
ROS
RSX11M
RTE-A
SATOPS
SCO-OPEN-DESKTOP-1.0
SCO-OPEN-DESKTOP-1.1
SCO-OPEN-DESKTOP-2.0

Reynolds & Postel                                             [Page 216]

RFC 1700                    Assigned Numbers                October 1994

SCO-OPEN-DESKTOP-3.0
SCO-OPEN-DESKTOP-LITE-3.0
SCO-OPEN-SERVER-3.0
SCO-UNIX-3.2.0
SCO-UNIX-3.2V2.0
SCO-UNIX-3.2V2.1
SCO-UNIX-3.2V4.0
SCO-UNIX-3.2V4.1
SCO-UNIX-3.2V4.2
SCO-XENIX-386-2.3.2
SCO-XENIX-386-2.3.3
SCO-XENIX-386-2.3.4
SCS
SIMP
SUN
SUN-OS-3.5
SUN-OS-4.0
SWIFT
TAC
TANDEM
TENEX
THE-MAJOR-BBS
TOPS10
TOPS20
TOS
TP3010
TRSDOS
ULTRIX
UNIX
UNIX-BSD
UNIX-V1AT
UNIX-V
UNIX-V.1
UNIX-V.2
UNIX-V.3
UNIX-PC
UNKNOWN
UT2D
V
VM
VM/370
VM/CMS
VM/SP
VMS
VMS/EUNICE
VRTX
WAITS
WANG

Reynolds & Postel                                             [Page 217]

RFC 1700                    Assigned Numbers                October 1994

WIN32
WYSE-WYXWARE
X11R3
XDE
XENIX

REFERENCES

[RFC952] Harrenstien, K., Stahl, M., and E. Feinler, "DoD Internet
         Host Table Specification", RFC 952, SRI, October 1985.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/operating-system-names

Reynolds & Postel                                             [Page 218]

RFC 1700                    Assigned Numbers                October 1994

TERMINAL TYPE NAMES

These are the Official Terminal Type Names.  Their use is described in
[RFC930].  The maximum length of a name is 40 characters.

A terminal names may be up to 40 characters taken from the set of
uppercase letters, digits, and the two punctuation characters hyphen
and slash.  It must start with a letter, and end with a letter or
digit.

ADDS-CONSUL-980
ADDS-REGENT-100
ADDS-REGENT-20
ADDS-REGENT-200
ADDS-REGENT-25
ADDS-REGENT-40
ADDS-REGENT-60
ADDS-VIEWPOINT
ADDS-VIEWPOINT-60
AED-512
AMPEX-DIALOGUE-210
AMPEX-DIALOGUE-80
AMPEX-210
AMPEX-230
ANDERSON-JACOBSON-510
ANDERSON-JACOBSON-630
ANDERSON-JACOBSON-832
ANDERSON-JACOBSON-841
ANN-ARBOR-AMBASSADOR
ANSI
ARDS
BITGRAPH
BUSSIPLEXER
CALCOMP-565
CDC-456
CDI-1030
CDI-1203
C-ITOH-101
C-ITOH-50
C-ITOH-80
CLNZ
COMPUCOLOR-II
CONCEPT-100
CONCEPT-104
CONCEPT-108
DATA-100

Reynolds & Postel                                             [Page 219]

RFC 1700                    Assigned Numbers                October 1994

DATA-GENERAL-6053
DATAGRAPHIX-132A
DATAMEDIA-1520
DATAMEDIA-1521
DATAMEDIA-2500
DATAMEDIA-3025
DATAMEDIA-3025A
DATAMEDIA-3045
DATAMEDIA-3045A
DATAMEDIA-DT80/1
DATAPOINT-2200
DATAPOINT-3000
DATAPOINT-3300
DATAPOINT-3360
DEC-DECWRITER-I
DEC-DECWRITER-II
DEC-GIGI
DEC-GT40
DEC-GT40A
DEC-GT42
DEC-LA120
DEC-LA30
DEC-LA36
DEC-LA38
DEC-VT05
DEC-VT100
DEC-VT101
DEC-VT102
DEC-VT125
DEC-VT131
DEC-VT132
DEC-VT200
DEC-VT220
DEC-VT240
DEC-VT241
DEC-VT300
DEC-VT320
DEC-VT340
DEC-VT50
DEC-VT50H
DEC-VT52
DEC-VT55
DEC-VT61
DEC-VT62
DELTA-DATA-5000
DELTA-DATA-NIH-7000
DELTA-TELTERM-2
DIABLO-1620

Reynolds & Postel                                             [Page 220]

RFC 1700                    Assigned Numbers                October 1994

DIABLO-1640
DIGILOG-333
DTC-300S
DTC-382
EDT-1200
ETOS52-APL
ETOS52-CRT
ETOS52-FDW
ETOS52-FUP
ETOS52-GFM
ETOS52-SPR
EXECUPORT-4000
EXECUPORT-4080
FACIT-TWIST-4440
FREEDOM-100
FREEDOM-110
FREEDOM-200
GENERAL-TERMINAL-100A
GENERAL-TERMINAL-101
GIPSI-TX-M
GIPSI-TX-ME
GIPSI-TX-C4
GIPSI-TX-C8
GSI
HAZELTINE-1420
HAZELTINE-1500
HAZELTINE-1510
HAZELTINE-1520
HAZELTINE-1552
HAZELTINE-2000
HAZELTINE-ESPRIT
HITACHI-5601
HITACHI-5603
HITACHI-5603E
HITACHI-5603EA
HITACHI-560X
HITACHI-560XE
HITACHI-560XEA
HITACHI-560PR
HITACHI-HOAP1
HITACHI-HOAP2
HITACHI-HOAP3
HITACHI-HOAP4
HP-2392
HP-2621
HP-2621A
HP-2621P
HP-2623

Reynolds & Postel                                             [Page 221]

RFC 1700                    Assigned Numbers                October 1994

HP-2626
HP-2626A
HP-2626P
HP-2627
HP-2640
HP-2640A
HP-2640B
HP-2645
HP-2645A
HP-2648
HP-2648A
HP-2649
HP-2649A
IBM-1050
IBM-2741
IBM-3101
IBM-3101-10
IBM-3151
IBM-3179-2
IBM-3180-2
IBM-3196-A1
IBM-3275-2
IBM-3276-2
IBM-3276-3
IBM-3276-4
IBM-3277-2
IBM-3278-2
IBM-3278-3
IBM-3278-4
IBM-3278-5
IBM-3279-2
IBM-3279-3
IBM-3477-FC
IBM-3477-FG
IBM-5081
IBM-5151
IBM-5154
IBM-5251-11
IBM-5291-1
IBM-5292-2
IBM-5555-B01
IBM-5555-C01
IBM-6153
IBM-6154
IBM-6155
IBM-AED
IBM-3278-2-E
IBM-3278-3-E

Reynolds & Postel                                             [Page 222]

RFC 1700                    Assigned Numbers                October 1994

IBM-3278-4-E
IBM-3278-5-E
IBM-3279-2-E
IBM-3279-3-E
IMLAC
INFOTON-100
INFOTON-400
INFOTONKAS
ISC-8001
LSI-ADM-1
LSI-ADM-11
LSI-ADM-12
LSI-ADM-2
LSI-ADM-20
LSI-ADM-22
LSI-ADM-220
LSI-ADM-3
LSI-ADM-31
LSI-ADM-3A
LSI-ADM-42
LSI-ADM-5
MEMOREX-1240
MICROBEE
MICROTERM-ACT-IV
MICROTERM-ACT-V
MICROTERM-ERGO-301
MICROTERM-MIME-1
MICROTERM-MIME-2
MICROTERM-ACT-5A
MICROTERM-TWIST
NEC-5520
NETRONICS
NETWORK-VIRTUAL-TERMINAL
OMRON-8025AG
PERKIN-ELMER-550
PERKIN-ELMER-1100
PERKIN-ELMER-1200
PERQ
PLASMA-PANEL
QUME-SPRINT-5
QUME-101
QUME-102
SOROC
SOROC-120
SOUTHWEST-TECHNICAL-PRODUCTS-CT82
SUN
SUPERBEE
SUPERBEE-III-M

Reynolds & Postel                                             [Page 223]

RFC 1700                    Assigned Numbers                October 1994

TEC
TEKTRONIX-4006
TEKTRONIX-4010
TEKTRONIX-4012
TEKTRONIX-4013
TEKTRONIX-4014
TEKTRONIX-4023
TEKTRONIX-4024
TEKTRONIX-4025
TEKTRONIX-4027
TEKTRONIX-4105
TEKTRONIX-4107
TEKTRONIX-4110
TEKTRONIX-4112
TEKTRONIX-4113
TEKTRONIX-4114
TEKTRONIX-4115
TEKTRONIX-4125
TEKTRONIX-4404
TELERAY-1061
TELERAY-3700
TELERAY-3800
TELETEC-DATASCREEN
TELETERM-1030
TELETYPE-33
TELETYPE-35
TELETYPE-37
TELETYPE-38
TELETYPE-40
TELETYPE-43
TELEVIDEO-910
TELEVIDEO-912
TELEVIDEO-920
TELEVIDEO-920B
TELEVIDEO-920C
TELEVIDEO-925
TELEVIDEO-955
TELEVIDEO-950
TELEVIDEO-970
TELEVIDEO-975
TERMINET-1200
TERMINET-300
TI-700
TI-733
TI-735
TI-743
TI-745
TI-800

Reynolds & Postel                                             [Page 224]

RFC 1700                    Assigned Numbers                October 1994

TYCOM
UNIVAC-DCT-500
VIDEO-SYSTEMS-1200
VIDEO-SYSTEMS-5000
VOLKER-CRAIG-303
VOLKER-CRAIG-303A
VOLKER-CRAIG-404
VISUAL-200
VISUAL-55
WYSE-30
WYSE-50
WYSE-60
WYSE-75
WYSE-85
WYSE-99GT
WYSE-100
WYSE-120
WYSE-120ES
WYSE-150
WYSE-150ES
WYSE-160
WYSE-160ES
WYSE-185
WYSE-185ES
WYSE-285
WYSE-285ES
WYSE-325
WYSE-325ES
WYSE-350
WYSE-370
XEROX-1720
XTERM
ZENITH-H19
ZENITH-Z29
ZENTEC-30

REFERENCES

[RFC930] Solomon, M., and E. Wimmers, "Telnet Terminal Type Option",
         RFC 930, University of Wisconsin, Madison, January 1985.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/terminal-type-names

Reynolds & Postel                                             [Page 225]

RFC 1700                    Assigned Numbers                October 1994

PROTOCOL AND SERVICE NAMES

These are the Official Protocol Names as they appear in the Domain
Name System WKS records and the NIC Host Table.  Their use is
described in [RFC952].

A protocol or service may be up to 40 characters taken from the set of
uppercase letters, digits, and the punctuation character hyphen.  It
must start with a letter, and end with a letter or digit.

ARGUS               - ARGUS Protocol
ARP                 - Address Resolution Protocol
AUTH                - Authentication Service
BBN-RCC-MON         - BBN RCC Monitoring
BL-IDM              - Britton Lee Intelligent Database Machine
BOOTP               - Bootstrap Protocol
BOOTPC              - Bootstrap Protocol Client
BOOTPS              - Bootstrap Protocol Server
BR-SAT-MON          - Backroom SATNET Monitoring
CFTP                - CFTP
CHAOS               - CHAOS Protocol
CHARGEN             - Character Generator Protocol
CISCO-FNA           - CISCO FNATIVE
CISCO-TNA           - CISCO TNATIVE
CISCO-SYS           - CISCO SYSMAINT
CLOCK               - DCNET Time Server Protocol
CMOT                - Common Mgmnt Info Ser and Prot over TCP/IP
COOKIE-JAR          - Authentication Scheme
CSNET-NS            - CSNET Mailbox Nameserver Protocol
DAYTIME             - Daytime Protocol
DCN-MEAS            - DCN Measurement Subsystems Protocol
DCP                 - Device Control Protocol
DGP                 - Dissimilar Gateway Protocol
DISCARD             - Discard Protocol
DMF-MAIL            - Digest Message Format for Mail
DOMAIN              - Domain Name System
ECHO                - Echo Protocol
EGP                 - Exterior Gateway Protocol
EHF-MAIL            - Encoding Header Field for Mail
EMCON               - Emission Control Protocol
EMFIS-CNTL          - EMFIS Control Service
EMFIS-DATA          - EMFIS Data Service
FCONFIG             - Fujitsu Config Protocol
FINGER              - Finger Protocol
FTP                 - File Transfer Protocol
FTP-DATA            - File Transfer Protocol Data

Reynolds & Postel                                             [Page 226]

RFC 1700                    Assigned Numbers                October 1994

GGP                 - Gateway Gateway Protocol
GRAPHICS            - Graphics Protocol
HMP                 - Host Monitoring Protocol
HOST2-NS            - Host2 Name Server
HOSTNAME            - Hostname Protocol
ICMP                - Internet Control Message Protocol
IGMP                - Internet Group Management Protocol
IGP                 - Interior Gateway Protocol
IMAP2               - Interim Mail Access Protocol version 2
INGRES-NET          - INGRES-NET Service
IP                  - Internet Protocol
IPCU                - Internet Packet Core Utility
IPPC                - Internet Pluribus Packet Core
IP-ARC              - Internet Protocol on ARCNET
IP-ARPA             - Internet Protocol on ARPANET
IP-CMPRS            - Compressing TCP/IP Headers
IP-DC               - Internet Protocol on DC Networks
IP-DVMRP            - Distance Vector Multicast Routing Protocol
IP-E                - Internet Protocol on Ethernet Networks
IP-EE               - Internet Protocol on Exp. Ethernet Nets
IP-FDDI             - Transmission of IP over FDDI
IP-HC               - Internet Protocol on Hyperchannnel
IP-IEEE             - Internet Protocol on IEEE 802
IP-IPX              - Transmission of 802.2 over IPX Networks
IP-MTU              - IP MTU Discovery Options
IP-NETBIOS          - Internet Protocol over NetBIOS Networks
IP-SLIP             - Transmission of IP over Serial Lines
IP-WB               - Internet Protocol on Wideband Network
IP-X25              - Internet Protocol on X.25 Networks
IRTP                - Internet Reliable Transaction Protocol
ISI-GL              - ISI Graphics Language Protocol
ISO-TP4             - ISO Transport Protocol Class 4
ISO-TSAP            - ISO TSAP
LA-MAINT            - IMP Logical Address Maintenance
LARP                - Locus Address Resoultion Protocol
LDP                 - Loader Debugger Protocol
LEAF-1              - Leaf-1 Protocol
LEAF-2              - Leaf-2 Protocol
LINK                - Link Protocol
LOC-SRV             - Location Service
LOGIN               - Login Host Protocol
MAIL                - Format of Electronic Mail Messages
MERIT-INP           - MERIT Internodal Protocol
METAGRAM            - Metagram Relay
MIB                 - Management Information Base
MIT-ML-DEV          - MIT ML Device
MFE-NSP             - MFE Network Services Protocol
MIT-SUBNET          - MIT Subnet Support

Reynolds & Postel                                             [Page 227]

RFC 1700                    Assigned Numbers                October 1994

MIT-DOV             - MIT Dover Spooler
MPM                 - Internet Message Protocol (Multimedia Mail)
MPM-FLAGS           - MPM Flags Protocol
MPM-SND             - MPM Send Protocol
MSG-AUTH            - MSG Authentication Protocol
MSG-ICP             - MSG ICP Protocol
MUX                 - Multiplexing Protocol
NAMESERVER          - Host Name Server
NETBIOS-DGM         - NETBIOS Datagram Service
NETBIOS-NS          - NETBIOS Name Service
NETBIOS-SSN         - NETBIOS Session Service
NETBLT              - Bulk Data Transfer Protocol
NETED               - Network Standard Text Editor
NETRJS              - Remote Job Service
NI-FTP              - NI File Transfer Protocol
NI-MAIL             - NI Mail Protocol
NICNAME             - Who Is Protocol
NFILE               - A File Access Protocol
NNTP                - Network News Transfer Protocol
NSW-FE              - NSW User System Front End
NTP                 - Network Time Protocol
NVP-II              - Network Voice Protocol
OSPF                - Open Shortest Path First Interior GW Protocol
PCMAIL              - Pcmail Transport Protocol
POP2                - Post Office Protocol - Version 2
POP3                - Post Office Protocol - Version 3
PPP                 - Point-to-Point Protocol
PRM                 - Packet Radio Measurement
PUP                 - PUP Protocol
PWDGEN              - Password Generator Protocol
QUOTE               - Quote of the Day Protocol
RARP                - A Reverse Address Resolution Protocol
RATP                - Reliable Asynchronous Transfer Protocol
RE-MAIL-CK          - Remote Mail Checking Protocol
RDP                 - Reliable Data Protocol
RIP                 - Routing Information Protocol
RJE                 - Remote Job Entry
RLP                 - Resource Location Protocol
RTELNET             - Remote Telnet Service
RVD                 - Remote Virtual Disk Protocol
SAT-EXPAK           - Satnet and Backroom EXPAK
SAT-MON             - SATNET Monitoring
SEP                 - Sequential Exchange Protocol
SFTP                - Simple File Transfer Protocol
SGMP                - Simple Gateway Monitoring Protocol
SNMP                - Simple Network Management Protocol
SMI                 - Structure of Management Information
SMTP                - Simple Mail Transfer Protocol

Reynolds & Postel                                             [Page 228]

RFC 1700                    Assigned Numbers                October 1994

SQLSRV              - SQL Service
ST                  - Stream Protocol
STATSRV             - Statistics Service
SU-MIT-TG           - SU/MIT Telnet Gateway Protocol
SUN-RPC             - SUN Remote Procedure Call
SUPDUP              - SUPDUP Protocol
SUR-MEAS            - Survey Measurement
SWIFT-RVF           - Remote Virtual File Protocol
TACACS-DS           - TACACS-Database Service
TACNEWS             - TAC News
TCP                 - Transmission Control Protocol
TCP-ACO             - TCP Alternate Checksum Option
TELNET              - Telnet Protocol
TFTP                - Trivial File Transfer Protocol
THINWIRE            - Thinwire Protocol
TIME                - Time Server Protocol
TP-TCP              - ISO Transport Service on top of the TCP
TRUNK-1             - Trunk-1 Protocol
TRUNK-2             - Trunk-2 Protocol
UCL                 - University College London Protocol
UDP                 - User Datagram Protocol
NNTP                - Network News Transfer Protocol
USERS               - Active Users Protocol
UUCP-PATH           - UUCP Path Service
VIA-FTP             - VIA Systems-File Transfer Protocol
VISA                - VISA Protocol
VMTP                - Versatile Message Transaction Protocol
WB-EXPAK            - Wideband EXPAK
WB-MON              - Wideband Monitoring
XNET                - Cross Net Debugger
XNS-IDP             - Xerox NS IDP

REFERENCES

[RFC952] Harrenstien, K., Stahl, M., and E. Feinler, "DoD Internet
         Host Table Specification", RFC 952, SRI, October 1985.

[]

URL = ftp://ftp.isi.edu/in-notes/iana/assignments/service-names

Reynolds & Postel                                             [Page 229]

RFC 1700                    Assigned Numbers                October 1994

Security Considerations

   Security issues are not discussed in this memo.

Authors' Addresses

   Joyce K. Reynolds
   USC/Information Sciences Institute
   4676 Admiralty Way
   Marina del Rey, California  90292-6695

   Phone: +1 310-822-1511
   EMail: jkrey@isi.edu

   Jon Postel
   USC/Information Sciences Institute
   4676 Admiralty Way
   Marina del Rey, California  90292-6695

   Phone: +1 310-822-1511
   EMail: postel@isi.edu

   []

Reynolds & Postel                                             [Page 230]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\simple\readme.txt ===
// MohsinA, 10-Feb-97

Fixing bugs and testing, simple tcp services.

> Control Panle, Network, add services, Simple TCP/IP Services.

> ren  \winnt\system32\simptcp.dll \winnt\system32\simptcp.old
> copy obj\i386\simptcp.dll \winnt\system32
> Control Panel, Network, Services, Simple TCP/IP Services
    stop, and then restart.

Testing:
> telnet 
   connect: localhost
   port:    daytime
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\tftp\calltree.txt ===
mainCRTStartup
              _setargv
              _setdefaultprecision
              _initterm
              _XcptFilter
              main
main
              TftpdPrintLog
              StartServiceCtrlDispatcher: TftpdStart
TftpdStart
              TftpdPrintLog
              TftpdServiceExit
              CreateThread: TftpdMasterThread
TftpdMasterThread
              TftpdPrintLog
              TftpdErrorPacket
              TftpdServiceExit
              CreateThread: TftpdHandleRead
              CreateThread: TftpdHandleWrite
TftpdControlHandler
              TftpdPrintLog
              TftpdServiceExit
TftpdServiceExit
              TftpdPrintLog
TftpdErrorPacket
              TftpdPrintLog
TftpdHandleRead
              __WSAFDIsSet
              TftpdPrintLog
              TftpdErrorPacket
              validfile
TftpdHandleWrite
              __WSAFDIsSet
              TftpdPrintLog
              TftpdDoWrite
              TftpdErrorPacket
              validfile
TftpdDoWrite
              TftpdPrintLog
TftpdPrintLog
              TftpdLogEvent
TftpdLogEvent
__WSAFDIsSet
_XcptFilter
_initterm
_setdefaultprecision
              _controlfp
_matherr
_setargv
_except_handler3
_controlfp
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\tftp\rfc2090.txt ===
ftp://ds.internic.net/rfc/rfc2090.txt





Network Working Group                                       A. Emberson
Request for Comments: 2090                   Lanworks Technologies Inc.
Category: Experimental                                    February 1997


                         TFTP Multicast Option

Status of this Memo

   This memo defines an Experimental Protocol for the Internet
   community.  This memo does not specify an Internet standard of any
   kind.  Discussion and suggestions for improvement are requested.
   Distribution of this memo is unlimited.

Abstract

   The Trivial File Transfer Protocol [1] is a simple, lock-step, file
   transfer protocol which allows a client to get or put a file onto a
   remote host.

   This document describes a new TFTP option. This new option will allow
   the multiple clients to receive the same file concurrently through
   the use of Multicast packets. The TFTP Option Extension mechanism is
   described in [2].

   Often when similar computers are booting remotely they will each
   download the same image file. By adding multicast into the TFTP
   option  set,  two  or  more  computers  can  download  a  file
   concurrently, thus increasing network efficiency.

   This document assumes that the reader is familiar with the
   terminology and notation of both [1] and [2].

Multicast Option Specification

   The TFTP Read Request packet is modified to include the multicast
   option as follows:

      +--------+----~~----+---+--~~--+---+-----------+---+---+
      |  opc=1 | filename | 0 | mode | 0 | multicast | 0 | 0 |
      +--------+----~~----+---+--~~--+---+-----------+---+---+

   opc
      The opcode field contains a 1, for Read Requests, as defined
      in [1].


Emberson                      Experimental                      [Page 1]


RFC 2090                 TFTP Multicast Option             February 1997


   filename
      The name of the file to be read, as defined in [1]. This is a
      NULL-terminated field.

   mode
      The mode of the file transfer: "netascii", "octet", or
      "mail", as defined in [1]. This is a NULL-terminated field.

   multicast
      Request  for  multicast  transmission  of  the  file  option,
      "multicast" (case insensitive). This is a NULL-terminated
      field. The value for this option request is a string of zero
      length.

   If the server is willing to accept the multicast option, it
   sends an Option Acknowledgment (OACK) to the client including
   the multicast option, as defined in [2]. The OACK to the client
   will specify the multicast address and flag to indicate whether
   that client should send block acknowledgments (ACK).

     +-------+-----------+---+-------~~-------+---+
     |  opc  | multicast | 0 | addr, port, mc | 0 |
     +-------+-----------+---+-------~~-------+---+

   opc
      The  opcode  field  contains  the  number  6,  for  Option
      Acknowledgment, as defined in [2].

   multicast
      Acknowledges the multicast option. This is a NULL-terminated
      field.

   addr
      The addr field contains the multicast IP address. This field
      is terminated with a comma.

   port
      The port field contains the destination port of the multicast
      packets. The use of Registered Port number 1758 (tftp-mcast)
      is recommended. This field is terminated with a comma.

   mc
      This field will be either 0 or 1, to tell the client whether
      it is the master client, that is, it is responsible for
      sending ACKs to the server. This is NULL-terminated field.


Emberson                      Experimental                      [Page 2]


RFC 2090                 TFTP Multicast Option             February 1997


Data Transfer

   After the OACK is received by the client it will send an ACK for
   packet zero, as in [2]. With the multicast option being accepted this
   ACK will indicate to the server that the client wants the first
   packet. In other words the ACKs may now be seen as a request for the
   n+1th block of data. This enables each a client to request any block
   within the file that it may be missing.

   To manage the data transfer the server will maintain a list of
   clients. Typically the oldest client on the list, from here on
   referred to as the Master Client, will be responsible for sending
   ACKs. When the master client is finished, the server will send
   another OACK to the next oldest client, telling it to start sending
   ACKs. Upon receipt of this OACK the new master client will send an
   ACK for the block immediately before the first block required to
   complete its download.

   Any subsequent clients can start receiving blocks of a file during a
   transfer and then request any missing blocks when that client becomes
   the master client. When the current master client is finished, the
   server will notify the next client with an OACK making it the new
   master client. The new master client can start requesting  missed
   packets.  Each  client  must  terminate  the transfer by sending an
   acknowledgment of the last packet or by sending an error message to
   server. This termination can occur even if the client is not the
   master client.

   Any subsequent OACKs to a client may have an empty multicast address
   and port fields, since this information will already be held by that
   client. In the event a client fails to respond in a timely manner to
   a OACK enabling it as the master client, the server shall select the
   next oldest client to be the master client. The server shall
   reattempt to send a OACK to the non- responding client when the new
   master client is finished. The server may cease communication with a
   client after a reasonable number of attempts.

   Each transfer will be given a multicast address for use to distribute
   the data packets. Since there can be multiple servers on a given
   network or a limited number of addresses available to a given server,
   it is possible that their might be more than one transfer using a
   multicast address. To ensure that a client only accepts the correct
   packets, each transfer must use a unique port on the server. The
   source IP address and port number will identify the data packets for
   the transfer. Thus the server must send the unicast OACK packet to
   the client using the same port as will be used for sending the
   multicast data packets.



Emberson                      Experimental                      [Page 3]


RFC 2090                 TFTP Multicast Option             February 1997


   At any point if a client, other than the master client, sends a ACK
   to the server, the server will respond with another OACK with the mc
   field holding a value of zero. If this client persists in sending
   erroneous ACKs, the server may send an error packet to the client,
   discontinuing the file transfer for that client.

   The server may also send unicast packets to a lone client to reduce
   adverse effects on other machines. As it is possible that machines
   may be forced to process many extraneous multicast packets when
   attempting to receive a single multicast address.

Example

           clients                                      server  message
           ------------------------------------------------------------
    1  C1  |1|afile|0|octet|0|multicast|0|0| ->                  RRQ
    2                C1 <- |6|multicast|224.100.100.100,1758,1|  OACK
    3  C1  |4|0| ->                                              ACK
    4                          M <- |3|1|1| 512 octets of data|  DATA
    5  C1  |4|1| ->                                              ACK
    6                          M <- |3|2|1| 512 octets of data|  DATA
    7  C2  |1|afile|0|octet|0|multicast|0|0| ->                  RRQ
    8                C2 <- |6|multicast|224.100.100.100,1758,0|  OACK
    9  C2  |4|0| ->                                              ACK
   10  C1  |4|2| ->                                              ACK
   11                          M <- |3|3|1| 512 octets of data|  DATA
   12  C3  |1|afile|0|octet|0|multicast|0|0| ->                  RRQ
   13                C3 <- |6|multicast|224.100.100.100,1758,0|  OACK
   14  C1  |4|3| ->                                              ACK
   15  C2  |4|0| ->                                              ACK
   16              M (except C2) <- |3|4|1| 512 octets of data|  DATA
   17  C1  |4|4| ->                                              ACK
   18                          M <- |3|5|1| 512 octets of data|  DATA
   19  C1  |4|5| ->                                              ACK
   20                          M <- |3|6|1| 100 octets of data|  DATA
   21  C1  |4|6| ->                                              ACK
   22                                   C2 <- |6|multicast|,,1|  OACK
   23  C2  |4|0| ->                                              ACK
   24                          M <- |3|1|1| 512 octets of data|  DATA
   25  C2  |4|1| ->                                              ACK
   26                          M <- |3|2|1| 512 octets of data|  DATA
   27  C2  |4|3| ->                                              ACK
   28                          M <- |3|4|1| 512 octets of data|  DATA
   29  C2  |4|6| ->                                              ACK
   30                                   C3 <- |6|multicast|,,1|  OACK
   31  C3  |4|2| ->                                              ACK
   32                          M <- |3|3|1| 512 octets of data|  DATA
   33  C3  |4|6| ->                                              ACK



Emberson                      Experimental                      [Page 4]


RFC 2090                 TFTP Multicast Option             February 1997


      Comments:
         1  request from client 1
         2  option acknowledgment
         3  acknowledgment for option acknowledgment,
            or request for first block of data
         4  first data packet sent to the multicast address
         7  request from client 2
         8  option acknowledgment to client 2,
            send no acknowledgments
         9  OACK acknowledgment from client 2
         15 OACK acknowledgment from client 3
         16 client 2 fails to receive a packet
         21 client 1 acknowledges receipt of the last block,
            telling the server it is done
         23 option acknowledgment to client 2,
            now the master client
         25 client 2 acknowledging with request for first block
         27 client 2 acknowledges with request for missed block
         29 client 2 signals it is finished
         31 client 3 is master client and asks for missing blocks
         33 client 3 signals it is finished

Conclusion

   With the use of the multicast and blocksize[3] options TFTP will be
   capable of fast and efficient downloads of data. Using TFTP with the
   multicast option will maintain backward compatibility for both
   clients and servers.

Security Considerations

   Security issues are not discussed in this memo.

References

   [1] Sollins, K., "The TFTP Protocol (Revision 2)", STD 33, RFC
       1350, MIT, July 1992.

   [2] Malkin, G., and A. Harkin, "TFTP Option Extension", RFC
       1782, Xylogics, Inc., Hewlett Packard Co., March 1995.

   [3] Malkin, G., and A. Harkin, "TFTP Blocksize Option", RFC
       1783, Xylogics, Inc., Hewlett Packard Co., March 1995.



Emberson                      Experimental                      [Page 5]


RFC 2090                 TFTP Multicast Option             February 1997


Author's Address

   A. Thomas Emberson
   Lanworks Technologies, Inc.
   2425 Skymark Avenue
   Mississauga, Ontario
   Canada L4W 4Y6


   Phone: (905) 238-5528
   EMail: tom@lanworks.com


Emberson                      Experimental                      [Page 6]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\tftp\rfc1783.txt ===
Network Working Group                                          G. Malkin
Request for Comments: 1783                                Xylogics, Inc.
Updates: 1350                                                  A. Harkin
Category: Standards Track                            Hewlett Packard Co.
                                                              March 1995


                         TFTP Blocksize Option

Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.

Abstract

   The Trivial File Transfer Protocol [1] is a simple, lock-step, file
   transfer protocol which allows a client to get or put a file onto a
   remote host.  One of its primary uses is the booting of diskless
   nodes on a Local Area Network.  TFTP is used because it is very
   simple to implement in a small node's limited ROM space.  However,
   the choice of a 512-byte blocksize is not the most efficient for use
   on a LAN whose MTU may 1500 bytes or greater.

   This document describes a TFTP option which allows the client and
   server to negotiate a blocksize more applicable to the network
   medium.  The TFTP Option Extension mechanism is described in [2].

Blocksize Option Specification

   The TFTP Read Request or Write Request packet is modified to include
   the blocksize option as follows:

      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+
      |  opc  |filename| 0 |  mode  | 0 | blksize| 0 | #octets| 0 |
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+

      opc
         The opcode field contains either a 1, for Read Requests, or 2,
         for Write Requests, as defined in [1].

      filename
         The name of the file to be read or written, as defined in [1].
         This is a NULL-terminated field.




Malkin & Harkin                                                 [Page 1]

RFC 1783                 TFTP Blocksize Option                March 1995


      mode
         The mode of the file transfer: "netascii", "octet", or "mail",
         as defined in [1].  This is a NULL-terminated field.

      blksize
         The Blocksize option, "blksize" (case insensitive).  This is a
         NULL-terminated field.

      #octets
         The number of octets in a block, specified in ASCII.  Valid
         values range between "8" and "65464" octets, inclusive.  This
         is a NULL-terminated field.

   For example:

      +-------+--------+---+--------+---+--------+---+--------+---+
      |   1   | foobar | 0 | binary | 0 | blksize| 0 |  1432  | 0 |
      +-------+--------+---+--------+---+--------+---+--------+---+

   is a Read Request, for the file named "foobar", in binary transfer
   mode, with a block size of 1432 bytes (Ethernet MTU, less the UDP and
   IP header lengths).

   If the server is willing to accept the blocksize option, it sends an
   Option Acknowledgment (OACK) to the client.  The specified value must
   be less than or equal to the value specified by the client.  The
   client must then either use the size specified in the OACK, or send
   an ERROR packet, with error code 8, to terminate the transfer.

   The rules for determining the final packet are unchanged from [1].
   The reception of a data packet with a data length less than the
   negotiated blocksize is the final packet.  If the blocksize is
   greater than the size of the packet, the first packet is the final
   packet.  If amount of data to be transfered is an integral multiple
   of the blocksize, an extra data packet containing no data is sent to
   end the transfer.


Malkin & Harkin                                                 [Page 2]

RFC 1783                 TFTP Blocksize Option                March 1995


Proof of Concept

   Performance tests were run on the prototype implementation using a
   variety of block sizes.  The tests were run on a lightly loaded
   Ethernet, between two HP-UX 9000, in "octet" mode, on 2.25MB files.
   The average (5x) transfer times for paths with (g-time) and without
   (n-time) a intermediate gateway are graphed as follows:

           |
        37 +      g
           |
        35 +
           |
        33 +
           |
        31 +
           |
        29 +
           |
        27 +
           |             g              blocksize   n-time   g-time
        25 +                            ---------   ------   ------
      s    |       n                      512       23.85    37.05
      e 23 +                g            1024       16.15    25.65
      c    |                             1432       13.70    23.10
      o 21 +                             2048       10.90    16.90
      n    |                             4096        6.85     9.65
      d 19 +                             8192        4.90     6.15
      s    |
        17 +                    g
           |             n
        15 +
           |                n
        13 +
           |
        11 +                    n
           |                           g
         9 +
           |
         7 +                           n
           |                                  g
         5 +                                  n
           "
         0 +------+------+--+---+------+------+---
                 512    1K  |  2K     4K     8K
                          1432
                    blocksize (bytes)




Malkin & Harkin                                                 [Page 3]

RFC 1783                 TFTP Blocksize Option                March 1995


   The comparisons between transfer times (without a gateway) between
   the standard 512-byte blocksize and the negotiated blocksizes are:

      1024     2x   -32%
      1432   2.8x   -42%
      2048     4x   -54%
      4096     8x   -71%
      8192    16x   -80%

   As was anticipated, the transfer time decreases with an increase in
   blocksize.  The reason for the reduction in time is the reduction in
   the number of packets sent.  For example, by increasing the blocksize
   from 512 bytes to 1024 bytes, not only are the number of data packets
   halved, but the number of acknowledgement packets is also halved
   (along with the number of times the data transmitter must wait for an
   ACK).  A secondary effect is the efficiency gained by reducing the
   per-packet framing and processing overhead.

   Of course, if the blocksize exceeds the path MTU, IP fragmentation
   and reassembly will begin to add more overhead.  This will be more
   noticable the greater the number of gateways in the path.

Security Considerations

   Security issues are not discussed in this memo.

References

   [1] Sollins, K., "The TFTP Protocol (Revision 2)", STD 33, RFC 1350,
       MIT, July 1992.

   [2] Malkin, G., and A. Harkin, "TFTP Option Extension", RFC 1782,
       Xylogics, Inc., Hewlett Packard Co., March 1995.


Malkin & Harkin                                                 [Page 4]

RFC 1783                 TFTP Blocksize Option                March 1995


Authors' Addresses

       Gary Scott Malkin
       Xylogics, Inc.
       53 Third Avenue
       Burlington, MA  01803

       Phone:  (617) 272-8140
       EMail:  gmalkin@xylogics.com


       Art Harkin
       Internet Services Project
       Information Networks Division
       19420 Homestead Road MS 43LN
       Cupertino, CA  95014

       Phone: (408) 447-3755
       EMail: ash@cup.hp.com


Malkin & Harkin                                                 [Page 5]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\tftp\rfc1782.txt ===
Network Working Group                                          G. Malkin
Request for Comments: 1782                                Xylogics, Inc.
Updates: 1350                                                  A. Harkin
Category: Standards Track                            Hewlett Packard Co.
                                                              March 1995


                         TFTP Option Extension

Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.

Abstract

   The Trivial File Transfer Protocol [1] is a simple, lock-step, file
   transfer protocol which allows a client to get or put a file onto a
   remote host.  This document describes a simple extension to TFTP to
   allow option negotiation prior to the file transfer.

Introduction

   The option negotiation mechanism proposed in this document is a
   backward-compatible extension to the TFTP protocol.  It allows file
   transfer options to be negotiated prior to the transfer using a
   mechanism which is consistent with TFTPs Request Packet format.  The
   mechanism is kept simple by enforcing a request-respond-acknowledge
   sequence, similar to the lock-step approach taken by TFTP itself.

   While the option negotiation mechanism is general purpose, in that
   many types of options may be negotiated, it was created to support
   the Blocksize option defined in [2].  Additional options are defined
   in [3].

   This document assumes reader familiarity with the TFTP specification
   [1] and its terminology.

Packet Formats

   TFTP options are appended to the Read Request and Write Request
   packets.  A new type of TFTP packet, the Option Acknowledgment
   (OACK), is used to acknowledge a client's option negotiation request.
   A new error code, 8, is hereby defined to indicate that a transfer
   should be terminated due to option negotiation.



Malkin & Harkin                                                 [Page 1]

RFC 1782                 TFTP Option Extension                March 1995


   Options are appended to a TFTP Read Request or Write Request packet
   as follows:

      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+-->
      |  opc  |filename| 0 |  mode  | 0 |  opt1  | 0 | value1 | 0 | <
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+-->

       >-------+---+---~~---+---+
      <  optN  | 0 | valueN | 0 |
       >-------+---+---~~---+---+

      The "0"s shown in these illustrations and the ones below are all
      all zero octets, i.e., NULL terminators for the preceeding
      fields.

      opc
         The opcode field contains either a 1, for Read Requests, or 2,
         for Write Requests, as defined in [1].

      filename
         The name of the file to be read or written, as defined in [1].
         This is a NULL-terminated field.

      mode
         The mode of the file transfer: "netascii", "octet", or "mail",
         as defined in [1].  This is a NULL-terminated field.

      opt1
         The first option, in case-insensitive ASCII (e.g., "blksize").
         This is a NULL-terminated ASCII field.

      value1
         The value associated with the first option, in case-insensitive
         ASCII.  This is a NULL-terminated field.

      optN, valueN
         The final option/value pair.  Each NULL-terminated field is
         specified in case-insensitive ASCII.

   The options and values are all NULL-terminated, in keeping with the
   original request format.  If multiple options are to be negotiated,
   they are appended to each other.  The order in which options are
   specified is not significant.  The maximum size of a request packet
   is 512 octets.







Malkin & Harkin                                                 [Page 2]

RFC 1782                 TFTP Option Extension                March 1995


   The OACK packet has the following format:

      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+
      |  opc  |  opt1  | 0 | value1 | 0 |  optN  | 0 | valueN | 0 |
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+

      opc
         The opcode field contains a 6, for Option Acknowledgment.

      opt1
         The first option acknowledgment, copied from the original
         request.

      value1
         The acknowledged value associated with the first option.  If
         and how this value may differ from the original request is
         detailed in the specification for the option.

      optN, valueN
         The final option/value acknowledgment pair.

Negotiation Protocol

   The client appends options at the end of the Read Request or Write
   request packet, as shown above.  Any number of options may be
   specified; however, an option may only be specified once.  The order
   of the options is not significant.

   If the server supports option negotiation, and it recognizes one or
   more of the options specified in the request packet, the server may
   respond with an Options Acknowledgment (OACK).  Each option the
   server recognizes, and accepts the value for, is included in the
   OACK.  Some options may allow alternate values to be proposed, but
   this is an option specific feature.  The server must not include in
   the OACK any option which had not been specifically requested by the
   client; that is, only the client may initiate option negotiation.
   Options which the server does not support should be omitted from the
   OACK; they must not cause an ERROR packet to be generated.  If the
   value of a supported option is invalid, the specification for that
   option will indicate whether the server should simply omit the option
   from the OACK, respond with an alternate value, or send an ERROR
   packet, with error code 8, to terminate the transfer.

   An option not acknowledged by the server must be ignored by the
   client and server as if it were never requested.  If multiple options
   were requested, the client must use those options which were
   acknowledged by the server and must not use those options which were
   not acknowledged by the server.



Malkin & Harkin                                                 [Page 3]

RFC 1782                 TFTP Option Extension                March 1995


   When the client appends options to the end of a Read Request packet,
   three possible responses may be returned by the server:

      OACK  - acknowledge of Read Request and the options;

      DATA  - acknowledge of Read Request, but not the options;

      ERROR - the request has been denied.

   When the client appends options to the end of a Write Request packet,
   three possible responses may be returned by the server:

      OACK  - acknowledge of Write Request and the options;

      ACK   - acknowledge of Write Request, but not the options;

      ERROR - the request has been denied.

   If a server implementation does not support option negotiation, it
   will likely ignore any options appended to the client's request.  In
   this case, the server will return a DATA packet for a Read Request
   and an ACK packet for a Write Request establishing normal TFTP data
   transfer.  In the event that a server returns an error for a request
   which carries an option, the client may attempt to repeat the request
   without appending any options.  This implementation option would
   handle servers which consider extraneous data in the request packet
   to be erroneous.

   Depending on the original transfer request there are two ways for a
   client to confirm acceptance of a server's OACK.  If the transfer was
   initiated with a Read Request, then an ACK (with the data block
   number set to 0) is sent by the client to confirm the values in the
   server's OACK packet.  If the transfer was initiated with a Write
   Request, then the client begins the transfer with the first DATA
   packet, using the negotiated values.  If the client rejects the OACK,
   then it sends an ERROR packet, with error code 8, to the server and
   the transfer is terminated.

   Once a client acknowledges an OACK, with an appropriate non-error
   response, that client has agreed to use only the options and values
   returned by the server.  Remember that the server cannot request an
   option; it can only respond to them.  If the client receives an OACK
   containing an unrequested option, it should respond with an ERROR
   packet, with error code 8, and terminate the transfer.







Malkin & Harkin                                                 [Page 4]

RFC 1782                 TFTP Option Extension                March 1995


Examples

   Read Request

      client                                           server
      -------------------------------------------------------
      |1|foofile|0|octet|0|blksize|0|1432|0|  -->               RRQ
                                    <--  |6|blksize|0|1432|0|   OACK
      |4|0|  -->                                                ACK
                             <--  |3|1| 1432 octets of data |   DATA
      |4|1|  -->                                                ACK
                             <--  |3|2| 1432 octets of data |   DATA
      |4|2|  -->                                                ACK
                             <--  |3|3|<1432 octets of data |   DATA
      |4|3|  -->                                                ACK

   Write Request

      client                                           server
      -------------------------------------------------------
      |2|barfile|0|octet|0|blksize|0|2048|0|  -->               RRQ
                                    <--  |6|blksize|0|2048|0|   OACK
      |3|1| 2048 octets of data |  -->                          DATA
                                                   <--  |4|1|   ACK
      |3|2| 2048 octets of data |  -->                          DATA
                                                   <--  |4|2|   ACK
      |3|3|<2048 octets of data |  -->                          DATA
                                                   <--  |4|3|   ACK

Security Considerations

   Security issues are not discussed in this memo.

References

   [1] Sollins, K., "The TFTP Protocol (Revision 2)", STD 33, RFC 1350,
       MIT, July 1992.

   [2] Malkin, G., and A. Harkin, "TFTP Blocksize Option", RFC 1783,
       Xylogics, Inc., Hewlett Packard Co., March 1995.

   [3] Malkin, G., and A. Harkin, A., "TFTP Timeout Interval and
       Transfer Size Options", RFC 1784, Xylogics, Inc., Hewlett Packard
       Co., March 1995.







Malkin & Harkin                                                 [Page 5]

RFC 1782                 TFTP Option Extension                March 1995


Authors' Addresses

       Gary Scott Malkin
       Xylogics, Inc.
       53 Third Avenue
       Burlington, MA  01803

       Phone:  (617) 272-8140
       EMail:  gmalkin@xylogics.com


       Art Harkin
       Internet Services Project
       Information Networks Division
       19420 Homestead Road MS 43LN
       Cupertino, CA  95014

       Phone: (408) 447-3755
       EMail: ash@cup.hp.com



Malkin & Harkin                                                 [Page 6]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\tftp\tftpd.ini ===
;
; This file contains the default contents of the \Registry database
; All keys are specified relative to the \Registry root key.
;

\Registry\Machine

    System
      CurrentControlSet
        Services
            Tftpd
                Type = REG_DWORD 0x20
                Start = REG_DWORD 0x3
                ErrorControl = REG_DWORD 0x1
                Group =
                ImagePath = REG_EXPAND_SZ %SystemRoot%\system32\tftpd.exe
                DependOnService = REG_MULTI_SZ "Tcpip"
                Dependencies =
                ObjectName = REG_SZ LocalSystem
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\services\tftp\rfc1350.txt ===
Network Working Group                                         K. Sollins
Request For Comments: 1350                                           MIT
STD: 33                                                        July 1992
Obsoletes: RFC 783


                     THE TFTP PROTOCOL (REVISION 2)

Status of this Memo

   This RFC specifies an IAB standards track protocol for the Internet
   community, and requests discussion and suggestions for improvements.
   Please refer to the current edition of the "IAB Official Protocol
   Standards" for the standardization state and status of this protocol.
   Distribution of this memo is unlimited.

Summary

   TFTP is a very simple protocol used to transfer files.  It is from
   this that its name comes, Trivial File Transfer Protocol or TFTP.
   Each nonterminal packet is acknowledged separately.  This document
   describes the protocol and its types of packets.  The document also
   explains the reasons behind some of the design decisions.

Acknowlegements

   The protocol was originally designed by Noel Chiappa, and was
   redesigned by him, Bob Baldwin and Dave Clark, with comments from
   Steve Szymanski.  The current revision of the document includes
   modifications stemming from discussions with and suggestions from
   Larry Allen, Noel Chiappa, Dave Clark, Geoff Cooper, Mike Greenwald,
   Liza Martin, David Reed, Craig Milo Rogers (of USC-ISI), Kathy
   Yellick, and the author.  The acknowledgement and retransmission
   scheme was inspired by TCP, and the error mechanism was suggested by
   PARC's EFTP abort message.

   The May, 1992 revision to fix the "Sorcerer's Apprentice" protocol
   bug [4] and other minor document problems was done by Noel Chiappa.

   This research was supported by the Advanced Research Projects Agency
   of the Department of Defense and was monitored by the Office of Naval
   Research under contract number N00014-75-C-0661.

1. Purpose

   TFTP is a simple protocol to transfer files, and therefore was named
   the Trivial File Transfer Protocol or TFTP.  It has been implemented
   on top of the Internet User Datagram protocol (UDP or Datagram) [2]



Sollins                                                         [Page 1]

RFC 1350                    TFTP Revision 2                    July 1992


   so it may be used to move files between machines on different
   networks implementing UDP.  (This should not exclude the possibility
   of implementing TFTP on top of other datagram protocols.)  It is
   designed to be small and easy to implement.  Therefore, it lacks most
   of the features of a regular FTP.  The only thing it can do is read
   and write files (or mail) from/to a remote server.  It cannot list
   directories, and currently has no provisions for user authentication.
   In common with other Internet protocols, it passes 8 bit bytes of
   data.

   Three modes of transfer are currently supported: netascii (This is
   ascii as defined in "USA Standard Code for Information Interchange"
   [1] with the modifications specified in "Telnet Protocol
   Specification" [3].)  Note that it is 8 bit ascii.  The term
   "netascii" will be used throughout this document to mean this
   particular version of ascii.); octet (This replaces the "binary" mode
   of previous versions of this document.) raw 8 bit bytes; mail,
   netascii characters sent to a user rather than a file.  (The mail
   mode is obsolete and should not be implemented or used.)  Additional
   modes can be defined by pairs of cooperating hosts.

   Reference [4] (section 4.2) should be consulted for further valuable
   directives and suggestions on TFTP.

2. Overview of the Protocol

   Any transfer begins with a request to read or write a file, which
   also serves to request a connection.  If the server grants the
   request, the connection is opened and the file is sent in fixed
   length blocks of 512 bytes.  Each data packet contains one block of
   data, and must be acknowledged by an acknowledgment packet before the
   next packet can be sent.  A data packet of less than 512 bytes
   signals termination of a transfer.  If a packet gets lost in the
   network, the intended recipient will timeout and may retransmit his
   last packet (which may be data or an acknowledgment), thus causing
   the sender of the lost packet to retransmit that lost packet.  The
   sender has to keep just one packet on hand for retransmission, since
   the lock step acknowledgment guarantees that all older packets have
   been received.  Notice that both machines involved in a transfer are
   considered senders and receivers.  One sends data and receives
   acknowledgments, the other sends acknowledgments and receives data.

   Most errors cause termination of the connection.  An error is
   signalled by sending an error packet.  This packet is not
   acknowledged, and not retransmitted (i.e., a TFTP server or user may
   terminate after sending an error message), so the other end of the
   connection may not get it.  Therefore timeouts are used to detect
   such a termination when the error packet has been lost.  Errors are



Sollins                                                         [Page 2]

RFC 1350                    TFTP Revision 2                    July 1992


   caused by three types of events: not being able to satisfy the
   request (e.g., file not found, access violation, or no such user),
   receiving a packet which cannot be explained by a delay or
   duplication in the network (e.g., an incorrectly formed packet), and
   losing access to a necessary resource (e.g., disk full or access
   denied during a transfer).

   TFTP recognizes only one error condition that does not cause
   termination, the source port of a received packet being incorrect.
   In this case, an error packet is sent to the originating host.

   This protocol is very restrictive, in order to simplify
   implementation.  For example, the fixed length blocks make allocation
   straight forward, and the lock step acknowledgement provides flow
   control and eliminates the need to reorder incoming data packets.

3. Relation to other Protocols

   As mentioned TFTP is designed to be implemented on top of the
   Datagram protocol (UDP).  Since Datagram is implemented on the
   Internet protocol, packets will have an Internet header, a Datagram
   header, and a TFTP header.  Additionally, the packets may have a
   header (LNI, ARPA header, etc.)  to allow them through the local
   transport medium.  As shown in Figure 3-1, the order of the contents
   of a packet will be: local medium header, if used, Internet header,
   Datagram header, TFTP header, followed by the remainder of the TFTP
   packet.  (This may or may not be data depending on the type of packet
   as specified in the TFTP header.)  TFTP does not specify any of the
   values in the Internet header.  On the other hand, the source and
   destination port fields of the Datagram header (its format is given
   in the appendix) are used by TFTP and the length field reflects the
   size of the TFTP packet.  The transfer identifiers (TID's) used by
   TFTP are passed to the Datagram layer to be used as ports; therefore
   they must be between 0 and 65,535.  The initialization of TID's is
   discussed in the section on initial connection protocol.

   The  TFTP header consists of a 2 byte opcode field which indicates
   the packet's type (e.g., DATA, ERROR, etc.)  These opcodes and  the
   formats of  the various types of packets are discussed further in the
   section on TFTP packets.











Sollins                                                         [Page 3]

RFC 1350                    TFTP Revision 2                    July 1992


          ---------------------------------------------------
         |  Local Medium  |  Internet  |  Datagram  |  TFTP  |
          ---------------------------------------------------

                      Figure 3-1: Order of Headers


4. Initial Connection Protocol

   A transfer is established by sending a request (WRQ to write onto a
   foreign file system, or RRQ to read from it), and receiving a
   positive reply, an acknowledgment packet for write, or the first data
   packet for read.  In general an acknowledgment packet will contain
   the block number of the data packet being acknowledged.  Each data
   packet has associated with it a block number; block numbers are
   consecutive and begin with one.  Since the positive response to a
   write request is an acknowledgment packet, in this special case the
   block number will be zero.  (Normally, since an acknowledgment packet
   is acknowledging a data packet, the acknowledgment packet will
   contain the block number of the data packet being acknowledged.)  If
   the reply is an error packet, then the request has been denied.

   In order to create a connection, each end of the connection chooses a
   TID for itself, to be used for the duration of that connection.  The
   TID's chosen for a connection should be randomly chosen, so that the
   probability that the same number is chosen twice in immediate
   succession is very low.  Every packet has associated with it the two
   TID's of the ends of the connection, the source TID and the
   destination TID.  These TID's are handed to the supporting UDP (or
   other datagram protocol) as the source and destination ports.  A
   requesting host chooses its source TID as described above, and sends
   its initial request to the known TID 69 decimal (105 octal) on the
   serving host.  The response to the request, under normal operation,
   uses a TID chosen by the server as its source TID and the TID chosen
   for the previous message by the requestor as its destination TID.
   The two chosen TID's are then used for the remainder of the transfer.

   As an example, the following shows the steps used to establish a
   connection to write a file.  Note that WRQ, ACK, and DATA are the
   names of the write request, acknowledgment, and data types of packets
   respectively.  The appendix contains a similar example for reading a
   file.









Sollins                                                         [Page 4]

RFC 1350                    TFTP Revision 2                    July 1992


      1. Host A sends  a  "WRQ"  to  host  B  with  source=  A's  TID,
         destination= 69.

      2. Host  B  sends  a "ACK" (with block number= 0) to host A with
         source= B's TID, destination= A's TID.

   At this point the connection has been established and the first data
   packet can be sent by Host A with a sequence number of 1.  In the
   next step, and in all succeeding steps, the hosts should make sure
   that the source TID matches the value that was agreed on in steps 1
   and 2.  If a source TID does not match, the packet should be
   discarded as erroneously sent from somewhere else.  An error packet
   should be sent to the source of the incorrect packet, while not
   disturbing the transfer.  This can be done only if the TFTP in fact
   receives a packet with an incorrect TID.  If the supporting protocols
   do not allow it, this particular error condition will not arise.

   The following example demonstrates a correct operation of the
   protocol in which the above situation can occur.  Host A sends a
   request to host B. Somewhere in the network, the request packet is
   duplicated, and as a result two acknowledgments are returned to host
   A, with different TID's chosen on host B in response to the two
   requests.  When the first response arrives, host A continues the
   connection.  When the second response to the request arrives, it
   should be rejected, but there is no reason to terminate the first
   connection.  Therefore, if different TID's are chosen for the two
   connections on host B and host A checks the source TID's of the
   messages it receives, the first connection can be maintained while
   the second is rejected by returning an error packet.

5. TFTP Packets

   TFTP supports five types of packets, all of which have been mentioned
   above:

          opcode  operation
            1     Read request (RRQ)
            2     Write request (WRQ)
            3     Data (DATA)
            4     Acknowledgment (ACK)
            5     Error (ERROR)

   The TFTP header of a packet contains the  opcode  associated  with
   that packet.







Sollins                                                         [Page 5]

RFC 1350                    TFTP Revision 2                    July 1992


            2 bytes     string    1 byte     string   1 byte
            ------------------------------------------------
           | Opcode |  Filename  |   0  |    Mode    |   0  |
            ------------------------------------------------

                       Figure 5-1: RRQ/WRQ packet


   RRQ and WRQ packets (opcodes 1 and 2 respectively) have the format
   shown in Figure 5-1.  The file name is a sequence of bytes in
   netascii terminated by a zero byte.  The mode field contains the
   string "netascii", "octet", or "mail" (or any combination of upper
   and lower case, such as "NETASCII", NetAscii", etc.) in netascii
   indicating the three modes defined in the protocol.  A host which
   receives netascii mode data must translate the data to its own
   format.  Octet mode is used to transfer a file that is in the 8-bit
   format of the machine from which the file is being transferred.  It
   is assumed that each type of machine has a single 8-bit format that
   is more common, and that that format is chosen.  For example, on a
   DEC-20, a 36 bit machine, this is four 8-bit bytes to a word with
   four bits of breakage.  If a host receives a octet file and then
   returns it, the returned file must be identical to the original.
   Mail mode uses the name of a mail recipient in place of a file and
   must begin with a WRQ.  Otherwise it is identical to netascii mode.
   The mail recipient string should be of the form "username" or
   "username@hostname".  If the second form is used, it allows the
   option of mail forwarding by a relay computer.

   The discussion above assumes that both the sender and recipient are
   operating in the same mode, but there is no reason that this has to
   be the case.  For example, one might build a storage server.  There
   is no reason that such a machine needs to translate netascii into its
   own form of text.  Rather, the sender might send files in netascii,
   but the storage server might simply store them without translation in
   8-bit format.  Another such situation is a problem that currently
   exists on DEC-20 systems.  Neither netascii nor octet accesses all
   the bits in a word.  One might create a special mode for such a
   machine which read all the bits in a word, but in which the receiver
   stored the information in 8-bit format.  When such a file is
   retrieved from the storage site, it must be restored to its original
   form to be useful, so the reverse mode must also be implemented.  The
   user site will have to remember some information to achieve this.  In
   both of these examples, the request packets would specify octet mode
   to the foreign host, but the local host would be in some other mode.
   No such machine or application specific modes have been specified in
   TFTP, but one would be compatible with this specification.

   It is also possible to define other modes for cooperating pairs of



Sollins                                                         [Page 6]

RFC 1350                    TFTP Revision 2                    July 1992


   hosts, although this must be done with care.  There is no requirement
   that any other hosts implement these.  There is no central authority
   that will define these modes or assign them names.


                   2 bytes     2 bytes      n bytes
                   ----------------------------------
                  | Opcode |   Block #  |   Data     |
                   ----------------------------------

                        Figure 5-2: DATA packet


   Data is actually transferred in DATA packets depicted in Figure 5-2.
   DATA packets (opcode = 3) have a block number and data field.  The
   block numbers on data packets begin with one and increase by one for
   each new block of data.  This restriction allows the program to use a
   single number to discriminate between new packets and duplicates.
   The data field is from zero to 512 bytes long.  If it is 512 bytes
   long, the block is not the last block of data; if it is from zero to
   511 bytes long, it signals the end of the transfer.  (See the section
   on Normal Termination for details.)

   All  packets other than duplicate ACK's and those used for
   termination are acknowledged unless a timeout occurs [4].  Sending a
   DATA packet is an acknowledgment for the first ACK packet of the
   previous DATA packet. The WRQ and DATA packets are acknowledged by
   ACK or ERROR packets, while RRQ


                         2 bytes     2 bytes
                         ---------------------
                        | Opcode |   Block #  |
                         ---------------------

                         Figure 5-3: ACK packet


   and ACK packets are acknowledged by  DATA  or ERROR packets.  Figure
   5-3 depicts an ACK packet; the opcode is 4.  The  block  number  in
   an  ACK echoes the block number of the DATA packet being
   acknowledged.  A WRQ is acknowledged with an ACK packet having a
   block number of zero.








Sollins                                                         [Page 7]

RFC 1350                    TFTP Revision 2                    July 1992


               2 bytes     2 bytes      string    1 byte
               -----------------------------------------
              | Opcode |  ErrorCode |   ErrMsg   |   0  |
               -----------------------------------------

                        Figure 5-4: ERROR packet


   An ERROR packet (opcode 5) takes the form depicted in Figure 5-4.  An
   ERROR packet can be the acknowledgment of any other type of packet.
   The error code is an integer indicating the nature of the error.  A
   table of values and meanings is given in the appendix.  (Note that
   several error codes have been added to this version of this
   document.) The error message is intended for human consumption, and
   should be in netascii.  Like all other strings, it is terminated with
   a zero byte.

6. Normal Termination

   The end of a transfer is marked by a DATA packet that contains
   between 0 and 511 bytes of data (i.e., Datagram length < 516).  This
   packet is acknowledged by an ACK packet like all other DATA packets.
   The host acknowledging the final DATA packet may terminate its side
   of the connection on sending the final ACK.  On the other hand,
   dallying is encouraged.  This means that the host sending the final
   ACK will wait for a while before terminating in order to retransmit
   the final ACK if it has been lost.  The acknowledger will know that
   the ACK has been lost if it receives the final DATA packet again.
   The host sending the last DATA must retransmit it until the packet is
   acknowledged or the sending host times out.  If the response is an
   ACK, the transmission was completed successfully.  If the sender of
   the data times out and is not prepared to retransmit any more, the
   transfer may still have been completed successfully, after which the
   acknowledger or network may have experienced a problem.  It is also
   possible in this case that the transfer was unsuccessful.  In any
   case, the connection has been closed.

7. Premature Termination

   If a request can not be granted, or some error occurs during the
   transfer, then an ERROR packet (opcode 5) is sent.  This is only a
   courtesy since it will not be retransmitted or acknowledged, so it
   may never be received.  Timeouts must also be used to detect errors.








Sollins                                                         [Page 8]

RFC 1350                    TFTP Revision 2                    July 1992


I. Appendix

Order of Headers

                                                  2 bytes
    ----------------------------------------------------------
   |  Local Medium  |  Internet  |  Datagram  |  TFTP Opcode  |
    ----------------------------------------------------------

TFTP Formats

   Type   Op #     Format without header

          2 bytes    string   1 byte     string   1 byte
          -----------------------------------------------
   RRQ/  | 01/02 |  Filename  |   0  |    Mode    |   0  |
   WRQ    -----------------------------------------------
          2 bytes    2 bytes       n bytes
          ---------------------------------
   DATA  | 03    |   Block #  |    Data    |
          ---------------------------------
          2 bytes    2 bytes
          -------------------
   ACK   | 04    |   Block #  |
          --------------------
          2 bytes  2 bytes        string    1 byte
          ----------------------------------------
   ERROR | 05    |  ErrorCode |   ErrMsg   |   0  |
          ----------------------------------------

Initial Connection Protocol for reading a file

   1. Host  A  sends  a  "RRQ"  to  host  B  with  source= A's TID,
      destination= 69.

   2. Host B sends a "DATA" (with block number= 1) to host  A  with
      source= B's TID, destination= A's TID.














Sollins                                                         [Page 9]

RFC 1350                    TFTP Revision 2                    July 1992


Error Codes

   Value     Meaning

   0         Not defined, see error message (if any).
   1         File not found.
   2         Access violation.
   3         Disk full or allocation exceeded.
   4         Illegal TFTP operation.
   5         Unknown transfer ID.
   6         File already exists.
   7         No such user.

Internet User Datagram Header [2]

   (This has been included only for convenience.  TFTP need not be
   implemented on top of the Internet User Datagram Protocol.)

     Format

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Source Port          |       Destination Port        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |            Length             |           Checksum            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   Values of Fields


   Source Port     Picked by originator of packet.

   Dest. Port      Picked by destination machine (69 for RRQ or WRQ).

   Length          Number of bytes in UDP packet, including UDP header.

   Checksum        Reference 2 describes rules for computing checksum.
                   (The implementor of this should be sure that the
                   correct algorithm is used here.)
                   Field contains zero if unused.

   Note: TFTP passes transfer identifiers (TID's) to the Internet User
   Datagram protocol to be used as the source and destination ports.






Sollins                                                        [Page 10]

RFC 1350                    TFTP Revision 2                    July 1992


References

   [1]  USA Standard Code for Information Interchange, USASI X3.4-1968.

   [2]  Postel, J., "User Datagram  Protocol," RFC 768, USC/Information
        Sciences Institute, 28 August 1980.

   [3]  Postel, J., "Telnet Protocol Specification," RFC 764,
        USC/Information Sciences Institute, June, 1980.

   [4]  Braden, R., Editor, "Requirements for Internet Hosts --
        Application and Support", RFC 1123, USC/Information Sciences
        Institute, October 1989.

Security Considerations

   Since TFTP includes no login or access control mechanisms, care must
   be taken in the rights granted to a TFTP server process so as not to
   violate the security of the server hosts file system.  TFTP is often
   installed with controls such that only files that have public read
   access are available via TFTP and writing files via TFTP is
   disallowed.

Author's Address

   Karen R. Sollins
   Massachusetts Institute of Technology
   Laboratory for Computer Science
   545 Technology Square
   Cambridge, MA 02139-1986

   Phone: (617) 253-6006

   EMail: SOLLINS@LCS.MIT.EDU


Sollins                                                        [Page 11]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\tcpip\tpipv6\samples\simple\readme.txt ===
Simple IP samples.
-----------------

server.c:
----------

This is a very simple-minded TCP/UDP server. It listens on a specified port
for client connections. When a client connects, the server receives data
and echoes it back to the client.  For connection orientated protocols (TCP),
the server will continue to receive and echo data until the client indicates
that it is done sending.  For connectionless protocols (UDP), each datagram
is echoed individually.

Usage:
  server -f <family> -t <transport> -p <port> -a <address>

Where,
  Family is one of PF_INET, PF_INET6 or PF_UNSPEC.
  Protocol is either TCP or UDP.
  Port is the port number to listen on.
  Address is the IP address to bind to (typically used on multihomed
    machines to restrict reception to a particular network interface
    instead of allowing connections on any of the server's addresses).

In the case where both a protocol family and an address are specified, the
address must be a valid address in that protocol family.

By default the protocol family is left unspecified (PF_UNSPEC), which means
that the server will accept incoming connections using any supported protocol
family.  It does this by creating multiple server sockets, one per family.


Note:
----

There are differences in the way TCP and UDP "servers" can be written. For
TCP, the paradigm of bind(), listen() and accept() is widely implemented. 
For UDP, however, there are two things to consider:

1. listen() or accept() do not work on a UDP socket. These are APIs
that are oriented towards connection establishment, and are not applicable
to datagram protocols. To implement a UDP server, a process only needs to
do recvfrom() on the socket that is bound to a well-known port. Clients
will send datagrams to this port, and the server can process these.

2. Since there is no connection esablished, the server must treat each
datagram separately.


client.c
---------

A simple TCP/UDP client application. It connects to a specified IP address and
port and sends a small message. It can send only one message, or loop for a
specified number of iterations, sending data to the server and receiving a
response.

Usage:
  client -s <server> -f <family> -t <transport> -p <port> -b <bytes> -n <num>

Where,
  Server is a server name or IP address.
  Family is one of PF_INET, PF_INET6 or PF_UNSPEC.
  Protocol is either TCP or UDP.
  Port is the port number to listen on.
  Bytes is the number of extra data bytes to add to each message.
  Num specifies how many messages to send.
 
  '-n' without any arguments will cause the client to send & receive messages
  until interrupted by Ctrl-C.

Since the protocol family is left unspecified by default, the protcol family
which is used will be that of the address to which the server name resolves.
If a server name resolves into multiple addresses, the client will try them
sequentially until it finds one to which it can connect.


Note:
----
As explained for server.c, there is no concept of a connection in UDP
communications. However, we can use connect() on a UDP socket. This
establishes the remote (IPaddr, port) to used when sending a datagram.
Thus, we can use send() instead of sendto() on this socket.

This makes the code nearly identical for UDP and TCP sockets. However, it
must be realized that this is still connectionless datagram traffic for
UDP sockets, and must be treated as such.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\unimodem\readme.txt ===
UNIMODEM 32-bit USER-MODE COMPONENT SOURCE DIRECTORY
----------------------------------------------------
5/30/1997 JosephJ Created


PLEASE SEE README.HTM FOR FURTHER INFORMATION.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\unimodem\unimdm.ini ===
;; --------------------------------------------------------------------
;; --------------------------------------------------------------------

[ModemUI]
; DumpFlags:
;    00000001   DCB
;    00000002   MODEMSETTINGS
;    00000004   DEVCAPS

DumpFlags=0x00000000

; TraceFlags:
;    00000001   Warnings
;    00000002   Errors
;    00000004   General 
;    00000008   Function trace

TraceFlags=0x00000007

; BreakFlags:
;    00000001   Break on validate
;    00000040   Break on process attach
;    00000100   Break on API enter

BreakFlags=0x00000001


;; --------------------------------------------------------------------
;; --------------------------------------------------------------------


[Modem]
; DumpFlags:

DumpFlags=0x00000000

; TraceFlags:
;    00000001   Warnings
;    00000002   Errors
;    00000004   General 
;    00000008   Function trace
;    00010000   Detection queries
;    00020000   Class installer trace

TraceFlags=0x00020007

; BreakFlags:
;    00000001   Break on validate
;    00000040   Break on process attach
;    00000100   Break on API enter

BreakFlags=0x00000001



;; --------------------------------------------------------------------
;; --------------------------------------------------------------------

[SerialUI]
; DumpFlags:
;    00000001   DCB

DumpFlags=0x00000000

; TraceFlags:
;    00000001   Warnings
;    00000002   Errors
;    00000004   General 
;    00000008   Function trace

TraceFlags=0x00000007

; BreakFlags:
;    00000001   Break on validate
;    00000040   Break on process attach
;    00000100   Break on API enter

BreakFlags=0x00000001




;; --------------------------------------------------------------------
;; --------------------------------------------------------------------

[Unimdm]
; DumpFlags:

DumpFlags=0x00000000

; TraceFlags:
;    00000001   Warnings
;    00000002   Errors
;    00000004   General 
;    00000008   Function trace
;    00010000   dwDeviceID related
;    00020000   hdLine related
;    00040000   hdCall related
;    00080000   pLineDev related
;    00100000   pModemInfo related

TraceFlags=0x00000007

; BreakFlags:
;    00000001   Break on validate
;    00000040   Break on process attach
;    00000080   Break on process dettach
;    00000100   Break on API enter

BreakFlags=0x00000001
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\unimodem\inf\hkr.txt ===
8/8/96 JosephJ This file contains all the HKR addreg entries from all our INFs,
       excluding Responses entries. Also, some entries extend over several lines
       using the backslash char -- only the 1st line of those entries are
       present.

HKR,, AbortPlay, , "<h10><h18>at<cr>"
HKR,, AbortPlay, , "<h10>Aat<cr>"
HKR,, CallerIDOutSide, , O
HKR,, CallerIDPrivate, , P
HKR,, CDWaitPeriod, 1, c0, d4, 01, 00
HKR,, CompatibilityFlags, 1, 01, 00, 00, 00
HKR,, ConfigDelay, 1, b8, 0b, 00, 00
HKR,, ConfigDialog, , modemui.dll
HKR,, Contention, , *vcd
HKR,, DCB, 1, 1C, 00, 00, 00, 00, 00, 06, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 00, 4B, 00, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 00, 96, 00, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 00, c2, 01, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 00, C2, 01, 00, 15, 20, 00, 00, 00, 00, 0A, 00, 0A, 00, 08, 00, 00, 11, 13, 00, 00, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 00, E1, 00, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 2C, 01, 00, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 60, 09, 00, 00, 11, 00, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 60, 09, 00, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, 80, 25, 00, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, DCB, 1, 1C, 00, 00, 00, B0, 04, 00, 00, 15, 20, 00, 00, 00, 00, 0a, 00, 0a, 00, 08, 00, 00, 11, 13, 00, 00, 00
HKR,, Default, 1, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 01, 00, 00, 00, 10, 01, 00, 00
HKR,, DeviceType, 1, 00
HKR,, DeviceType, 1, 01
HKR,, DeviceType, 1, 02
HKR,, DeviceType, 1, 03
HKR,, DeviceType, 1, 04
HKR,, DeviceType, 1, 05
HKR,, DevLoader, , *VCOMM
HKR,, DevLoader, , *vcomm
HKR,, Enumerator, , serwave.vxd
HKR,, EnumPropPages, , "modemui.dll, EnumPropPages"
HKR,, EnumPropPages, , modemui.dll
HKR,, FClass, 1, 00, 00, 00, 00
HKR,, FClass, 1, 01, 00, 00, 00
HKR,, FClass, 1, 03, 00, 00, 00
HKR,, FClass, 1, 07, 00, 00, 00
HKR,, FClass, 1, 08, 00, 00, 00
HKR,, FClass, 1, 09, 00, 00, 00
HKR,, FClass, 1, 0a, 00, 00, 00
HKR,, FClass, 1, 0b, 00, 00, 00
HKR,, FClass, 1, 0B, 00, 00, 00
HKR,, FClass, 1, 0d, 00, 00, 00
HKR,, FClass, 1, 0f, 00, 00, 00
HKR,, FClass, 1, 19, 00, 00, 00
HKR,, FClass, 1, 1f, 00, 00, 00
HKR,, FClass, 1, 49, 00, 00, 00
HKR,, FClass, 1, 4b, 00, 00, 00
HKR,, FClass, 1, 4f, 00, 00, 00
HKR,, FClass, 1, 5f, 00, 00, 00
HKR,, ForwardDelay, 1, 88, 13
HKR,, FriendlyDriver, , unimodem.vxd
HKR,, FriendlyDriver, , Unimodem.VXD
HKR,, FriendlyDriver, , Unimodem.vxd
HKR,, HandsetCloseDelay, 1, 05, 00, 00, 00
HKR,, HandsetCloseDelay, 1, 1e, 00, 00, 00
HKR,, InactivityFormat, , "seconds"
HKR,, InactivityScale, 01, 00, 00, 00
HKR,, InactivityScale, 0a, 00, 00, 00
HKR,, InactivityScale, 1, 01, 00, 00, 00
HKR,, InactivityScale, 1, 0A, 00, 00, 00
HKR,, InactivityScale, 1, 0a, 00, 00, 00
HKR,, InactivityScale, 1, 0a, 00, 00, 00 
HKR,, InactivityScale, 1, 3c, 00, 00, 00
HKR,, InactivityScale, 1, 3C, 00, 00, 00
HKR,, InactivityScale, 1, 3c, 00, 00, 00
HKR,, InactivityScale, 1, 3C, 00, 00, 00
HKR,, InactivityScale, 1, 3c, 00, 00, 00
HKR,, InactivityScale, 1, 68, 01, 00, 00
HKR,, Override, , Paralink.vxd
HKR,, Override, , ppm.vxd
HKR,, PortDriver, , "serial.vxd"
HKR,, PortDriver, , ppm.vxd
HKR,, PortDriver, , Serial.vxd
HKR,, PortDriver, , serial.vxd
HKR,, PortDriver, , SERIAL.VXD
HKR,, PortSubClass, 1, 02
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, c2, 01, 00, 00, c2, 01, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 2c, 01, 00, 00, 2c, 01, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 00, 00, 00, 00, C2, 01, 00, 00, FA, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 00, 00, 00, 00, E1, 00, 00, 00, FA, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 30, 00, 00, 00, 00, c2, 01, 00, 00, c2, 01, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 00, 00, 00, 00, 10, 00, 00, 00, 00, c2, 01, 00, 00, c2, 01, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 01, 00, 00, 00, b0, 00, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, 60, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 00, 01, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 30, 00, 00, 00, 00, 96, 00, 00, 00, 96, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 36, 00, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 60, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, C2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, C2, 01, 00, 00, 96, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, C2, 01, 00, 00, e1, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, C2, 01, 00, 00, F4, 01, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 03, 01, 00, 00, 00, C2, 01, 00, 00, F4, 01, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 00, 00, 00, 00, e1, 00, 00, 00, e1, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 7f, 01, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 37, 02, 00, 00, 00, c2, 01, 00, 80, 25, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 00, 00, 00, 00, 30, 00, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 30, 00, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 00, 00, 00, 10, 02, 00, 00, 00, c2, 01, 00, 00, c2, 01, 00
HKR,, Properties, 1, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 00, 01, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 00, 00, 00, 00, 37, 00, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 70, 01, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, FF, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, B7, 03, 00, 00, 00, E1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 00, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 05, 00, 00, 00, C2, 01, 00, 00, FA, 00, 00
HKR,, Properties, 1, 00, 00, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 05, 00, 00, 00, E1, 00, 00, 00, FA, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 03, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 70, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 73, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 00, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 00, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 00, 00, 00, 00, 37, 03, 00, 00, 40, 5e, 02, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 19, 00, 00, 00, fa, 05, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b0, 03, 00, 00, 00, 96, 00, 00, 80, 70, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 07, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 07, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 07, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 5a, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 07, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 5a, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 64, 00, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 78, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 0d, 00, 00, 00, 50, 01, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 78, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, 50, 01, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 78, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 78, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, 78, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 01, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 30, 03, 00, 00, 00, 96, 00, 00, 00, 96, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 00, 03, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 32, 03, 00, 00, 00, 96, 00, 00, 00, 96, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 50, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 37, 00, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 01, 00, 00, 00, 0d, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 03, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 4b, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, 37, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 50, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 70, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 73, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 7f, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 4b, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, 4b, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 00, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 40, 01, 00, 00, 1e, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 40, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 50, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 40, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 33, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, c2, 01, 00, 00, c2, 01, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, 00, c2, 01, 00, 00, c2, 01, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, 2c, 01, 00, 00, 2c, 01, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 10, 01, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 00, 01, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 00, 01, 00, 00, 00, E1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 00, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 00, 03, 00, 00, 00, c2, 01, 00, 00, c2, 01, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 00, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 00, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 10, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 10, 03, 00, 00, 00, c2, 01, 00, 00, c2, 01, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 10, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 10, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 70, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 73, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 73, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 73, 03, 00, 00, 00, e1, 00, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 73, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f3, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 1e, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 2D, 00, 00, 00, FF, 00, 00, 00, 00, 00, 00, 00, 0F, 00, 00, 00, 77, 07, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 37, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 39, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3a, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3b, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3b, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 80, 25, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 3c, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 01, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 3c, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 01, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 3c, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, e1, 00, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 3c, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, e1, 00, 00, a0, 41, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 3c, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, c0, 5d, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 80, 25, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3C, 00, 00, 00, FF, 00, 00, 00, 00, 00, 00, 00, 0F, 00, 00, 00, F7, 07, 00, 00, 00, 96, 00, 00, 00, 4B, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 3f, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 3c, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 50, 00, 00, 00, ff, 00, 00, 00, 01, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, 40, 03, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 0f, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 0f, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 0f, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 3c, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 80, 25, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, c0, 12, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 5a, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 63, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 00, 96, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 30, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 3f, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 3f, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 00, e1, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, 78, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, 50, 01, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, fd, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, ff, 03, 00, 00, 00, 84, 03, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, fd, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 80, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 07, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 07, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 03, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 00, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 00, 03, 00, 00, 80, 25, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 10, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 84, 03, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 01, 00, 00, 00, c2, 01, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 01, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 00, c2, 01, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 50, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 50, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, c0, 12, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c3, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, d0, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 00, 4b, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 2a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 01, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 2a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 3c, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 36, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 3c, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 59, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 59, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 7f, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 31, 03, 00, 00, 00, 4b, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 33, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 4b, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 3b, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 3f, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 47, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 09, 00, 00, c0, 12, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, 5A, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 77, 03, 00, 00, 00, 84, 03, 00, 40, 83, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, 5A, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 77, 03, 00, 00, 00, C2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, 5A, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 77, 03, 00, 00, 00, C2, 01, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, 5A, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 7F, 03, 00, 00, 00, E1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 7f, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c6, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c7, 03, 00, 00, 00, c2, 01, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c7, 03, 00, 00, 00, c2, 01, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f3, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 4b, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, 5A, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 03, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 7f, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, a0, 41, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 3f, 03, 00, 00, 00, c2, 01, 00, 60, 54, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 3f, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 00, 00, 00, 00, 0F, 00, 00, 00, 77, 02, 00, 00, 00, C2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 4b, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 00, 00, 00, 00, 0F, 00, 00, 00, 77, 03, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 60, 54, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, a0, 41, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 00, 00, 00, 00, 0F, 00, 00, 00, F7, 06, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 01, 00, 00, 00, 0f, 00, 00, 00, 73, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 01, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 37, 01, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 37, 01, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 37, 03, 00, 00, 00, 4b, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 3f, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 7f, 03, 00, 00, 00, c2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, 7f, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 07, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0b, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0B, 00, 00, 00, B7, 07, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0b, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0d, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 10, 00, 00, 00, 00, 4b, 00, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, e1, 00, 00, a0, 41, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, f4, 01, 00, c0, 5d, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 3f, 03, 00, 00, 00, c2, 01, 00, 60, 54, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 40, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 73, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 76, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 4b, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 77, 03, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 60, 54, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, a0, 41, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 7f, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b0, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c0, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c0, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c0, 03, 00, 00, b0, 04, 00, 00, b0, 04, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f0, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, F3, 03, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 4b, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, F7, 03, 00, 00, 00, 84, 03, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, F7, 03, 00, 00, 00, C2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, F7, 03, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, F7, 03, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, F7, 03, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, a0, 41, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, E1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 80, 25, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 01, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 03, 00, 00, 00, 84, 03, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, 96, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, c0, 5d, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 00, 4b, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, a0, 41, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 07, 00, 00, 00, 4B, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 07, 00, 00, 00, C2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, 80, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 07, 00, 00, 00, E1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, b0, 01, 00, 00, 3a, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 7f, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, 19, 00, 00, 00, fa, 05, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, 19, 00, 00, 00, fa, 05, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, 19, 00, 00, 00, fa, 05, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, 39, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, 4f, 00, 00, 00, ff, 00, 00, 00, 01, 00, 00, 00, 0d, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, 64, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 37, 01, 00, 00, 00, c2, 01, 00, 00, fa, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, 78, 00, 00, 00, ff, 00, 00, 00, 01, 00, 00, 00, 0d, 00, 00, 00, f7, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 0f, 00, 00, 00, 40, 07, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 01, 00, 00, 00, 0f, 00, 00, 00, c7, 07, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c0, 03, 00, 00, 60, 09, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, c7, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 80, 25, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 7f, 03, 00, 00, 00, 96, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, 5a, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 7f, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, C0, 01, 00, 00, FF, 00, 00, 00, 5A, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, 7F, 03, 00, 00, 00, E1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 00, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 00, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 00, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 77, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, C0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, 7f, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, b7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, C0, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, F7, 03, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, c2, 01, 00, c0, 5d, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, f7, 03, 00, 00, 00, e1, 00, 00, 80, 25, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, C0, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 03, 00, 00, 00, 84, 03, 00, 40, 83, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 40, 38, 00, 00
HKR,, Properties, 1, C0, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 03, 00, 00, 00, C2, 01, 00, 40, 83, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, c2, 01, 00, 80, 70, 00, 00
HKR,, Properties, 1, C0, 01, 00, 00, FF, 00, 00, 00, FF, 00, 00, 00, 07, 00, 00, 00, 0F, 00, 00, 00, FF, 03, 00, 00, 00, E1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 03, 00, 00, 80, 70, 00, 00, 00, 96, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 07, 00, 00, 00, 4b, 00, 00, 60, 09, 00, 00
HKR,, Properties, 1, c0, 01, 00, 00, ff, 00, 00, 00, ff, 00, 00, 00, 07, 00, 00, 00, 0f, 00, 00, 00, ff, 07, 00, 00, 00, e1, 00, 00, 40, 38, 00, 00
HKR,, Reset, , "AT &F<cr>"
HKR,, Reset, , "AT&F B0 &C0 &D2 <cr>"
HKR,, Reset, , "AT&F B0 &C1 &D2<cr>"
HKR,, Reset, , "AT&F V1 E0<cr>"
HKR,, Reset, , "AT&F&Q0<cr>"
HKR,, Reset, , "AT&F<cr>"
HKR,, Reset, , "AT&F1<cr>"
HKR,, Reset, , "AT&F2<cr>"
HKR,, Reset, , "AT&F5<cr>"
HKR,, Reset, , "AT&F9<cr>"
HKR,, Reset, , "AT&FE1V1S0=0<cr>"
HKR,, Reset, , "AT&FS0=0<cr>"
HKR,, Reset, , "AT&FS0=0S95=45<cr>"
HKR,, Reset, , "AT&FW0S0=0S95=47<cr>"
HKR,, Reset, , "AT&FX1<cr>"
HKR,, Reset, , "AT&Z<cr>"
HKR,, Reset, , "AT<cr>"
HKR,, Reset, , "ATE1<cr>"
HKR,, Reset, , "ATZ<cr>"
HKR,, RunOnce, , "grpconv /o"
HKR,, SpeakerPhoneSpecs, 1, 00, 00, 00, 00, 0f, 00, 00, 00, 03, 00, 00, 00, 00, 00, 00, 00
HKR,, SpeakerPhoneSpecs, 1, 89, 00, 00, 00, 53, 00, 00, 00, ff, 00, 00, 00, 01, 00, 00, 00
HKR,, TerminatePlay, , "<h10><h03>at<cr>"
HKR,, TerminateRecord, , "<h10>E<cr>at<cr>"
HKR,, TerminateRecord, , "<h1A><cr>at<cr>"
HKR,, TerminateRecord, , "at<cr>"
HKR,, VariableTerminator, , <cr><lf>
HKR,, VoiceManufacturerID, 1, 01, 00
HKR,, VoiceMixerLineID, 1, 00, 00, 05, 00
HKR,, VoiceMixerMid, 1, 02, 00
HKR,, VoiceMixerPid, 1, 99, 01
HKR,, VoiceProductIDHandsetWaveOut, 1, 82, 00
HKR,, VoiceProductIDHandsetWaveOut, 1, 83, 00
HKR,, VoiceProductIDWaveIn, 1, 80, 00
HKR,, VoiceProductIDWaveOut, 1, 81, 00
HKR,, VoiceProfile, 1, 21, 82, 00, 00
HKR,, VoiceProfile, 1, 23, 02, 08, 00
HKR,, VoiceProfile, 1, 23, 03, 08, 00
HKR,, VoiceProfile, 1, 23, 82, 00, 00
HKR,, VoiceProfile, 1, 25, 12, 00, 00
HKR,, VoiceProfile, 1, 27, 02, 48, 00
HKR,, VoiceProfile, 1, 27, 03, 00, 00
HKR,, VoiceProfile, 1, 27, 03, 08, 00
HKR,, VoiceProfile, 1, 63, 00, 20, 00
HKR,, VoiceProfile, 1, A1, 13, 09, 00
HKR,, VoiceProfile, 1, E3, 10, 20, 00
HKR,, VoiceView, 1, 01
HKR,Answer, 1, , ""
HKR,Answer, 1, , "AT A <cr>"
HKR,Answer, 1, , "AT A<cr>"
HKR,Answer, 1, , "ATA<cr>"
HKR,Answer, 1, , "CLIENTSERVER"
HKR,Answer, 1, , "None"
HKR,Answer, 2, , "NoResponse"
HKR,CloseHandset, 1, , "at#cls=0<cr>"
HKR,CloseHandset, 1, , "at#vcl=0<cr>"
HKR,EnableCallerID, 1, , "at#cid=1<cr>"
HKR,EnableDistinctiveRing, 1, , "at-sdr=7<cr>"
HKR,EnableDistinctiveRing, 1, , "ATS101=1<cr>"
HKR,Fax, AnswerMode, , "1"
HKR,Fax, AnswerMode, , "2"
HKR,Fax, BlindDial, , "2"
HKR,Fax, Cl1DontSync, , "1"
HKR,Fax, Cl1FCS, , "0"
HKR,Fax, Class1DTESpeed, , "19200"
HKR,Fax, Class1DTESpeed, , "AUTO"
HKR,Fax, Class1FlowHW, , "&K3"
HKR,Fax, Class1FlowHW, , "&K6"
HKR,Fax, Class1FlowHW, , "\Q3"
HKR,Fax, Class1FlowHW, , "+FLO=2"
HKR,Fax, Class1FlowOff, , "&K0"
HKR,Fax, Class1FlowOff, , "\Q0"
HKR,Fax, Class1FlowOff, , "+FLO=0"
HKR,Fax, Class1FlowSW, , "&K4"
HKR,Fax, Class1FlowSW, , "\Q1"
HKR,Fax, Class1FlowSW, , "+FLO=1"
HKR,Fax, Class2FlowHW, , "&H3"
HKR,Fax, Class2FlowHW, , "&K3"
HKR,Fax, Class2FlowHW, , "&K6"
HKR,Fax, Class2FlowHW, , "\Q3"
HKR,Fax, Class2FlowHW, , "+FLO=2"
HKR,Fax, Class2FlowOff, , "&H0"
HKR,Fax, Class2FlowOff, , "&K0"
HKR,Fax, Class2FlowOff, , "\Q0"
HKR,Fax, Class2FlowOff, , "+FLO=0"
HKR,Fax, Class2FlowSW, , "&H4"
HKR,Fax, Class2FlowSW, , "&K4"
HKR,Fax, Class2FlowSW, , "\Q1"
HKR,Fax, Class2FlowSW, , "+FLO=1"
HKR,Fax, CommaDelay, , "2"
HKR,Fax, CopyQualityCheckLevel, , "1"
HKR,Fax, DialToneWait, , "30"
HKR,Fax, DisableG3ECM, , "1"
HKR,Fax, DisableMRRecv, , "1"
HKR,Fax, DisableMRSend, , "1"
HKR,Fax, DontPurge, , "0"
HKR,Fax, EnableV17Recv, , "1"
HKR,Fax, EnableV17Send, , "1"
HKR,Fax, ExitCommand, , ""
HKR,Fax, ExitCommand, , "AT&FE0"
HKR,Fax, ExitCommand, , "AT&FE0&O0&L1"
HKR,Fax, ExitCommand, , "ATZ"
HKR,Fax, FixModemClass, , "1"
HKR,Fax, FixModemClass, , "2"
HKR,Fax, FixSerialSpeed, , "19200"
HKR,Fax, HangupDelay, , "60"
HKR,Fax, HighestSendSpeed, , "14400"
HKR,Fax, LowestSendSpeed, , "2400"
HKR,Fax, ModemFaxClasses, , "14"
HKR,Fax, ModemFaxClasses, , "4"
HKR,Fax, ModemIdCmd, , "ATI1"
HKR,Fax, NumRings, , "2"
HKR,Fax, PreAnswerCommand, , ""
HKR,Fax, PreDialCommand, , ""
HKR,Fax, ResetCommand, , "AT S111=2"
HKR,Fax, ResetCommand, , "AT&FE0&O0&L1+FCLASS=Z+FZF=1"
HKR,Fax, ResetCommand, , "AT&FE0&O0&L1+FCLASS=Z+FZF=5"
HKR,Fax, ResetCommand, , "AT&FE0+FCLASS=Z+FZF=5"
HKR,Fax, SetupCommand, , "AT E0 S0=0"
HKR,Fax, SetupCommand, , "ATS0=4&W0&FE0&O0&L1+FCLASS=2"
HKR,Fax, SetupCommand, , "ATS0=4&W0&FE0+FCLASS=2"
HKR,Fax, SetupCommand, , "ATS0=4S72=0S73.3=1S73.5=1S73.6=1&W0&FE0&O0&L1+FCLASS=1"
HKR,Fax, SetupCommand, , "ATS7=255&D3&O0&L1S57.4=1"
HKR,Fax, SetupCommand, , "ATS7=255&D3S34=1"
HKR,Fax, SetupCommand, , "ATS7=255&D3S57.4=1"
HKR,Fax, SpeakerMode, , "1"
HKR,Fax, Volume, , "2"
HKR,GenerateDigit, 1, , "at#vts=<Digit><cr>"
HKR,GenerateDigit, 1, , "atdt<Digit>;<cr>"
HKR,GenerateDigit, 1, , "atdt<Digit><cr>"
HKR,HandsetSetPlayFormat, 1, , "at#vsr=7200<cr>"
HKR,HandsetSetPlayFormat, 1, , "at#vsr=9600<cr>"
HKR,HandsetSetPlayFormat, 2, , "at#vbs=4<cr>"
HKR,HandsetSetPlayFormat, 2, , "at#vsm=AD4<cr>"
HKR,HandsetSetRecordFormat, 1, , "at#vsr=7200<cr>"
HKR,HandsetSetRecordFormat, 1, , "at#vsr=9600<cr>"
HKR,HandsetSetRecordFormat, 2, , "at#vbs=4<cr>"
HKR,HandsetSetRecordFormat, 2, , "at#vsm=AD4<cr>"
HKR,Hangup, 1, ,
HKR,Hangup, 1, , "AT H <cr>"
HKR,Hangup, 1, , "AT H<cr>"
HKR,Hangup, 1, , "AT<cr>"
HKR,Hangup, 1, , "ATH<cr>"
HKR,Hangup, 1, , "ATH0<cr>"
HKR,Init, 1, , "AT &F E0<cr>"
HKR,Init, 1, , "AT &F<cr>"
HKR,Init, 1, , "AT &FE0X7<cr>"
HKR,Init, 1, , "AT &O7<cr>"
HKR,Init, 1, , "AT%%A<cr>"
HKR,Init, 1, , "AT&FE0X7<cr>"
HKR,Init, 1, , "AT<cr>"
HKR,Init, 1, , "ATE0Q0V1<cr>"
HKR,Init, 1, , "None"
HKR,Init, 10, , "AT &O0<cr>"
HKR,Init, 10, , "AT S111=7<cr>"
HKR,Init, 11, , "AT S0=0 S95=45 \N3 %%C3<cr>"
HKR,Init, 12, , "AT &O0<cr>"
HKR,Init, 2, , "AT &F &C1 &D2 <cr>"
HKR,Init, 2, , "AT &F &C1&D2<cr>"
HKR,Init, 2, , "AT &F &D2 &C1 E0 \V1 V0 W2 S0=0<cr>"
HKR,Init, 2, , "AT &F &D2 &C1 E0 V1 \V3 S90=249<cr>"
HKR,Init, 2, , "AT &F &D2 &C1 E0 V1 <cr>"
HKR,Init, 2, , "AT &F &D2 &C1 E0 V1 S90=0<cr>"
HKR,Init, 2, , "AT &F &D2 &C1 E0 V1 W1 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F &D2 &C1 E0 V1 W2<cr>"
HKR,Init, 2, , "AT &F &D2 &C1<cr>"
HKR,Init, 2, , "AT &F &D2 S0=0 E0 &C1 V1 \V0<cr>"
HKR,Init, 2, , "AT &F \N11 E0 V1 W1 S95=47<cr>"
HKR,Init, 2, , "AT &F \N6 -M0 Q0 V1 \V1<cr>"
HKR,Init, 2, , "AT &F \N6 <cr>"
HKR,Init, 2, , "AT &F \V2 <cr>"
HKR,Init, 2, , "AT &F \V8 <cr>"
HKR,Init, 2, , "AT &F <cr>"
HKR,Init, 2, , "AT &F B0 &C1 &D2 <cr>"
HKR,Init, 2, , "AT &F E0 &C1 &D2 V1 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 &C1 &D2 V1<cr>"
HKR,Init, 2, , "AT &F E0 &D2 &C1 B0 V1<cr>"
HKR,Init, 2, , "AT &F E0 &D2 &C1 S95=3 V1<cr>"
HKR,Init, 2, , "AT &F E0 &D2 &C1 V1 \V2<cr>"
HKR,Init, 2, , "AT &F E0 &D2 &C1 V1 S95=47 B0 <cr>"
HKR,Init, 2, , "AT &F E0 &D2 &C1 V1 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 &D2 &C1 V1<cr>"
HKR,Init, 2, , "AT &F E0 &D2 S0=0 S2=255<cr>"
HKR,Init, 2, , "AT &F E0 &D2 S7=50 \Q3 +Q1 S10=40<cr>"
HKR,Init, 2, , "AT &F E0 &R1 &D2 &C1 V1 W1 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 \V1 W1<cr>"
HKR,Init, 2, , "AT &F E0 B0 &C1 &D2 <cr>"
HKR,Init, 2, , "AT &F E0 B0 &C1 &D2 V1<cr>"
HKR,Init, 2, , "AT &F E0 B0 &D2 &C1 V1<cr>"
HKR,Init, 2, , "AT &F E0 F0 V1 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 Q0 &C1 &D2 V1<cr>"
HKR,Init, 2, , "AT &F E0 Q0 V1 &B1 &C1 &D2 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 Q0 V1 &C1 &D2 &S0 S0=0 \Q10<cr>"
HKR,Init, 2, , "AT &F E0 Q0 V1 &C1 &D2 W2 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 Q0 W1 X4 V1 S95=45 &C1<cr>"
HKR,Init, 2, , "AT &F E0 S0=0 $BA0 S25=20<cr>"
HKR,Init, 2, , "AT &F E0 S0=0 &D2 &C1 V1 \V1<cr>"
HKR,Init, 2, , "AT &F E0 S0=0 S2=255<cr>"
HKR,Init, 2, , "AT &F E0 S0=0 S25=20<cr>"
HKR,Init, 2, , "AT &F E0 V1 &C1 &D2 \V3 *MM<cr>"
HKR,Init, 2, , "AT &F E0 V1 &C1 &D2 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 &C1 &D2 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &C1 &D2 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 &C1 &D2 W1<cr>"
HKR,Init, 2, , "AT &F E0 V1 &C1 &D2 W2 \V1<cr>"
HKR,Init, 2, , "AT &F E0 V1 &C1 &D2 W2 \V2<cr>"
HKR,Init, 2, , "AT &F E0 V1 &C1 &D2<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 \V1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 \V1 W2<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 \V2 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 \V2<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 Q0 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S0=0 \V1<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S95=47 \V1 W1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S95=47 Q0 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S95=47 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S95=47 S0=255<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S95=47 W1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 S95=47 W2 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 W1 \V1<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 W1 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 W1 S95=47 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 W1 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 W2 \V1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 W2 \V1<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 W2 S95=47 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1 W2 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 &D2 &C1\V1W2S95=47S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 &I1<cr>"
HKR,Init, 2, , "AT &F E0 V1 *M2<cr>"
HKR,Init, 2, , "AT &F E0 V1 \V<cr>"
HKR,Init, 2, , "AT &F E0 V1 \V1 &D2 &C1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 \V1 S0=0 &C1 &D2 W2<cr>"
HKR,Init, 2, , "AT &F E0 V1 \V1 S0=0 &C1 &D2<cr>"
HKR,Init, 2, , "AT &F E0 V1 \V1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 \V1 W2 &D2 &C1 S95=47 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 \V1<cr>"
HKR,Init, 2, , "AT &F E0 V1 \V2<cr>"
HKR,Init, 2, , "AT &F E0 V1 Q0 &D2 &C1 S95=47 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 W1 B1 &C1 &D2 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 W1 S0=0 S95=47 S36=7 S48=7<cr>"
HKR,Init, 2, , "AT &F E0 V1 W1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 W1 S95=47 &C1 &D2 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 W1 S95=47 S0=0 &D2 &C1<cr>"
HKR,Init, 2, , "AT &F E0 V1 W1 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 W1 X4 S95=47 &C1 &D2<cr>"
HKR,Init, 2, , "AT &F E0 V1 W1<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 &C1 &D2 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 &D2 &C1 \V2 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 &D2 &C1 S0=0 \V1<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 &D2 &C1 S0=0 \V2<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 &D2 &C1 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 &D2 &C1 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 \V1 &C1 &D2 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 \V1 X4 &C1 &D2<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 \V2 &D2 &C1 S0=0<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 \V2 &D2 &C1 S95=47<cr>"
HKR,Init, 2, , "AT &F E0 V1 W2 S0=0 &D2 &C1 \V1<cr>"
HKR,Init, 2, , "AT &F E0 V1<cr>"
HKR,Init, 2, , "AT &F E0 W0 S95=249 <cr>"
HKR,Init, 2, , "AT &F E0<cr>"
HKR,Init, 2, , "AT &F E1 W0 S95=249<cr>"
HKR,Init, 2, , "AT &F S0=0 &D2 &C1 E0 V1 W2 \V1<cr>"
HKR,Init, 2, , "AT &F S0=0 &D2 &C1 E0 V1<cr>"
HKR,Init, 2, , "AT &F S0=0 &D2 E0 V1<cr>"
HKR,Init, 2, , "AT &F S0=0 <cr>"
HKR,Init, 2, , "AT &F S0=0 E0 V1 &D2 &C1 $X2<cr>"
HKR,Init, 2, , "AT &F S0=0 E0 V1 &D2 &C1 W1 S95=47<cr>"
HKR,Init, 2, , "AT &F S0=0 E0 V1 &D2 &C1 W2 \V1<cr>"
HKR,Init, 2, , "AT &F S0=0 E0 V1 &D2 &C1<cr>"
HKR,Init, 2, , "AT &F S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F S0=0<cr>"
HKR,Init, 2, , "AT &F S95=0 <cr>"
HKR,Init, 2, , "AT &F S95=249<cr>"
HKR,Init, 2, , "AT &F S95=44 <cr>"
HKR,Init, 2, , "AT &F V0 <cr>"
HKR,Init, 2, , "AT &F V1 &D2 &C1 E0 Q0 S0=0 S25=20 $BA0<cr>"
HKR,Init, 2, , "AT &F V1 &D2 &C1 E0 Q0 S0=0 S25=20<cr>"
HKR,Init, 2, , "AT &F V1 E0 S95=46<cr>"
HKR,Init, 2, , "AT &F V1 E0 S95=47<cr>"
HKR,Init, 2, , "AT &F V1 S0=0 S95=47<cr>"
HKR,Init, 2, , "AT &F V1<cr>"
HKR,Init, 2, , "AT &F W0 <cr>"
HKR,Init, 2, , "AT &F W0 S95=122 -J1 <cr>"
HKR,Init, 2, , "AT &F X1<cr>"
HKR,Init, 2, , "AT &F&C1&D2\V2<cr>"
HKR,Init, 2, , "AT &F<cr>"
HKR,Init, 2, , "AT &F0 &D2 &C1 E0 -K0 %E2<cr>"
HKR,Init, 2, , "AT &F0 <cr>"
HKR,Init, 2, , "AT &F0 L2<cr>"
HKR,Init, 2, , "AT &F0<cr>"
HKR,Init, 2, , "AT &F1 E0 V1 &C1 &D2 Q0 S0=0 &B1 &A3<cr>"
HKR,Init, 2, , "AT &F1 E0 V1 &D2 &C1 S95=47 S0=0<cr>"
HKR,Init, 2, , "AT &F1<cr>"
HKR,Init, 2, , "AT &F2 E V Q0 W1 &C1 &D2 S95=47 S0=0<cr>"
HKR,Init, 2, , "AT &F2 E0 &C1 &D2 V1 \V1 S0=0<cr>"
HKR,Init, 2, , "AT &F2 E0 V1 Q0 W1 S95=47 S0=0<cr>"
HKR,Init, 2, , "AT &F5 <cr>"
HKR,Init, 2, , "AT &F9 E0 V1 S59=7<cr>"
HKR,Init, 2, , "AT &F9<cr>"
HKR,Init, 2, , "AT &FE0&D2&C1<cr>"
HKR,Init, 2, , "AT &FE0Q0V1W1&C1&S0S0=0S70=64S95=47<cr>"
HKR,Init, 2, , "AT &FX4S7=60<cr>"
HKR,Init, 2, , "AT &O3<cr>"
HKR,Init, 2, , "AT &O6<cr>"
HKR,Init, 2, , "AT &Q0&C1&D1&K3Q0V1W0X4E1B0F0%%C2\N7<cr>"
HKR,Init, 2, , "AT E0 &F&D2&C1<cr>"
HKR,Init, 2, , "AT E0 S0=0 S95=45<cr>"
HKR,Init, 2, , "AT E0 V1 &C1 &D2 S0=0 \V2<cr>"
HKR,Init, 2, , "AT E0 V1 &C1 &D2 S0=0 W2 S95=47<cr>"
HKR,Init, 2, , "AT W0 S95=251<cr>"
HKR,Init, 2, , "AT Z <cr>"
HKR,Init, 2, , "AT Z<cr>"
HKR,Init, 2, , "AT&C1&D2 W0 S0=0 %A2=95 %A4=0  %A96=1<cr>"
HKR,Init, 2, , "AT&F E0 V1<cr>"
HKR,INIT, 2, , "AT&F S50=0 S38=1 &D2<cr>"
HKR,Init, 2, , "AT&F%%A2=1&Q0<cr>"
HKR,Init, 2, , "AT&F%%AE0V1&S0\N0<cr>"
HKR,Init, 2, , "AT&F%%AE0V1&S0\N1<cr>"
HKR,Init, 2, , "AT&F%%AE0V1&S0\N2<cr>"
HKR,Init, 2, , "AT&F%%AE0V1&S0\N3<cr>"
HKR,Init, 2, , "AT&F%%AE0V1&S0\N7<cr>"
HKR,Init, 2, , "AT&F%%F2\N3\Q3E0V0&C1&D2S0=0<cr>"
HKR,Init, 2, , "AT&F&B1&C1&D2&M4&K1E0Q0V1&A3<cr>"
HKR,Init, 2, , "AT&F&C1&D2 V1 X7 S0=0 S2=128 S7=55<cr>"
HKR,Init, 2, , "AT&F&C1&D2E0V1<cr>"
HKR,Init, 2, , "AT&F&C1&D2E0V1S0=0<cr>"
HKR,Init, 2, , "AT&F&C1&D2E0V1S95=47S0=0<cr>"
HKR,Init, 2, , "AT&F&C1E0&D2V1W2S95=47<cr>"
HKR,Init, 2, , "AT&F&D2&C1\V1S0=0E0V1<cr>"
HKR,Init, 2, , "AT&F&D2&C1\V1S0=0E0V1W2S90=249<cr>"
HKR,Init, 2, , "AT&F&D2&C1E0V1\V3S95=47S90=249<cr>"
HKR,Init, 2, , "AT&F&D2&C1S0=0E0V1*XC1*MM0*CM1<cr>"
HKR,Init, 2, , "AT&F&D2&C1S0=0E0V1*XC1*MM10<cr>"
HKR,Init, 2, , "AT&F&D2&C1S0=0E0V1*XC1<cr>"
HKR,Init, 2, , "AT&F&D2&K3&C1%%C0W0-J1S95=122<cr>"
HKR,Init, 2, , "AT&F&K3E0V1<cr>"
HKR,Init, 2, , "AT&F<cr>"
HKR,Init, 2, , "AT&F0E0V0W1&C1&D2\G0\J0\Q3\N7<cr>"
HKR,Init, 2, , "AT&F1&B1&C1&D2E0Q0V1&A3S0=0<cr>"
HKR,Init, 2, , "AT&F2&C1&D2V1\V1S0=0\N6%%C1\J0E0<cr>"
HKR,Init, 2, , "AT&F2&M0\N3E1\V4&C1&D2V1X4E0 S0=0  <cr>"
HKR,Init, 2, , "AT&F2E0S95=47<cr>"
HKR,Init, 2, , "AT&F2E0W2<cr>"
HKR,Init, 2, , "AT&F2EVQ0W1&C1&D2S95=47S0=0<cr>"
HKR,Init, 2, , "AT&FE0&D2&C1V0W1S0=0S95=47<cr>"
HKR,Init, 2, , "AT&FE0<cr>"
HKR,Init, 2, , "AT&FE0Q0V1W1&C1&S0S0=0S95=47<cr>"
HKR,Init, 2, , "AT&FE0V0&A3&B1&D2&S0<cr>"
HKR,Init, 2, , "AT&FE0V0&C1&D2<cr>"
HKR,Init, 2, , "AT&FE0V0&C1&D2S0=0<cr>"
HKR,Init, 2, , "AT&FE0V0&D2&C1<cr>"
HKR,Init, 2, , "AT&FE0V0&D2&C1S0=0<cr>"
HKR,Init, 2, , "AT&FE0V0Q0&C1&D2S0=0<cr>"
HKR,Init, 2, , "AT&FE0V0Q0&C1&D2S95=47S0=0<cr>"
HKR,Init, 2, , "AT&FE0V0Q0W1&C1&D2S95=47S0=0<cr>"
HKR,Init, 2, , "AT&FE0V0W1&C1&D2S95=47<cr>"
HKR,Init, 2, , "AT&FE0V0W1&Q5&S0S95=47<cr>"
HKR,Init, 2, , "AT&FE0V0W1S95=47<cr>"
HKR,Init, 2, , "AT&FE0V0W2&C1&D2<cr>"
HKR,Init, 2, , "AT&FE0V0W2&C1&D2S95=47<cr>"
HKR,Init, 2, , "AT&FE0V1&A3&B1&C1&D2&S0S0=0<cr>"
HKR,Init, 2, , "AT&FE0V1&A3&B1&D2&S0<cr>"
HKR,Init, 2, , "AT&FE0V1&C1&D2<cr>"
HKR,Init, 2, , "AT&FE0V1&D2&C1\V1W2S95=47S0=0<cr>"
HKR,Init, 2, , "AT&FE0V1&D2&C1\V2W1S0=0<cr>"
HKR,Init, 2, , "AT&FE0V1&D2&C1Q0S0=0<cr>"
HKR,Init, 2, , "AT&FE0V1&D2&C1S95=47S0=0&C1&D2<cr>"
HKR,Init, 2, , "AT&FE0V1&D2&C1W2 \V1 S95=47 !PSTN<cr>"
HKR,Init, 2, , "AT&FE0V1&D2&C1W2Q0S0=0<cr>"
HKR,Init, 2, , "AT&FE0V1&S0 W0S95=44<cr>"
HKR,Init, 2, , "AT&FE0V1\V2<cr>"
HKR,Init, 2, , "AT&FE0V1Q0&C1&D2<cr>"
HKR,Init, 2, , "AT&FE0V1S0=0S95=47<cr>"
HKR,Init, 2, , "AT&FE0V1S95=47&C1&D2<cr>"
HKR,Init, 2, , "AT&FE0V1S95=47<cr>"
HKR,Init, 2, , "AT&FE0V1W2&C1&D2\V1<cr>"
HKR,Init, 2, , "AT&FE0V1X4S95=47&C1&D2&S0<cr>"
HKR,Init, 2, , "AT&FE0W1V1S95=47<cr>"
HKR,Init, 2, , "AT&FE0W2V1X4S95=47&C1&D2&S0<cr>"
HKR,Init, 2, , "AT&FE1V1&A3&B1&D2&S0<cr>"
HKR,Init, 2, , "AT&FE1V1&A3&S0<cr>"
HKR,Init, 2, , "AT&FEW5&SS21=0S0=0<cr>"
HKR,Init, 2, , "AT&FF0E0Q0V0 <cr>"
HKR,Init, 2, , "AT&FF0E0Q0V0<cr>"
HKR,Init, 2, , "AT&FS0=0E0&C1&D2<cr>"
HKR,Init, 2, , "AT&FS0=0E0V1Q0&C1&D2<cr>"
HKR,Init, 2, , "AT&FV0E0&D2&S0<cr>"
HKR,Init, 2, , "AT&FV1&D2&C1E0Q0<cr>"
HKR,Init, 2, , "AT&FV1&D2&C1E0Q0W1S95=47<cr>"
HKR,Init, 2, , "AT&O0<cr>"
HKR,Init, 2, , "AT&O1<cr>"
HKR,Init, 2, , "AT&O2<cr>"
HKR,Init, 2, , "AT&O3<cr>"
HKR,Init, 2, , "AT&Q0&C1&D1Q0V1W1E0S95=47<cr>"
HKR,Init, 2, , "ATE0Q0V0X1S0=0<cr>"
HKR,Init, 2, , "ATE0V1&S0\N3%%S1<cr>"
HKR,Init, 2, , "ATE0V1<cr>"
HKR,Init, 2, , "ATE1V1<cr>"
HKR,Init, 2, , "ATS11=90S57.4=1<cr>"
HKR,Init, 2, , "ATS35.1=0S35.7=1<cr>"
HKR,Init, 2, , "ATX6=1X8=1S0=0S15=10<cr>"
HKR,Init, 2, , "ATZ<cr>"
HKR,INIT, 2, , "ATZ<cr>"
HKR,Init, 2, , "ATZ12<cr>"
HKR,Init, 2, , "NoResponse"
HKR,Init, 3, , "AT $E3 $F5<cr>"
HKR,INIT, 3, , "AT $X3 &D2<cr>"
HKR,Init, 3, , "AT &C1 &D2 S0=0 E0 V1 S95=47<cr>"
HKR,Init, 3, , "AT &D2 &S0 S0=0 \N3 %%C3<cr>"
HKR,Init, 3, , "AT &D2 S95=249<cr>"
HKR,Init, 3, , "AT &F &C1 &D2 E0 V1<cr>"
HKR,Init, 3, , "AT &F V1 W1<cr>"
HKR,Init, 3, , "AT &F W3 S66=68  <cr>"
HKR,Init, 3, , "AT &F<cr>"
HKR,Init, 3, , "AT &F9 E0 V1 S92=1 S59=3<cr>"
HKR,Init, 3, , "AT &O1<cr>"
HKR,Init, 3, , "AT \J0<cr>"
HKR,Init, 3, , "AT \V0 X2<cr>"
HKR,Init, 3, , "AT <cr>"
HKR,Init, 3, , "AT E0 %%U2 V0 S0=0<cr>"
HKR,Init, 3, , "AT E0 &D2 &C1 S0=0 V1 \V2<cr>"
HKR,Init, 3, , "AT E0 &D2 &C1 S0=0 V1<cr>"
HKR,Init, 3, , "AT E0 &D2 V1 \Q3 +M2 \N3<cr>"
HKR,Init, 3, , "AT E0 Q0 V0 W1 T L2 M1 &C1 <cr>"
HKR,Init, 3, , "AT E0 Q0 V0 W2 &C1<cr>"
HKR,Init, 3, , "AT E0 S0=0 S25=20<cr>"
HKR,Init, 3, , "AT E0 S0=0 S95=45<cr>"
HKR,Init, 3, , "AT E0 V0 &D2 &C1 V0 \V1<cr>"
HKR,Init, 3, , "AT E0 V0 <cr>"
HKR,Init, 3, , "AT E0 V1 &C1 &D2 S0=0 \V2<cr>"
HKR,Init, 3, , "AT E0 V1 &C1 &D2 W2 \V1 S95=47<cr>"
HKR,Init, 3, , "AT E0 V1 &C1 &D2 W2<cr>"
HKR,Init, 3, , "AT E0 V1 &D2 &C1 S0=0 S95=47<cr>"
HKR,Init, 3, , "AT E0 V1 &D2 &C1 W1 S95=47 S0=0<cr>"
HKR,Init, 3, , "AT E0 V1 <cr>"
HKR,Init, 3, , "AT E0 V1 C1 &D2 S0=0<cr>"
HKR,Init, 3, , "AT E0 V1 S59=7<cr>"
HKR,Init, 3, , "AT E0 V1 S95=45 S0=0 <cr>"
HKR,Init, 3, , "AT E0 V1 S95=47 \N3 %%C1 \J0<cr>"
HKR,Init, 3, , "AT E0 V1 S95=47 <cr>"
HKR,Init, 3, , "AT E0 V1 S95=47<cr>"
HKR,Init, 3, , "AT E0 V1 W1 B1<cr>"
HKR,Init, 3, , "AT E0 V1 W1 S0=0 S7=50<cr>"
HKR,Init, 3, , "AT E0 V1 W1<cr>"
HKR,Init, 3, , "AT E0 V1 W2 B1<cr>"
HKR,Init, 3, , "AT E0 V1 W2 S95=47<cr>"
HKR,Init, 3, , "AT E0 V1 W2<cr>"
HKR,Init, 3, , "AT E0 V1 X5 S0=0 <cr>"
HKR,Init, 3, , "AT E0 V1<cr>"
HKR,Init, 3, , "AT E0<cr>"
HKR,Init, 3, , "AT E1 &D2 &C1 W0 S0=0 S95=249<cr>"
HKR,Init, 3, , "AT E1 \V0 W1 &D2 S0=0 <cr>"
HKR,Init, 3, , "AT E1 \V0 W1 &D2 S0=0 S95=124 <cr>"
HKR,Init, 3, , "AT E1 Q0 V1 W1 \V1 \J1 S95=249 S10=5 &D2 &C1<cr>"
HKR,Init, 3, , "AT E1 V1 &D2 F70 \N6 X1 <cr>"
HKR,Init, 3, , "AT E1 V1 &D2 F70 \N8 X1 <cr>"
HKR,INIT, 3, , "AT S0=0 &D2 &I0<cr>"
HKR,Init, 3, , "AT S0=0 E0 V1 X3 S95=47<cr>"
HKR,Init, 3, , "AT S0=0<cr>"
HKR,Init, 3, , "AT S0=0T S95=45 \N3 %%C3 V1<cr>"
HKR,Init, 3, , "AT S0=2 V1<cr>"
HKR,Init, 3, , "AT S0=2<cr>"
HKR,Init, 3, , "AT S59=3<cr>"
HKR,Init, 3, , "AT S6=3 <cr>"
HKR,INIT, 3, , "AT S95=122<cr>"
HKR,Init, 3, , "AT S95=250 <cr>"
HKR,INIT, 3, , "AT S95=250<cr>"
HKR,Init, 3, , "AT S95=47 -J1 &Q5<cr>"
HKR,Init, 3, , "AT V1 \V1 X2 &D2 &B0 <cr>"
HKR,Init, 3, , "AT V1 \V1 X2 &D2<cr>"
HKR,Init, 3, , "AT V1 W1 S95=47<cr>"
HKR,Init, 3, , "AT W0 S95=249 S25=0 S38=0<cr>"
HKR,Init, 3, , "AT W1 \V0 &D2<cr>"
HKR,INIT, 3, , "AT W1 V1 &D2<cr>"
HKR,Init, 3, , "AT W1<cr>"
HKR,INIT, 3, , "AT W1<cr>"
HKR,Init, 3, , "AT X1 <cr>"
HKR,Init, 3, , "AT X4S7=60<cr>"
HKR,Init, 3, , "AT&C1&D2&S0<cr>"
HKR,Init, 3, , "AT&C1&D2E0V0W1S95=47<cr>"
HKR,Init, 3, , "AT&D2&C1<cr>"
HKR,Init, 3, , "AT&D2&C1E0Q0V0<cr>"
HKR,INIT, 3, , "AT&F \V0<cr>"
HKR,INIT, 3, , "AT&F S95=248 <cr>"
HKR,INIT, 3, , "AT&F W0 S95=251 <cr>"
HKR,INIT, 3, , "AT&F W1 <cr>"
HKR,INIT, 3, , "AT&F W1<cr>"
HKR,Init, 3, , "AT&F&K3S0=0<cr>"
HKR,Init, 3, , "AT&F&K3S95=47S0=0<cr>"
HKR,INIT, 3, , "AT&F2 W1<cr>"
HKR,Init, 3, , "AT&FV0S0=0S122=2<cr>"
HKR,Init, 3, , "AT&FV0S0=0S122=3<cr>"
HKR,Init, 3, , "AT&FV0S0=0S122=5<cr>"
HKR,Init, 3, , "AT&FV0S0=0S122=6<cr>"
HKR,Init, 3, , "AT&S0&R1-K0S0=0S6=3S7=60S95=47<cr>"
HKR,Init, 3, , "AT\N3\Q3\V1\J0%%C1<cr>"
HKR,Init, 3, , "AT+FCLASS=0<cr>"
HKR,Init, 3, , "AT<cr>"
HKR,Init, 3, , "ATB0<cr>"
HKR,Init, 3, , "ATB00S80.6=1<cr>"
HKR,Init, 3, , "ATB04CL125<cr>"
HKR,Init, 3, , "ATB17S119.4=0S80.6=1<cr>"
HKR,Init, 3, , "ATB18S119.4=1S80.6=1<cr>"
HKR,Init, 3, , "ATB19S80.6=1<cr>"
HKR,Init, 3, , "ATB20S80.6=1<cr>"
HKR,Init, 3, , "ATB40<cr>"
HKR,Init, 3, , "ATB41<cr>"
HKR,Init, 3, , "ATE0V1<cr>"
HKR,Init, 3, , "ATE0V1B1<cr>"
HKR,Init, 3, , "ATE0W1V1<cr>"
HKR,Init, 3, , "ATS48.2=1S11=90<cr>"
HKR,Init, 3, , "ATV1\V1<cr>"
HKR,Init, 3, , "ATW2 <cr>"
HKR,Init, 3, , "ATW2\Q3 <cr>"
HKR,Init, 3, , "ATX3\J0\N3\Q3%%C1"
HKR,Init, 3, , "ATY0L3&C1&D2&S1&R\Q3\V1S39=32S95=47V1E0 <cr>"
HKR,Init, 4, , "AT &C1 &D2 \V1<cr>"
HKR,Init, 4, , "AT &C1 &D2 <cr>"
HKR,Init, 4, , "AT &C1 &D2 S95=47<cr>"
HKR,Init, 4, , "AT &D2 &S0 \J0 \V1 S95=47<cr>"
HKR,Init, 4, , "AT &D2 &S0 X4 %%C1 \J0 \N7 \Q3 \V1 \T0 <cr>"
HKR,Init, 4, , "AT &O6<cr>"
HKR,Init, 4, , "AT &O7<cr>"
HKR,Init, 4, , "AT E0 S0=0 T V1 S95=45 \N3 %%C3<cr>"
HKR,Init, 4, , "AT E0 S0=0 T V1<cr>"
HKR,Init, 4, , "AT E0 V1 &C1 &D2 Q0 &B1 &A3<cr>"
HKR,Init, 4, , "AT E0 V1 Q0 T<cr>"
HKR,Init, 4, , "AT F0 &C1 &D2<cr>"
HKR,Init, 4, , "AT F0 N1 &C1 &D2 \N3<cr>"
HKR,Init, 4, , "AT S0=0 S7=50 +Q1<cr>"
HKR,Init, 4, , "AT S112=32<cr>"
HKR,Init, 4, , "AT S49.7=1<cr>"
HKR,Init, 4, , "AT S9=100 S10=200 <cr>"
HKR,Init, 4, , "AT W1 S7=50 X4<cr>"
HKR,Init, 4, , "AT W2 \V1<cr>"
HKR,Init, 4, , "AT&L1S43.3=1S48.2=1<cr>"
HKR,Init, 5, , "AT S0=0 S95=45<cr>"
HKR,Init, 5, , "ATS110.4=1<cr>"
HKR,Init, 5, , "ATS84.4=1S104=1S108=2<cr>"
HKR,Init, 6, , "AT &O1<cr>"
HKR,Init, 6, , "AT &O7<cr>"
HKR,Init, 6, , "AT&J3S100=0<cr>"
HKR,Init, 6, , "AT&J3S100=1<cr>"
HKR,Init, 6, , "AT&L0S118.5=1S111.0=1S118.6=0<cr>"
HKR,Init, 7, , "AT S0=0 S95=45<cr>"
HKR,Init, 7, , "AT S112=32<cr>"
HKR,Init, 8, , "AT &O1<cr>"
HKR,Init, 8, , "AT S0=0 S95=45<cr>"
HKR,Init, 8, , "AT S111=7<cr>"
HKR,Init, 9, , "AT S0=0 S95=45 \N3 %%C3<cr>"
HKR,Init, 9, , "AT S112=32<cr>"
HKR,LineSetPlayFormat, 1, , "at#vls=0<cr>"
HKR,LineSetPlayFormat, 1, , "at#vsr=9600<cr>"
HKR,LineSetPlayFormat, 1, , "None"
HKR,LineSetPlayFormat, 2, , "at#vsm=AD4<cr>"
HKR,LineSetPlayFormat, 2, , "NoResponse"
HKR,LineSetRecordFormat, 1, , "at#vsr=9600<cr>"
HKR,LineSetRecordFormat, 1, , "None"
HKR,LineSetRecordFormat, 2, , "at#vsm=AD4<cr>"
HKR,LineSetRecordFormat, 2, , "NoResponse"
HKR,Monitor, 1, , "ATS0=0 <cr>"
HKR,Monitor, 1, , "ATS0=0<cr>"
HKR,Monitor, 1, , "ATS0=1<cr>"
HKR,Monitor, 1, , "ATZ<cr>"
HKR,Monitor, 1, , "None"
HKR,Monitor, 2, , "None"
HKR,MonitorVoiceViewOff, 1, , "AT+FCLASS=0<cr>"
HKR,MonitorVoiceViewOff, 2, , "None"
HKR,MonitorVoiceViewOn, 1, , "AT+FCLASS=80<cr>"
HKR,MonitorVoiceViewOn, 2, , "None"
HKR,OpenHandset, 1, , "at#cls=8<cr>"
HKR,OpenHandset, 1, , "at#vcl=1<cr>"
HKR,OpenHandset, 2, , "at#vln=2<cr>"
HKR,OpenHandset, 2, , "at#vls=1<cr>"
HKR,OpenHandset, 2, , "at#vls=2<cr>"
HKR,Override, 0000, 1, 00, 04, 00, 00, 00, 00, 00, 00, \
HKR,Override, 0000, 1, 00, 04, 00, 00, 00, 20, 00, 00, \
HKR,Override, 0001, 1, 00, 04, 00, 00, 00, 00, 00, 00, \
HKR,Override, 0001, 1, 00, 04, 00, 00, 00, 20, 00, 00, \
HKR,Override, 0002, 1, 00, 04, 00, 00, 00, 00, 00, 00, \
HKR,Override, 0002, 1, 00, 04, 00, 00, 00, 20, 00, 00, \
HKR,Override, 0003, 1, 00, 04, 00, 00, 00, 00, 00, 00, \
HKR,Override, 0003, 1, 00, 04, 00, 00, 00, 20, 00, 00, \
HKR,Override, 0004, 1, 00, 04, 00, 00, 00, 00, 00, 00, \
HKR,Override, 0004, 1, 00, 04, 00, 00, 00, 20, 00, 00, \
HKR,Override, 0005, 1, 00, 04, 00, 00, 00, 00, 00, 00, \
HKR,Override, 0005, 1, 00, 04, 00, 00, 00, 20, 00, 00, \
HKR,Override, 0006, 1, 00, 04, 00, 00, 00, 00, 00, 00, \
HKR,Override, 0006, 1, 00, 04, 00, 00, 00, 20, 00, 00, \
HKR,Override, 0007, 1, 00, 04, 00, 00, 00, 00, 00, 00, \
HKR,Override, 0007, 1, 00, 04, 00, 00, 00, 20, 00, 00, \
HKR,Override, 0008, 1, 00, 04, 00, 00, 00, 50, 00, 00, \
HKR,Settings, Blind_Off, ,
HKR,Settings, Blind_Off, , ""
HKR,Settings, Blind_Off, , "*BD2S6=0"
HKR,Settings, Blind_Off, , "S41.4=0"
HKR,Settings, Blind_Off, , "X1"
HKR,Settings, Blind_Off, , "X2"
HKR,Settings, Blind_Off, , "X3"
HKR,Settings, Blind_Off, , "X4"
HKR,Settings, Blind_Off, , "X5"
HKR,Settings, Blind_Off, , "X7"
HKR,Settings, Blind_On, ,
HKR,Settings, Blind_On, , ""
HKR,Settings, Blind_On, , "S41.4=1"
HKR,Settings, Blind_On, , "X0"
HKR,Settings, Blind_On, , "X1"
HKR,Settings, Blind_On, , "X3"
HKR,Settings, Blind_On, , "X3S6=0"
HKR,Settings, CallSetupFailTimer, ,
HKR,Settings, CallSetupFailTimer, , " "
HKR,Settings, CallSetupFailTimer, , ""
HKR,Settings, CallSetupFailTimer, , "S10=<#>"
HKR,Settings, CallSetupFailTimer, , "S7=<#>"
HKR,Settings, CallSetupFailTimer, , "S7=30"
HKR,Settings, CallSetupFailTimer, , "S7=40"
HKR,Settings, CallSetupFailTimer, , "S7=60"
HKR,Settings, Cellular_Off, ,
HKR,Settings, Cellular_Off, , "-K0"
HKR,Settings, Cellular_Off, , "-K0)M0"
HKR,Settings, Cellular_Off, , "-K0)M1"
HKR,Settings, Cellular_Off, , ")M0"
HKR,Settings, Cellular_Off, , "S10=28\N3F0*V53=3&C1*V73=13"
HKR,Settings, Cellular_Off, , "S43.3=1"
HKR,Settings, Cellular_On, ,
HKR,Settings, Cellular_On, , "-K1"
HKR,Settings, Cellular_On, , "-K1)M1"
HKR,Settings, Cellular_On, , "-K1)M1*H0"
HKR,Settings, Cellular_On, , ")M1"
HKR,Settings, Cellular_On, , "S10=254\N5F3*V53=0&C3*V73=40"
HKR,Settings, Cellular_On, , "S43.3=0"
HKR,Settings, Compression_Off, , ""
HKR,Settings, Compression_Off, , """H0"
HKR,Settings, Compression_Off, , """H0%%C0"
HKR,Settings, Compression_Off, , "$C0"
HKR,Settings, Compression_Off, , "%%A2=1&U0"
HKR,Settings, Compression_Off, , "%%C"
HKR,Settings, Compression_Off, , "%%C0 S101=0"
HKR,Settings, Compression_Off, , "%%C0 S46=136"
HKR,Settings, Compression_Off, , "%%C0"
HKR,Settings, Compression_Off, , "%%C0""H0-J0"
HKR,Settings, Compression_Off, , "%%C0""H0"
HKR,Settings, Compression_Off, , "%%C0\N6"
HKR,Settings, Compression_Off, , "%%C0S46=0"
HKR,Settings, Compression_Off, , "%%C0S46=136"
HKR,Settings, Compression_Off, , "%%C1"
HKR,Settings, Compression_Off, , "%C0"
HKR,Settings, Compression_Off, , "&E14"
HKR,Settings, Compression_Off, , "&K0"
HKR,Settings, Compression_Off, , "&K3"
HKR,Settings, Compression_Off, , "&Q0"
HKR,Settings, Compression_Off, , "&Q6"
HKR,Settings, Compression_Off, , "&Q8S46=136"
HKR,Settings, Compression_Off, , "&U0"
HKR,Settings, Compression_Off, , "*DC0"
HKR,Settings, Compression_Off, , "*E0"
HKR,Settings, Compression_Off, , "*E5"
HKR,Settings, Compression_Off, , "\C0"
HKR,Settings, Compression_Off, , "\M1"
HKR,Settings, Compression_Off, , "\M1\C4"
HKR,Settings, Compression_Off, , "\N0"
HKR,Settings, Compression_Off, , "\P0"
HKR,Settings, Compression_Off, , "L0"
HKR,Settings, Compression_Off, , "S190=0"
HKR,Settings, Compression_Off, , "S198=0S96=0"
HKR,Settings, Compression_Off, , "S46=0"
HKR,Settings, Compression_Off, , "S46=136"
HKR,Settings, Compression_Off, , "S46=136%%C0"
HKR,Settings, Compression_Off, , "S98=0 S96=0"
HKR,Settings, Compression_On, , ""
HKR,Settings, Compression_On, , """H3"
HKR,Settings, Compression_On, , """H3%%C1"
HKR,Settings, Compression_On, , "$C1"
HKR,Settings, Compression_On, , "%%A2=2&U1"
HKR,Settings, Compression_On, , "%%C1 S101=35"
HKR,Settings, Compression_On, , "%%C1 S46=138"
HKR,Settings, Compression_On, , "%%C1"
HKR,Settings, Compression_On, , "%%C1""H3-J1"
HKR,Settings, Compression_On, , "%%C1""H3"
HKR,Settings, Compression_On, , "%%C1S46=138"
HKR,Settings, Compression_On, , "%%C1S46=2"
HKR,Settings, Compression_On, , "%%C2\N7"
HKR,Settings, Compression_On, , "%%C3 S46=138"
HKR,Settings, Compression_On, , "%%C3"
HKR,Settings, Compression_On, , "%%C3""H3"
HKR,Settings, Compression_On, , "%%C3S46=138"
HKR,Settings, Compression_On, , "%C3"
HKR,Settings, Compression_On, , "&E15"
HKR,Settings, Compression_On, , "&K1"
HKR,Settings, Compression_On, , "&K4"
HKR,Settings, Compression_On, , "&K4&K44"
HKR,Settings, Compression_On, , "&Q5"
HKR,Settings, Compression_On, , "&Q5S36=7S46=138S48=7"
HKR,Settings, Compression_On, , "&U1"
HKR,Settings, Compression_On, , "*DC1"
HKR,Settings, Compression_On, , "*E1"
HKR,Settings, Compression_On, , "*E9"
HKR,Settings, Compression_On, , "\C1"
HKR,Settings, Compression_On, , "\M0"
HKR,Settings, Compression_On, , "\N1"
HKR,Settings, Compression_On, , "\N7"
HKR,Settings, Compression_On, , "\N7%%C1"
HKR,Settings, Compression_On, , "\P2"
HKR,Settings, Compression_On, , "L5"
HKR,Settings, Compression_On, , "S190=1"
HKR,Settings, Compression_On, , "S198=0S96=1S110=1"
HKR,Settings, Compression_On, , "S46=138"
HKR,Settings, Compression_On, , "S46=138%%C3"
HKR,Settings, Compression_On, , "S46=2"
HKR,Settings, Compression_On, , "S98=0 S96=0"
HKR,Settings, DialPrefix, , "CLIENT"
HKR,Settings, DialPrefix, , "D"
HKR,Settings, DialPrefix, , "DT"
HKR,Settings, DialSuffix, ,
HKR,Settings, DialSuffix, , ""
HKR,Settings, DialSuffix, , "";""
HKR,Settings, DialSuffix, , ";"
HKR,Settings, ErrorControl_Cellular, , "-K1"
HKR,Settings, ErrorControl_Cellular, , "-K1)M1"
HKR,Settings, ErrorControl_Cellular, , "-K1)M1*H0"
HKR,Settings, ErrorControl_Cellular, , "&F1"
HKR,Settings, ErrorControl_Cellular, , "&F5 &I14"
HKR,Settings, ErrorControl_Cellular, , "&F6 \N5 S91=1"
HKR,Settings, ErrorControl_Cellular, , "&F6 \N5"
HKR,Settings, ErrorControl_Cellular, , "&F6 \N7"
HKR,Settings, ErrorControl_Cellular, , "&M4 &L2 S10=30"
HKR,Settings, ErrorControl_Cellular, , "&Q5S36=7S48=7)M1\N3"
HKR,Settings, ErrorControl_Cellular, , ")M1"
HKR,Settings, ErrorControl_Cellular, , "\N2)M1:E0@M18*H1"
HKR,Settings, ErrorControl_Cellular, , "\N3-K1S36=7S48=7"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M *H2 :E0 S10=50"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 -Q1 *H0 :E1"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 -Q1 *H1 :E1"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 -Q1 *H1"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 -Q2 *H1 ""M1"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 %%C3 -Q0 S46=138"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 *H1"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 *H2 %%C1 -Q2 S46=138"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 *H2 %%C3 -Q1 S46=138"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1 *H2 %%C3 -Q1"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K1 )M1"
HKR,Settings, ErrorControl_Cellular, , "\N3 -K2 )M1"
HKR,Settings, ErrorControl_Cellular, , "\N3 -SEC=1"
HKR,Settings, ErrorControl_Cellular, , "\N3 $M1 -K2 )M1"
HKR,Settings, ErrorControl_Cellular, , "\N3 &Q5 -K1 *H1 )M1 -C1 -Q0"
HKR,Settings, ErrorControl_Cellular, , "\N3 )M1 -K1 -Q1 *H1 :E0 &Q5"
HKR,Settings, ErrorControl_Cellular, , "\N3 )M1 -K1 -Q1 *H1 :E0"
HKR,Settings, ErrorControl_Cellular, , "\N3 )M1 -K1 :E0 @M18 *H1 S48=7 S36=7"
HKR,Settings, ErrorControl_Cellular, , "\N3 )M1 *H0 -K1 -Q1 :E1 @M0"
HKR,Settings, ErrorControl_Cellular, , "\N3 )M1 *H1 -K1 -Q1 @M0 :E1"
HKR,Settings, ErrorControl_Cellular, , "\N3 )M1 *H2 -K2 -Q1 @M18 :E0"
HKR,Settings, ErrorControl_Cellular, , "\N3 )M1"
HKR,Settings, ErrorControl_Cellular, , "\N3&Q5)M1-K1*H1"
HKR,Settings, ErrorControl_Cellular, , "\N3)M1"
HKR,Settings, ErrorControl_Cellular, , "\N3S48=7S36=7-K1"
HKR,Settings, ErrorControl_Cellular, , "\N3S48=7S36=7 -K1"
HKR,Settings, ErrorControl_Cellular, , "\N5)M1-K1-Q1:E0@M18*H1"
HKR,Settings, ErrorControl_Cellular, , "\N5)M1:E0@M18*H1"
HKR,Settings, ErrorControl_Cellular, , "\N7 -K1 -C0 -J1 -K1 -Q1 *H2"
HKR,Settings, ErrorControl_Cellular, , "\N7 -K1 )M1 -Q1 *H1"
HKR,Settings, ErrorControl_Cellular, , "\N7 &F6 S0=0 &D2 E0 V1"
HKR,Settings, ErrorControl_Cellular, , "\N7 )M1 *H1 -K1 -Q1"
HKR,Settings, ErrorControl_Cellular, , "\N7 )M1 *H1"
HKR,Settings, ErrorControl_Cellular, , "\N7&J2S7=90S10=60"
HKR,Settings, ErrorControl_Cellular, , "+MS=10, 1, 4800, 14400 S10=50"
HKR,Settings, ErrorControl_Cellular, , "F6 S10=50"
HKR,Settings, ErrorControl_Cellular, , "S43.3=0S57.5=1&K3*E0"
HKR,Settings, ErrorControl_Cellular, , "S48=7-K1)M1"
HKR,Settings, ErrorControl_Cellular, , "S48=7 S36=7 -K1"
HKR,Settings, ErrorControl_Cellular_Forced, , "-K0"
HKR,Settings, ErrorControl_Cellular_Forced, , "-K0)M0"
HKR,Settings, ErrorControl_Cellular_Forced, , "-K1)M1"
HKR,Settings, ErrorControl_Cellular_Forced, , "&F1\N2"
HKR,Settings, ErrorControl_Cellular_Forced, , "&F6 \N4 S91=1"
HKR,Settings, ErrorControl_Cellular_Forced, , "&F6 \N4"
HKR,Settings, ErrorControl_Cellular_Forced, , "&F6 \N6"
HKR,Settings, ErrorControl_Cellular_Forced, , "&M5 &L2 S10=30"
HKR,Settings, ErrorControl_Cellular_Forced, , "&Q5S36=4S48=7)M1\N2"
HKR,Settings, ErrorControl_Cellular_Forced, , "\N2-K1S36=0S48=7"
HKR,Settings, ErrorControl_Cellular_Forced, , "\N2 -K1 )M *H2 :E0 S10=50"
HKR,Settings, ErrorControl_Cellular_Forced, , "\N2 -K1 )M1 -Q1 *H0 :E1"
HKR,Settings, ErrorControl_Cellular_Forced, , "\N2 -K1 )M1 -Q1 *H1 :E1"
HKR,Settings, ErrorControl_Cellular_Forced, , "\N2 -K1 )M1 -Q1 *H1"
HKR,Settings, ErrorControl_Cellular_Forced, , "\N2 -K1 )M1 %%C3 -Q0 S46=138"
HKR,Settings, ErrorControl_Cellular_Forced, , "\N2 -K1 )M1 *H1"
HKR,Settings, ErrorControl_Cellular_Forced, , "\N2 -K1 )M1 *H2 %%C1 -Q2 S46=138""
HK