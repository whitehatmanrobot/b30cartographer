lNameTable enabling you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>Gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>Reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>Gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>Reads the contents of an element or text node as a string.</summary>
      <returns>The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.Note: The text node can be either an element or an attribute text node.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>Resolves the entity reference for EntityReference nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node. </exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary>Gets the schema information that has been assigned to the current node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the schema information for the current node.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>Skips the children of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> object that contains the namespaces that are in scope.</returns>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</summary>
      <returns>
        <see cref="T:System.String" /> that contains the namespace name.</returns>
      <param name="prefix">
        <see cref="T:System.String" /> that contains the namespace prefix.</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</summary>
      <returns>
        <see cref="T:System.String" /> object that contains the namespace prefix.</returns>
      <param name="namespaceName">
        <see cref="T:System.String" /> object that identifies the namespace.</param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>Gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlNodeReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>Gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>Gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>Specifies the type of node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>This is returned by the <see cref="T:System.Xml.XmlReader" /> if a Read method has not been called.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>An element (for example, &lt;item&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>An attribute (for example, id='123' ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>The text content of a node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>A CDATA section (for example, &lt;![CDATA[my escaped text]]&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>A reference to an entity (for example, &amp;num; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>An entity declaration (for example, &lt;!ENTITY...&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>A processing instruction (for example, &lt;?pi test?&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>A comment (for example, &lt;!-- my comment --&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>A document object that, as the root of the document tree, provides access to the entire XML document.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>The document type declaration, indicated by the following tag (for example, &lt;!DOCTYPE...&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>A document fragment.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>A notation in the document type declaration (for example, &lt;!NOTATION...&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>White space between markup.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>White space between markup in a mixed content model or white space within the xml:space="preserve" scope.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>An end element tag (for example, &lt;/item&gt; ).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>Returned when XmlReader gets to the end of the entity replacement as a result of a call to <see cref="M:System.Xml.XmlReader.ResolveEntity" />.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>The XML declaration (for example, &lt;?xml version='1.0'?&gt; ).</summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>Represents a notation declaration, such as &lt;!NOTATION... &gt;.</summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node. Notation nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlNotation" /> object throws an exception.</summary>
      <returns>Returns a <see cref="T:System.Xml.XmlNode" /> copy of the node from which the method is called.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
      <exception cref="T:System.InvalidOperationException">Notation nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlNotation" /> object throws an exception.</exception>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>Gets the markup representing the children of this node.</summary>
      <returns>For XmlNotation nodes, String.Empty is returned.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.Because XmlNotation nodes are read-only, this property always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>Gets the name of the current node without the namespace prefix.</summary>
      <returns>For XmlNotation nodes, this property returns the name of the notation.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>Gets the name of the current node.</summary>
      <returns>The name of the notation.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type. For XmlNotation nodes, the value is XmlNodeType.Notation.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>Gets the markup representing this node and all its children.</summary>
      <returns>For XmlNotation nodes, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>Gets the value of the public identifier on the notation declaration.</summary>
      <returns>The public identifier on the notation. If there is no public identifier, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>Gets the value of the system identifier on the notation declaration.</summary>
      <returns>The system identifier on the notation. If there is no system identifier, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. This method has no effect on XmlNotation nodes.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />. This method has no effect on XmlNotation nodes.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary>Specifies the method used to serialize the <see cref="T:System.Xml.XmlWriter" /> output. </summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary>Serialize according to the XML 1.0 rules.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary>Serialize according to the HTML rules specified by XSLT.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary>Serialize text blocks only.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary>Use the XSLT rules to choose between the <see cref="F:System.Xml.XmlOutputMethod.Xml" /> and <see cref="F:System.Xml.XmlOutputMethod.Html" /> output methods at runtime.</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>Provides all the context information required by the <see cref="T:System.Xml.XmlReader" /> to parse an XML fragment.</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, xml:lang, xml:space, and document type values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="docTypeName">The name of the document type declaration. </param>
      <param name="pubId">The public identifier. </param>
      <param name="sysId">The system identifier. </param>
      <param name="internalSubset">The internal DTD subset. The DTD subset is used for entity resolution, not for document validation.</param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded). </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, xml:lang, xml:space, encoding, and document type values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="docTypeName">The name of the document type declaration. </param>
      <param name="pubId">The public identifier. </param>
      <param name="sysId">The system identifier. </param>
      <param name="internalSubset">The internal DTD subset. The DTD is used for entity resolution, not for document validation.</param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded). </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <param name="enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, xml:lang, and xml:space values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, xml:lang, xml:space, and encoding.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <param name="enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>Gets or sets the base URI.</summary>
      <returns>The base URI to use to resolve the DTD file.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>Gets or sets the name of the document type declaration.</summary>
      <returns>The name of the document type declaration.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>Gets or sets the encoding type.</summary>
      <returns>An <see cref="T:System.Text.Encoding" /> object indicating the encoding type.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>Gets or sets the internal DTD subset.</summary>
      <returns>The internal DTD subset. For example, this property returns everything between the square brackets &lt;!DOCTYPE doc [...]&gt;.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>Gets or sets the <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>The XmlNamespaceManager.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> used to atomize strings. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <returns>The XmlNameTable.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>Gets or sets the public identifier.</summary>
      <returns>The public identifier.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>Gets or sets the system identifier.</summary>
      <returns>The system identifier.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>Gets or sets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope. If there is no xml:lang in scope, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>Gets or sets the current xml:space scope.</summary>
      <returns>An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope.</returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>Represents a processing instruction, which XML defines to keep processor-specific information in the text of the document.</summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlProcessingInstruction" /> class.</summary>
      <param name="target">The target of the processing instruction; see the <see cref="P:System.Xml.XmlProcessingInstruction.Target" /> property.</param>
      <param name="data">The content of the instruction; see the <see cref="P:System.Xml.XmlProcessingInstruction.Data" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The duplicate node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>Gets or sets the content of the processing instruction, excluding the target.</summary>
      <returns>The content of the processing instruction, excluding the target.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>Gets or sets the concatenated values of the node and all its children.</summary>
      <returns>The concatenated values of the node and all its children.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For processing instruction nodes, this property returns the target of the processing instruction.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For processing instruction nodes, this property returns the target of the processing instruction.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For XmlProcessingInstruction nodes, this value is XmlNodeType.ProcessingInstruction.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>Gets the target of the processing instruction.</summary>
      <returns>The target of the processing instruction.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The entire content of the processing instruction, excluding the target.</returns>
      <exception cref="T:System.ArgumentException">Node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. Because ProcessingInstruction nodes do not have children, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>Represents an XML qualified name.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class with the specified name.</summary>
      <param name="name">The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class with the specified name and namespace.</summary>
      <param name="name">The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
      <param name="ns">The namespace for the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>Provides an empty <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.XmlQualifiedName" /> object is equal to the current <see cref="T:System.Xml.XmlQualifiedName" /> object. </summary>
      <returns>true if the two are the same instance object; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A hash code for this object.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlQualifiedName" /> is empty.</summary>
      <returns>true if name and namespace are empty strings; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>Gets a string representation of the qualified name of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A string representation of the qualified name or String.Empty if a name is not defined for the object.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>Gets a string representation of the namespace of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A string representation of the namespace or String.Empty if a namespace is not defined for the object.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Compares two <see cref="T:System.Xml.XmlQualifiedName" /> objects.</summary>
      <returns>true if the two objects have the same name and namespace values; otherwise, false.</returns>
      <param name="a">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
      <param name="b">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Compares two <see cref="T:System.Xml.XmlQualifiedName" /> objects.</summary>
      <returns>true if the name and namespace values for the two objects differ; otherwise, false.</returns>
      <param name="a">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
      <param name="b">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>The string value of the <see cref="T:System.Xml.XmlQualifiedName" /> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>The string value of the <see cref="T:System.Xml.XmlQualifiedName" /> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.</returns>
      <param name="name">The name of the object. </param>
      <param name="ns">The namespace of the object. </param>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>Represents a reader that provides fast, non-cached, forward-only access to XML data.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>Initializes a new instance of the XmlReader class.</summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>When overridden in a derived class, gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>When overridden in a derived class, gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method. </summary>
      <returns>true if the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object used to read the data contained in the stream. </returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified stream and <see cref="T:System.Xml.XmlReaderSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, base URI, and <see cref="T:System.Xml.XmlReaderSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="baseUri">The base URI for the entity or document being read. This value can be null.Security NoteThe base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.IO.TextReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" />. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and base URI.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="baseUri">The base URI for the entity or document being read. This value can be null.Security NoteThe base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Xml.XmlReaderSettings.NameTable" />  and <see cref="P:System.Xml.XmlParserContext.NameTable" /> properties both contain values. (Only one of these NameTable properties can be set and used).</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with specified URI.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data. </returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlUrlResolver" /> class is used to convert the path to a canonical data representation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file identified by the URI does not exist.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>Creates a new instance with the specified URI and <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlUrlResolver" /> object is used.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by the URI cannot be found.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified URI, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlUrlResolver" /> object is used.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The inputUri value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Xml.XmlReaderSettings.NameTable" />  and <see cref="P:System.Xml.XmlParserContext.NameTable" /> properties both contain values. (Only one of these NameTable properties can be set and used).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by the URI cannot be found.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlReader" /> object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that you wish to use as the underlying reader.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance.The conformance level of the <see cref="T:System.Xml.XmlReaderSettings" /> object must either match the conformance level of the underlying reader, or it must be set to <see cref="F:System.Xml.ConformanceLevel.Auto" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="reader" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">If the <see cref="T:System.Xml.XmlReaderSettings" /> object specifies a conformance level that is not consistent with conformance level of the underlying reader.-or-The underlying <see cref="T:System.Xml.XmlReader" /> is in an <see cref="F:System.Xml.ReadState.Error" /> or <see cref="F:System.Xml.ReadState.Closed" /> state.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>When overridden in a derived class, gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlReader" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute. This method does not move the reader.</returns>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> is out of range. It must be non-negative and less than the size of the attribute collection.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned. This method does not move the reader.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>Gets a value indicating whether the current node has any attributes.</summary>
      <returns>true if the current node has attributes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value" />.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</summary>
      <returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType" /> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>Gets a value indicating whether the string argument is a valid XML name.</summary>
      <returns>true if the name is valid; otherwise, false.</returns>
      <param name="str">The name to validate. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="str" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>Gets a value indicating whether or not the string argument is a valid XML name token.</summary>
      <returns>true if it is a valid name token; otherwise false.</returns>
      <param name="str">The name token to validate. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="str" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag.</summary>
      <returns>true if <see cref="M:System.Xml.XmlReader.MoveToContent" /> finds a start tag or empty element tag; false if a node type other than XmlNodeType.Element was found.</returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given argument.</summary>
      <returns>true if the resulting node is an element and the Name property matches the specified string. false if a node type other than XmlNodeType.Element was found or if the element Name property does not match the specified string.</returns>
      <param name="name">The string matched against the Name property of the element found. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found match the given strings.</summary>
      <returns>true if the resulting node is an element. false if a node type other than XmlNodeType.Element was found or if the LocalName and NamespaceURI properties of the element do not match the specified strings.</returns>
      <param name="localname">The string to match against the LocalName property of the element found. </param>
      <param name="ns">The string to match against the NamespaceURI property of the element found. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="i">The index of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>When overridden in a derived class, gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>When overridden in a derived class, moves to the attribute with the specified index.</summary>
      <param name="i">The index of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>Checks whether the current node is a content (non-white space text, CDATA, Element, EndElement, EntityReference, or EndEntity) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: ProcessingInstruction, DocumentType, Comment, Whitespace, or SignificantWhitespace.</summary>
      <returns>The <see cref="P:System.Xml.XmlReader.NodeType" /> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.</returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>When overridden in a derived class, moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>When overridden in a derived class, moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>When overridden in a derived class, moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>When overridden in a derived class, gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.</summary>
      <returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>When overridden in a derived class, reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Reads the content as an object of the type specified.</summary>
      <returns>The concatenated text content or attribute value converted to the requested type.</returns>
      <param name="returnType">The type of the value to be returned.NoteWith the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string.This value can be null.</param>
      <exception cref="T:System.FormatException">The content is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="returnType" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not a supported node type. See the table below for details.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>Reads the text content at the current position as a Boolean.</summary>
      <returns>The text content as a <see cref="T:System.Boolean" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>Reads the text content at the current position as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The text content as a <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>Reads the text content at the current position as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The text content at the current position as a <see cref="T:System.Decimal" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>Reads the text content at the current position as a double-precision floating-point number.</summary>
      <returns>The text content as a double-precision floating-point number.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>Reads the text content at the current position as a single-precision floating point number.</summary>
      <returns>The text content at the current position as a single-precision floating point number.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>Reads the text content at the current position as a 32-bit signed integer.</summary>
      <returns>The text content as a 32-bit signed integer.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>Reads the text content at the current position as a 64-bit signed integer.</summary>
      <returns>The text content as a 64-bit signed integer.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>Reads the text content at the current position as an <see cref="T:System.Object" />.</summary>
      <returns>The text content as the most appropriate common language runtime (CLR) object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>Reads the text content at the current position as a <see cref="T:System.String" /> object.</summary>
      <returns>The text content as a <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Reads the element content as the requested type.</summary>
      <returns>The element content converted to the requested typed object.</returns>
      <param name="returnType">The type of the value to be returned.NoteWith the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</summary>
      <returns>The element content converted to the requested typed object.</returns>
      <param name="returnType">The type of the value to be returned.NoteWith the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Boolean" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Boolean" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Boolean" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The element content as a <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.DateTime" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The element contents as a <see cref="T:System.DateTime" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Decimal" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Decimal" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>Reads the current element and returns the contents as a double-precision floating-point number.</summary>
      <returns>The element content as a double-precision floating-point number.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a double-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</summary>
      <returns>The element content as a double-precision floating-point number.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>Reads the current element and returns the contents as single-precision floating-point number.</summary>
      <returns>The element content as a single-precision floating point number.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</summary>
      <returns>The element content as a single-precision floating point number.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>Reads the current element and returns the contents as a 32-bit signed integer.</summary>
      <returns>The element content as a 32-bit signed integer.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</summary>
      <returns>The element content as a 32-bit signed integer.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>Reads the current element and returns the contents as a 64-bit signed integer.</summary>
      <returns>The element content as a 64-bit signed integer.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</summary>
      <returns>The element content as a 64-bit signed integer.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>Reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
      <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
      <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
      <returns>The element content as a <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
      <returns>The element content as a <see cref="T:System.String" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>Reads a text-only element.</summary>
      <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
      <exception cref="T:System.Xml.XmlException">The next content node is not a start tag; or the element found does not contain a simple text value. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>Checks that the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given string before reading a text-only element.</summary>
      <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
      <param name="name">The name to check. </param>
      <exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element Name does not match the given argument; or if the element found does not contain a simple text value. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>Checks that the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found matches the given strings before reading a text-only element.</summary>
      <returns>The text contained in the element that was read. An empty string if the element is empty (&lt;item&gt;&lt;/item&gt; or &lt;item/&gt;).</returns>
      <param name="localname">The local name to check. </param>
      <param name="ns">The namespace URI to check. </param>
      <exception cref="T:System.Xml.XmlException">If the next content node is not a start tag; if the element LocalName or NamespaceURI do not match the given arguments; or if the element found does not contain a simple text value. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>Checks that the current content node is an end tag and advances the reader to the next node.</summary>
      <exception cref="T:System.Xml.XmlException">The current node is not an end tag or if incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>When overridden in a derived class, reads all the content, including markup, as a string.</summary>
      <returns>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.If the current node is neither an element nor attribute, an empty string is returned.</returns>
      <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</summary>
      <returns>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</returns>
      <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>Checks that the current node is an element and advances the reader to the next node.</summary>
      <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.Name" /> and advances the reader to the next node.</summary>
      <param name="name">The qualified name of the element. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream. -or- The <see cref="P:System.Xml.XmlReader.Name" /> of the element does not match the given <paramref name="name" />. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> and advances the reader to the next node.</summary>
      <param name="localname">The local name of the element. </param>
      <param name="ns">The namespace URI of the element. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML was encountered in the input stream.-or-The <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found do not match the given arguments. </exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>When overridden in a derived class, gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>When overridden in a derived class, reads the contents of an element or text node as a string.</summary>
      <returns>The contents of the element or an empty string.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>Returns a new XmlReader instance that can be used to read the current node, and all its descendants.</summary>
      <returns>A new XmlReader instance set to ReadState.Initial. A call to the <see cref="M:System.Xml.XmlReader.Read" /> method positions the new XmlReader on the node that was current before the call to ReadSubtree method.</returns>
      <exception cref="T:System.InvalidOperationException">The XmlReader is not positioned on an element when this method is called.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified qualified name.</summary>
      <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</returns>
      <param name="name">The qualified name of the element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified local name and namespace URI.</summary>
      <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</returns>
      <param name="localName">The local name of the element you wish to move to.</param>
      <param name="namespaceURI">The namespace URI of the element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>Reads until an element with the specified qualified name is found.</summary>
      <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</returns>
      <param name="name">The qualified name of the element.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>Reads until an element with the specified local name and namespace URI is found.</summary>
      <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>Advances the XmlReader to the next sibling element with the specified qualified name.</summary>
      <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</returns>
      <param name="name">The qualified name of the sibling element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>Advances the XmlReader to the next sibling element with the specified local name and namespace URI.</summary>
      <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</returns>
      <param name="localName">The local name of the sibling element you wish to move to.</param>
      <param name="namespaceURI">The namespace URI of the sibling element you wish to move to</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>Reads large streams of text embedded in an XML document.</summary>
      <returns>The number of characters read into the buffer. The value zero is returned when there is no more text content.</returns>
      <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
      <param name="index">The offset within the buffer where the <see cref="T:System.Xml.XmlReader" /> can start to copy the results.</param>
      <param name="count">The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
      <exception cref="T:System.InvalidOperationException">The current node does not have a value (<see cref="P:System.Xml.XmlReader.HasValue" /> is false).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer, or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The XML data is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>When overridden in a derived class, resolves the entity reference for EntityReference nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> returns false). </exception>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary>Gets the schema information that has been assigned to the current node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the schema information for the current node. Schema information can be set on elements, attributes, or on text nodes with a non-null <see cref="P:System.Xml.XmlReader.ValueType" /> (typed values). If the current node is not one of the above node types, or if the XmlReader instance does not report schema information, this property returns null.If this property is called from an <see cref="T:System.Xml.XmlTextReader" /> or an <see cref="T:System.Xml.XmlValidatingReader" /> object, this property always returns null. These XmlReader implementations do not expose schema information through the SchemaInfo property.NoteIf you have to get the post-schema-validation information set (PSVI) for an element, position the reader on the end tag of the element, rather than on the start tag. You get the PSVI through the SchemaInfo property of a reader. The validating reader that is created through <see cref="Overload:System.Xml.XmlReader.Create" /> with the <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> property set to <see cref="F:System.Xml.ValidationType.Schema" /> has complete PSVI for an element only when the reader is positioned on the end tag of an element.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this reader instance. If this reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create" /> method, this property returns null.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>Skips the children of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.System#IDisposable#Dispose">
      <summary>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>When overridden in a derived class, gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>Gets The Common Language Runtime (CLR) type for the current node.</summary>
      <returns>The CLR type that corresponds to the typed value of the node. The default is System.String.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>When overridden in a derived class, gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>When overridden in a derived class, gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlReader" /> object created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method. </summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlReaderSettings" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>Gets or sets a value indicating whether to do character checking.</summary>
      <returns>true to do character checking; otherwise false. The default is true.NoteIf the <see cref="T:System.Xml.XmlReader" /> is processing text data, it always checks that the XML names and text content are valid, regardless of the property setting. Setting <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> to false turns off character checking for character entity references.</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>Creates a copy of the <see cref="T:System.Xml.XmlReaderSettings" /> instance.</summary>
      <returns>The cloned <see cref="T:System.Xml.XmlReaderSettings" /> object.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>Gets or sets a value indicating whether the underlying stream or <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.</summary>
      <returns>true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when the reader is closed; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlReader" /> will comply.</summary>
      <returns>One of the <see cref="T:System.Xml.ConformanceLevel" /> values. The default is ConformanceLevel.Document.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</summary>
      <returns>The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>Gets or sets a value indicating whether to ignore comments.</summary>
      <returns>true to ignore comments; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>Gets or sets a value indicating whether to ignore processing instructions.</summary>
      <returns>true to ignore processing instructions; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>Gets or sets a value indicating whether to ignore insignificant white space.</summary>
      <returns>true to ignore white space; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>Gets or sets line number offset of the <see cref="T:System.Xml.XmlReader" /> object.</summary>
      <returns>The line number offset. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>Gets or sets line position offset of the <see cref="T:System.Xml.XmlReader" /> object.</summary>
      <returns>The line number offset. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.</summary>
      <returns>The maximum allowable number of characters from expanded entities. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>Gets or sets a value indicating the maximum allowable number of characters XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.</summary>
      <returns>The maximum allowable number of characters in an XML document. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>Gets or sets the <see cref="T:System.Xml.XmlNameTable" /> used for atomized string comparisons.</summary>
      <returns>The <see cref="T:System.Xml.XmlNameTable" /> that stores all the atomized strings used by all <see cref="T:System.Xml.XmlReader" /> instances created using this <see cref="T:System.Xml.XmlReaderSettings" /> object.The default is null. The created <see cref="T:System.Xml.XmlReader" /> instance will use a new empty <see cref="T:System.Xml.NameTable" /> if this value is null.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary>Gets or sets a value indicating whether to prohibit document type definition (DTD) processing. This property is obsolete. Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</summary>
      <returns>true to prohibit DTD processing; otherwise false. The default is true.</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>Resets the members of the settings class to their default values.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to use when performing schema validation.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to use. The default is an empty <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object.</returns>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary>Occurs when the reader encounters validation errors.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary>Gets or sets a value indicating the schema validation settings. This setting applies to schema validating <see cref="T:System.Xml.XmlReader" /> objects (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> property set to ValidationType.Schema).</summary>
      <returns>A set of <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> values. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> and <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> are enabled by default. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />, and <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> are disabled by default.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> will perform validation or type assignment when reading.</summary>
      <returns>One of the <see cref="T:System.Xml.ValidationType" /> values. The default is ValidationType.None.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used to access external documents.</summary>
      <returns>An <see cref="T:System.Xml.XmlResolver" /> used to access external documents. If set to null, an <see cref="T:System.Xml.XmlException" /> is thrown when the <see cref="T:System.Xml.XmlReader" /> tries to access an external resource. The default is a new <see cref="T:System.Xml.XmlUrlResolver" /> with no credentials.</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>Resolves external XML resources named by a Uniform Resource Identifier (URI). </summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlResolver" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>When overridden in a derived class, sets the credentials used to authenticate Web requests.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> object. If this property is not set, the value defaults to null; that is, the XmlResolver has no user credentials.</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>When overridden in a derived class, maps a URI to an object containing the actual resource.</summary>
      <returns>A System.IO.Stream object or null if a type other than stream is specified.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />. </param>
      <param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios. </param>
      <param name="ofObjectToReturn">The type of object to return. The current version only returns System.IO.Stream objects. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is not a Stream type. </exception>
      <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> is null. </exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>When overridden in a derived class, resolves the absolute URI from the base and relative URIs.</summary>
      <returns>A <see cref="T:System.Uri" /> representing the absolute URI or null if the relative URI cannot be resolved.</returns>
      <param name="baseUri">The base URI used to resolve the relative URI </param>
      <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> is null</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>This method adds the ability for the resolver to return other types than just <see cref="T:System.IO.Stream" />.</summary>
      <returns>Returns true if the <paramref name="type" /> is supported.</returns>
      <param name="absoluteUri">The URI.</param>
      <param name="type">The type to return.</param>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary>Helps to secure another implementation of <see cref="T:System.Xml.XmlResolver" /> by wrapping the <see cref="T:System.Xml.XmlResolver" /> object and restricting the resources that the underlying <see cref="T:System.Xml.XmlResolver" /> has access to.</summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and <see cref="T:System.Security.PermissionSet" /> specified.</summary>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> wrapped by the <see cref="T:System.Xml.XmlSecureResolver" />. </param>
      <param name="permissionSet">The <see cref="T:System.Security.PermissionSet" /> to apply to the underlying <see cref="T:System.Xml.XmlResolver" />. The <see cref="T:System.Xml.XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" /> on the <see cref="T:System.Security.PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see cref="T:System.Xml.XmlResolver" />. </param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and <see cref="T:System.Security.Policy.Evidence" /> specified.</summary>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> wrapped by the <see cref="T:System.Xml.XmlSecureResolver" />. </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> used to create the <see cref="T:System.Security.PermissionSet" /> that will be applied to the underlying <see cref="T:System.Xml.XmlResolver" />. The <see cref="T:System.Xml.XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" /> on the created <see cref="T:System.Security.PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see cref="T:System.Xml.XmlResolver" />. </param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver" /> class with the <see cref="T:System.Xml.XmlResolver" /> and URL provided.</summary>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> wrapped by the <see cref="T:System.Xml.XmlSecureResolver" />. </param>
      <param name="securityUrl">The URL used to create the <see cref="T:System.Security.PermissionSet" /> that will be applied to the underlying <see cref="T:System.Xml.XmlResolver" />. The <see cref="T:System.Xml.XmlSecureResolver" /> calls <see cref="M:System.Security.PermissionSet.PermitOnly" /> on the created <see cref="T:System.Security.PermissionSet" /> before calling <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> on the underlying <see cref="T:System.Xml.XmlResolver" />. </param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)">
      <summary>Creates <see cref="T:System.Security.Policy.Evidence" /> using the supplied URL.</summary>
      <returns>The <see cref="T:System.Security.Policy.Evidence" /> object generated from the supplied URL as defined by the default policy.</returns>
      <param name="securityUrl">The URL used to create the <see cref="T:System.Security.Policy.Evidence" /> object. </param>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary>Sets credentials used to authenticate Web requests.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> object. The <see cref="T:System.Xml.XmlSecureResolver" /> sets the given credentials on the underlying <see cref="T:System.Xml.XmlResolver" />. If this property is not set, the value defaults to null; that is, the <see cref="T:System.Xml.XmlSecureResolver" /> has no user credentials.</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>Securely maps a URI to an object containing the actual resource. This method temporarily sets the <see cref="T:System.Security.PermissionSet" /> created in the constructor by calling <see cref="M:System.Security.PermissionSet.PermitOnly" /> before calling GetEntity on the underlying <see cref="T:System.Xml.XmlResolver" /> to open the resource.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object returned by calling GetEntity on the underlying <see cref="T:System.Xml.XmlResolver" />. If a type other than stream is specified, null is returned.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />. </param>
      <param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios. </param>
      <param name="ofObjectToReturn">The type of object to return. The current version only returns <see cref="T:System.IO.Stream" /> objects. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is neither null nor a <see cref="T:System.IO.Stream" /> type. </exception>
      <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> is null. </exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary>Resolves the absolute URI from the base and relative URIs by calling ResolveUri on the underlying <see cref="T:System.Xml.XmlResolver" />.</summary>
      <returns>A <see cref="T:System.Uri" /> representing the absolute URI or null if the relative URI cannot be resolved (returned by calling ResolveUri on the underlying <see cref="T:System.Xml.XmlResolver" />).</returns>
      <param name="baseUri">The base URI used to resolve the relative URI. </param>
      <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> is null. </exception>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>Represents white space between markup in a mixed content node or white space within an xml:space= 'preserve' scope. This is also referred to as significant white space.</summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlSignificantWhitespace" /> class.</summary>
      <param name="strData">The white space characters of the node.</param>
      <param name="doc">The <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For significant white space nodes, the cloned node always includes the data value, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlSignificantWhitespace nodes, this property returns #significant-whitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlSignificantWhitespace nodes, this property returns #significant-whitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For XmlSignificantWhitespace nodes, this value is XmlNodeType.SignificantWhitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary>Gets the parent of the current node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> parent node of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The white space characters found in the node.</returns>
      <exception cref="T:System.ArgumentException">Setting Value to invalid white space characters. </exception>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>Specifies the current xml:space scope.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>No xml:space scope.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>The xml:space scope equals default.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>The xml:space scope equals preserve.</summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>Represents the text content of an element or attribute.</summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlText" /> class.</summary>
      <param name="strData">The content of the node; see the <see cref="P:System.Xml.XmlText.Value" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For text nodes, this property returns #text.</returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For text nodes, this property returns #text.</returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For text nodes, this value is XmlNodeType.Text.</returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode"></member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.</summary>
      <returns>The new node.</returns>
      <param name="offset">The offset at which to split the node. </param>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The content of the text node.</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. XmlText nodes do not have children, so this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>Represents a reader that provides fast, non-cached, forward-only access to XML data.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>Initializes a new instance of the XmlTextReader.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream.</summary>
      <param name="input">The stream containing the XML data to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="input">The stream containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> or <paramref name="nt" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</summary>
      <param name="xmlFragment">The stream containing the XML fragment to parse. </param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment can contain. (See table below.) </param>
      <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not an Element, Attribute, or Document XmlNodeType. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.</summary>
      <param name="input">The TextReader containing the XML data to read. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="input">The TextReader containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="nt" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file.</summary>
      <param name="url">The URL for the file containing the XML data. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
      <exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> is an empty string.</exception>
      <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> is not a valid URI.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and stream.</summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
      <param name="input">The stream containing the XML data to read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is null, BaseURI is set to String.Empty. </param>
      <param name="input">The stream containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> or <paramref name="nt" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />.</summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. </param>
      <param name="input">The TextReader containing the XML data to read. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value. If <paramref name="url" /> is null, BaseURI is set to String.Empty. </param>
      <param name="input">The TextReader containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="nt" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="url">The URL for the file containing the XML data to read. </param>
      <param name="nt">The XmlNameTable to use. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="nt" /> value is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> is an empty string.</exception>
      <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> is not a valid URI.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified string, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</summary>
      <param name="xmlFragment">The string containing the XML fragment to parse. </param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain. (See table below.) </param>
      <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang, and the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not an Element, Attribute, or DocumentXmlNodeType. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nt">The XmlNameTable to use. </param>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>Gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlTextReader" /> class always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</summary>
      <returns>true if the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise false. The <see cref="T:System.Xml.XmlTextReader" /> class always returns false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false. The XmlTextReader class always returns true.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>Gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary>Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</summary>
      <returns>The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary>Gets the encoding of the document.</summary>
      <returns>The encoding value. If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary>Gets or sets a value that specifies how the reader handles entities.</summary>
      <returns>One of the <see cref="T:System.Xml.EntityHandling" /> values. If no EntityHandling is specified, it defaults to EntityHandling.ExpandCharEntities.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>Gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>Gets the value of the attribute with the specified name.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Gets a collection that contains all namespaces currently in-scope.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> object that contains all the current in-scope namespaces. If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>Gets the remainder of the buffered XML.</summary>
      <returns>A <see cref="T:System.IO.TextReader" /> containing the remainder of the buffered XML.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary>Gets a value indicating whether the class can return line information.</summary>
      <returns>true if the class can return line information; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> other than String.Empty.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</summary>
      <returns>This property always returns false. (<see cref="T:System.Xml.XmlTextReader" /> does not expand default attributes.) </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>Gets the current line number.</summary>
      <returns>The current line number.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>Gets the current line position.</summary>
      <returns>The current line position.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>Resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to true and the <paramref name="prefix" /> value is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>Moves to the attribute with the specified index.</summary>
      <param name="i">The index of the attribute. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>Moves to the attribute with the specified name.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>Moves to the attribute with the specified local name and namespace URI.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>Moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>Moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>Moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>Gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary>Gets or sets a value indicating whether to do namespace support.</summary>
      <returns>true to do namespace support; otherwise, false. The default is true.</returns>
      <exception cref="T:System.InvalidOperationException">Setting this property after a read operation has occurred (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is not ReadState.Initial). </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary>Gets or sets a value indicating whether to normalize white space and attribute values.</summary>
      <returns>true to normalize; otherwise, false. The default is false.</returns>
      <exception cref="T:System.InvalidOperationException">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is ReadState.Closed). </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary>Gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary>Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</summary>
      <returns>true to disallow DTD processing; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>Gets the quotation mark character used to enclose the value of an attribute node.</summary>
      <returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>Reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes Base64 and returns the decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="array">The array of characters that serves as the buffer to which the text contents are written. </param>
      <param name="offset">The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
      <param name="len">The number of bytes to write into the buffer. </param>
      <exception cref="T:System.Xml.XmlException">The Base64 sequence is not valid. </exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Decodes BinHex and returns the decoded binary bytes.</summary>
      <returns>The number of bytes written to your buffer.</returns>
      <param name="array">The byte array that serves as the buffer to which the decoded binary bytes are written. </param>
      <param name="offset">The zero-based index into the array specifying where the method can begin to write to the buffer. </param>
      <param name="len">The number of bytes to write into the buffer. </param>
      <exception cref="T:System.Xml.XmlException">The BinHex sequence is not valid. </exception>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.</summary>
      <returns>The number of characters read. This can be 0 if the reader is not positioned on an element or if there is no more text content to return in the current context.</returns>
      <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. </param>
      <param name="index">The position within <paramref name="buffer" /> where the method can begin writing text contents. </param>
      <param name="count">The number of characters to write into <paramref name="buffer" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the space specified in the <paramref name="buffer" /> (buffer size - <paramref name="index" />). </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />&lt; 0 or <paramref name="count" />&lt; 0. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  is not supported in the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>Gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary>Reads the contents of an element or a text node as a string.</summary>
      <returns>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.Note: The text node can be either an element or an attribute text node.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
      <exception cref="T:System.InvalidOperationException">An invalid operation was attempted. </exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary>Resets the state of the reader to ReadState.Initial.</summary>
      <exception cref="T:System.InvalidOperationException">Calling ResetState if the reader was constructed using an <see cref="T:System.Xml.XmlParserContext" />. </exception>
      <exception cref="T:System.Xml.XmlException">Documents in a single stream do not share the same encoding.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>Resolves the entity reference for EntityReference nodes.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary>Skips the children of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</summary>
      <returns>The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.</returns>
      <param name="prefix">The prefix whose namespace URI you wish to find.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</summary>
      <returns>The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.</returns>
      <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>Gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space within an xml:space= 'preserve' scope. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary>Gets or sets a value that specifies how white space is handled.</summary>
      <returns>One of the <see cref="T:System.Xml.WhitespaceHandling" /> values. The default is WhitespaceHandling.All (returns Whitespace and SignificantWhitespace nodes).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Invalid value specified. </exception>
      <exception cref="T:System.InvalidOperationException">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is ReadState.Closed). </exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>Gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD references.</summary>
      <returns>The XmlResolver to use. If set to null, external resources are not resolved.In version 1.1 of the .NET Framework, the caller must be fully trusted in order to specify an XmlResolver.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>Gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations. </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Creates an instance of the XmlTextWriter class using the specified stream and encoding.</summary>
      <param name="w">The stream to which you want to write. </param>
      <param name="encoding">The encoding to generate. If encoding is null it writes out the stream as UTF-8 and omits the encoding attribute from the ProcessingInstruction. </param>
      <exception cref="T:System.ArgumentException">The encoding is not supported or the stream cannot be written to. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="w" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Creates an instance of the XmlTextWriter class using the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="w">The TextWriter to write to. It is assumed that the TextWriter is already set to the correct encoding. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>Creates an instance of the <see cref="T:System.Xml.XmlTextWriter" /> class using the specified file.</summary>
      <param name="filename">The filename to write to. If the file exists, it truncates it and overwrites it with the new content. </param>
      <param name="encoding">The encoding to generate. If encoding is null it writes the file out as UTF-8, and omits the encoding attribute from the ProcessingInstruction. </param>
      <exception cref="T:System.ArgumentException">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentNullException">The filename is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The directory to write to is not found. </exception>
      <exception cref="T:System.IO.IOException">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>Gets the underlying stream object.</summary>
      <returns>The stream to which the XmlTextWriter is writing or null if the XmlTextWriter was constructed using a <see cref="T:System.IO.TextWriter" /> that does not inherit from the <see cref="T:System.IO.StreamWriter" /> class.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>Closes this stream and the underlying stream.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>Indicates how the output is formatted.</summary>
      <returns>One of the <see cref="T:System.Xml.Formatting" /> values. The default is Formatting.None (no special formatting).</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to Formatting.Indented.</summary>
      <returns>Number of IndentChars for each level. The default is 2.</returns>
      <exception cref="T:System.ArgumentException">Setting this property to a negative value. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>Gets or sets which character to use for indenting when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to Formatting.Indented.</summary>
      <returns>The character to use for indenting. The default is space.NoteThe XmlTextWriter allows you to set this property to any character. To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>Returns the closest prefix defined in the current namespace scope for the namespace URI.</summary>
      <returns>The matching prefix. Or null if no matching namespace URI is found in the current scope.</returns>
      <param name="ns">Namespace URI whose prefix you want to find. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> is either null or String.Empty. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>Gets or sets a value indicating whether to do namespace support.</summary>
      <returns>true to support namespaces; otherwise, false.The default is true.</returns>
      <exception cref="T:System.InvalidOperationException">You can only change this property when in the WriteState.Start state. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>Gets or sets which character to use to quote attribute values.</summary>
      <returns>The character to use to quote attribute values. This must be a single quote (&amp;#39;) or a double quote (&amp;#34;). The default is a double quote.</returns>
      <exception cref="T:System.ArgumentException">Setting this property to something other than either a single or double quote. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Encodes the specified binary bytes as base64 and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position within the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Encodes the specified binary bytes as binhex and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
      <param name="text">Text to place inside the CDATA block. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>Forces the generation of a character entity for the specified Unicode character value.</summary>
      <param name="ch">Unicode character for which to generate a character entity. </param>
      <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff; or the text would result in a non-well formed XML document. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>Writes text one buffer at a time.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position in the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>Writes out a comment &lt;!--...--&gt; containing the specified text.</summary>
      <param name="text">Text to place inside the comment. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>Writes the DOCTYPE declaration with the specified name and optional attributes.</summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty. </param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments. </param>
      <param name="sysid">If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument. </param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument. </param>
      <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or String.Empty-or- the value for <paramref name="name" /> would result in invalid XML. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>Closes the previous <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> call.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>Closes any open elements or attributes and puts the writer back in the Start state.</summary>
      <exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>Closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>Writes out an entity reference as &amp;name;.</summary>
      <param name="name">Name of the entity reference. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>Closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">Name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>Writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">Name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid NmToken; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</summary>
      <param name="name">Name of the processing instruction. </param>
      <param name="text">Text to include in the processing instruction. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.<paramref name="name" /> is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> has already been called. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
      <param name="localName">The local name to write. </param>
      <param name="ns">The namespace URI to associate with the name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is either null or String.Empty.<paramref name="localName" /> is not a valid name according to the W3C Namespaces spec. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>Writes raw markup manually from a character buffer.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero.-or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>Writes raw markup manually from a string.</summary>
      <param name="data">String containing the text to write. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>Writes the start of an attribute.</summary>
      <param name="prefix">Namespace prefix of the attribute. </param>
      <param name="localName">LocalName of the attribute. </param>
      <param name="ns">NamespaceURI of the attribute </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>Writes the XML declaration with the version "1.0".</summary>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>Writes the XML declaration with the version "1.0" and the standalone attribute.</summary>
      <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>Writes the specified start tag and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The namespace prefix of the element. </param>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>Gets the state of the writer.</summary>
      <returns>One of the <see cref="T:System.Xml.WriteState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>Writes the given text content.</summary>
      <param name="text">Text to write. </param>
      <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>Generates and writes the surrogate character entity for the surrogate character pair.</summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF. </param>
      <exception cref="T:System.Exception">An invalid surrogate character pair was passed. </exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>Writes out the given white space.</summary>
      <param name="ws">The string of white space characters. </param>
      <exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>Gets the current xml:lang scope.</summary>
      <returns>The current xml:lang or null if there is no xml:lang in the current scope.</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>Gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.</summary>
      <returns>An XmlSpace representing the current xml:space scope.Value Meaning None This is the default if no xml:space scope exists. Default The current scope is xml:space="default". Preserve The current scope is xml:space="preserve". </returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>Represents the XML type for the string. This allows the string to be read as a particular XML type, for example a CDATA section type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>CDATA type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>ID type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>IDREF type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>IDREFS type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>ENTITY type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>ENTITIES type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>NMTOKEN type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>NMTOKENS type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>NOTATION type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>ENUMERATION type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>QName type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>NCName type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>No type.</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>Resolves external XML resources named by a Uniform Resource Identifier (URI).</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>Creates a new instance of the XmlUrlResolver class.</summary>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary>Gets or sets the cache policy for the underlying <see cref="T:System.Net.WebRequest" /> object.</summary>
      <returns>The <see cref="T:System.Net.Cache.RequestCachePolicy" /> object.</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>Sets credentials used to authenticate Web requests.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> object. If this property is not set, the value defaults to null; that is, the XmlUrlResolver has no user credentials.</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>Maps a URI to an object containing the actual resource.</summary>
      <returns>A System.IO.Stream object or null if a type other than stream is specified.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /></param>
      <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios. </param>
      <param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is neither null nor a Stream type. </exception>
      <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> is null. </exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary>Gets or sets the network proxy for the underlying <see cref="T:System.Net.WebRequest" /> object.</summary>
      <returns>The <see cref="T:System.Net.IwebProxy" /> to use to access the Internet resource.</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary>Resolves the absolute URI from the base and relative URIs.</summary>
      <returns>A <see cref="T:System.Uri" /> representing the absolute URI, or null if the relative URI cannot be resolved.</returns>
      <param name="baseUri">The base URI used to resolve the relative URI.</param>
      <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri " />is null or <paramref name="relativeUri" /> is null</exception>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>Initializes a new instance of the XmlValidatingReader class with the specified values.</summary>
      <param name="xmlFragment">The stream containing the XML fragment to parse. </param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This determines what the fragment can contain (see table below). </param>
      <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, current xml:lang, and xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not one of the node types listed in the table below. </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>Initializes a new instance of the XmlValidatingReader class with the specified values.</summary>
      <param name="xmlFragment">The string containing the XML fragment to parse. </param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain (see table below). </param>
      <param name="context">The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.NameTable" /> to use, encoding, namespace scope, current xml:lang, and xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> is not one of the node types listed in the table below. </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the XmlValidatingReader class that validates the content returned from the given <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The XmlReader to read from while validating. The current implementation supports only <see cref="T:System.Xml.XmlTextReader" />. </param>
      <exception cref="T:System.ArgumentException">The reader specified is not an XmlTextReader. </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>Gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node. This number includes default attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlValidatingReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlValidatingReader" /> class returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false. XmlValidatingReader always returns true.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>Gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>Gets the encoding attribute for the document.</summary>
      <returns>The encoding value. If no encoding attribute exists, and there is not byte-order mark, this defaults to UTF-8.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>Gets or sets a value that specifies how the reader handles entities.</summary>
      <returns>One of the <see cref="T:System.Xml.EntityHandling" /> values. If no EntityHandling is specified, it defaults to EntityHandling.ExpandEntities.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Invalid value was specified. </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>Gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>Gets the value of the attribute with the specified name.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary>Gets a value indicating whether the class can return line information.</summary>
      <returns>true if the class can return line information; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlValidatingReader.Value" /> other than String.Empty.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</summary>
      <returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary>Gets the current line number.</summary>
      <returns>The current line number. The starting value for this property is 1.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary>Gets the current line position.</summary>
      <returns>The current line position. The starting value for this property is 1.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>Resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>Moves to the attribute with the specified index.</summary>
      <param name="i">The index of the attribute. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>Moves to the attribute with the specified name.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the position of the reader does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the position of the reader does not change.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>Moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>Moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>Moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>Gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node Type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>Gets or sets a value indicating whether to do namespace support.</summary>
      <returns>true to do namespace support; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary>Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>XmlNameTable that enables you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary>Gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>Gets the quotation mark character used to enclose the value of an attribute node.</summary>
      <returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>Reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> used to construct this XmlValidatingReader.</summary>
      <returns>The XmlReader specified in the constructor.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>Gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary>Reads the contents of an element or text node as a string.</summary>
      <returns>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.NoteThe text node can be either an element or an attribute text node.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary>Gets the common language runtime type for the specified XML Schema definition language (XSD) type.</summary>
      <returns>The common language runtime type for the specified XML Schema type.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>Resolves the entity reference for EntityReference nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node. </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>Gets a <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> to use for validation.</summary>
      <returns>The XmlSchemaCollection to use for validation.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>Gets a schema type object.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, or <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> depending whether the node value is a built in XML Schema definition language (XSD) type or a user defined simpleType or complexType; null if the current node has no schema type.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</summary>
      <returns>An T:System.Collections.IDictionary object that identifies the namespaces in scope.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> object that identifies the scope of the reader.</param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</summary>
      <returns>A string value that contains the namespace Uri that is associated with the prefix.</returns>
      <param name="prefix">The namespace prefix.</param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</summary>
      <returns>A string value that contains the namespace prefix that is associated with the <paramref name="namespaceName" />.</returns>
      <param name="namespaceName">The namespace that is associated with the prefix.</param>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>Gets or sets a value indicating the type of validation to perform.</summary>
      <returns>One of the <see cref="T:System.Xml.ValidationType" /> values. If this property is not set, it defaults to ValidationType.Auto.</returns>
      <exception cref="T:System.InvalidOperationException">Setting the property after a Read has been called. </exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>Gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>Gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving external document type definition (DTD) and schema location references. The XmlResolver is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.</summary>
      <returns>The XmlResolver to use. If set to null, external resources are not resolved.In version 1.1 of the .NET Framework, the caller must be fully trusted to specify an XmlResolver.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>Gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>Represents white space in element content.</summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWhitespace" /> class.</summary>
      <param name="strData">The white space characters of the node.</param>
      <param name="doc">The <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For white space nodes, the cloned node always includes the data value, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlWhitespace nodes, this property returns #whitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlWhitespace nodes, this property returns #whitespace.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>Gets the type of the node.</summary>
      <returns>For XmlWhitespace nodes, the value is <see cref="F:System.Xml.XmlNodeType.Whitespace" />.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary>Gets the parent of the current node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> parent node of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The white space characters found in the node.</returns>
      <exception cref="T:System.ArgumentException">Setting <see cref="P:System.Xml.XmlWhitespace.Value" /> to invalid white space characters. </exception>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The <see cref="T:System.Xml.XmlWriter" /> to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The <see cref="T:System.Xml.XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriter" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>When overridden in a derived class, closes this stream and the underlying stream.</summary>
      <exception cref="T:System.InvalidOperationException">A call is made to write more output after Close has been called or the result of this call is an invalid XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the stream and <see cref="T:System.Xml.XmlWriterSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="text" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="text" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified filename.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="outputFileName">The file to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> creates a file at the specified path and writes to it in XML 1.0 text syntax. The <paramref name="outputFileName" /> must be a file system path.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the filename and <see cref="T:System.Xml.XmlWriterSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="outputFileName">The file to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> creates a file at the specified path and writes to it in XML 1.0 text syntax. The <paramref name="outputFileName" /> must be a file system path.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Text.StringBuilder" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="builder" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.Text.StringBuilder" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="builder" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.If the <see cref="T:System.Xml.XmlWriter" /> is being used with the <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> method, you should use the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property to obtain an <see cref="T:System.Xml.XmlWriterSettings" /> object with the correct settings. This ensures that the created <see cref="T:System.Xml.XmlWriter" /> object has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.</summary>
      <returns>The matching prefix or null if no matching namespace URI is found in the current scope.</returns>
      <param name="ns">The namespace URI whose prefix you want to find. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> is either null or String.Empty. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>Gets the <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this writer instance. If this writer was not created using the <see cref="Overload:System.Xml.XmlWriter.Create" /> method, this property returns null.</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.System#IDisposable#Dispose">
      <summary>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>When overridden in a derived class, writes out all the attributes found at the current position in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The XmlReader from which to copy the attributes. </param>
      <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
      <exception cref="T:System.Xml.XmlException">The reader is not positioned on an element, attribute or XmlDeclaration node. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>When overridden in a derived class, writes out the attribute with the specified local name and value.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI to associate with the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.</summary>
      <param name="prefix">The namespace prefix of the attribute. </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
      <exception cref="T:System.Xml.XmlException">The <paramref name="localName" /> or <paramref name="ns" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes the specified binary bytes as BinHex and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The writer is closed or in error state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
      <param name="text">The text to place inside the CDATA block. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.</summary>
      <param name="ch">The Unicode character for which to generate a character entity. </param>
      <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes text one buffer at a time.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position in the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="buffer" /> parameter value is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing the specified text.</summary>
      <param name="text">Text to place inside the comment. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.</summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty. </param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments. </param>
      <param name="sysid">If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument. </param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument. </param>
      <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
      <exception cref="T:System.ArgumentException">The value for <paramref name="name" /> would result in invalid XML. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>Writes an element with the specified local name and value.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="value">The value of the element. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>Writes an element with the specified local name, namespace URI, and value.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. </param>
      <param name="value">The value of the element. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>Writes an element with the specified local name, namespace URI, and value.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="ns">The namespace URI of the element.</param>
      <param name="value">The value of the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> call.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.</summary>
      <exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</summary>
      <exception cref="T:System.InvalidOperationException">This results in an invalid XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>When overridden in a derived class, writes out an entity reference as &amp;name;.</summary>
      <param name="name">The name of the entity reference. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">The name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">The name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid NmToken; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from. </param>
      <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contains invalid characters. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>Copies everything from the <see cref="T:System.Xml.XPath.XPathNavigator" /> object to the writer. The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> remains unchanged.</summary>
      <param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to copy from.</param>
      <param name="defattr">true to copy the default attributes; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</summary>
      <param name="name">The name of the processing instruction. </param>
      <param name="text">The text to include in the processing instruction. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.<paramref name="name" /> is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> has already been called. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
      <param name="localName">The local name to write. </param>
      <param name="ns">The namespace URI for the name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is either null or String.Empty.<paramref name="localName" /> is not a valid name. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes raw markup manually from a character buffer.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>When overridden in a derived class, writes raw markup manually from a string.</summary>
      <param name="data">String containing the text to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>Writes the start of an attribute with the specified local name.</summary>
      <param name="localName">The local name of the attribute.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>Writes the start of an attribute with the specified local name and namespace URI.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.</summary>
      <param name="prefix">The namespace prefix of the attribute. </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI for the attribute. </param>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>When overridden in a derived class, writes the XML declaration with the version "1.0".</summary>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.</summary>
      <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>When overridden in a derived class, writes out a start tag with the specified local name.</summary>
      <param name="localName">The local name of the element. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The namespace prefix of the element. </param>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
      <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>When overridden in a derived class, gets the state of the writer.</summary>
      <returns>One of the <see cref="T:System.Xml.WriteState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>When overridden in a derived class, writes the given text content.</summary>
      <param name="text">The text to write. </param>
      <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.</summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF. </param>
      <exception cref="T:System.ArgumentException">An invalid surrogate character pair was passed. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>Writes a <see cref="T:System.Boolean" /> value.</summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>Writes a <see cref="T:System.DateTime" /> value.</summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>Writes a <see cref="T:System.Decimal" /> value.</summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>Writes a <see cref="T:System.Double" /> value.</summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>Writes a <see cref="T:System.Int32" /> value.</summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>Writes a <see cref="T:System.Int64" /> value.</summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>Writes the object value.</summary>
      <param name="value">The object value to write. NoteWith the release of the .NET Framework 3.5, this method accepts <see cref="T:System.DateTimeOffset" /> as a parameter.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The writer is closed or in error state.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>Writes a single-precision floating-point number.</summary>
      <param name="value">The single-precision floating-point number to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>Writes a <see cref="T:System.String" /> value.</summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>When overridden in a derived class, writes out the given white space.</summary>
      <param name="ws">The string of white space characters. </param>
      <exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>When overridden in a derived class, gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.</summary>
      <returns>An XmlSpace representing the current xml:space scope.Value Meaning NoneThis is the default if no xml:space scope exists. DefaultThe current scope is xml:space="default". PreserveThe current scope is xml:space="preserve". </returns>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlWriter" /> object created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method.</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriterSettings" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>Gets or sets a value indicating whether to do character checking.</summary>
      <returns>true to do character checking; otherwise false. The default is true.</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>Creates a copy of the <see cref="T:System.Xml.XmlWriterSettings" /> instance.</summary>
      <returns>The cloned <see cref="T:System.Xml.XmlWriterSettings" /> object.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlWriter" /> should also close the underlying stream or <see cref="T:System.IO.TextWriter" /> when the <see cref="M:System.Xml.XmlWriter.Close" /> method is called.</summary>
      <returns>true to also close the underlying stream or <see cref="T:System.IO.TextWriter" />; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlWriter" /> complies with.</summary>
      <returns>One of the <see cref="T:System.Xml.ConformanceLevel" /> values. The default is ConformanceLevel.Document.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>Gets or sets the type of text encoding to use.</summary>
      <returns>The text encoding to use. The default is Encoding.UTF8.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>Gets or sets a value indicating whether to indent elements.</summary>
      <returns>true to write individual elements on new lines and indent; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>Gets or sets the character string to use when indenting. This setting is used when the <see cref="P:System.Xml.XmlWriterSettings.Indent" /> property is set to true.</summary>
      <returns>The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.</returns>
      <exception cref="T:System.ArgumentNullException">The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.XmlWriter" /> should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.</summary>
      <returns>The <see cref="T:System.Xml.NamespaceHandling" /> enumeration used to specify whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>Gets or sets the character string to use for line breaks. </summary>
      <returns>The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is \r\n (carriage return, new line).</returns>
      <exception cref="T:System.ArgumentNullException">The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>Gets or sets a value indicating whether to normalize line breaks in the output.</summary>
      <returns>One of the <see cref="T:System.Xml.NewLineHandling" /> values. The default is <see cref="F:System.Xml.NewLineHandling.Replace" />.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>Gets or sets a value indicating whether to write attributes on a new line.</summary>
      <returns>true to write attributes on individual lines; otherwise false. The default is false.NoteThis setting has no effect when the <see cref="P:System.Xml.XmlWriterSettings.Indent" /> property value is false.When <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> is set to true, each attribute is pre-pended with a new line and one extra level of indentation.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>Gets or sets a value indicating whether to write an XML declaration.</summary>
      <returns>true to omit the XML declaration; otherwise false. The default is false, an XML declaration is written.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary>Gets the method used to serialize the <see cref="T:System.Xml.XmlWriter" /> output.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlOutputMethod" /> values. The default is <see cref="F:System.Xml.XmlOutputMethod.Xml" />.</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>Resets the members of the settings class to their default values.</summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Settings">
      <summary>Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlTextReader" /> instance; null if the reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create" /> method. </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.FromBinHexString(System.String)"></member>
    <member name="M:System.Xml.XmlConvert.ToBinHexString(System.Byte[])"></member>
    <member name="P:System.Xml.XmlResolver.NameTable"></member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary>The <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> enumeration is used by the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> and defines which well-known DTDs that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> recognizes.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary>Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will not recognize any of the predefined DTDs.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary>Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize DTDs and entities that are defined in XHTML 1.0. </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary>Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize DTDs and entities that are defined in RSS 0.91.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary>Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize all currently supported DTDs. This is the default behavior.</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary>The <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> type is used to prepopulate the cache with DTDs or XML streams. </summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class. </summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified preloaded well-known DTDs. </summary>
      <param name="preloadedDtds">The well-known DTDs that should be prepopulated into the cache. </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver.</summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver and preloaded well-known DTDs. </summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.</param>
      <param name="preloadedDtds">The well-known DTDs that should be prepopulated into the cache. </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver, preloaded well-known DTDs, and URI equality comparer.</summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.</param>
      <param name="preloadedDtds">The well-known DTDs that should be prepopulated into cache.</param>
      <param name="uriComparer">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when you compare URIs.</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary>Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.</summary>
      <param name="uri">The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <param name="value">A byte array with the data that corresponds to the provided URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.</summary>
      <param name="uri">The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <param name="value">A byte array with the data that corresponds to the provided URI.</param>
      <param name="offset">The offset in the provided byte array where the data starts.</param>
      <param name="count">The number of bytes to read from the byte array, starting at the provided offset.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> or <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less than 0.-or-The length of the <paramref name="value" /> minus <paramref name="offset" /> is less than <paramref name="count." /></exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary>Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.</summary>
      <param name="uri">The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <param name="value">A <see cref="T:System.IO.Stream" /> with the data that corresponds to the provided URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary>Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.</summary>
      <param name="uri">The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <param name="value">A String with the data that corresponds to the provided URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary>Sets credentials that are used to authenticate underlying <see cref="T:System.Net.WebRequest" />.</summary>
      <returns>An <see cref="T:System.Net.ICredentials" /> object. </returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>Maps a URI to an object that contains the actual resource. </summary>
      <returns>A <see cref="T:System.IO.Stream" /> or <see cref="T:System.IO.TextReader" /> object.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
      <param name="role">The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This parameter is provided for future extensibility purposes. For example, this parameter can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios.</param>
      <param name="ofObjectToReturn">The type of object to return. The <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> supports <see cref="T:System.IO.Stream" /> objects and <see cref="T:System.IO.TextReader" /> objects for URIs that were added as String. If the requested type is not supported by the resolver, an exception will be thrown. Use the <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> method to determine whether a certain Type is supported by this resolver.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> is null.</exception>
      <exception cref="T:System.Xml.XmlException">Cannot resolve URI passed in <paramref name="absoluteUri" />.-or-<paramref name="ofObjectToReturn" /> is not of a supported type.</exception>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary>Gets a collection of preloaded URIs.</summary>
      <returns>The collection of preloaded URIs.</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary>Removes the data that corresponds to the URI from the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />. </summary>
      <param name="uri">The URI of the data that should be removed from the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary>Returns true if the resolver’s GetEntity method can resolve the provided URI into an instance of the provided <see cref="T:System.Type" />.</summary>
      <returns>Returns <see cref="T:System.Uri" /> or null.</returns>
      <param name="baseUri">The URI.</param>
      <param name="relativeUri">A relative Uri as <see cref="T:System.String" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary>Returns true if the resolver’s GetEntity method can resolve the provided URI into an instance of the provided <see cref="T:System.Type" />.</summary>
      <returns>Returns true if <see cref="T:System.Type" /> is supported, otherwise false.</returns>
      <param name="absoluteUri"></param>
      <param name="type">The requested <see cref="T:System.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary>Defines the post-schema-validation infoset of a validated XML node.</summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary>Gets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.</summary>
      <returns>true if this validated XML node was set as the result of a default being applied during schema validation; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary>Gets a value indicating if the value for this validated XML node is nil.</summary>
      <returns>true if the value for this validated XML node is nil; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary>Gets the dynamic schema type for this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary>Gets the compiled <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> that corresponds to this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary>Gets the compiled <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that corresponds to this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaElement" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary>Gets the static XML Schema Definition Language (XSD) schema type of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> value of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> value.</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>Returns detailed information related to the ValidationEventHandler.</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaException" /> associated with the validation event.</summary>
      <returns>The XmlSchemaException associated with the validation event.</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>Gets the text description corresponding to the validation event.</summary>
      <returns>The text description.</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>Gets the severity of the validation event.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSeverityType" /> value representing the severity of the validation event.</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>Represents the callback method that will handle XML schema validation events and the <see cref="T:System.Xml.Schema.ValidationEventArgs" />.</summary>
      <param name="sender">The source of the event. Note Determine the type of a sender before using it in your code. You cannot assume that the sender is an instance of a particular type. The sender is also not guaranteed to not  be null. Always surround your casts with failure handling logic.</param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary>Represents the typed value of a validated XML element or attribute. The <see cref="T:System.Xml.Schema.XmlAtomicValue" /> class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary>Returns a copy of this <see cref="T:System.Xml.Schema.XmlAtomicValue" /> object.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlAtomicValue" /> object copy of this <see cref="T:System.Xml.Schema.XmlAtomicValue" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary>Gets a value indicating whether the validated XML element or attribute is an XPath node or an atomic value.</summary>
      <returns>true if the validated XML element or attribute is an XPath node; false if the validated XML element or attribute is an atomic value.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />.</summary>
      <returns>Returns a copy of this <see cref="T:System.Xml.Schema.XmlAtomicValue" /> object.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary>Gets the string value of the validated XML element or attribute.</summary>
      <returns>The string value of the validated XML element or attribute.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary>Gets the current validated XML element or attribute as a boxed object of the most appropriate Microsoft .NET Framework type according to its schema type.</summary>
      <returns>The current validated XML element or attribute as a boxed object of the most appropriate .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary>Gets the string value of the validated XML element or attribute.</summary>
      <returns>The string value of the validated XML element or attribute.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Returns the validated XML element or attribute's value as the type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>The value of the validated XML element or attribute as the type requested.</returns>
      <param name="type">The type to return the validated XML element or attribute's value as.</param>
      <param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes.</param>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary>Gets the validated XML element or attribute's value as a <see cref="T:System.Boolean" />.</summary>
      <returns>The validated XML element or attribute's value as a <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Boolean" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary>Gets the validated XML element or attribute's value as a <see cref="T:System.DateTime" />.</summary>
      <returns>The validated XML element or attribute's value as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.DateTime" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary>Gets the validated XML element or attribute's value as a <see cref="T:System.Double" />.</summary>
      <returns>The validated XML element or attribute's value as a <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Double" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary>Gets the validated XML element or attribute's value as an <see cref="T:System.Int32" />.</summary>
      <returns>The validated XML element or attribute's value as an <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Int32" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary>Gets the validated XML element or attribute's value as an <see cref="T:System.Int64" />.</summary>
      <returns>The validated XML element or attribute's value as an <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.FormatException">The validated XML element or attribute's value is not in the correct format for the <see cref="T:System.Int64" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary>Gets the Microsoft .NET Framework type of the validated XML element or attribute.</summary>
      <returns>The .NET Framework type of the validated XML element or attribute. The default value is <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaType" /> for the validated XML element or attribute.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaType" /> for the validated XML element or attribute.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>An in-memory representation of an XML Schema as specified in the World Wide Web Consortium (W3C) XML Schema Part 1: Structures and XML Schema Part 2: Datatypes specifications.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchema" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>Gets or sets the form for attributes declared in the target namespace of the schema.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaForm" /> value that indicates if attributes from the target namespace are required to be qualified with the namespace prefix. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>Gets the post-schema-compilation value of all the global attribute groups in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all the global attribute groups in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>Gets the post-schema-compilation value for all the attributes in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all the attributes in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>Gets or sets the blockDefault attribute which sets the default value of the block attribute on element and complex types in the targetNamespace of the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> value representing the different methods for preventing derivation. The default value is XmlSchemaDerivationMethod.None.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.</summary>
      <param name="validationEventHandler">The validation event handler that receives information about XML Schema validation errors. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary>Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.</summary>
      <param name="validationEventHandler">The validation event handler that receives information about the XML Schema validation errors. </param>
      <param name="resolver">The XmlResolver used to resolve namespaces referenced in include and import elements. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>Gets or sets the form for elements declared in the target namespace of the schema.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaForm" /> value that indicates if elements from the target namespace are required to be qualified with the namespace prefix. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>Gets the post-schema-compilation value for all the elements in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all the elements in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>Gets or sets the finalDefault attribute which sets the default value of the final attribute on elements and complex types in the target namespace of the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> value representing the different methods for preventing derivation. The default value is XmlSchemaDerivationMethod.None.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>Gets the post-schema-compilation value of all the groups in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all the groups in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>Gets or sets the string ID.</summary>
      <returns>The ID of the string. The default value is String.Empty.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>Gets the collection of included and imported schemas.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> of the included and imported schemas.</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>The XML schema instance namespace. This field is constant. </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>Indicates if the schema has been compiled.</summary>
      <returns>true if schema has been compiled, otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>Gets the collection of schema elements in the schema and is used to add new element types at the schema element level.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> of schema elements in the schema.</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>The XML schema namespace. This field is constant.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>Gets the post-schema-compilation value for all notations in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> collection of all notations in the schema.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>Reads an XML Schema  from the supplied stream.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML Schema.</returns>
      <param name="stream">The supplied data stream. </param>
      <param name="validationEventHandler">The validation event handler that receives information about XML Schema syntax errors. </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException" /> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>Reads an XML Schema from the supplied <see cref="T:System.IO.TextReader" />.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML Schema.</returns>
      <param name="reader">The TextReader containing the XML Schema to read. </param>
      <param name="validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors. </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException" /> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>Reads an XML Schema from the supplied <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> object representing the XML Schema.</returns>
      <param name="reader">The XmlReader containing the XML Schema to read. </param>
      <param name="validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors. </param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An <see cref="T:System.Xml.Schema.XmlSchemaException" /> is raised if no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>Gets the post-schema-compilation value of all schema types in the schema.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> of all schema types in the schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>Gets or sets the Uniform Resource Identifier (URI) of the schema target namespace.</summary>
      <returns>The schema target namespace.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>Gets and sets the qualified attributes which do not belong to the schema target namespace.</summary>
      <returns>An array of qualified <see cref="T:System.Xml.XmlAttribute" /> objects that do not belong to the schema target namespace.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>Gets or sets the version of the schema.</summary>
      <returns>The version of the schema. The default value is String.Empty.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>Writes the XML Schema to the supplied data stream.</summary>
      <param name="stream">The supplied data stream. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.Stream" /> using the <see cref="T:System.Xml.XmlNamespaceManager" /> specified.</summary>
      <param name="stream">The supplied data stream. </param>
      <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
      <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>Writes the XML Schema to the supplied <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="namespaceManager">The <see cref="T:System.Xml.XmlNamespaceManager" />. </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>Represents the World Wide Web Consortium (W3C) all element (compositor).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAll" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>Gets the collection of XmlSchemaElement elements contained within the all compositor.</summary>
      <returns>The collection of elements contained in XmlSchemaAll.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>The base class for any element that can contain annotation elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>Gets or sets the annotation property.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> representing the annotation property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>Gets or sets the string id.</summary>
      <returns>The string id. The default is String.Empty.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>Gets or sets the qualified attributes that do not belong to the current schema's target namespace.</summary>
      <returns>An array of qualified <see cref="T:System.Xml.XmlAttribute" /> objects that do not belong to the schema's target namespace.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>Represents the World Wide Web Consortium (W3C) annotation element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>Gets or sets the string id.</summary>
      <returns>The string id. The default is String.Empty.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>Gets the Items collection that is used to store the appinfo and documentation child elements.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> of appinfo and documentation child elements.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>Gets or sets the qualified attributes that do not belong to the schema's target namespace.</summary>
      <returns>An array of <see cref="T:System.Xml.XmlAttribute" /> objects that do not belong to the schema's target namespace.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>Represents the World Wide Web Consortium (W3C) any element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAny" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>Gets or sets the namespaces containing the elements that can be used.</summary>
      <returns>Namespaces for elements that are available for use. The default is ##any.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>Gets or sets information about how an application or XML processor should handle the validation of XML documents for the elements specified by the any element.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> values. If no processContents attribute is specified, the default is Strict.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>Represents the World Wide Web Consortium (W3C) anyAttribute element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>Gets or sets the namespaces containing the attributes that can be used.</summary>
      <returns>Namespaces for attributes that are available for use. The default is ##any.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>Gets or sets information about how an application or XML processor should handle the validation of XML documents for the attributes specified by the anyAttribute element.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> values. If no processContents attribute is specified, the default is Strict.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>Represents the World Wide Web Consortium (W3C) appinfo element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>Gets or sets an array of <see cref="T:System.Xml.XmlNode" /> objects that represents the appinfo child nodes.</summary>
      <returns>An array of <see cref="T:System.Xml.XmlNode" /> objects that represents the appinfo child nodes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>Gets or sets the source of the application information.</summary>
      <returns>A Uniform Resource Identifier (URI) reference. The default is String.Empty.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>Represents the attribute element from the XML Schema as specified by the World Wide Web Consortium (W3C). Attributes provide additional information for other document elements. The attribute tag is nested between the tags of a document's element for the schema. The XML document displays attributes as named items in the opening tag of an element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary>Gets an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> object representing the type of the attribute based on the <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> or <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> of the attribute.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>Gets the common language runtime (CLR) object based on the <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> or <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> of the attribute that holds the post-compilation value of the AttributeType property.</summary>
      <returns>The common runtime library (CLR) object that holds the post-compilation value of the AttributeType property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>Gets or sets the default value for the attribute.</summary>
      <returns>The default value for the attribute. The default is a null reference.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>Gets or sets the fixed value for the attribute.</summary>
      <returns>The fixed value for the attribute. The default is null.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>Gets or sets the form for the attribute.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is the value of the <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> of the schema element containing the attribute.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>Gets or sets the name of the attribute.</summary>
      <returns>The name of the attribute.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>Gets the qualified name for the attribute.</summary>
      <returns>The post-compilation value of the QualifiedName property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>Gets or sets the name of an attribute declared in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The name of the attribute declared.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>Gets or sets the attribute type to a simple type.</summary>
      <returns>The simple type defined in this schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>Gets or sets the name of the simple type defined in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The name of the simple type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>Gets or sets information about how the attribute is used.</summary>
      <returns>One of the following values: None, Prohibited, Optional, or Required. The default is Optional.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>Represents the attributeGroup element from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroups provides a mechanism to group a set of attribute declarations so that they can be incorporated as a group into complex type definitions.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the attribute group.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>Gets the collection of attributes for the attribute group. Contains XmlSchemaAttribute and XmlSchemaAttributeGroupRef elements.</summary>
      <returns>The collection of attributes for the attribute group.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>Gets or sets the name of the attribute group.</summary>
      <returns>The name of the attribute group.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary>Gets the qualified name of the attribute group.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> object representing the qualified name of the attribute group.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary>Gets the redefined attribute group property from the XML Schema.</summary>
      <returns>The redefined attribute group property.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>Represents the attributeGroup element with the ref attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroupRef is the reference for an attributeGroup, name property contains the attribute group being referenced. </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>Gets or sets the name of the referenced attributeGroup element.</summary>
      <returns>The name of the referenced attribute group. The value must be a QName.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>Represents the choice element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The choice allows only one of its children to appear in an instance. </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>Gets the collection of the elements contained with the compositor (choice): XmlSchemaElement, XmlSchemaGroupRef, XmlSchemaChoice, XmlSchemaSequence, or XmlSchemaAny.</summary>
      <returns>The collection of elements contained within XmlSchemaChoice.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>Contains a cache of XML Schema definition language (XSD) and XML-Data Reduced (XDR) schemas. The <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> class class is obsolete. Use <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instead.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>Initializes a new instance of the XmlSchemaCollection class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the XmlSchemaCollection class with the specified <see cref="T:System.Xml.XmlNameTable" />. The XmlNameTable is used when loading schemas.</summary>
      <param name="nametable">The XmlNameTable to use. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>Adds the schema located by the given URL into the schema collection.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema. </returns>
      <param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
      <param name="uri">The URL that specifies the schema to load. </param>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>Adds the schema contained in the <see cref="T:System.Xml.XmlReader" /> to the schema collection.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema.</returns>
      <param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the schema to add. </param>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>Adds the schema contained in the <see cref="T:System.Xml.XmlReader" /> to the schema collection. The specified <see cref="T:System.Xml.XmlResolver" /> is used to resolve any external resources.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection; null if the schema being added is an XDR schema or if there are compilation errors in the schema.</returns>
      <param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the targetNamespace. </param>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the schema to add. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces referenced in include and import elements or x-schema attribute (XDR schemas). If this is null, external references are not resolved. </param>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>Adds the <see cref="T:System.Xml.Schema.XmlSchema" /> to the collection.</summary>
      <returns>The XmlSchema object.</returns>
      <param name="schema">The XmlSchema to add to the collection. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary>Adds the <see cref="T:System.Xml.Schema.XmlSchema" /> to the collection. The specified <see cref="T:System.Xml.XmlResolver" /> is used to resolve any external references.</summary>
      <returns>The XmlSchema added to the schema collection.</returns>
      <param name="schema">The XmlSchema to add to the collection. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces referenced in include and import elements. If this is null, external references are not resolved. </param>
      <exception cref="T:System.Xml.XmlException">The schema is not a valid schema. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>Adds all the namespaces defined in the given collection (including their associated schemas) to this collection.</summary>
      <param name="schema">The XmlSchemaCollection you want to add to this collection. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>Gets a value indicating whether a schema with the specified namespace is in the collection.</summary>
      <returns>true if a schema with the specified namespace is in the collection; otherwise, false.</returns>
      <param name="ns">The namespace URI associated with the schema. For XML Schemas, this will typically be the target namespace. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>Gets a value indicating whether the targetNamespace of the specified <see cref="T:System.Xml.Schema.XmlSchema" /> is in the collection.</summary>
      <returns>true if there is a schema in the collection with the same targetNamespace; otherwise, false.</returns>
      <param name="schema">The XmlSchema object. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>Copies all the XmlSchema objects from this collection into the given array starting at the given index.</summary>
      <param name="array">The array to copy the objects to. </param>
      <param name="index">The index in <paramref name="array" /> where copying will begin. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>Gets the number of namespaces defined in this collection.</summary>
      <returns>The number of namespaces defined in this collection.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>Provides support for the "for each" style iteration over the collection of schemas.</summary>
      <returns>An enumerator for iterating over all schemas in the current collection.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchema" /> associated with the given namespace URI.</summary>
      <returns>The XmlSchema associated with the namespace URI; null if there is no loaded schema associated with the given namespace or if the namespace is associated with an XDR schema.</returns>
      <param name="ns">The namespace URI associated with the schema you want to return. This will typically be the targetNamespace of the schema. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>Gets the default XmlNameTable used by the XmlSchemaCollection when loading new schemas.</summary>
      <returns>An XmlNameTable.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />.</summary>
      <param name="array">The array to copy the objects to. </param>
      <param name="index">The index in <paramref name="array" /> where copying will begin. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />.</summary>
      <returns>Returns the count of the items in the collection.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaCollection.System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Returns true if the collection is synchronized, otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaCollection.System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Returns a <see cref="T:System.Collections.ICollection.SyncRoot" /> object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />.</summary>
      <returns>Returns the <see cref="T:System.Collections.IEnumerator" /> for the collection.</returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>Sets an event handler for receiving information about the XDR and XML schema validation errors.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>Supports a simple iteration over a collection. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Xml.Schema.XmlSchema" /> in the collection.</summary>
      <returns>The current XmlSchema in the collection.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>Advances the enumerator to the next schema in the collection.</summary>
      <returns>true if the move was successful; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />.</summary>
      <returns>Returns the current node.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />.</summary>
      <returns>Returns the next node.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System.Collections.IEnumerator.Reset" />.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary>Provides schema compilation options for the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> class This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> class. </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> should check for Unique Particle Attribution (UPA) violations.</summary>
      <returns>true if the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> should check for Unique Particle Attribution (UPA) violations; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>Represents the complexContent element from XML Schema as specified by the World Wide Web Consortium (W3C). This class represents the complex content model for complex types. It contains extensions or restrictions on a complex type that has either only elements or mixed content.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>Gets or sets the content.</summary>
      <returns>One of either the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> or <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>Gets or sets information that determines if the type has a mixed content model.</summary>
      <returns>If this property is true, character data is allowed to appear between the child elements of the complex type (mixed content model). The default is false.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>Represents the extension element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with complex content model derived by extension. It extends the complex type by adding attributes or elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content model.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content model.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>Gets the collection of attributes for the complex content. Contains <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> elements.</summary>
      <returns>The collection of attributes for the complex content.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>Gets or sets the name of the complex type from which this type is derived by extension.</summary>
      <returns>The name of the complex type from which this type is derived by extension.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>Represents the restriction element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with a complex content model derived by restriction. It restricts the contents of the complex type to a subset of the inherited complex type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content model.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content model.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>Gets the collection of attributes for the complex type. Contains the <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> elements.</summary>
      <returns>The collection of attributes for the complex type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>Gets or sets the name of a complex type from which this type is derived by restriction.</summary>
      <returns>The name of the complex type from which this type is derived by restriction.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>Represents the complexType element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a complex type that determines the set of attributes and content of an element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>Gets or sets the value for the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>Gets the collection of attributes for the complex type.</summary>
      <returns>Contains <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>Gets the collection of all the complied attributes of this complex type and its base types.</summary>
      <returns>The collection of all the attributes from this complex type and its base types. The post-compilation value of the AttributeUses property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>Gets the post-compilation value for anyAttribute for this complex type and its base type(s).</summary>
      <returns>The post-compilation value of the anyAttribute element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>Gets or sets the block attribute.</summary>
      <returns>The block attribute prevents a complex type from being used in the specified type of derivation. The default is XmlSchemaDerivationMethod.None.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>Gets the value after the type has been compiled to the post-schema-validation information set (infoset). This value indicates how the type is enforced when xsi:type is used in the instance document.</summary>
      <returns>The post-schema-validated infoset value. The default is BlockDefault value on the schema element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>Gets or sets the post-compilation <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> of this complex type.</summary>
      <returns>The content model type that is one of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> or <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>Gets the content model of the complex type which holds the post-compilation value.</summary>
      <returns>The post-compilation value of the content model for the complex type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>Gets the particle that holds the post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> particle.</summary>
      <returns>The particle for the content type. The post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> particle.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>Gets or sets the information that determines if the complexType element can be used in the instance document.</summary>
      <returns>If true, an element cannot use this complexType element directly and must use a complex type that is derived from this complexType element. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>Gets or sets information that determines if the complex type has a mixed content model (markup within the content).</summary>
      <returns>true, if character data can appear between child elements of this complex type; otherwise, false. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>Gets or sets the compositor type as one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</summary>
      <returns>The compositor type.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>An abstract class for schema content.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaContent" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>Specifies the order and structure of the child elements of a type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>Gets or sets the content of the type.</summary>
      <returns>Provides the content of the type.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>Provides information about the validation mode of any and anyAttribute element replacements.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>Document items are not validated.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>Document items must consist of well-formed XML and are not validated by the schema.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>If the associated schema is found, the document items will be validated. No errors will be thrown otherwise.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>The schema processor must find a schema associated with the indicated namespace to validate the document items.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>Enumerations for the content model of the complex type. This represents the content in the post-schema-validation information set (infoset).</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>Text-only content.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>Empty content.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>Element-only content.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>Mixed content.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>The <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> class is an abstract class for mapping XML Schema definition language (XSD) types to Common Language Runtime (CLR) types.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary>Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, to the CLR type specified.</summary>
      <returns>The converted input value.</returns>
      <param name="value">The input value to convert to the specified type.</param>
      <param name="targetType">The target type to convert the input value to.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Object" /> or <see cref="T:System.Type" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">The type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />   does not support a conversion from type of the value specified to the type specified.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, to the CLR type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> if the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> represents the xs:QName type or a type derived from it.</summary>
      <returns>The converted input value.</returns>
      <param name="value">The input value to convert to the specified type.</param>
      <param name="targetType">The target type to convert the input value to.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> used for resolving namespace prefixes. This is only of use if the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />  represents the xs:QName type or a type derived from it.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Object" /> or <see cref="T:System.Type" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">The type represented by the <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />   does not support a conversion from type of the value specified to the type specified.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary>The <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> method always returns false.</summary>
      <returns>Always returns false.</returns>
      <param name="datatype">The <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary>When overridden in a derived class, validates the string specified against a built-in or user-defined simple type.</summary>
      <returns>An <see cref="T:System.Object" /> that can be cast safely to the type returned by the <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" /> property.</returns>
      <param name="s">The string to validate against the simple type.</param>
      <param name="nameTable">The <see cref="T:System.Xml.XmlNameTable" /> to use for atomization while parsing the string if this <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> object represents the xs:NCName type. </param>
      <param name="nsmgr">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object to use while parsing the string if this <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> object represents the xs:QName type.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The input value is not a valid instance of this W3C XML Schema type.</exception>
      <exception cref="T:System.ArgumentNullException">The value to parse cannot be null.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>When overridden in a derived class, gets the type for the string as specified in the World Wide Web Consortium (W3C) XML 1.0 specification.</summary>
      <returns>An <see cref="T:System.Xml.XmlTokenizedType" /> value for the string.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlTypeCode" /> value for the simple type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlTypeCode" /> value for the simple type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>When overridden in a derived class, gets the Common Language Runtime (CLR) type of the item.</summary>
      <returns>The Common Language Runtime (CLR) type of the item.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> value for the simple type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> value for the simple type.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary>Specifies the W3C XML schema data type variety of the type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary>A W3C XML schema atomic type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary>A W3C XML schema list type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary>A W3C XML schema union type.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>Provides different methods for preventing derivation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>Override default derivation method to allow any derivation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>Refers to derivations by Substitution.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>Refers to derivations by Extension.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>Refers to derivations by Restriction.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>Refers to derivations by List.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>Refers to derivations by Union.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>#all. Refers to all derivation methods.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>Accepts the default derivation method.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>Represents the documentation element from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies information to be read or used by humans within an annotation.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>Gets or sets the xml:lang attribute. This serves as an indicator of the language used in the contents.</summary>
      <returns>The xml:lang attribute.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>Gets or sets an array of XmlNodes that represents the documentation child nodes.</summary>
      <returns>The array that represents the documentation child nodes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>Gets or sets the Uniform Resource Identifier (URI) source of the information.</summary>
      <returns>A URI reference. The default is String.Empty.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>Represents the element element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is the base class for all particle types and is used to describe an element in an XML document.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>Gets or sets a Block derivation.</summary>
      <returns>The attribute used to block a type derivation. Default value is XmlSchemaDerivationMethod.None.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>Gets the post-compilation value of the Block property.</summary>
      <returns>The post-compilation value of the Block property. The default is the BlockDefault value on the schema element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>Gets the collection of constraints on the element.</summary>
      <returns>The collection of constraints.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>Gets or sets the default value of the element if its content is a simple type or content of the element is textOnly.</summary>
      <returns>The default value for the element. The default is a null reference.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary>Gets an <see cref="T:System.Xml.Schema.XmlSchemaType" /> object representing the type of the element based on the <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> or <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> values of the element.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>Gets a common language runtime (CLR) object based on the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> or <see cref="T:System.Xml.Schema.XmlSchemaElement" /> of the element, which holds the post-compilation value of the ElementType property.</summary>
      <returns>The common language runtime object. The post-compilation value of the ElementType property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>Gets or sets the Final property to indicate that no further derivations are allowed.</summary>
      <returns>The Final property. The default is XmlSchemaDerivationMethod.None.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>Gets the post-compilation value of the Final property.</summary>
      <returns>The post-compilation value of the Final property. Default value is the FinalDefault value on the schema element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>Gets or sets the fixed value.</summary>
      <returns>The fixed value that is predetermined and unchangeable. The default is a null reference.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>Gets or sets the form for the element.</summary>
      <returns>The form for the element. The default is the <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> value.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>Gets or sets information to indicate if the element can be used in an instance document.</summary>
      <returns>If true, the element cannot appear in the instance document. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>Gets or sets information that indicates if xsi:nil can occur in the instance data. Indicates if an explicit nil value can be assigned to the element.</summary>
      <returns>If nillable is true, this enables an instance of the element to have the nil attribute set to true. The nil attribute is defined as part of the XML Schema namespace for instances. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>Gets or sets the name of the element.</summary>
      <returns>The name of the element. The default is String.Empty.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>Gets the actual qualified name for the given element. </summary>
      <returns>The qualified name of the element. The post-compilation value of the QualifiedName property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>Gets or sets the reference name of an element declared in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The reference name of the element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>Gets or sets the type of the element. This can either be a complex type or a simple type.</summary>
      <returns>The type of the element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>Gets or sets the name of a built-in data type defined in this schema or another schema indicated by the specified namespace.</summary>
      <returns>The name of the built-in data type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>Gets or sets the name of an element that is being substituted by this element.</summary>
      <returns>The qualified name of an element that is being substituted by this element.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>Represents the enumeration facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies a list of valid values for a simpleType element. Declaration is contained within a restriction declaration.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>Returns detailed information about the schema exception.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Constructs a new XmlSchemaException object with the given SerializationInfo and StreamingContext information that contains all the properties of the XmlSchemaException.</summary>
      <param name="info">SerializationInfo.</param>
      <param name="context">StreamingContext.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException" /> class with the exception message specified.</summary>
      <param name="message">A string description of the error condition.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException" /> class with the exception message and original <see cref="T:System.Exception" /> object that caused this exception specified.</summary>
      <param name="message">A string description of the error condition.</param>
      <param name="innerException">The original <see cref="T:System.Exception" /> object that caused this exception.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaException" /> class with the exception message specified, and the original <see cref="T:System.Exception" /> object, line number, and line position of the XML that cause this exception specified.</summary>
      <param name="message">A string description of the error condition.</param>
      <param name="innerException">The original <see cref="T:System.Exception" /> object that caused this exception.</param>
      <param name="lineNumber">The line number of the XML that caused this exception.</param>
      <param name="linePosition">The line position of the XML that caused this exception.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the XmlSchemaException properties into the SerializationInfo class for the given StreamingContext.</summary>
      <param name="info">The SerializationInfo. </param>
      <param name="context">The StreamingContext information. </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>Gets the line number indicating where the error occurred.</summary>
      <returns>The line number indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>Gets the line position indicating where the error occurred.</summary>
      <returns>The line position indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary>Gets the description of the error condition of this exception.</summary>
      <returns>The description of the error condition of this exception.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>The XmlSchemaObject that produced the XmlSchemaException.</summary>
      <returns>A valid object instance represents a structural validation error in the XML Schema Object Model (SOM).</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>Gets the Uniform Resource Identifier (URI) location of the schema that caused the exception.</summary>
      <returns>The URI location of the schema that caused the exception.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>An abstract class. Provides information about the included schema.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>Gets or sets the string id.</summary>
      <returns>The string id. The default is String.Empty.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>Gets or sets the XmlSchema for the referenced schema.</summary>
      <returns>The XmlSchema for the referenced schema.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>Gets or sets the Uniform Resource Identifier (URI) location for the schema, which tells the schema processor where the schema physically resides.</summary>
      <returns>The URI location for the schema.Optional for imported schemas.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>Gets and sets the qualified attributes, which do not belong to the schema target namespace.</summary>
      <returns>Qualified attributes that belong to another target namespace.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>Abstract class for all facets that are used when simple types are derived by restriction.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>Gets or sets information that indicates that this facet is fixed.</summary>
      <returns>If true, value is fixed; otherwise, false. The default is false.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>Gets or sets the value attribute of the facet.</summary>
      <returns>The value attribute.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>Indicates if attributes or elements need to be qualified with a namespace prefix.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>Element and attribute form is not specified in the schema.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>Elements and attributes must be qualified with a namespace prefix.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>Elements and attributes are not required to be qualified with a namespace prefix.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>Specifies a restriction on the number of digits that can be entered for the fraction value of a simpleType element. The value of fractionDigits must be a positive integer. Represents the World Wide Web Consortium (W3C) fractionDigits facet.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>Represents the group element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines groups at the schema level that are referenced from the complex types. It groups a set of element declarations so that they can be incorporated as a group into complex type definitions.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>Gets or sets the name of the schema group.</summary>
      <returns>The name of the schema group.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary>Gets the qualified name of the schema group.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> object representing the qualified name of the schema group.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>An abstract class for <see cref="T:System.Xml.Schema.XmlSchemaAll" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" />.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroupBase" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>This collection is used to add new elements to the compositor.</summary>
      <returns>An XmlSchemaObjectCollection.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>Represents the group element with ref attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). This class is used within complex types that reference a group defined at the schema level.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes, which holds the post-compilation value of the Particle property.</summary>
      <returns>The post-compilation value of the Particle property, which is one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>Gets or sets the name of a group defined in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The name of a group defined in this schema.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>Class for the identity constraints: key, keyref, and unique elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>Gets the collection of fields that apply as children for the XML Path Language (XPath) expression selector.</summary>
      <returns>The collection of fields.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>Gets or sets the name of the identity constraint.</summary>
      <returns>The name of the identity constraint.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>Gets the qualified name of the identity constraint, which holds the post-compilation value of the QualifiedName property.</summary>
      <returns>The post-compilation value of the QualifiedName property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>Gets or sets the XPath expression selector element.</summary>
      <returns>The XPath expression selector element.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>Represents the import element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to import schema components from other schemas.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaImport" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>Gets or sets the annotation property.</summary>
      <returns>The annotation.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>Gets or sets the target namespace for the imported schema as a Uniform Resource Identifier (URI) reference.</summary>
      <returns>The target namespace for the imported schema as a URI reference.Optional.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>Represents the include element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to include declarations and definitions from an external schema. The included declarations and definitions are then available for processing in the containing schema.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>Gets or sets the annotation property.</summary>
      <returns>The annotation.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary>Infers an XML Schema Definition Language (XSD) schema from an XML document. The <see cref="T:System.Xml.Schema.XmlSchemaInference" /> class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInference" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary>Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing the inferred schemas.</returns>
      <param name="instanceDocument">An <see cref="T:System.Xml.XmlReader" /> object containing the XML document to infer a schema from.</param>
      <exception cref="T:System.Xml.XmlException">The XML document is not well-formed.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">The <see cref="T:System.Xml.XmlReader" /> object is not positioned on the root node or on an element. An error occurs during the schema inference process.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary>Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the <see cref="T:System.Xml.XmlReader" /> object specified, and refines the inferred schema using an existing schema in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object specified with the same target namespace.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing the inferred schemas.</returns>
      <param name="instanceDocument">An <see cref="T:System.Xml.XmlReader" /> object containing the XML document to infer a schema from.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing an existing schema used to refine the inferred schema.</param>
      <exception cref="T:System.Xml.XmlException">The XML document is not well-formed.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">The <see cref="T:System.Xml.XmlReader" /> object is not positioned on the root node or on an element. An error occurs during the schema inference process.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> value that affects schema occurrence declarations inferred from the XML document.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> value that affects types inferred from the XML document.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> object.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary>Affects occurrence and type information inferred by the <see cref="T:System.Xml.Schema.XmlSchemaInference" /> class for elements and attributes in an XML document. </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary>Indicates that a more restrictive schema declaration should be inferred for a particular element or attribute.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary>Indicates that a less restrictive schema declaration should be inferred for a particular element or attribute.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary>Returns information about errors encountered by the <see cref="T:System.Xml.Schema.XmlSchemaInference" /> class while inferring a schema from an XML document.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class with the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects specified that contain all the properties of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class with the error message specified.</summary>
      <param name="message">A description of the error.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class with the error message specified and the original <see cref="T:System.Exception" /> that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> specified.</summary>
      <param name="message">A description of the error.</param>
      <param name="innerException">An <see cref="T:System.Exception" /> object containing the original exception that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> class with the error message specified, the original <see cref="T:System.Exception" /> that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> specified, and the line number and line position of the error in the XML document specified.</summary>
      <param name="message">A description of the error.</param>
      <param name="innerException">An <see cref="T:System.Exception" /> object containing the original exception that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</param>
      <param name="lineNumber">The line number in the XML document that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</param>
      <param name="linePosition">The line position in the XML document that caused the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> object properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object specified for the <see cref="T:System.Runtime.Serialization.StreamingContext" /> object specified.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary>Represents the post-schema-validation infoset of a validated XML node.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> object that corresponds to the content type of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary>Gets or sets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.</summary>
      <returns>A bool value.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary>Gets or sets a value indicating if the value for this validated XML node is nil.</summary>
      <returns>A bool value.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary>Gets or sets the dynamic schema type for this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary>Gets or sets the compiled <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> object that corresponds to this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary>Gets or sets the compiled <see cref="T:System.Xml.Schema.XmlSchemaElement" /> object that corresponds to this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary>Gets or sets the static XML Schema Definition Language (XSD) schema type of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> value of this validated XML node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> value.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>This class represents the key element from XMLSchema as specified by the World Wide Web Consortium (W3C).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaKey" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>This class represents the keyref element from XMLSchema as specified by the World Wide Web Consortium (W3C).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>Gets or sets the name of the key that this constraint refers to in another simple or complex type.</summary>
      <returns>The QName of the key that this constraint refers to.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>Represents the length facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the length of a simpleType element on the data type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>Represents the maxExclusive element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a simpleType element. The element value must be less than the value of the maxExclusive element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>Represents the maxInclusive element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a simpleType element. The element value must be less than or equal to the value of the maxInclusive element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>Represents the maxLength element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum length of the data value of a simpleType element. The length must be less than the value of the maxLength element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>Represents the minExclusive element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than the value of the minExclusive element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>Represents the minInclusive element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than or equal to the value of the minInclusive element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>Represents the minLength element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum length of the data value of a simpleType element. The length must be greater than the value of the minLength element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>Represents the notation element from XML Schema as specified by the World Wide Web Consortium (W3C). An XML Schema notation declaration is a reconstruction of XML 1.0 NOTATION declarations. The purpose of notations is to describe the format of non-XML data within an XML document.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>Gets or sets the name of the notation.</summary>
      <returns>The name of the notation.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>Gets or sets the public identifier.</summary>
      <returns>The public identifier. The value must be a valid Uniform Resource Identifier (URI).</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>Gets or sets the system identifier.</summary>
      <returns>The system identifier. The value must be a valid URI.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>Abstract class for defining numeric facets. This class is the base class for numeric facet classes such as <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /></summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>Represents the root class for the Xml schema object model hierarchy and serves as a base class for classes such as the <see cref="T:System.Xml.Schema.XmlSchema" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaObject" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>Gets or sets the line number in the file to which the schema element refers.</summary>
      <returns>The line number.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>Gets or sets the line position in the file to which the schema element refers.</summary>
      <returns>The line position.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> to use with this schema object.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> property for the schema object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary>Gets or sets the parent of this <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</summary>
      <returns>The parent <see cref="T:System.Xml.Schema.XmlSchemaObject" /> of this <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>Gets or sets the source location for the file that loaded the schema.</summary>
      <returns>The source location (URI) for the file.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>A collection of <see cref="T:System.Xml.Schema.XmlSchemaObject" />s.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>Initializes a new instance of the XmlSchemaObjectCollection class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>Initializes a new instance of the XmlSchemaObjectCollection class that takes an <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</summary>
      <param name="parent">The <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>Adds an <see cref="T:System.Xml.Schema.XmlSchemaObject" /> to the XmlSchemaObjectCollection.</summary>
      <returns>The index at which the item has been added.</returns>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than Count. </exception>
      <exception cref="T:System.InvalidCastException">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> parameter specified is not of type <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> or its derived types <see cref="T:System.Xml.Schema.XmlSchemaImport" />, <see cref="T:System.Xml.Schema.XmlSchemaInclude" />, and <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>Indicates if the specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> is in the XmlSchemaObjectCollection.</summary>
      <returns>true if the specified qualified name is in the collection; otherwise, returns false. If null is supplied, false is returned because there is no qualified name with a null name.</returns>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>Copies all the <see cref="T:System.Xml.Schema.XmlSchemaObject" />s from the collection into the given array, starting at the given index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the XmlSchemaObjectCollection. The array must have zero-based indexing. </param>
      <param name="index">The zero-based index in the array at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multi-dimensional.- or - <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.- or - The number of elements in the source <see cref="T:System.Xml.Schema.XmlSchemaObject" /> is greater than the available space from index to the end of the destination array. </exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Xml.Schema.XmlSchemaObject" /> cannot be cast automatically to the type of the destination array. </exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>Returns an enumerator for iterating through the XmlSchemaObjects contained in the XmlSchemaObjectCollection.</summary>
      <returns>The iterator returns <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>Gets the collection index corresponding to the specified <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</summary>
      <returns>The index corresponding to the specified <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> whose index you want to return. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>Inserts an <see cref="T:System.Xml.Schema.XmlSchemaObject" /> to the XmlSchemaObjectCollection.</summary>
      <param name="index">The zero-based index at which an item should be inserted. </param>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than Count. </exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObject" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>OnClear is invoked before the standard Clear behavior. For more information, see OnClear method for <see cref="T:System.Collections.CollectionBase" />.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>OnInsert is invoked before the standard Insert behavior. For more information, see OnInsert method <see cref="T:System.Collections.CollectionBase" />.</summary>
      <param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
      <param name="item">The item. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>OnRemove is invoked before the standard Remove behavior. For more information, see the OnRemove method for <see cref="T:System.Collections.CollectionBase" />.</summary>
      <param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
      <param name="item">The item. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>OnSet is invoked before the standard Set behavior. For more information, see the OnSet method for <see cref="T:System.Collections.CollectionBase" />.</summary>
      <param name="index">The index of <see cref="T:System.Xml.Schema.XmlSchemaObject" />. </param>
      <param name="oldValue">The old value. </param>
      <param name="newValue">The new value. </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>Removes an <see cref="T:System.Xml.Schema.XmlSchemaObject" /> from the XmlSchemaObjectCollection.</summary>
      <param name="item">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> to remove. </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>Represents the enumerator for the <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Xml.Schema.XmlSchemaObject" /> in the collection.</summary>
      <returns>The current <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>Moves to the next item in the collection.</summary>
      <returns>false at the end of the collection.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>Resets the enumerator to the start of the collection.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this member, see <see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />.</summary>
      <returns>The current <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" />.</summary>
      <returns>The next <see cref="T:System.Xml.Schema.XmlSchemaObject" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary>For a description of this member, see <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" />.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>Provides the collections for contained elements in the <see cref="T:System.Xml.Schema.XmlSchema" /> class (for example, Attributes, AttributeGroups, Elements, and so on).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>Determines if the qualified name specified exists in the collection.</summary>
      <returns>true if the qualified name specified exists in the collection; otherwise, false.</returns>
      <param name="name">The <see cref="T:System.Xml.XmlQualifiedName" />.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>Gets the number of items contained in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</summary>
      <returns>The number of items contained in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> that can iterate through <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>Returns the element in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> specified by qualified name.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> of the element in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> specified by qualified name.</returns>
      <param name="name">The <see cref="T:System.Xml.XmlQualifiedName" /> of the element to return.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>Returns a collection of all the named elements in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</summary>
      <returns>A collection of all the named elements in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>Returns a collection of all the values for all the elements in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</summary>
      <returns>A collection of all the values for all the elements in the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>Abstract class for that is the base class for all particle types (e.g. <see cref="T:System.Xml.Schema.XmlSchemaAny" />).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>Gets or sets the maximum number of times the particle can occur.</summary>
      <returns>The maximum number of times the particle can occur. The default is 1.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>Gets or sets the number as a string value. Maximum number of times the particle can occur.</summary>
      <returns>The number as a string value. String.Empty indicates that MaxOccurs is equal to the default value. The default is a null reference.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>Gets or sets the minimum number of times the particle can occur.</summary>
      <returns>The minimum number of times the particle can occur. The default is 1.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>Gets or sets the number as a string value. The minimum number of times the particle can occur.</summary>
      <returns>The number as a string value. String.Empty indicates that MinOccurs is equal to the default value. The default is a null reference.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>Represents the pattern element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the value entered for a simpleType element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>Represents the redefine element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to allow simple and complex types, groups and attribute groups from external schema files to be redefined in the current schema. This class can also be used to provide versioning for the schema elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> , for all attributes in the schema, which holds the post-compilation value of the AttributeGroups property.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> for all attributes in the schema. The post-compilation value of the AttributeGroups property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />, for all groups in the schema, which holds the post-compilation value of the Groups property.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> for all groups in the schema. The post-compilation value of the Groups property.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>Gets the collection of the following classes: <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, and <see cref="T:System.Xml.Schema.XmlSchemaGroup" />.</summary>
      <returns>The elements contained within the redefine element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />, for all simple and complex types in the schema, which holds the post-compilation value of the SchemaTypes property.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> for all schema types in the schema. The post-compilation value of the SchemaTypes property.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>Represents the sequence element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The sequence requires the elements in the group to appear in the specified sequence within the containing element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>The elements contained within the compositor. Collection of <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaSequence" />, or <see cref="T:System.Xml.Schema.XmlSchemaAny" />.</summary>
      <returns>The elements contained within the compositor.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>Contains a cache of XML Schema definition language (XSD) schemas. </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nameTable">The <see cref="T:System.Xml.XmlNameTable" /> object to use.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlNameTable" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary>Adds the XML Schema definition language (XSD) schema at the URL specified to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified, then null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException" /> is thrown.</returns>
      <param name="targetNamespace">The schema targetNamespace property, or null to use the targetNamespace specified in the schema.</param>
      <param name="schemaUri">The URL that specifies the schema to load.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The URL passed as a parameter is null or <see cref="F:System.String.Empty" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary>Adds the XML Schema definition language (XSD) schema contained in the <see cref="T:System.Xml.XmlReader" /> to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified, then null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException" /> is thrown.</returns>
      <param name="targetNamespace">The schema targetNamespace property, or null to use the targetNamespace specified in the schema.</param>
      <param name="schemaDocument">The <see cref="T:System.Xml.XmlReader" /> object.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary>Adds the given <see cref="T:System.Xml.Schema.XmlSchema" /> to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> object if the schema is valid. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified, then null is returned and the appropriate validation event is raised. Otherwise an <see cref="T:System.Xml.Schema.XmlSchemaException" /> is thrown.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to add to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary>Adds all the XML Schema definition language (XSD) schemas in the given <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">A schema in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object passed as a parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> for the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> for the <see cref="T:System.Xml.Schema.XmlSchemaSet" />. The default is an <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> instance with the <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> property set to true.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary>Compiles the XML Schema definition language (XSD) schemas added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into one logical schema.</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An error occurred when validating and compiling the schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary>Indicates whether an XML Schema definition language (XSD) schema with the specified target namespace URI is in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>Returns true if a schema with the specified target namespace URI is in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />; otherwise, false.</returns>
      <param name="targetNamespace">The schema targetNamespace property.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary>Indicates whether the specified XML Schema definition language (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> object is in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.Schema.XmlSchema" /> object is in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />; otherwise, false.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>Copies all the <see cref="T:System.Xml.Schema.XmlSchema" /> objects from the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to the given array, starting at the given index.</summary>
      <param name="schemas">The array to copy the objects to.</param>
      <param name="index">The index in the array where copying will begin.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary>Gets the number of logical XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>The number of logical schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary>Gets all the global attributes in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary>Gets all the global elements in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary>Gets all of the global simple and complex types in all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary>Indicates if the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> have been compiled.</summary>
      <returns>Returns true if the schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> have been compiled since the last time a schema was added or removed from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary>Gets the default <see cref="T:System.Xml.XmlNameTable" /> used by the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> when loading new XML Schema definition language (XSD) schemas.</summary>
      <returns>An <see cref="T:System.Xml.XmlNameTable" />.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary>Removes the specified XML Schema definition language (XSD) schema from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchema" /> object removed from the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> or null if the schema was not found in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to remove from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not a valid schema.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary>Removes the specified XML Schema definition language (XSD) schema and all the schemas it imports from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.Schema.XmlSchema" /> object and all its imports were successfully removed; otherwise, false.</returns>
      <param name="schemaToRemove">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to remove from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary>Reprocesses an XML Schema definition language (XSD) schema that already exists in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> object if the schema is a valid schema. If the schema is not valid and a <see cref="T:System.Xml.Schema.ValidationEventHandler" /> is specified, null is returned and the appropriate validation event is raised. Otherwise, an <see cref="T:System.Xml.Schema.XmlSchemaException" /> is thrown.</returns>
      <param name="schema">The schema to reprocess.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The schema is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> object passed as a parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.Schema.XmlSchema" /> object passed as a parameter does not already exist in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary>Returns a collection of all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing all the schemas that have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />. If no schemas have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />, an empty <see cref="T:System.Collections.ICollection" /> object is returned.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary>Returns a collection of all the XML Schema definition language (XSD) schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that belong to the given namespace.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing all the schemas that have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that belong to the given namespace. If no schemas have been added to the <see cref="T:System.Xml.Schema.XmlSchemaSet" />, an empty <see cref="T:System.Collections.ICollection" /> object is returned.</returns>
      <param name="targetNamespace">The schema targetNamespace property.</param>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary>Sets an event handler for receiving information about XML Schema definition language (XSD) schema validation errors.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces or locations referenced in include and import elements of a schema.</summary>
      <returns>The <see cref="T:System.Xml.XmlResolver" /> used to resolve namespaces or locations referenced in include and import elements of a schema.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>Represents the simpleContent element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for simple and complex types with simple content model.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> or <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />.</summary>
      <returns>The content contained within the XmlSchemaSimpleContentRestriction or XmlSchemaSimpleContentExtension class.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>Represents the extension element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by extension. Such derivations are used to extend the simple type content of the element by adding attributes.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>Gets or sets the XmlSchemaAnyAttribute to be used for the attribute value.</summary>
      <returns>The XmlSchemaAnyAttribute.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>Gets the collection of <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />.</summary>
      <returns>The collection of attributes for the simpleType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>Gets or sets the name of a built-in data type or simple type from which this type is extended.</summary>
      <returns>The base type name.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>Represents the restriction element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by restriction. Such derivations can be used to restrict the range of values for the element to a subset of the values specified in the inherited simple type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>Gets or sets an <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> to be used for the attribute value.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> for the attribute value.Optional.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> collection of attributes for the simple type.</summary>
      <returns>The collection of attributes for a simple type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>Gets or sets the simple type base value.</summary>
      <returns>The simple type base value.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>Gets or sets the name of the built-in data type or simple type from which this type is derived.</summary>
      <returns>The name of the base type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>Gets or sets an Xml Schema facet. </summary>
      <returns>One of the following facet classes:<see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>Represents the simpleType element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a simple type. Simple types can specify information and constraints for the value of attributes or elements with text-only content.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary>Gets or sets one of <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />, or <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" />.</summary>
      <returns>One of XmlSchemaSimpleTypeUnion, XmlSchemaSimpleTypeList, or XmlSchemaSimpleTypeRestriction.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>Abstract class for simple type content classes.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>Represents the list element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to define a simpleType element as a list of values of a specified data type.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> representing the type of the simpleType element based on the <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> and <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" /> values of the simple type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> representing the type of the simpleType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>Gets or sets the simpleType element that is derived from the type specified by the base value.</summary>
      <returns>The item type for the simple type element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>Gets or sets the name of a built-in data type or simpleType element defined in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>The type name of the simple type list.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>Represents the restriction element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used restricting simpleType element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>Gets or sets information on the base type.</summary>
      <returns>The base type for the simpleType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>Gets or sets the name of the qualified base type.</summary>
      <returns>The qualified name of the simple type restriction base type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>Gets or sets an Xml Schema facet. </summary>
      <returns>One of the following facet classes:<see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>Represents the union element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). A union datatype can be used to specify the content of a simpleType. The value of the simpleType element must be any one of a set of alternative datatypes specified in the union. Union types are always derived types and must comprise at least two alternative datatypes.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary>Gets an array of <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> objects representing the type of the simpleType element based on the <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> and <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> values of the simple type.</summary>
      <returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> objects representing the type of the simpleType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>Gets the collection of base types.</summary>
      <returns>The collection of simple type base values.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary>Gets or sets the array of qualified member names of built-in data types or simpleType elements defined in this schema (or another schema indicated by the specified namespace).</summary>
      <returns>An array that consists of a list of members of built-in data types or simple types.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>Represents the totalDigits facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the number of digits that can be entered for the value of a simpleType element. That value of totalDigits must be a positive integer.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>The base class for all simple types and complex types.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaType" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>Gets the post-compilation object type or the built-in XML Schema Definition Language (XSD) data type, simpleType element, or complexType element. This is a post-schema-compilation infoset property.</summary>
      <returns>The built-in XSD data type, simpleType element, or complexType element.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary>Gets the post-compilation value for the base type of this schema type.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object representing the base type of this schema type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>Gets the post-compilation value for the data type of the complex type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> post-schema-compilation value.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>Gets the post-compilation information on how this element was derived from its base type.</summary>
      <returns>One of the valid <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> values.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>Gets or sets the final attribute of the type derivation that indicates if further derivations are allowed.</summary>
      <returns>One of the valid <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>Gets the post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> property.</summary>
      <returns>The post-compilation value of the <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> property. The default is the finalDefault attribute value of the schema element.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> that represents the built-in complex type of the complex type specified.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> that represents the built-in complex type.</returns>
      <param name="typeCode">One of the <see cref="T:System.Xml.Schema.XmlTypeCode" /> values representing the complex type.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> that represents the built-in complex type of the complex type specified by qualified name.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> that represents the built-in complex type.</returns>
      <param name="qualifiedName">The <see cref="T:System.Xml.XmlQualifiedName" /> of the complex type.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlQualifiedName" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> that represents the built-in simple type of the specified simple type.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> that represents the built-in simple type.</returns>
      <param name="typeCode">One of the <see cref="T:System.Xml.Schema.XmlTypeCode" /> values representing the simple type.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary>Returns an <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> that represents the built-in simple type of the simple type that is specified by the qualified name.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> that represents the built-in simple type.</returns>
      <param name="qualifiedName">The <see cref="T:System.Xml.XmlQualifiedName" /> of the simple type.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlQualifiedName" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary>Returns a value indicating if the derived schema type specified is derived from the base schema type specified</summary>
      <returns>true if the derived type is derived from the base type; otherwise, false.</returns>
      <param name="derivedType">The derived <see cref="T:System.Xml.Schema.XmlSchemaType" /> to test.</param>
      <param name="baseType">The base <see cref="T:System.Xml.Schema.XmlSchemaType" /> to test the derived <see cref="T:System.Xml.Schema.XmlSchemaType" /> against.</param>
      <param name="except">One of the <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> values representing a type derivation method to exclude from testing.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>Gets or sets a value indicating if this type has a mixed content model. This property is only valid in a complex type.</summary>
      <returns>true if the type has a mixed content model; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>Gets or sets the name of the type.</summary>
      <returns>The name of the type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>Gets the qualified name for the type built from the Name attribute of this type. This is a post-schema-compilation property.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> for the type built from the Name attribute of this type.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlTypeCode" /> of the type.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlTypeCode" /> values.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>Represents the unique element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to identify a unique constraint among a set of elements.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>Indicator of how the attribute is used.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>Attribute use not specified.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>Attribute is optional.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>Attribute cannot be used.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>Attribute must appear once.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary>Represents the exception thrown when XML Schema Definition Language (XSD) schema validation errors and warnings are encountered in an XML document being validated. </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class with the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects specified.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class with the exception message specified.</summary>
      <param name="message">A string description of the error condition.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class with the exception message and original <see cref="T:System.Exception" /> object that caused this exception specified.</summary>
      <param name="message">A string description of the error condition.</param>
      <param name="innerException">The original <see cref="T:System.Exception" /> object that caused this exception.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> class with the exception message specified, and the original <see cref="T:System.Exception" /> object, line number, and line position of the XML that cause this exception specified.</summary>
      <param name="message">A string description of the error condition.</param>
      <param name="innerException">The original <see cref="T:System.Exception" /> object that caused this exception.</param>
      <param name="lineNumber">The line number of the XML that caused this exception.</param>
      <param name="linePosition">The line position of the XML that caused this exception.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Constructs a new <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> object with the given <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> information that contains all the properties of the <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary>Sets the XML node that causes the error.</summary>
      <param name="sourceObject">The source object.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary>Gets the XML node that caused this <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />.</summary>
      <returns>The XML node that caused this <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary>Specifies schema validation options used by the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> and <see cref="T:System.Xml.XmlReader" /> classes.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary>Do not process identity constraints, inline schemas, schema location hints, or report schema validation warnings.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary>Process inline schemas encountered during validation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary>Process schema location hints (xsi:schemaLocation, xsi:noNamespaceSchemaLocation) encountered during validation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary>Report schema validation warnings encountered during validation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary>Process identity constraints (xs:ID, xs:IDREF, xs:key, xs:keyref, xs:unique) encountered during validation.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary>Allow xml:* attributes even if they are not defined in the schema. The attributes will be validated based on their data type.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary>Represents an XML Schema Definition Language (XSD) Schema validation engine. The <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> class.</summary>
      <param name="nameTable">An <see cref="T:System.Xml.XmlNameTable" /> object containing element and attribute names as atomized strings.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing the XML Schema Definition Language (XSD) schemas used for validation.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used for resolving namespaces encountered during validation.</param>
      <param name="validationFlags">An <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> value specifying schema validation options.</param>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">An error occurred while compiling schemas in the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> parameter.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary>Adds an XML Schema Definition Language (XSD) schema to the set of schemas used for validation.</summary>
      <param name="schema">An <see cref="T:System.Xml.Schema.XmlSchema" /> object to add to the set of schemas used for validation.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchema" /> parameter specified is null.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The target namespace of the <see cref="T:System.Xml.Schema.XmlSchema" /> parameter matches that of any element or attribute already encountered by the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">The <see cref="T:System.Xml.Schema.XmlSchema" /> parameter is invalid.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary>Ends validation and checks identity constraints for the entire XML document.</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">An identity constraint error was found in the XML document.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary>Returns the expected attributes for the current element context.</summary>
      <returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> objects or an empty array if there are no expected attributes.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary>Returns the expected particles in the current element context.</summary>
      <returns>An array of <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> objects or an empty array if there are no expected particles.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary>Validates identity constraints on the default attributes and populates the <see cref="T:System.Collections.ArrayList" /> specified with <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> objects for any attributes with default values that have not been previously validated using the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> method in the element context. </summary>
      <param name="defaultAttributes">An <see cref="T:System.Collections.ArrayList" /> to populate with <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> objects for any attributes not yet encountered during validation in the element context.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary>Initializes the state of the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object.</summary>
      <exception cref="T:System.InvalidOperationException">Calling the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> method is valid immediately after the construction of an <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object or after a call to <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> only.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary>Initializes the state of the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object using the <see cref="T:System.Xml.Schema.XmlSchemaObject" /> specified for partial validation.</summary>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, or <see cref="T:System.Xml.Schema.XmlSchemaType" /> object used to initialize the validation context of the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object for partial validation.</param>
      <exception cref="T:System.InvalidOperationException">Calling the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> method is valid immediately after the construction of an <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object or after a call to <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> only.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> parameter is not an <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, or <see cref="T:System.Xml.Schema.XmlSchemaType" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.Schema.XmlSchemaObject" /> parameter cannot be null.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary>Gets or sets the line number information for the XML node being validated.</summary>
      <returns>An <see cref="T:System.Xml.IXmlLineInfo" /> object.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>Skips validation of the current element content and prepares the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object to validate content in the parent element's context.</summary>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set if the current element content is successfully skipped. This parameter can be null.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> method was not called in the correct sequence. For example, calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary>Gets or sets the source URI for the XML node being validated.</summary>
      <returns>A <see cref="T:System.Uri" /> object representing the source URI for the XML node being validated; the default is null.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>Validates the attribute name, namespace URI, and value in the current element context.</summary>
      <returns>The validated attribute's value.</returns>
      <param name="localName">The local name of the attribute to validate.</param>
      <param name="namespaceUri">The namespace URI of the attribute to validate.</param>
      <param name="attributeValue">The value of the attribute to validate.</param>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the attribute. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The attribute is not valid in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> method was not called in the correct sequence. For example, calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary>Validates the attribute name, namespace URI, and value in the current element context.</summary>
      <returns>The validated attribute's value.</returns>
      <param name="localName">The local name of the attribute to validate.</param>
      <param name="namespaceUri">The namespace URI of the attribute to validate.</param>
      <param name="attributeValue">An <see cref="T:System.Xml.Schema.XmlValueGetter" />delegate used to pass the attribute's value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the attribute. This parameter and can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The attribute is not valid in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> method was not called in the correct sequence. For example, calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>Validates the element in the current context.</summary>
      <param name="localName">The local name of the element to validate.</param>
      <param name="namespaceUri">The namespace URI of the element to validate.</param>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the element's name. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's name is not valid in the current context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary>Validates the element in the current context with the xsi:Type, xsi:Nil, xsi:SchemaLocation, and xsi:NoNamespaceSchemaLocation attribute values specified.</summary>
      <param name="localName">The local name of the element to validate.</param>
      <param name="namespaceUri">The namespace URI of the element to validate.</param>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the element's name. This parameter can be null.</param>
      <param name="xsiType">The xsi:Type attribute value of the element. This parameter can be null.</param>
      <param name="xsiNil">The xsi:Nil attribute value of the element. This parameter can be null.</param>
      <param name="xsiSchemaLocation">The xsi:SchemaLocation attribute value of the element. This parameter can be null.</param>
      <param name="xsiNoNamespaceSchemaLocation">The xsi:NoNamespaceSchemaLocation attribute value of the element. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's name is not valid in the current context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.</summary>
      <returns>The parsed, typed text value of the element if the element has simple content.</returns>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the element. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's content is not valid.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> method is called after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary>Verifies if the text content of the element specified is valid according to its data type.</summary>
      <returns>The parsed, typed simple content of the element.</returns>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful validation of the text content of the element. This parameter can be null.</param>
      <param name="typedValue">The typed text content of the element.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The element's text content is not valid.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> method was not called in the correct sequence (for example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> method is called after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />), calls to the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method have been previously made, or the element has complex content.</exception>
      <exception cref="T:System.ArgumentNullException">The typed text content parameter cannot be null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary>Verifies whether all the required attributes in the element context are present and prepares the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object to validate the child content of the element.</summary>
      <param name="schemaInfo">An <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> object whose properties are set on successful verification that all the required attributes in the element context are present. This parameter can be null.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">One or more of the required attributes in the current element context were not found.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> method was not called in the correct sequence. For example, calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> after calling <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />.</exception>
      <exception cref="T:System.ArgumentNullException">One or more of the parameters specified are null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary>Validates whether the text string specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</summary>
      <param name="elementValue">A text string to validate in the current element context.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The text string specified is not allowed in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
      <exception cref="T:System.ArgumentNullException">The text string parameter cannot be null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary>Validates whether the text returned by the <see cref="T:System.Xml.Schema.XmlValueGetter" /> object specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.</summary>
      <param name="elementValue">An <see cref="T:System.Xml.Schema.XmlValueGetter" />delegate used to pass the text value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The text string specified is not allowed in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method was not called in the correct sequence. For example, the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
      <exception cref="T:System.ArgumentNullException">The text string parameter cannot be null.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary>Validates whether the white space in the string specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</summary>
      <param name="elementValue">A white space string to validate in the current element context.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">White space is not allowed in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary>Validates whether the white space returned by the <see cref="T:System.Xml.Schema.XmlValueGetter" /> object specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.</summary>
      <param name="elementValue">An <see cref="T:System.Xml.Schema.XmlValueGetter" />delegate used to pass the white space value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">White space is not allowed in the current element context.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> method was not called in the correct sequence. For example, if the <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> method is called after calling <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />.</exception>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary>The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> that receives schema validation warnings and errors encountered during schema validation.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary>Gets or sets the object sent as the sender object of a validation event.</summary>
      <returns>An <see cref="T:System.Object" />; the default is this <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> object.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> object used to resolve xs:import and xs:include elements as well as xsi:schemaLocation and xsi:noNamespaceSchemaLocation attributes.</summary>
      <returns>An <see cref="T:System.Xml.XmlResolver" /> object; the default is an <see cref="T:System.Xml.XmlUrlResolver" /> object.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary>Represents the validity of an XML item validated by the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> class.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary>The validity of the XML item is not known.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary>The XML item is valid.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary>The XML item is invalid.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>Represents the World Wide Web Consortium (W3C) whiteSpace facet.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> class.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>Represents the World Wide Web Consortium (W3C) selector element.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> class.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>Gets or sets the attribute for the XPath expression.</summary>
      <returns>The string attribute value for the XPath expression.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>Represents the severity of the validation event.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>Indicates a validation error occurred when validating the instance document. This applies to document type definitions (DTDs) and XML Schema definition language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints are considered errors. If no validation event handler has been created, errors throw an exception.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>Indicates that a validation event occurred that is not an error. A warning is typically issued when there is no DTD, or XML Schema to validate a particular element or attribute against. Unlike errors, warnings do not throw an exception if there is no validation event handler.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>Represents the W3C XML Schema Definition Language (XSD) schema types.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>No type information.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>An item such as a node or atomic value.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>Any atomic value of a union.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>An untyped atomic value.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>A W3C XML Schema xs:string type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>A W3C XML Schema xs:boolean type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>A W3C XML Schema xs:decimal type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>A W3C XML Schema xs:float type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>A W3C XML Schema xs:double type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>A W3C XML Schema xs:Duration type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>A W3C XML Schema xs:dateTime type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>A W3C XML Schema xs:time type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>A W3C XML Schema xs:date type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>A W3C XML Schema xs:gYearMonth type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>A W3C XML Schema xs:gYear type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>A W3C XML Schema xs:gMonthDay type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>A W3C XML Schema xs:gDay type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>A W3C XML Schema xs:gMonth type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>A W3C XML Schema xs:hexBinary type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>A W3C XML Schema xs:base64Binary type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>A W3C XML Schema xs:anyURI type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>A W3C XML Schema xs:QName type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>A W3C XML Schema xs:NOTATION type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>A W3C XML Schema xs:normalizedString type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>A W3C XML Schema xs:token type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>A W3C XML Schema xs:language type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>A W3C XML Schema xs:NMTOKEN type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>A W3C XML Schema xs:Name type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>A W3C XML Schema xs:NCName type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>A W3C XML Schema xs:ID type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>A W3C XML Schema xs:IDREF type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>A W3C XML Schema xs:ENTITY type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>A W3C XML Schema xs:integer type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>A W3C XML Schema xs:nonPositiveInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>A W3C XML Schema xs:negativeInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>A W3C XML Schema xs:long type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>A W3C XML Schema xs:int type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>A W3C XML Schema xs:short type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>A W3C XML Schema xs:byte type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>A W3C XML Schema xs:nonNegativeInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>A W3C XML Schema xs:unsignedLong type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>A W3C XML Schema xs:unsignedInt type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>A W3C XML Schema xs:unsignedShort type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>A W3C XML Schema xs:unsignedByte type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>A W3C XML Schema xs:positiveInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary>A delegate used by the <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, text, or white space.</summary>
      <returns>An object containing the attribute, text, or white space value. The object is a CLR type that that corresponds to the XSD type of the attribute, text, or white space value.</returns>
    </member>
    <member name="T:System.Xml.Serialization.CodeExporter">
      <summary>Represents a class that can generate proxy code from an XML representation of a data structure.</summary>
    </member>
    <member name="P:System.Xml.Serialization.CodeExporter.IncludeMetadata">
      <summary>Gets a collection of code attribute metadata that is included when the code is exported.</summary>
      <returns>A collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects that represent metadata that is included when the code is exported.</returns>
    </member>
    <member name="T:System.Xml.Serialization.CodeGenerationOptions">
      <summary>Specifies various options to use when generating .NET Framework types for use with an XML Web Service.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.None">
      <summary>Represents primitive types by fields and primitive types by <see cref="N:System" /> namespace types.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateProperties">
      <summary>Represents primitive types by properties.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateNewAsync">
      <summary>Creates events for the asynchronous invocation of Web methods.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOldAsync">
      <summary>Creates Begin and End methods for the asynchronous invocation of Web methods.</summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder">
      <summary>Generates explicitly ordered serialization code as specified through the Order property of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />, <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />, and <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> attributes. </summary>
    </member>
    <member name="F:System.Xml.Serialization.CodeGenerationOptions.EnableDataBinding">
      <summary>Enables data binding.</summary>
    </member>
    <member name="T:System.Xml.Serialization.CodeIdentifier">
      <summary>Provides static methods to convert input text into names for code entities.</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifier" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeCamel(System.String)">
      <summary>Produces a camel-case string from an input string. </summary>
      <returns>A camel-case version of the parameter string.</returns>
      <param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakePascal(System.String)">
      <summary>Produces a Pascal-case string from an input string. </summary>
      <returns>A Pascal-case version of the parameter string.</returns>
      <param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeValid(System.String)">
      <summary>Produces a valid code entity name from an input string. </summary>
      <returns>A string that can be used as a code identifier, such as the name of a method parameter.</returns>
      <param name="identifier">The name of a code entity, such as a method parameter, typically taken from an XML element or attribute name.</param>
    </member>
    <member name="T:System.Xml.Serialization.CodeIdentifiers">
      <summary>Maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.</summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> class and determines whether code identifiers are case sensitive.</summary>
      <param name="caseSensitive">true if identifiers are case sensitive; otherwise, false. </param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Add(System.String,System.Object)">
      <summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
      <param name="identifier">A name that is used to index the code entity.</param>
      <param name="value">The code entity or type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddReserved(System.String)">
      <summary>Prevents a specified name from being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
      <param name="identifier">A name that will not be available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" />instance's scope.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddUnique(System.String,System.Object)">
      <summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope, ensuring that the name is unique within the scope. </summary>
      <returns>The identifier parameter value or a modified string if there is a name collision.</returns>
      <param name="identifier">A candidate name that is used to index the code entity.</param>
      <param name="value">The code entity or type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Clear">
      <summary>Removes all code entities or type mappings, including their names, from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.IsInUse(System.String)">
      <summary>Determines whether a specified name is already being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
      <returns>true if the name is already in use; otherwise, false.</returns>
      <param name="identifier">The name to check for use within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeRightCase(System.String)">
      <summary>Ensures that the input is of the correct case by modifying the name according to the value of the <see cref="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing" /> property. </summary>
      <returns>A string that is the same as the input identifier or has the first letter's case modified.</returns>
      <param name="identifier">The name to possibly modify.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeUnique(System.String)">
      <summary>Determines whether the input name conflicts with another name within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope and, if it does, generates a modified string. </summary>
      <returns>The identifier parameter value or a modified string if there is a name collision.</returns>
      <param name="identifier">The name to modify if it is not already unique.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Remove(System.String)">
      <summary>Removes from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope the code entity or type mapping identified by the input name. </summary>
      <param name="identifier">The name of the code entity or type mapping information to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.RemoveReserved(System.String)">
      <summary>Removes the input name from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's reserved names. </summary>
      <param name="identifier">A name that will be made available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope.</param>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.ToArray(System.Type)">
      <summary>Returns an array of the code entities or type mappings within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
      <returns>An array of the code entities or type mappings that is stored by the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object.</returns>
      <param name="type">The type of all the code entities or type mappings for the instance.</param>
    </member>
    <member name="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing">
      <summary>Gets or sets a value that indicates whether the instance uses camel case. </summary>
      <returns>true to indicate that the instance uses camel case; false to indicate that the instance uses Pascal case.</returns>
    </member>
    <member name="T:System.Xml.Serialization.ImportContext">
      <summary>Describes the context in which a set of schema is bound to .NET Framework code entities.</summary>
    </member>
    <member name="M:System.Xml.Serialization.ImportContext.#ctor(System.Xml.Serialization.CodeIdentifiers,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.ImportContext" /> class for the given code identifiers, with the given type-sharing option.</summary>
      <param name="identifiers">The code entities to which the context applies.</param>
      <param name="shareTypes">A <see cref="T:System.Boolean" /> value that determines whether custom types are shared among schema.</param>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.ShareTypes">
      <summary>Gets a value that determines whether custom types are shared.</summary>
      <returns>true, if custom types are shared among schema; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.TypeIdentifiers">
      <summary>Gets a set of code entities to which the context applies.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> that specifies the code entities to which the context applies.</returns>
    </member>
    <member name="P:System.Xml.Serialization.ImportContext.Warnings">
      <summary>Gets a collection of warnings that are generated when importing the code entity descriptions.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> that contains warnings that were generated when importing the code entity descriptions.</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>Provides custom formatting for XML serialization and deserialization.</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized. </param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized. </param>
    </member>
    <member name="T:System.Xml.Serialization.IXmlTextParser">
      <summary>Establishes a <see cref="P:System.Xml.Serialization.IXmlTextParser.Normalized" /> property for use by the .NET Framework infrastructure.</summary>
    </member>
    <member name="P:System.Xml.Serialization.IXmlTextParser.Normalized">
      <summary>Gets or sets whether white space and attribute values are normalized.</summary>
      <returns>true if white space attributes values are normalized; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.IXmlTextParser.WhitespaceHandling">
      <summary>Gets or sets how white space is handled when parsing XML.</summary>
      <returns>A member of the <see cref="T:System.Xml.WhitespaceHandling" /> enumeration that describes how whites pace is handled when parsing XML.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SchemaImporter">
      <summary>Describes a schema importer.</summary>
    </member>
    <member name="P:System.Xml.Serialization.SchemaImporter.Extensions">
      <summary>Gets a collection of schema importer extensions.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" /> containing a collection of schema importer extensions.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize the class member as an encoded SOAP attribute.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> class using the specified value as the name of the XML attribute.</summary>
      <param name="attributeName">The name of the XML attribute. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.AttributeName">
      <summary>Gets or sets the name of the XML attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>The name of the XML attribute. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.DataType">
      <summary>Gets or sets the XML Schema definition language (XSD) data type of the SOAP attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.Namespace">
      <summary>Gets or sets the XML namespace of the XML attribute.</summary>
      <returns>The XML namespace of the XML attribute.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeOverrides">
      <summary>Allows you to override attributes applied to properties, fields, and classes when you use an <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize or deserialize an object as encoded SOAP.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.SoapAttributes)">
      <summary>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes" /> to the collection of <see cref="T:System.Xml.Serialization.SoapAttributes" /> objects contained by the <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" />. The <paramref name="type" /> parameter specifies the object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes" />. The <paramref name="member" /> parameter specifies the name of a member that is overridden.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override. </param>
      <param name="member">The name of the member to override. </param>
      <param name="attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the overriding attributes. </param>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.Xml.Serialization.SoapAttributes)">
      <summary>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes" /> to a collection of <see cref="T:System.Xml.Serialization.SoapAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes" />.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that is overridden. </param>
      <param name="attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the overriding attributes. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type)">
      <summary>Gets the object associated with the specified (base class) type.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type,System.String)">
      <summary>Gets the object associated with the specified (base class) type. The <paramref name="member" /> parameter specifies the base class member that is overridden.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to override. </param>
      <param name="member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.SoapAttributes" /> to return. </param>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributes">
      <summary>Represents a collection of attribute objects that control how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes SOAP methods.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributes" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributes" /> class using the specified custom type.</summary>
      <param name="provider">Any object that implements the <see cref="T:System.Reflection.ICustomAttributeProvider" /> interface, such as the <see cref="T:System.Type" /> class. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> to override.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> that overrides the behavior of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when the member is serialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapDefaultValue">
      <summary>Gets or sets the default value of an XML element or attribute.</summary>
      <returns>An object that represents the default value of an XML element or attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapElement">
      <summary>Gets or sets a <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> to override.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> to override.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapEnum">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a SOAP enumeration.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapEnumAttribute" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapIgnore">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or property as encoded SOAP XML.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must not serialize the field or property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapType">
      <summary>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> how to serialize an object type into encoded SOAP XML.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> that either overrides a <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> applied to a class declaration, or is applied to a class declaration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapCodeExporter">
      <summary>Generates types and attribute declarations from internal type mapping information for SOAP-encoded message parts defined in a WSDL document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, assuming no code compile unit. </summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, specifying a code compile unit parameter in addition to a namespace parameter.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that identifies the program graph container to which used assembly references are automatically added.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, specifying a code namespace, a code compile unit, a code generator, code generation options, and mappings.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that identifies the program graph container to which used assembly references are automatically added.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />  that is used to create the code.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration that specifies the options with which exported code is generated.</param>
      <param name="mappings">A <see cref="T:System.Collections.Hashtable" /> that contains <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, specifying a code namespace, a code compile unit, and code generation options.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that identifies the program graph container to which used assembly references are automatically added.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration that specifies the options with which exported code is generated.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapCodeExporter" /> class, specifying a code namespace, a code compile unit, code generation options, and mappings.</summary>
      <param name="codeNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that specifies the namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that identifies the program graph container to which used assembly references are automatically added.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration that specifies the options with which exported code is generated.</param>
      <param name="mappings">A <see cref="T:System.Collections.Hashtable" /> that contains <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping)">
      <summary>Add a <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> declaration to a method parameter or return value corresponding to a part element of a SOAP message definition in a WSDL document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type, to which the method adds an attribute declaration.</param>
      <param name="member">An internal .NET Framework type mapping for a single part of a WSDL message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.Boolean)">
      <summary>Adds a <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> declaration to a method parameter or return value that corresponds to a part element of a SOAP message definition in a WSDL document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type to which the method adds an attribute declaration.</param>
      <param name="member">An internal .NET Framework type mapping for a single part of a WSDL message definition.</param>
      <param name="forceUseMemberName">true to add an initial argument that contains the XML element name for the attribute declaration that is being generated; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Generates a .NET Framework type, plus attribute declarations, for each of the parts that belong to a SOAP message definition in a WSDL document. </summary>
      <param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Generates a .NET Framework type, plus attribute declarations, for a SOAP header. </summary>
      <param name="xmlTypeMapping">Internal .NET Framework type mapping information for a SOAP header element.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapElementAttribute">
      <summary>Specifies that the public member value be serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> as an encoded SOAP XML element.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> class and specifies the name of the XML element.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.DataType">
      <summary>Gets or sets the XML Schema definition language (XSD) data type of the generated XML element.</summary>
      <returns>One of the XML Schema data types.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that has the xsi:null attribute set to "1".</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:null attribute; otherwise, false.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapEnumAttribute">
      <summary>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> class using the specified element name.</summary>
      <param name="name">The XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapEnumAttribute.Name">
      <summary>Gets or sets the value generated in an XML document when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the value recognized when it deserializes the enumeration member.</summary>
      <returns>The value generated in an XML document when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the enumeration, or the value recognized when it deserializes the enumeration member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapIgnoreAttribute">
      <summary>Instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> not to serialize the public field or public read/write property value.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIgnoreAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIgnoreAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapIncludeAttribute">
      <summary>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type when it serializes or deserializes an object as encoded SOAP XML.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIncludeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> class using the specified type.</summary>
      <param name="type">The type of the object to include. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapIncludeAttribute.Type">
      <summary>Gets or sets the type of the object to use when serializing or deserializing an object.</summary>
      <returns>The type of the object to include.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapReflectionImporter">
      <summary>Generates mappings to SOAP-encoded messages from .NET Framework types or Web service method information. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> class, specifying a default XML namespace for imported type mappings. </summary>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> class, specifying overrides for XML serialization. </summary>
      <param name="attributeOverrides">A <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types using SOAP encoding.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> class, specifying XML serialization overrides and a default XML namespace. </summary>
      <param name="attributeOverrides">A <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types using SOAP encoding.</param>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[])">
      <summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
      <returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
      <returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>Generates internal type mappings for information that is gathered from a Web service method. </summary>
      <returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
      <param name="validate">true to indicate that a generated deserializer should check for the expected qualified name of the wrapper element; otherwise, false. This parameter's value is relevant only if the <paramref name="hasWrapperElement" /> parameter's value is true.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
      <summary>Generates internal type mappings for information that is gathered from a Web service method.</summary>
      <returns>Internal .NET Framework type mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true to indicate that elements that correspond to WSDL message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="writeAccessors">true to indicate an RPC-style Web service binding; false to indicate a document-style Web service binding or a SOAP header.</param>
      <param name="validate">true to indicate that a generated deserializer should check for the expected qualified name of the wrapper element; otherwise, false. This parameter's value is relevant only if the <paramref name="hasWrapperElement" /> parameter's value is true.</param>
      <param name="access">One of the <see cref="T:System.Xml.Serialization.XmlMappingAccess" /> values.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type.</summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element. </returns>
      <param name="type">The .NET Framework type for which to generate a type mapping. </param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type.</summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping. </param>
      <param name="defaultNamespace">The default XML namespace to use.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeType(System.Type)">
      <summary>Places mappings for a type in the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> instance's context for later use when import methods are invoked. </summary>
      <param name="type">The .NET Framework type for which to save type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>Places mappings for derived types in the <see cref="T:System.Xml.Serialization.SoapReflectionImporter" /> instance's context for later use when import methods are invoked. </summary>
      <param name="provider">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> reflection object that contains custom attributes that are derived from the <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> attribute.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapSchemaExporter">
      <summary>Populates <see cref="T:System.Xml.Schema.XmlSchema" /> objects with XML Schema data type definitions for .NET Framework types that are serialized using SOAP encoding.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaExporter" /> class, which supplies the collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects to which XML Schema element declarations are to be added.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects to which element declarations obtained from type mappings are to be added.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object a data type definition for each of the element parts of a SOAP-encoded message definition.</summary>
      <param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
      <summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object a data type definition for each of the element parts of a SOAP-encoded message definition.</summary>
      <param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
      <param name="exportEnclosingType">true to export a type definition for the parent element of the WSDL parts; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Adds to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object a data type definition for a .NET Framework type.</summary>
      <param name="xmlTypeMapping">An internal mapping between a .NET Framework type and an XML Schema element.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapSchemaImporter">
      <summary>Used within the .NET Framework to generate internal mappings to .NET Framework types for SOAP-encoded message parts in a WSDL document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class, specifying <see cref="T:System.Xml.Schema.XmlSchema" /> objects representing the XML schemas used by SOAP encoded messages defined in a WSDL document. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.ImportContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class specifying the schemas, compiler options, and names of related code entities.</summary>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" />  containing a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> that specifies various options for generating a .NET Framework type.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />  used to generate the serialization code.</param>
      <param name="context">An <see cref="T:System.Xml.Serialization.ImportContext" /> that describes the context in which a set of schema are bound to .NET Framework code entities.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.Xml.Serialization.ImportContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class specifying the schemas, compiler options, and the context of the schemas.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> that specifies various options for generating a .NET Framework type.</param>
      <param name="context">An <see cref="T:System.Xml.Serialization.ImportContext" /> that describes the context in which a set of schema are bound to .NET Framework code entities. </param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class, specifying <see cref="T:System.Xml.Schema.XmlSchema" /> objects representing the XML schemas used by SOAP encoded messages, plus classes being generated for bindings defined in a WSDL document. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers,System.Xml.Serialization.CodeGenerationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaImporter" /> class specifying the schemas, compiler options, and names of related code entities.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers" />  that maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.</param>
      <param name="options">One of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> that specifies various options for generating a .NET Framework type.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for the type of a SOAP-encoded element part defined in a WSDL document where a base type is specified. </summary>
      <returns>The .NET Framework type mapping information for a derived type corresponding to a WSDL message part.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element's type for which a .NET Framework type is being generated.</param>
      <param name="baseType">A base type for the .NET Framework type being generated.</param>
      <param name="baseTypeCanBeIndirect">true to indicate that the type being generated may indirectly inherit from the base type; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember)">
      <summary>Generates internal type mapping information for a single SOAP-encoded element part defined in a WSDL document. </summary>
      <returns>The .NET Framework type mapping for a single element part of a WSDL message definition.</returns>
      <param name="name">The message name.</param>
      <param name="ns">The message namespace.</param>
      <param name="member">A <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> object that provides information about the part element.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
      <summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document. </summary>
      <returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="name">The message name.</param>
      <param name="ns">The message namespace.</param>
      <param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> that provides information about the part elements.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean)">
      <summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document. </summary>
      <returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="name">The message name.</param>
      <param name="ns">The message namespace.</param>
      <param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> that provides information about the part elements.</param>
      <param name="hasWrapperElement">true to have elements defined by the parts enclosed in an extra, wrapper element in a SOAP message; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean,System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for the element parts of a SOAP-encoded message defined in a WSDL document.</summary>
      <returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="name">The message name.</param>
      <param name="ns">The message namespace.</param>
      <param name="members">An array of type <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> that provides information about the part elements.</param>
      <param name="hasWrapperElement">true to have elements defined by the parts enclosed in an extra, wrapper element in a SOAP message; otherwise, false.</param>
      <param name="baseType">A base type for all .NET Framework types that are generated to correspond to message parts.</param>
      <param name="baseTypeCanBeIndirect">true to indicate that types corresponding to message parts can indirectly inherit from the base type; otherwise, false.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapSchemaMember">
      <summary>Represents certain attributes of a XSD &lt;part&gt; element in a WSDL document for generating classes from the document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> class. </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberName">
      <summary>Gets or sets a value that corresponds to the name attribute of the WSDL part element. </summary>
      <returns>The element name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberType">
      <summary>Gets or sets a value that corresponds to the type attribute of the WSDL part element.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that corresponds to the XML type.</returns>
    </member>
    <member name="T:System.Xml.Serialization.SoapTypeAttribute">
      <summary>Controls the schema generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when a class instance is serialized as SOAP encoded XML.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class and specifies the name of the XML type.</summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class and specifies the name and XML namespace of the type.</summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
      <param name="ns">The XML namespace of the type. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema">
      <summary>Gets or sets a value that indicates whether to include the type in SOAP-encoded XML Schema documents.</summary>
      <returns>true to include the type in SOAP-encoded XML Schema documents; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML type.</summary>
      <returns>The namespace of the XML type. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.TypeName">
      <summary>Gets or sets the name of the XML type.</summary>
      <returns>The name of the XML type. The default is the class name.</returns>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventArgs">
      <summary>Provides data for the known, but unreferenced, object found in an encoded SOAP XML stream during deserialization.</summary>
    </member>
    <member name="M:System.Xml.Serialization.UnreferencedObjectEventArgs.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> class.</summary>
      <param name="o">The unreferenced object. </param>
      <param name="id">A unique string used to identify the unreferenced object. </param>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId">
      <summary>Gets the ID of the object.</summary>
      <returns>The ID of the object.</returns>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject">
      <summary>Gets the deserialized, but unreferenced, object.</summary>
      <returns>The deserialized, but unreferenced, object.</returns>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlAttribute" /> objects) can contain any XML attributes.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>Constructs a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlElement" /> or <see cref="T:System.Xml.XmlNode" /> objects) contains objects that represent any XML element that has no corresponding member in the object being serialized or deserialized.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document.</summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document and its XML namespace.</summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
      <param name="ns">The XML namespace of the XML element. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>Gets or sets the XML element name.</summary>
      <returns>The name of the XML element.</returns>
      <exception cref="T:System.InvalidOperationException">The element name of an array member does not match the element name specified by the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>Gets or sets the XML namespace generated in the XML document.</summary>
      <returns>An XML namespace.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Add(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to the collection.</summary>
      <returns>The index of the newly added <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to add. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Contains(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Gets a value that indicates whether the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> exists in the collection.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> exists in the collection; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> you are interested in. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.CopyTo(System.Xml.Serialization.XmlAnyElementAttribute[],System.Int32)">
      <summary>Copies the entire collection to a compatible one-dimensional array of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects, starting at the specified index of the target array. </summary>
      <param name="array">The one-dimensional array of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Gets the index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</summary>
      <returns>The index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> whose index you want. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> into the collection at the specified index.</summary>
      <param name="index">The index where the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> is inserted. </param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to insert. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> at the specified index.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Remove(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Removes the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> from the collection.</summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to remove. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a particular class member as an array of XML elements.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class and specifies the XML element name generated in the XML document instance.</summary>
      <param name="elementName">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
      <summary>Gets or sets the XML element name given to the serialized array.</summary>
      <returns>The XML element name of the serialized array. The default is the name of the member to which the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> is assigned.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
      <summary>Gets or sets a value that indicates whether the XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified or unqualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlSchemaForm.None.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member as an empty XML tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML element.</summary>
      <returns>The namespace of the XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
      <summary>Specifies the derived types that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> can place in a serialized array.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the name of the XML element generated in the XML document.</summary>
      <param name="elementName">The name of the XML element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the name of the XML element generated in the XML document and the <see cref="T:System.Type" /> that can be inserted into the generated XML document.</summary>
      <param name="elementName">The name of the XML element. </param>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the <see cref="T:System.Type" /> that can be inserted into the serialized array.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
      <summary>Gets or sets the XML data type of the generated XML element.</summary>
      <returns>An XML Schema definition (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: DataTypes".</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
      <summary>Gets or sets a value that indicates whether the name of the generated XML element is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlSchemaForm.None.</returns>
      <exception cref="T:System.Exception">The <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> property is set to XmlSchemaForm.Unqualified and a <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> value is specified. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member as an empty XML tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false, and no instance is generated. The default is true.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
      <summary>Gets or sets the namespace of the generated XML element.</summary>
      <returns>The namespace of the generated XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
      <summary>Gets or sets the level in a hierarchy of XML elements that the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> affects.</summary>
      <returns>The zero-based index of a set of indexes in an array of arrays.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
      <summary>Gets or sets the type allowed in an array.</summary>
      <returns>A <see cref="T:System.Type" /> that is allowed in the array.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Add(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to the collection.</summary>
      <returns>The index of the added item.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to add to the collection. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Contains(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Determines whether the collection contains the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />. </summary>
      <returns>true if the collection contains the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to check for.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.CopyTo(System.Xml.Serialization.XmlArrayItemAttribute[],System.Int32)">
      <summary>Copies an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> array to the collection, starting at a specified target index. </summary>
      <param name="array">The array of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects to copy to the collection.</param>
      <param name="index">The index at which the copied attributes begin.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.IndexOf(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Returns the zero-based index of the first occurrence of the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> in the collection or 1 if the attribute is not found in the collection. </summary>
      <returns>The first index of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> in the collection or -1 if the attribute is not found in the collection.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Insert(System.Int32,System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> into the collection at the specified index. </summary>
      <param name="index">The index at which the attribute is inserted.</param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />  to insert.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.Item(System.Int32)">
      <summary>Gets or sets the item at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> at the specified index.</returns>
      <param name="index">The zero-based index of the collection member to get or set. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Remove(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Removes an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> from the collection, if it is present. </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to remove.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize the class member as an XML attribute.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class and specifies the name of the generated XML attribute.</summary>
      <param name="attributeName">The name of the XML attribute that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
      <param name="attributeName">The name of the XML attribute that is generated. </param>
      <param name="type">The <see cref="T:System.Type" /> used to store the attribute. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> used to store the attribute. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>Gets or sets the name of the XML attribute.</summary>
      <returns>The name of the XML attribute. The default is the member name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>Gets or sets the XSD data type of the XML attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema: DataTypes".</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>Gets or sets a value that indicates whether the XML attribute name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlForm.None.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>Gets or sets the XML namespace of the XML attribute.</summary>
      <returns>The XML namespace of the XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>Gets or sets the complex type of the XML attribute.</summary>
      <returns>The type of the XML attribute.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.Attr">
      <summary>Gets an object that represents the unknown XML attribute.</summary>
      <returns>An <see cref="T:System.Xml.XmlAttribute" /> that represents the unknown XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ExpectedAttributes">
      <summary>Gets a comma-delimited list of XML attribute names expected to be in an XML document instance.</summary>
      <returns>A comma-delimited list of XML attribute names. Each name is in the following format: <paramref name="namespace" />:<paramref name="name" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LineNumber">
      <summary>Gets the line number of the unknown XML attribute.</summary>
      <returns>The line number of the unknown XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LinePosition">
      <summary>Gets the position in the line of the unknown XML attribute.</summary>
      <returns>The position number of the unknown XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized">
      <summary>Gets the object being deserialized.</summary>
      <returns>The object being deserialized.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /></summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Xml.Serialization.XmlAttributeEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeOverrides">
      <summary>Allows you to override property, field, and class attributes when you use the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize or deserialize an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.XmlAttributes)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden. The <paramref name="member" /> parameter specifies the name of a member that is overridden.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override. </param>
      <param name="member">The name of the member to override. </param>
      <param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.Xml.Serialization.XmlAttributes)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.XmlAttributes" /> object.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that is overridden. </param>
      <param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type)">
      <summary>Gets the object associated with the specified, base-class, type.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type,System.String)">
      <summary>Gets the object associated with the specified (base-class) type. The member parameter specifies the base-class member that is overridden.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want. </param>
      <param name="member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.XmlAttributes" /> to return. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributes">
      <summary>Represents a collection of attribute objects that control how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes" /> class and customizes how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes an object. </summary>
      <param name="provider">A class that can provide alternative implementations of attributes that control XML serialization.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
      <summary>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> to override.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> to override.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
      <summary>Gets the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects to override.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> object that represents the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArray">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property that returns an array.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property that returns an array.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
      <summary>Gets or sets a collection of objects that specify how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes items inserted into an array returned by a public field or read/write property.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> object that contains a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or public read/write property as an XML attribute.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> that controls the serialization of a public field or read/write property as an XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
      <summary>Gets or sets an object that allows you to distinguish between a set of choices.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> that can be applied to a class member that is serialized as an xsi:choice element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
      <summary>Gets or sets the default value of an XML element or attribute.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the default value of an XML element or attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlElements">
      <summary>Gets a collection of objects that specify how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property as an XML element.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> that contains a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
      <summary>Gets or sets a value that specifies whether or not the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or public read/write property.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must not serialize the field or property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.Xmlns">
      <summary>Gets or sets a value that specifies whether to keep all namespace declarations when an object containing a member that returns an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object is overridden.</summary>
      <returns>true if the namespace declarations should be kept; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class as an XML root element.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that overrides a class attributed as an XML root element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlText">
      <summary>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize a public field or public read/write property as XML text.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> that overrides the default serialization of a public property or field.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlType">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class to which the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> has been applied.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> that overrides an <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> applied to a class declaration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
      <summary>Specifies that the member can be further detected by using an enumeration.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</summary>
      <param name="name">The member name that returns the enumeration used to detect a choice. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
      <summary>Gets or sets the name of the field that returns the enumeration to use when detecting types.</summary>
      <returns>The name of a field that returns an enumeration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlCodeExporter">
      <summary>Generates types and attribute declarations from internal type mapping information for XML schema element declarations.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified namespace. </summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified namespace and code compile unit.</summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
      <param name="codeCompileUnit">A CodeDOM graph container to which used assembly references are automatically added.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified .NET Framework namespace, code compile unit containing the graph of the objects, an enumeration specifying code options, and a collection of mapping objects.</summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" />  program graph container to which used assembly references are automatically added.</param>
      <param name="codeProvider">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> that contains special instructions for code creation.</param>
      <param name="mappings">A <see cref="T:System.Collections.Hashtable" /> that contains <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified namespace, code compile unit, and code generation options.</summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> program graph container to which used assembly references are automatically added.</param>
      <param name="options">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit,System.Xml.Serialization.CodeGenerationOptions,System.Collections.Hashtable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlCodeExporter" /> class using the specified .NET Framework namespace, code compile unit containing the graph of the objects, an object representing code generation options, and a collection of mapping objects.</summary>
      <param name="codeNamespace">The namespace of the types to generate.</param>
      <param name="codeCompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> program graph container to which used assembly references are automatically added.</param>
      <param name="options">An enumeration value that provides options for generating .NET Framework types from XML schema custom data types.</param>
      <param name="mappings">A <see cref="T:System.Collections.Hashtable" /> that contains <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> declaration to a method parameter or return value that corresponds to a &lt;part&gt; element of a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type to which the method adds an attribute declaration.</param>
      <param name="member">An internal .NET Framework type mapping for a single element part of a WSDL message definition.</param>
      <param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String,System.Boolean)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> declaration to a method parameter or return value that corresponds to a &lt;part&gt; element of a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type to which the method adds an attribute declaration.</param>
      <param name="member">An internal .NET Framework type mapping for a single element part of a WSDL message definition.</param>
      <param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
      <param name="forceUseMemberName">Flag that helps determine whether to add an initial argument containing the XML element name for the attribute declaration being generated.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlTypeMapping,System.String)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> declaration to a method return value that corresponds to a &lt;part&gt; element of a non-SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
      <param name="metadata">The collection of <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> objects for the generated type to which the method adds an attribute declaration.</param>
      <param name="mapping">The internal .NET Framework type mapping information for an XML schema element.</param>
      <param name="ns">The XML namespace of the SOAP message part for which the type mapping information in the member parameter has been generated.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Generates a .NET Framework type, plus attribute declarations, for each of the parts that belong to a SOAP message definition in a Web Services Description Language (WSDL) document. </summary>
      <param name="xmlMembersMapping">The internal .NET Framework type mappings for the element parts of a WSDL message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Generates a .NET Framework type, plus attribute declarations, for an XML schema element. </summary>
      <param name="xmlTypeMapping">The internal .NET Framework type mapping information for an XML schema element.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlDeserializationEvents">
      <summary>Contains fields that can be used to pass event delegates to a thread-safe <see cref="Overload:System.Xml.Serialization.XmlSerializer.Deserialize" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownAttribute">
      <summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributeEventHandler" /> that points to the event handler.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownElement">
      <summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlElementEventHandler" /> that points to the event handler.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnknownNode">
      <summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlNodeEventHandler" /> that points to the event handler.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlDeserializationEvents.OnUnreferencedObject">
      <summary>Gets or sets an object that represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> event.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventHandler" /> that points to the event handler.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>Indicates that a public field or property represents an XML element when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes or deserializes the object that contains it.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies the name of the XML element.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> and specifies the name of the XML element and a derived type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This member type is used when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the object that contains it.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This type is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when serializing or deserializing object that contains it.</summary>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the.NET data type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>Gets or sets a value that indicates whether the element is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null as an empty tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>Gets or sets the namespace assigned to the XML element that results when the class is serialized.</summary>
      <returns>The namespace of the XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>Gets or sets the object type used to represent the XML element.</summary>
      <returns>The <see cref="T:System.Type" /> of the member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to override the default way it serializes a class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Add(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to the collection.</summary>
      <returns>The zero-based index of the newly added item.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to add. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Contains(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Gets a value that specifies whether the collection contains the specified object.</summary>
      <returns>true, if the object exists in the collection; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" />  in question. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.CopyTo(System.Xml.Serialization.XmlElementAttribute[],System.Int32)">
      <summary>Copies the <see cref="T:System.Xml.Serialization.XmlElementAttributes" />, or a portion of it to a one-dimensional array.</summary>
      <param name="array">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> array to copy to. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.IndexOf(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Gets the index of the specified <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
      <returns>The zero-based index of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" />  you are interested in.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlElementAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> into the collection.</summary>
      <param name="index">The zero-based index where the member is added. </param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to insert. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.Item(System.Int32)">
      <summary>Gets or sets an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> from the collection.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> at the specified index.</returns>
      <param name="index">The zero-based index of the collection member to get or set. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Remove(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Removes the specified object from the collection.</summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to remove from the collection. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.Element">
      <summary>Gets the object that represents the unknown XML element.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.ExpectedElements">
      <summary>Gets a comma-delimited list of XML element names expected to be in an XML document instance.</summary>
      <returns>A comma-delimited list of XML element names. Each name is in the following format: <paramref name="namespace" />:<paramref name="name" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LineNumber">
      <summary>Gets the line number where the unknown element was encountered if the XML reader is an <see cref="T:System.Xml.XmlTextReader" />.</summary>
      <returns>The line number where the unknown element was encountered if the XML reader is an <see cref="T:System.Xml.XmlTextReader" />; otherwise, -1.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LinePosition">
      <summary>Gets the place in the line where the unknown element occurs if the XML reader is an <see cref="T:System.Xml.XmlTextReader" />.</summary>
      <returns>The number in the line where the unknown element occurs if the XML reader is an <see cref="T:System.Xml.XmlTextReader" />; otherwise, -1.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.ObjectBeingDeserialized">
      <summary>Gets the object the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is deserializing.</summary>
      <returns>The object that is being deserialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">A <see cref="T:System.Xml.Serialization.XmlElementEventArgs" />  that contains the event data. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class, and specifies the XML value that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates or recognizes (when it serializes or deserializes the enumeration, respectively).</summary>
      <param name="name">The overriding name of the enumeration member. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>Gets or sets the value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the value recognized when it deserializes the enumeration member.</summary>
      <returns>The value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the enumeration, or the value recognized when it is deserializes the enumeration member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>Instructs the <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> not to serialize the public field or public read/write property value.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIncludeAttribute">
      <summary>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type when it serializes or deserializes an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to include. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
      <summary>Gets or sets the type of the object to include.</summary>
      <returns>The <see cref="T:System.Type" /> of the object to include.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMapping">
      <summary>Supports mappings between .NET Framework types and XML Schema data types. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.ElementName">
      <summary>Get the name of the mapped element.</summary>
      <returns>The name of the mapped element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.Namespace">
      <summary>Gets the namespace of the mapped element.</summary>
      <returns>The namespace of the mapped element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlMapping.SetKey(System.String)">
      <summary>Sets the key used to look up the mapping.</summary>
      <param name="key">A <see cref="T:System.String" /> that contains the lookup key.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.XsdElementName">
      <summary>Gets the name of the XSD element of the mapping.</summary>
      <returns>The XSD element name.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMappingAccess">
      <summary>Specifies whether a mapping is read, write, or both.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.None">
      <summary>Both read and write methods are generated.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.Read">
      <summary>Read methods are generated.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.Write">
      <summary>Write methods are generated.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlMemberMapping">
      <summary>Maps a code entity in a .NET Framework Web service method to an element in a Web Services Description Language (WSDL) message.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Any">
      <summary>Gets or sets a value that indicates whether the .NET Framework type maps to an XML element or attribute of any type. </summary>
      <returns>true, if the type maps to an XML any element or attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.CheckSpecified">
      <summary>Gets a value that indicates whether the accompanying field in the .NET Framework type has a value specified.</summary>
      <returns>true, if the accompanying field has a value specified; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.ElementName">
      <summary>Gets the unqualified name of the XML element declaration that applies to this mapping. </summary>
      <returns>The unqualified name of the XML element declaration that applies to this mapping.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlMemberMapping.GenerateTypeName(System.CodeDom.Compiler.CodeDomProvider)">
      <summary>Returns the name of the type associated with the specified <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <returns>The name of the type.</returns>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />  that contains the name of the type.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.MemberName">
      <summary>Gets the name of the Web service method member that is represented by this mapping. </summary>
      <returns>The name of the Web service method member represented by this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Namespace">
      <summary>Gets the XML namespace that applies to this mapping. </summary>
      <returns>The XML namespace that applies to this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeFullName">
      <summary>Gets the fully qualified type name of the .NET Framework type for this mapping. </summary>
      <returns>The fully qualified type name of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeName">
      <summary>Gets the type name of the .NET Framework type for this mapping. </summary>
      <returns>The type name of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeNamespace">
      <summary>Gets the namespace of the .NET Framework type for this mapping.</summary>
      <returns>The namespace of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.XsdElementName">
      <summary>Gets the XML element name as it appears in the service description document.</summary>
      <returns>The XML element name.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMembersMapping">
      <summary>Provides mappings between .NET Framework Web service methods and Web Services Description Language (WSDL) messages that are defined for SOAP Web services. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Count">
      <summary>Gets the number of .NET Framework code entities that belong to a Web service method to which a SOAP message is being mapped. </summary>
      <returns>The number of mappings in the collection.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Item(System.Int32)">
      <summary>Gets an item that contains internal type mapping information for a .NET Framework code entity that belongs to a Web service method being mapped to a SOAP message.</summary>
      <returns>The requested <see cref="T:System.Xml.Serialization.XmlMemberMapping" />.</returns>
      <param name="index">The index of the mapping to return.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeName">
      <summary>Gets the name of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.</summary>
      <returns>The name of the .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeNamespace">
      <summary>Gets the namespace of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.</summary>
      <returns>The .NET Framework namespace of the mapping.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LineNumber">
      <summary>Gets the line number of the unknown XML node.</summary>
      <returns>The line number of the unknown XML node.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LinePosition">
      <summary>Gets the position in the line of the unknown XML node.</summary>
      <returns>The position number of the unknown XML node.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LocalName">
      <summary>Gets the XML local name of the XML node being deserialized.</summary>
      <returns>The XML local name of the node being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Name">
      <summary>Gets the name of the XML node being deserialized.</summary>
      <returns>The name of the node being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NamespaceURI">
      <summary>Gets the namespace URI that is associated with the XML node being deserialized.</summary>
      <returns>The namespace URI that is associated with the XML node being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NodeType">
      <summary>Gets the type of the XML node being deserialized.</summary>
      <returns>The <see cref="T:System.Xml.XmlNodeType" /> that represents the XML node being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.ObjectBeingDeserialized">
      <summary>Gets the object being deserialized.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Text">
      <summary>Gets the text of the XML node being deserialized.</summary>
      <returns>The text of the XML node being deserialized.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Xml.Serialization.XmlNodeEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlReflectionImporter">
      <summary>Generates mappings to XML schema element declarations, including literal XML Schema Definition (XSD) message parts in a Web Services Description Language (WSDL) document, for .NET Framework types or Web service method information. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified default XML namespace. </summary>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified XML serialization overrides. </summary>
      <param name="attributeOverrides">An object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified XML serialization overrides and default XML namespace. </summary>
      <param name="attributeOverrides">An object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types.</param>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean)">
      <summary>Generates internal type mappings for information from a Web service method. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> with mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" />  objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>Returns internal type mappings using information from a Web service method, and allows you to specify an XML element name, XML namespace, and other options.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" />  objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>Returns internal type mappings using information from a Web service method, and allows you to specify an XML element name, XML namespace, and other options.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" />  objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
      <param name="openModel">true to specify that the generated schema type will be marked with the &lt;xs:anyAttribute&gt; element; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
      <summary>Generates internal type mappings for information from a Web service method.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" />  objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
      <param name="openModel">true to specify that the generated schema type will be marked with the &lt;xs:anyAttribute&gt; element; otherwise, false.</param>
      <param name="access">One of the <see cref="T:System.Xml.Serialization.XmlMappingAccess" /> values. The default is None.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>Generates a mapping to an XML Schema element for a specified .NET Framework type. </summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and namespace. </summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="defaultNamespace">The default XML namespace to use.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and attribute. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that represents a mapping of a .NET Framework type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> attribute that is applied to the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type, attribute, and namespace. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that contains the internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> attribute that is applied to the type.</param>
      <param name="defaultNamespace">The default XML namespace to use.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeType(System.Type)">
      <summary>Includes mappings for a type for later use when import methods are invoked. </summary>
      <param name="type">The .NET Framework type for which to save type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>Includes mappings for derived types for later use when import methods are invoked. </summary>
      <param name="provider">An instance of the <see cref="T:System.Reflection.ICustomAttributeProvider" />  class that contains custom attributes derived from the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> attribute.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlReflectionMember">
      <summary>Provides mappings between code entities in .NET Framework Web service methods and the content of Web Services Description Language (WSDL) messages that are defined for SOAP Web services. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> class. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.IsReturnValue">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> represents a Web service method return value, as opposed to an output parameter. </summary>
      <returns>true, if the member represents a Web service return value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberName">
      <summary>Gets or sets the name of the Web service method member for this mapping. </summary>
      <returns>The name of the Web service method.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberType">
      <summary>Gets or sets the type of the Web service method member code entity that is represented by this mapping. </summary>
      <returns>The <see cref="T:System.Type" /> of the Web service method member code entity that is represented by this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.OverrideIsNullable">
      <summary>Gets or sets a value that indicates that the value of the corresponding XML element definition's isNullable attribute is false.</summary>
      <returns>True to override the <see cref="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" /> property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.SoapAttributes">
      <summary>Gets or sets a <see cref="T:System.Xml.Serialization.SoapAttributes" /> with the collection of SOAP-related attributes that have been applied to the member code entity. </summary>
      <returns>A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that contains the objects that represent SOAP attributes applied to the member.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.XmlAttributes">
      <summary>Gets or sets an <see cref="T:System.Xml.Serialization.XmlAttributes" /> with the collection of <see cref="T:System.Xml.Serialization.XmlSerializer" />-related attributes that have been applied to the member code entity. </summary>
      <returns>An <see cref="T:System.XML.Serialization.XmlAttributes" /> that represents XML attributes that have been applied to the member code.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>Controls XML serialization of the attribute target as an XML root element.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class and specifies the name of the XML root element.</summary>
      <param name="elementName">The name of the XML root element. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>Gets or sets the XSD data type of the XML root element.</summary>
      <returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema: DataTypes".</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>Gets or sets the name of the XML element that is generated and recognized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class's <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> and <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> methods, respectively.</summary>
      <returns>The name of the XML root element that is generated and recognized in an XML-document instance. The default is the name of the serialized class.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null into the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>Gets or sets the namespace for the XML root element.</summary>
      <returns>The namespace for the XML element.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaEnumerator">
      <summary>Enables iteration over a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator" /> class. </summary>
      <param name="list">The <see cref="T:System.Xml.Serialization.XmlSchemas" /> object you want to iterate over.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current <see cref="T:System.Xml.Schema.XmlSchema" /> object in the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator" />.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.MoveNext">
      <summary>Advances the enumerator to the next item in the collection.</summary>
      <returns>true if the move is successful; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaEnumerator.System#Collections#IEnumerator#Current"></member>
    <member name="M:System.Xml.Serialization.XmlSchemaEnumerator.System#Collections#IEnumerator#Reset"></member>
    <member name="T:System.Xml.Serialization.XmlSchemaExporter">
      <summary>Populates <see cref="T:System.Xml.Schema.XmlSchema" /> objects with XML schema element declarations that are found in type mapping objects. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaExporter" /> class. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects to which element declarations obtained from type mappings are added.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.String)">
      <summary>Exports an &lt;any&gt; element to the <see cref="T:System.Xml.Schema.XmlSchema" /> object that is identified by the specified namespace.</summary>
      <returns>An arbitrary name assigned to the &lt;any&gt; element declaration.</returns>
      <param name="ns">The namespace of the XML schema document to which to add an &lt;any&gt; element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Adds an element declaration for an object or type to a SOAP message or to an <see cref="T:System.Xml.Schema.XmlSchema" /> object.</summary>
      <returns>The string "any" with an appended integer. </returns>
      <param name="members">An <see cref="T:System.Xml.Serialization.XmlMembersMapping" />  that contains mappings to export.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> for each of the element parts of a literal SOAP message definition. </summary>
      <param name="xmlMembersMapping">The internal .NET Framework type mappings for the element parts of a Web Services Description Language (WSDL) message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
      <summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> for each of the element parts of a literal SOAP message definition, and specifies whether enclosing elements are included.</summary>
      <param name="xmlMembersMapping">The internal mapping between a .NET Framework type and an XML schema element.</param>
      <param name="exportEnclosingType">true if the schema elements that enclose the schema are to be included; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>Adds an element declaration to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object for a single element part of a literal SOAP message definition.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the qualified XML name of the exported element declaration.</returns>
      <param name="xmlMembersMapping">Internal .NET Framework type mappings for the element parts of a Web Services Description Language (WSDL) message definition.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Adds an element declaration for a .NET Framework type to the applicable <see cref="T:System.Xml.Schema.XmlSchema" /> object. </summary>
      <param name="xmlTypeMapping">The internal mapping between a .NET Framework type and an XML schema element.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaImporter">
      <summary>Generates internal mappings to .NET Framework types for XML schema element declarations, including literal XSD message parts in a WSDL document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects representing the XML schemas used by SOAP literal messages defined in a WSDL document. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider,System.Xml.Serialization.ImportContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class. </summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="options">A bitwise combination of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> values that specifies the options to use when generating .NET Framework types for a Web service.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> used to generate the serialization code.</param>
      <param name="context">A <see cref="T:System.Xml.Serialization.ImportContext" /> instance that specifies the import context.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeGenerationOptions,System.Xml.Serialization.ImportContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class for a collection of XML schemas, using the specified code generation options and import context.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration that specifies code generation options.</param>
      <param name="context">A <see cref="T:System.Xml.Serialization.ImportContext" /> instance that specifies the import context.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects that represents the XML schemas used by SOAP literal messages, plus classes being generated for bindings defined in a Web Services Description Language (WSDL) document. </summary>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" /> object.</param>
      <param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers,System.Xml.Serialization.CodeGenerationOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class, taking a collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects that represents the XML schemas used by SOAP literal messages, plus classes being generated for bindings defined in a WSDL document, and a <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> enumeration value.</summary>
      <param name="schemas">A collection of <see cref="T:System.Xml.Schema.XmlSchema" /> objects.</param>
      <param name="typeIdentifiers">A <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object that specifies a collection of classes being generated for bindings defined in a WSDL document.</param>
      <param name="options">A bitwise combination of the <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> values that specifies the options to use when generating .NET Framework types for a Web service.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportAnyType(System.Xml.XmlQualifiedName,System.String)">
      <summary>Generates internal type mapping information for a single, (SOAP) literal element part defined in a WSDL document.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> representing the .NET Framework type mapping for a single element part of a WSDL message definition.</returns>
      <param name="typeName">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element's type for which a .NET Framework type is generated.</param>
      <param name="elementName">The name of the part element in the WSDL document.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> representing the.NET Framework type mapping information for an XML schema element.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element defined in an XML schema document.</param>
      <param name="baseType">A base type for the .NET Framework type that is generated to correspond to an XSD element's type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document or as a part in a WSDL document.</summary>
      <returns>The .NET Framework type mapping information for an XML schema element.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element defined in an XML schema document.</param>
      <param name="baseType">A base type for the .NET Framework type that is generated to correspond to an XSD element's type.</param>
      <param name="baseTypeCanBeIndirect">true to indicate that the type corresponding to an XSD element can indirectly inherit from the base type; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
      <summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains type mapping information.</returns>
      <param name="name">The name of the element for which to generate a mapping.</param>
      <param name="ns">The namespace of the element for which to generate a mapping.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.SoapSchemaMember" /> instances that specifies the members of the element for which to generate a mapping.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName)">
      <summary>Generates internal type mapping information for a single element part of a literal-use SOAP message defined in a WSDL document. </summary>
      <returns>The .NET Framework type mapping for a WSDL message definition containing a single element part.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of the message part.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[])">
      <summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that represents the .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="names">An array of type <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the message parts.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[],System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for the element parts of a literal-use SOAP message defined in a WSDL document.</summary>
      <returns>The .NET Framework type mappings for the element parts of a WSDL message definition.</returns>
      <param name="names">An array of type <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the message parts.</param>
      <param name="baseType">A base type for all .NET Framework types that are generated to correspond to message parts.</param>
      <param name="baseTypeCanBeIndirect">true to indicate that the types corresponding to message parts can indirectly inherit from the base type; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> object that describes a type mapping.</returns>
      <param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName" /> that specifies an XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> object that describes a type mapping.</returns>
      <param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName" /> that specifies an XML element.</param>
      <param name="baseType">A <see cref="T:System.Type" /> object that specifies a base type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportSchemaType(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>A <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> object that describes a type mapping.</returns>
      <param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName" /> that specifies an XML element.</param>
      <param name="baseType">A <see cref="T:System.Type" /> object that specifies a base type.</param>
      <param name="baseTypeCanBeIndirect">A <see cref="T:System.Boolean" /> value that specifies whether the generated type can indirectly inherit the <paramref name="baseType" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportTypeMapping(System.Xml.XmlQualifiedName)">
      <summary>Generates internal type mapping information for an element defined in an XML schema document. </summary>
      <returns>The .NET Framework type mapping information for an XML schema element.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the name of an element defined in an XML schema document.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>When applied to a type, stores the name of a static method of the type that returns an XML schema and a <see cref="T:System.Xml.XmlQualifiedName" /> (or <see cref="T:System.Xml.Schema.XmlSchemaType" /> for anonymous types) that controls the serialization of the type.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> class, taking the name of the static method that supplies the type's XML schema.</summary>
      <param name="methodName">The name of the static method that must be implemented.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>Gets or sets a value that determines whether the target class is a wildcard, or that the schema for the class has contains only an xs:any element.</summary>
      <returns>true, if the class is a wildcard, or if the schema contains only the xs:any element; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>Gets the name of the static method that supplies the type's XML schema and the name of its XML Schema data type.</summary>
      <returns>The name of the method that is invoked by the XML infrastructure to return an XML schema.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemas">
      <summary>Represents the collection of XML schemas.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemas" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema)">
      <summary>Adds an object to the end of the collection.</summary>
      <returns>The index at which the <see cref="T:System.Xml.Schema.XmlSchema" /> is added.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to be added to the collection of objects. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema,System.Uri)">
      <summary>Adds an <see cref="T:System.Xml.Schema.XmlSchema" /> object that represents an assembly reference to the collection.</summary>
      <returns>The index at which the <see cref="T:System.Xml.Schema.XmlSchema" /> is added.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> to add.</param>
      <param name="baseUri">The <see cref="T:System.Uri" /> of the schema object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Serialization.XmlSchemas)">
      <summary>Adds an instance of the <see cref="T:System.Xml.Serialization.XmlSchemas" /> class to the end of the collection.</summary>
      <param name="schemas">The <see cref="T:System.Xml.Serialization.XmlSchemas" /> object to be added to the end of the collection. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.AddReference(System.Xml.Schema.XmlSchema)">
      <summary>Adds an <see cref="T:System.Xml.Schema.XmlSchema" /> object that represents an assembly reference to the collection.</summary>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> to add.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Processes the element and attribute names in the XML schemas and, optionally, validates the XML schemas. </summary>
      <param name="handler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> that specifies the callback method that handles errors and warnings during XML Schema validation, if the strict parameter is set to true.</param>
      <param name="fullCompile">true to validate the XML schemas in the collection using the <see cref="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)" /> method of the <see cref="T:System.Xml.Serialization.XmlSchemas" /> class; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.String)">
      <summary>Returns a value that indicates whether the collection contains an <see cref="T:System.Xml.Schema.XmlSchema" /> object that belongs to the specified namespace.</summary>
      <returns>true if the item is found; otherwise, false.</returns>
      <param name="targetNamespace">The namespace of the item to check for.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.Xml.Schema.XmlSchema)">
      <summary>Determines whether the <see cref="T:System.Xml.Serialization.XmlSchemas" /> contains a specific schema.</summary>
      <returns>true, if the collection contains the specified item; otherwise, false.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to locate. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Xml.Serialization.XmlSchemas" /> to a compatible one-dimensional <see cref="T:System.Array" />, which starts at the specified index of the target array.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Find(System.Xml.XmlQualifiedName,System.Type)">
      <summary>Locates in one of the XML schemas an <see cref="T:System.Xml.Schema.XmlSchemaObject" /> of the specified name and type. </summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> instance, such as an <see cref="T:System.Xml.Schema.XmlSchemaElement" /> or <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />.</returns>
      <param name="name">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies a fully qualified name with a namespace used to locate an <see cref="T:System.Xml.Schema.XmlSchema" /> object in the collection.</param>
      <param name="type">The <see cref="T:System.Type" /> of the object to find. Possible types include: <see cref="T:System.Xml.Schema.XmlSchemaGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, and <see cref="T:System.Xml.Schema.XmlSchemaNotation" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.GetSchemas(System.String)">
      <summary>Gets a collection of schemas that belong to the same namespace.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> implementation that contains the schemas.</returns>
      <param name="ns">The namespace of the schemas to retrieve.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IndexOf(System.Xml.Schema.XmlSchema)">
      <summary>Searches for the specified schema and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Xml.Serialization.XmlSchemas" />.</summary>
      <returns>The zero-based index of the first occurrence of the value within the entire <see cref="T:System.Xml.Serialization.XmlSchemas" />, if found; otherwise, -1.</returns>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> to locate. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Insert(System.Int32,System.Xml.Schema.XmlSchema)">
      <summary>Inserts a schema into the <see cref="T:System.Xml.Serialization.XmlSchemas" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="schema" /> should be inserted. </param>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> object to be inserted. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.IsCompiled">
      <summary>Gets a value that indicates whether the schemas have been compiled.</summary>
      <returns>true, if the schemas have been compiled; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IsDataSet(System.Xml.Schema.XmlSchema)">
      <summary>Static method that determines whether the specified XML schema contains a custom IsDataSet attribute set to true, or its equivalent. </summary>
      <returns>true if the specified schema exists; otherwise, false.</returns>
      <param name="schema">The XML schema to check for an IsDataSet attribute with a true value.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchema" /> object at the specified index. </summary>
      <returns>The specified <see cref="T:System.Xml.Schema.XmlSchema" />.</returns>
      <param name="index">The index of the item to retrieve.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.String)">
      <summary>Gets a specified <see cref="T:System.Xml.Schema.XmlSchema" /> object that represents the XML schema associated with the specified namespace.</summary>
      <returns>The specified <see cref="T:System.Xml.Schema.XmlSchema" /> object.</returns>
      <param name="ns">The namespace of the specified object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnClear">
      <summary>Performs additional custom processes when clearing the contents of the <see cref="T:System.Xml.Serialization.XmlSchemas" /> instance.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnInsert(System.Int32,System.Object)">
      <summary>Performs additional custom processes before inserting a new element into the <see cref="T:System.Xml.Serialization.XmlSchemas" /> instance.</summary>
      <param name="index">The zero-based index at which to insert <paramref name="value" />. </param>
      <param name="value">The new value of the element at <paramref name="index" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnRemove(System.Int32,System.Object)">
      <summary>Performs additional custom processes when removing an element from the <see cref="T:System.Xml.Serialization.XmlSchemas" /> instance.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> can be found. </param>
      <param name="value">The value of the element to remove at <paramref name="index" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Performs additional custom processes before setting a value in the <see cref="T:System.Xml.Serialization.XmlSchemas" /> instance.</summary>
      <param name="index">The zero-based index at which <paramref name="oldValue" /> can be found. </param>
      <param name="oldValue">The value to replace with <paramref name="newValue" />. </param>
      <param name="newValue">The new value of the element at <paramref name="index" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Remove(System.Xml.Schema.XmlSchema)">
      <summary>Removes the first occurrence of a specific schema from the <see cref="T:System.Xml.Serialization.XmlSchemas" />.</summary>
      <param name="schema">The <see cref="T:System.Xml.Schema.XmlSchema" /> to remove. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection of XML schemas.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback">
      <summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for deserialization of SOAP-encoded XML data types that map to collections or enumerations. </summary>
      <param name="collection"></param>
      <param name="collectionItems"></param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationFixupCallback">
      <summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for deserialization of SOAP-encoded XML data. </summary>
      <param name="fixup"></param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationGeneratedCode">
      <summary>An abstract class that is the base class for <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> and <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> and that contains methods common to both of these types.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationGeneratedCode.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializationGeneratedCode" /> class. </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReadCallback">
      <summary>Delegate used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for deserialization of types from SOAP-encoded, non-root XML data. </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader">
      <summary>Controls deserialization by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.CollectionFixup)">
      <summary>Stores an object that contains a callback method that will be called, as necessary, to fill in .NET Framework collections or enumerations that map to SOAP-encoded arrays or SOAP-encoded, multi-referenced elements. </summary>
      <param name="fixup">A <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate and the callback method's input data.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.Fixup)">
      <summary>Stores an object that contains a callback method instance that will be called, as necessary, to fill in the objects in a SOAP-encoded array. </summary>
      <param name="fixup">An <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate and the callback method's input data.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddReadCallback(System.String,System.String,System.Type,System.Xml.Serialization.XmlSerializationReadCallback)">
      <summary>Stores an implementation of the <see cref="T:System.Xml.Serialization.XmlSerializationReadCallback" /> delegate and its input data for a later invocation. </summary>
      <param name="name">The name of the .NET Framework type that is being deserialized.</param>
      <param name="ns">The namespace of the .NET Framework type that is being deserialized.</param>
      <param name="type">The <see cref="T:System.Type" /> to be deserialized.</param>
      <param name="read">An <see cref="T:System.Xml.Serialization.XmlSerializationReadCallback" /> delegate.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)">
      <summary>Stores an object that is being deserialized from a SOAP-encoded multiRef element for later access through the <see cref="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)" /> method. </summary>
      <param name="id">The value of the id attribute of a multiRef element that identifies the element.</param>
      <param name="o">The object that is deserialized from the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CheckReaderCount(System.Int32@,System.Int32@)">
      <summary>Checks whether the deserializer has advanced.</summary>
      <param name="whileIterations">The current count in a while loop.</param>
      <param name="readerCount">The current <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount" />. </param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount" /> has not advanced. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollapseWhitespace(System.String)">
      <summary>Removes all occurrences of white space characters from the beginning and end of the specified string.</summary>
      <returns>The trimmed string.</returns>
      <param name="value">The string that will have its white space trimmed.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateAbstractTypeException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized should be abstract. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The name of the abstract type.</param>
      <param name="ns">The .NET Framework namespace of the abstract type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateBadDerivationException(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader" />, with an option to read the inner element.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="xsdDerived">The local name of the derived XML Schema data type.</param>
      <param name="nsDerived">The namespace of the derived XML Schema data type.</param>
      <param name="xsdBase">The local name of the base XML Schema data type.</param>
      <param name="nsBase">The namespace of the base XML Schema data type.</param>
      <param name="clrDerived">The namespace of the derived .NET Framework type.</param>
      <param name="clrBase">The name of the base .NET Framework type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateCtorHasSecurityException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized cannot be instantiated because the constructor throws a security exception.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="typeName">The name of the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInaccessibleConstructorException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized cannot be instantiated because there is no constructor available.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="typeName">The name of the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object)">
      <summary>Creates an <see cref="T:System.InvalidCastException" /> that indicates that an explicit reference conversion failed.</summary>
      <returns>An <see cref="T:System.InvalidCastException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that an object cannot be cast to. This type is incorporated into the exception message.</param>
      <param name="value">The object that cannot be cast. This object is incorporated into the exception message.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object,System.String)">
      <summary>Creates an <see cref="T:System.InvalidCastException" /> that indicates that an explicit reference conversion failed.</summary>
      <returns>An <see cref="T:System.InvalidCastException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that an object cannot be cast to. This type is incorporated into the exception message.</param>
      <param name="value">The object that cannot be cast. This object is incorporated into the exception message.</param>
      <param name="id">A string identifier.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateMissingIXmlSerializableType(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a derived type that is mapped to an XML Schema data type cannot be located.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The local name of the XML Schema data type that is mapped to the unavailable derived type.</param>
      <param name="ns">The namespace of the XML Schema data type that is mapped to the unavailable derived type.</param>
      <param name="clrType">The full name of the .NET Framework base type for which a derived type cannot be located.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateReadOnlyCollectionException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a SOAP-encoded collection type cannot be modified and its values cannot be filled in. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The fully qualified name of the .NET Framework type for which there is a mapping.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownConstantException(System.String,System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an enumeration value is not valid. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The enumeration value that is not valid.</param>
      <param name="enumType">The enumeration type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownNodeException">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that the current position of <see cref="T:System.Xml.XmlReader" /> represents an unknown XML node. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownTypeException(System.Xml.XmlQualifiedName)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type is unknown. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the name of the unknown type.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.DecodeName">
      <summary>Gets or sets a value that determines whether XML strings are translated into valid .NET Framework type names.</summary>
      <returns>true if XML strings are decoded into valid .NET Framework type names; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Document">
      <summary>Gets the XML document object into which the XML document is being deserialized. </summary>
      <returns>An <see cref="T:System.Xml.XmlDocument" /> that represents the deserialized <see cref="T:System.Xml.XmlDocument" /> data.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.EnsureArrayIndex(System.Array,System.Int32,System.Type)">
      <summary>Ensures that a given array, or a copy, is large enough to contain a specified index. </summary>
      <returns>The existing <see cref="T:System.Array" />, if it is already large enough; otherwise, a new, larger array that contains the original array's elements.</returns>
      <param name="a">The <see cref="T:System.Array" /> that is being checked.</param>
      <param name="index">The required index.</param>
      <param name="elementType">The <see cref="T:System.Type" /> of the array's elements.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.FixupArrayRefs(System.Object)">
      <summary>Fills in the values of a SOAP-encoded array whose data type maps to a .NET Framework reference type. </summary>
      <param name="fixup">An object that contains the array whose values are filled in.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetArrayLength(System.String,System.String)">
      <summary>Gets the length of the SOAP-encoded array where the <see cref="T:System.Xml.XmlReader" /> is currently positioned. </summary>
      <returns>The length of the SOAP array.</returns>
      <param name="name">The local name that the array should have.</param>
      <param name="ns">The namespace that the array should have.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetNullAttr">
      <summary>Determines whether the XML element where the <see cref="T:System.Xml.XmlReader" /> is currently positioned has a null attribute set to the value true.</summary>
      <returns>true if <see cref="T:System.Xml.XmlReader" /> is currently positioned over a null attribute with the value true; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)">
      <summary>Gets an object that is being deserialized from a SOAP-encoded multiRef element and that was stored earlier by <see cref="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)" />.  </summary>
      <returns>An object to be deserialized from a SOAP-encoded multiRef element.</returns>
      <param name="id">The value of the id attribute of a multiRef element that identifies the element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetXsiType">
      <summary>Gets the value of the xsi:type attribute for the XML element at the current location of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An XML qualified name that indicates the data type of an XML element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitCallbacks">
      <summary>Initializes callback methods that populate objects that map to SOAP-encoded XML data. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitIDs">
      <summary>Stores element and attribute names in a <see cref="T:System.Xml.NameTable" /> object. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.IsReturnValue">
      <summary>Gets or sets a value that should be true for a SOAP 1.1 return value.</summary>
      <returns>true, if the value is a return value. </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.IsXmlnsAttribute(System.String)">
      <summary>Determines whether an XML attribute name indicates an XML namespace. </summary>
      <returns>true if the XML attribute name indicates an XML namespace; otherwise, false.</returns>
      <param name="name">The name of an XML attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ParseWsdlArrayType(System.Xml.XmlAttribute)">
      <summary>Sets the value of the XML attribute if it is of type arrayType from the Web Services Description Language (WSDL) namespace. </summary>
      <param name="attr">An <see cref="T:System.Xml.XmlAttribute" /> that may have the type wsdl:array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadElementQualifiedName">
      <summary>Makes the <see cref="T:System.Xml.XmlReader" /> read the fully qualified name of the element where it is currently positioned. </summary>
      <returns>The fully qualified name of the current XML element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadEndElement">
      <summary>Makes the <see cref="T:System.Xml.XmlReader" /> read an XML end tag. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Reader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> object that is being used by <see cref="T:System.Xml.Serialization.XmlSerializationReader" />. </summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> that is being used by the <see cref="T:System.Xml.Serialization.XmlSerializationReader" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount">
      <summary>Gets the current count of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The current count of an <see cref="T:System.Xml.XmlReader" />.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNull">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the current XML element if the element has a null attribute with the value true. </summary>
      <returns>true if the element has a null="true" attribute value and has been read; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableQualifiedName">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the fully qualified name of the element where it is currently positioned. </summary>
      <returns>A <see cref="T:System.Xml.XmlQualifiedName" /> that represents the fully qualified name of the current XML element; otherwise, null if a null="true" attribute value is present.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableString">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read a simple, text-only XML element that could be null. </summary>
      <returns>The string value; otherwise, null.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReference(System.String@)">
      <summary>Reads the value of the href attribute (ref attribute for SOAP 1.2) that is used to refer to an XML element in SOAP encoding. </summary>
      <returns>true if the value was read; otherwise, false.</returns>
      <param name="fixupReference">An output string into which the href attribute value is read.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement">
      <summary>Deserializes an object from a SOAP-encoded multiRef XML element. </summary>
      <returns>The value of the referenced element in the document.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement(System.String,System.String)">
      <summary>Deserializes an object from a SOAP-encoded multiRef XML element. </summary>
      <returns>The value of the referenced element in the document.</returns>
      <param name="name">The local name of the element's XML Schema data type.</param>
      <param name="ns">The namespace of the element's XML Schema data type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElements">
      <summary>Deserializes objects from the SOAP-encoded multiRef elements in a SOAP message. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.Boolean,System.String@)">
      <summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element.</summary>
      <returns>The deserialized object.</returns>
      <param name="name">The local name of the element's XML Schema data type.</param>
      <param name="ns">The namespace of the element's XML Schema data type.</param>
      <param name="elementCanBeType">true if the element name is also the XML Schema data type name; otherwise, false.</param>
      <param name="fixupReference">An output string into which the value of the href attribute is read.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.String@)">
      <summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element. </summary>
      <returns>The deserialized object.</returns>
      <param name="name">The local name of the element's XML Schema data type.</param>
      <param name="ns">The namespace of the element's XML Schema data type.</param>
      <param name="fixupReference">An output string into which the href attribute value is read.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String@)">
      <summary>Deserializes an object from an XML element in a SOAP message that contains a reference to a multiRef element. </summary>
      <returns>The deserialized object.</returns>
      <param name="fixupReference">An output string into which the href attribute value is read.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable)">
      <summary>Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface with its members populated from the location of the <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="serializable">An <see cref="T:System.Xml.Serialization.IXmlSerializable" /> that corresponds to the current position of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable,System.Boolean)"></member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String)">
      <summary>Produces the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method appended to the input value. </summary>
      <returns>The result of call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method appended to the input value.</returns>
      <param name="value">A string to prefix to the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String,System.Boolean)">
      <summary>Returns the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method of the <see cref="T:System.Xml.XmlReader" /> class, trimmed of white space if needed, and appended to the input value.</summary>
      <returns>The result of the read operation appended to the input value.</returns>
      <param name="value">A string that will be appended to.</param>
      <param name="trim">true if the result of the read operation should be trimmed; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedNull(System.Xml.XmlQualifiedName)">
      <summary>Reads an XML element that allows null values (xsi:nil = 'true') and returns a generic <see cref="T:System.Nullable`1" /> value. </summary>
      <returns>A generic <see cref="T:System.Nullable`1" /> that represents a null XML value.</returns>
      <param name="type">The <see cref="T:System.Xml.XmlQualifiedName" /> that represents the simple data type for the current location of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedPrimitive(System.Xml.XmlQualifiedName)">
      <summary>Gets the value of the XML node at which the <see cref="T:System.Xml.XmlReader" /> is currently positioned. </summary>
      <returns>The value of the node as a .NET Framework value type, if the value is a simple XML Schema data type.</returns>
      <param name="type">The <see cref="T:System.Xml.XmlQualifiedName" /> that represents the simple data type for the current location of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlDocument(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read an XML document root element at its current position.</summary>
      <returns>An <see cref="T:System.Xml.XmlDocument" /> that contains the root element that has been read.</returns>
      <param name="wrapped">true if the method should read content only after reading the element's start element; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlNode(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the XML node at its current position. </summary>
      <returns>An <see cref="T:System.Xml.XmlNode" /> that represents the XML node that has been read.</returns>
      <param name="wrapped">true to read content only after reading the element's start element; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Referenced(System.Object)">
      <summary>Stores an object to be deserialized from a SOAP-encoded multiRef element.</summary>
      <param name="o">The object to be deserialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ResolveDynamicAssembly(System.String)">
      <summary>Gets a dynamically generated assembly by name.</summary>
      <returns>A dynamically generated <see cref="T:System.Reflection.Assembly" />.</returns>
      <param name="assemblyFullName">The full name of the assembly.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ShrinkArray(System.Array,System.Int32,System.Type,System.Boolean)">
      <summary>Ensures that a given array, or a copy, is no larger than a specified length. </summary>
      <returns>The existing <see cref="T:System.Array" />, if it is already small enough; otherwise, a new, smaller array that contains the original array's elements up to the size of<paramref name=" length" />.</returns>
      <param name="a">The array that is being checked.</param>
      <param name="length">The maximum length of the array.</param>
      <param name="elementType">The <see cref="T:System.Type" /> of the array's elements.</param>
      <param name="isNullable">true if null for the array, if present for the input array, can be returned; otherwise, a new, smaller array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the string value at its current position and return it as a base-64 byte array.</summary>
      <returns>A base-64 byte array; otherwise, null if the value of the <paramref name="isNull" /> parameter is true.</returns>
      <param name="isNull">true to return null; false to return a base-64 byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.String)">
      <summary>Produces a base-64 byte array from an input string. </summary>
      <returns>A base-64 byte array.</returns>
      <param name="value">A string to translate into a base-64 byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the string value at its current position and return it as a hexadecimal byte array.</summary>
      <returns>A hexadecimal byte array; otherwise, null if the value of the <paramref name="isNull" /> parameter is true. </returns>
      <param name="isNull">true to return null; false to return a hexadecimal byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.String)">
      <summary>Produces a hexadecimal byte array from an input string.</summary>
      <returns>A hexadecimal byte array.</returns>
      <param name="value">A string to translate into a hexadecimal byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToChar(System.String)">
      <summary>Produces a <see cref="T:System.Char" /> object from an input string. </summary>
      <returns>A <see cref="T:System.Char" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.Char" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDate(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> object from an input string. </summary>
      <returns>A <see cref="T:System.DateTime" />object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> class object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDateTime(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> object from an input string. </summary>
      <returns>A <see cref="T:System.DateTime" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToEnum(System.String,System.Collections.Hashtable,System.String)">
      <summary>Produces a numeric enumeration value from a string that consists of delimited identifiers that represent constants from the enumerator list. </summary>
      <returns>A long value that consists of the enumeration value as a series of bitwise OR operations.</returns>
      <param name="value">A string that consists of delimited identifiers where each identifier represents a constant from the set enumerator list.</param>
      <param name="h">A <see cref="T:System.Collections.Hashtable" /> that consists of the identifiers as keys and the constants as integral numbers.</param>
      <param name="typeName">The name of the enumeration type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToTime(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> from a string that represents the time. </summary>
      <returns>A <see cref="T:System.DateTime" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlName(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNCName(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmToken(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmTokens(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlQualifiedName(System.String)">
      <summary>Obtains an <see cref="T:System.Xml.XmlQualifiedName" /> from a name that may contain a prefix. </summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents a namespace-qualified XML name.</returns>
      <param name="value">A name that may contain a prefix.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> property.</param>
      <param name="attr">An <see cref="T:System.Xml.XmlAttribute" /> that represents the attribute in question.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute,System.String)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> property.</param>
      <param name="attr">A <see cref="T:System.Xml.XmlAttribute" /> that represents the attribute in question.</param>
      <param name="qnames">A comma-delimited list of XML qualified names.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="o">The <see cref="T:System.Object" /> that is being deserialized.</param>
      <param name="elem">The <see cref="T:System.Xml.XmlElement" /> for which an event is raised.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement,System.String)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized" /> property.</param>
      <param name="elem">The <see cref="T:System.Xml.XmlElement" /> for which an event is raised.</param>
      <param name="qnames">A comma-delimited list of XML qualified names.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <param name="o">The object that is being deserialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object,System.String)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="o">The object being deserialized.</param>
      <param name="qnames">A comma-delimited list of XML qualified names.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnreferencedObject(System.String,System.Object)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="id">A unique string that is used to identify the unreferenced object, subsequently accessible through the <see cref="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId" /> property.</param>
      <param name="o">An object that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is attempting to deserialize, subsequently accessible through the <see cref="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject" /> property.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader.CollectionFixup">
      <summary>Holds an <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate instance, plus the method's inputs; also supplies the method's parameters. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationCollectionFixupCallback,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationReader.CollectionFixup" /> class with parameters for a callback method. </summary>
      <param name="collection">A collection into which the callback method copies the collection items array.</param>
      <param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate.</param>
      <param name="collectionItems">An array into which the callback method copies a collection.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Callback">
      <summary>Gets the callback method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate. </summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback" /> delegate that points to the callback method.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Collection">
      <summary>Gets the <paramref name="object collection" /> for the callback method. </summary>
      <returns>The collection that is used for the fixup.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.CollectionItems">
      <summary>Gets the array into which the callback method copies a collection. </summary>
      <returns>The array into which the callback method copies a collection.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader.Fixup">
      <summary>Holds an <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate instance, plus the method's inputs; also serves as the parameter for the method. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.Int32)">
      <summary>Receives the size of a string array to generate. </summary>
      <param name="o">The object that contains other objects whose values get filled in by the callback implementation.</param>
      <param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate.</param>
      <param name="count">The size of the string array obtained through the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids" /> property.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.String[])">
      <summary>Receives a string array. </summary>
      <param name="o">The object that contains other objects whose values get filled in by the callback implementation.</param>
      <param name="callback">A method that instantiates the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate.</param>
      <param name="ids">The string array obtained through the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids" /> property.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Callback">
      <summary>Gets the callback method that creates an instance of the <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" /> delegate. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationFixupCallback" />. </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids">
      <summary>Gets or sets an array of keys for the objects that belong to the <see cref="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source" /> property whose values get filled in by the callback implementation. </summary>
      <returns>The array of keys.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source">
      <summary>Gets or sets the object that contains other objects whose values get filled in by the callback implementation.</summary>
      <returns>The source containing objects with values to fill.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationWriteCallback">
      <summary>Delegate that is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for serialization of types from SOAP-encoded, non-root XML data. </summary>
      <param name="o"></param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationWriter">
      <summary>Abstract class used for controlling serialization by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.AddWriteCallback(System.Type,System.String,System.String,System.Xml.Serialization.XmlSerializationWriteCallback)">
      <summary>Stores an implementation of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> delegate and the type it applies to, for a later invocation. </summary>
      <param name="type">The <see cref="T:System.Type" /> of objects that are serialized.</param>
      <param name="typeName">The name of the type of objects that are serialized.</param>
      <param name="typeNs">The namespace of the type of objects that are serialized.</param>
      <param name="callback">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> delegate.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateChoiceIdentifierValueException(System.String,System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates an unexpected name for an element that adheres to an XML Schema choice element declaration.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The name that is not valid.</param>
      <param name="identifier">The choice element declaration that the name belongs to.</param>
      <param name="name">The expected local name of an element.</param>
      <param name="ns">The expected namespace of an element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Object)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> has been invalidly applied to a member; only members that are of type <see cref="T:System.Xml.XmlNode" />, or derived from <see cref="T:System.Xml.XmlNode" />, are valid.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="o">The object that represents the invalid member.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> has been invalidly applied to a member; only members that are of type <see cref="T:System.Xml.XmlNode" />, or derived from <see cref="T:System.Xml.XmlNode" />, are valid.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that is invalid.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidChoiceIdentifierValueException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates a failure while writing an array where an XML Schema choice element declaration is applied.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The type being serialized.</param>
      <param name="identifier">A name for the choice element declaration.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidEnumValueException(System.Object,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> for an invalid enumeration value.</summary>
      <returns>An <see cref="T:System.ComponentModel.InvalidEnumArgumentException" />.</returns>
      <param name="value">An object that represents the invalid enumeration.</param>
      <param name="typeName">The XML type name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateMismatchChoiceException(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a value for an XML element does not match an enumeration type.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The value that is not valid.</param>
      <param name="elementName">The name of the XML element with an invalid value.</param>
      <param name="enumValue">The valid value.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownAnyElementException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an XML element that should adhere to the XML Schema any element declaration cannot be processed.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The XML element that cannot be processed.</param>
      <param name="ns">The namespace of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Object)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type being serialized is not being used in a valid manner or is unexpectedly encountered. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="o">The object whose type cannot be serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type being serialized is not being used in a valid manner or is unexpectedly encountered. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The type that cannot be serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.EscapeName">
      <summary>Gets or sets a value that indicates whether the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> method is used to write valid XML.</summary>
      <returns>true if the <see cref="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)" /> method returns an encoded name; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayBase64(System.Byte[])">
      <summary>Processes a base-64 byte array.</summary>
      <returns>The same byte array that was passed in as an argument.</returns>
      <param name="value">A base-64 <see cref="T:System.Byte" /> array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayHex(System.Byte[])">
      <summary>Produces a string from an input hexadecimal byte array.</summary>
      <returns>The byte array value converted to a string.</returns>
      <param name="value">A hexadecimal byte array to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromChar(System.Char)">
      <summary>Produces a string from an input <see cref="T:System.Char" />.</summary>
      <returns>The <see cref="T:System.Char" /> value converted to a string.</returns>
      <param name="value">A <see cref="T:System.Char" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDate(System.DateTime)">
      <summary>Produces a string from a <see cref="T:System.DateTime" /> object.</summary>
      <returns>A string representation of the <see cref="T:System.DateTime" /> that shows the date but no time.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDateTime(System.DateTime)">
      <summary>Produces a string from an input <see cref="T:System.DateTime" />.</summary>
      <returns>A string representation of the <see cref="T:System.DateTime" /> that shows the date and time.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[])">
      <summary>Produces a string that consists of delimited identifiers that represent the enumeration members that have been set.</summary>
      <returns>A string that consists of delimited identifiers, where each represents a member from the set enumerator list.</returns>
      <param name="value">The enumeration value as a series of bitwise OR operations.</param>
      <param name="values">The enumeration's name values.</param>
      <param name="ids">The enumeration's constant values.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[],System.String)">
      <summary>Takes a numeric enumeration value and the names and constants from the enumerator list for the enumeration and returns a string that consists of delimited identifiers that represent the enumeration members that have been set.</summary>
      <returns>A string that consists of delimited identifiers, where each item is one of the values set by the bitwise operation.</returns>
      <param name="value">The enumeration value as a series of bitwise OR operations.</param>
      <param name="values">The values of the enumeration.</param>
      <param name="ids">The constants of the enumeration.</param>
      <param name="typeName">The name of the type </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromTime(System.DateTime)">
      <summary>Produces a string from a <see cref="T:System.DateTime" /> object.</summary>
      <returns>A string representation of the <see cref="T:System.DateTime" /> object that shows the time but no date.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> that is translated to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlName(System.String)">
      <summary>Encodes a valid XML name by replacing characters that are not valid with escape sequences.</summary>
      <returns>An encoded string.</returns>
      <param name="name">A string to be used as an XML name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNCName(System.String)">
      <summary>Encodes a valid XML local name by replacing characters that are not valid with escape sequences.</summary>
      <returns>An encoded string.</returns>
      <param name="ncName">A string to be used as a local (unqualified) XML name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmToken(System.String)">
      <summary>Encodes an XML name.</summary>
      <returns>An encoded string.</returns>
      <param name="nmToken">An XML name to be encoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmTokens(System.String)">
      <summary>Encodes a space-delimited sequence of XML names into a single XML name.</summary>
      <returns>An encoded string.</returns>
      <param name="nmTokens">A space-delimited sequence of XML names to be encoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)">
      <summary>Returns an XML qualified name, with invalid characters replaced by escape sequences. </summary>
      <returns>An XML qualified name, with invalid characters replaced by escape sequences.</returns>
      <param name="xmlQualifiedName">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the XML to be written.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName,System.Boolean)">
      <summary>Produces a string that can be written as an XML qualified name, with invalid characters replaced by escape sequences. </summary>
      <returns>An XML qualified name, with invalid characters replaced by escape sequences.</returns>
      <param name="xmlQualifiedName">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the XML to be written.</param>
      <param name="ignoreEmpty">true to ignore empty spaces in the string; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.InitCallbacks">
      <summary>Initializes instances of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> delegate to serialize SOAP-encoded XML data. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Namespaces">
      <summary>Gets or sets a list of XML qualified name objects that contain the namespaces and prefixes used to produce qualified names in XML documents. </summary>
      <returns>An <see cref="T:System.Collections.ArrayList" /> that contains the namespaces and prefix pairs.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.ResolveDynamicAssembly(System.String)">
      <summary>Gets a dynamically generated assembly by name.</summary>
      <returns>A dynamically generated assembly.</returns>
      <param name="assemblyFullName">The full name of the assembly.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.TopLevelElement">
      <summary>Initializes object references only while serializing a SOAP-encoded SOAP message.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.Byte[])">
      <summary>Instructs an <see cref="T:System.Xml.XmlWriter" /> object to write an XML attribute that has no namespace specified for its name.</summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String)">
      <summary>Instructs the <see cref="T:System.Xml.XmlWriter" /> to write an XML attribute that has no namespace specified for its name. </summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.Byte[])">
      <summary>Instructs an <see cref="T:System.Xml.XmlWriter" /> object to write an XML attribute.</summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String)">
      <summary>Writes an XML attribute. </summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
      <summary>Writes an XML attribute where the namespace prefix is provided manually. </summary>
      <param name="prefix">The namespace prefix to write.</param>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace represented by the prefix.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementEncoded(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Writes an XML node object within the body of a named XML element.</summary>
      <param name="node">The XML node to write, possibly a child XML element.</param>
      <param name="name">The local name of the parent XML element to write.</param>
      <param name="ns">The namespace of the parent XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
      <param name="any">true to indicate that the node, if an XML element, adheres to an XML Schema any element declaration; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementLiteral(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Instructs an <see cref="T:System.Xml.XmlWriter" /> object to write an <see cref="T:System.Xml.XmlNode" /> object within the body of a named XML element.</summary>
      <param name="node">The XML node to write, possibly a child XML element.</param>
      <param name="name">The local name of the parent XML element to write.</param>
      <param name="ns">The namespace of the parent XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
      <param name="any">true to indicate that the node, if an XML element, adheres to an XML Schema any element declaration; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body. </summary>
      <param name="localName">The local name of the XML element to be written without namespace qualification.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body. </summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[])">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[])">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String)">
      <summary>Writes an XML element whose body is empty. </summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String,System.String)">
      <summary>Writes an XML element whose body is empty.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement">
      <summary>Writes a &lt;closing&gt; element tag.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement(System.Object)">
      <summary>Writes a closing element tag.</summary>
      <param name="o">The object being serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteId(System.Object)">
      <summary>Writes an id attribute that appears in a SOAP-encoded multiRef element. </summary>
      <param name="o">The object being serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNamespaceDeclarations(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Writes namespace declaration attributes.</summary>
      <param name="xmlns">The XML namespaces to declare.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameEncoded(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element whose body contains a valid XML qualified name. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The XML qualified name to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameLiteral(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element whose body contains a valid XML qualified name. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The XML qualified name to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncoded(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes a byte array as the body of an XML element. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The byte array to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteral(System.String,System.String,System.String)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.Byte[])">
      <summary>Writes a byte array as the body of an XML element. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The byte array to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.String)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts a xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String,System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String,System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object)">
      <summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object. </summary>
      <param name="n">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized either in the current XML element or a multiRef element that is referenced by the current element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type)">
      <summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object. </summary>
      <param name="n">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized either in the current XML element or a multiRef element that referenced by the current element.</param>
      <param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean)">
      <summary>Writes a SOAP message XML element that can contain a reference to a &lt;multiRef&gt; XML element for a given object.</summary>
      <param name="n">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized either in the current XML element or a multiRef element that is referenced by the current element.</param>
      <param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
      <param name="suppressReference">true to serialize the object directly into the XML element rather than make the element reference another element that contains the data; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean,System.Boolean)">
      <summary>Writes a SOAP message XML element that can contain a reference to a multiRef XML element for a given object.</summary>
      <param name="n">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized either in the current XML element or a multiRef element that referenced by the current element.</param>
      <param name="ambientType">The type stored in the object's type mapping (as opposed to the object's type found directly through the typeof operation).</param>
      <param name="suppressReference">true to serialize the object directly into the XML element rather than make the element reference another element that contains the data; otherwise, false.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Writer">
      <summary>Gets the <see cref="T:System.Xml.XmlWriter" /> that is being used by the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />. </summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> used by the class instance.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencedElements">
      <summary>Serializes objects into SOAP-encoded multiRef XML elements in a SOAP message. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object)">
      <summary>Writes a SOAP message XML element that contains a reference to a multiRef element for a given object. </summary>
      <param name="n">The local name of the referencing element being written.</param>
      <param name="ns">The namespace of the referencing element being written.</param>
      <param name="o">The object being serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object,System.Boolean)">
      <summary>Writes a SOAP message XML element that contains a reference to a multiRef element for a given object.</summary>
      <param name="n">The local name of the referencing element being written.</param>
      <param name="ns">The namespace of the referencing element being written.</param>
      <param name="o">The object being serialized.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the object to serialize is null; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteRpcResult(System.String,System.String)">
      <summary>Writes a SOAP 1.2 RPC result element with a specified qualified name in its body.</summary>
      <param name="name">The local name of the result body.</param>
      <param name="ns">The namespace of the result body.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean)">
      <summary>Writes an object that uses custom XML formatting as an XML element. </summary>
      <param name="serializable">An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface that uses custom XML formatting.</param>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> class object is null; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Instructs <see cref="T:System.Xml.XmlNode" /> to write an object that uses custom XML formatting as an XML element. </summary>
      <param name="serializable">An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface that uses custom XML formatting.</param>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> object is null; otherwise, false.</param>
      <param name="wrapped">true to ignore writing the opening element tag; otherwise, false to write the opening element tag.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartDocument">
      <summary>Writes the XML declaration if the writer is positioned at the start of an XML document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Boolean)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
      <param name="xmlns">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class that contains prefix and namespace pairs to be used in the generated XML.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteTypedPrimitive(System.String,System.String,System.Object,System.Boolean)">
      <summary>Writes an XML element whose text body is a value of a simple XML Schema data type. </summary>
      <param name="name">The local name of the element to write.</param>
      <param name="ns">The namespace of the element to write.</param>
      <param name="o">The object to be serialized in the element body.</param>
      <param name="xsiType">true if the XML element explicitly specifies the text value's type using the xsi:type attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.Byte[])">
      <summary>Writes a base-64 byte array.</summary>
      <param name="value">The byte array to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.String)">
      <summary>Writes a specified string.</summary>
      <param name="value">The string to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode)">
      <summary>Writes the specified <see cref="T:System.Xml.XmlNode" /> as an XML attribute.</summary>
      <param name="node">An <see cref="T:System.Xml.XmlAttribute" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode,System.Object)">
      <summary>Writes the specified <see cref="T:System.Xml.XmlNode" /> object as an XML attribute.</summary>
      <param name="node">An <see cref="T:System.Xml.XmlNode" /> of <see cref="T:System.Xml.XmlAttribute" /> type.</param>
      <param name="container">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> object (or null) used to generate a qualified name value for an arrayType attribute from the Web Services Description Language (WSDL) namespace ("http://schemas.xmlsoap.org/wsdl/").</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXsiType(System.String,System.String)">
      <summary>Writes an xsi:type attribute for an XML element that is being serialized into a document. </summary>
      <param name="name">The local name of an XML Schema data type.</param>
      <param name="ns">The namespace of an XML Schema data type.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializer">
      <summary>Serializes and deserializes objects into and from XML documents. The <see cref="T:System.Xml.Serialization.XmlSerializer" /> enables you to control how objects are encoded into XML.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Specifies the default namespace for all the XML elements.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="defaultNamespace">The default namespace to use for all the XML elements. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into object of a specified type. If a property or field returns an array, the <paramref name="extraTypes" /> parameter specifies objects that can be inserted into the array.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize XML documents into objects of the specified type. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</summary>
      <param name="type">The type of the object to serialize. </param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of type <see cref="T:System.Object" /> into XML document instances, and deserialize XML document instances into objects of type <see cref="T:System.Object" />. Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes. This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <paramref name="type" /> parameter. </param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize. </param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties. </param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)"></member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML document instances, and deserialize XML document instances into objects of the specified type. This overload allows you to supply other types that can be encountered during a serialization or deserialization operation, as well as a default namespace for all XML elements, the class to use as the XML root element, its location, and credentials required for access.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <paramref name="type" /> parameter.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
      <param name="location">The location of the types.</param>
      <param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains credentials required to access types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and deserialize an XML document into object of the specified type. It also specifies the class to use as the XML root element.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class using an object that maps one type to another.</summary>
      <param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize a specified XML document.</summary>
      <returns>true if this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize the object that the <see cref="T:System.Xml.XmlReader" /> points to; otherwise, false.</returns>
      <param name="xmlReader">An <see cref="T:System.Xml.XmlReader" /> that points to the document to deserialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CreateReader">
      <summary>Returns an object used to read the XML document to be serialized.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> used to read the XML document.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CreateWriter">
      <summary>When overridden in a derived class, returns a writer used to serialize the object.</summary>
      <returns>An instance that implements the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> class.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the XML document to deserialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.Xml.Serialization.XmlSerializationReader" />.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" /> and encoding style.</summary>
      <returns>The deserialized object.</returns>
      <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> that contains the XML document to deserialize. </param>
      <param name="encodingStyle">The encoding style of the serialized XML. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Xml.Serialization.XmlDeserializationEvents)">
      <summary>Deserializes the object using the data contained by the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The object being deserialized.</returns>
      <param name="xmlReader">An instance of the <see cref="T:System.Xml.XmlReader" /> class used to read the document.</param>
      <param name="encodingStyle">The encoding used.</param>
      <param name="events">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> class. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader,System.Xml.Serialization.XmlDeserializationEvents)">
      <summary>Deserializes an XML document contained by the specified <see cref="T:System.Xml.XmlReader" /> and allows the overriding of events that occur during deserialization.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> that contains the document to deserialize.</param>
      <param name="events">An instance of the <see cref="T:System.Xml.Serialization.XmlDeserializationEvents" /> class. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])">
      <summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> objects.</summary>
      <returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</returns>
      <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Security.Policy.Evidence)">
      <summary>Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class created from mappings of one XML type to another.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</returns>
      <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects used to map one type to another.</param>
      <param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains host and assembly data presented to the common language runtime policy system.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
      <summary>Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class from the specified mappings.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</returns>
      <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
      <param name="type">The <see cref="T:System.Type" /> of the deserialized object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
      <summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of types.</summary>
      <returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</returns>
      <param name="types">An array of <see cref="T:System.Type" /> objects. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[])">
      <summary>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that contains serializers for the supplied types and mappings.</returns>
      <param name="types">A collection of types.</param>
      <param name="mappings">A collection of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects used to convert one type to another.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GenerateSerializer(System.Type[],System.Xml.Serialization.XmlMapping[],System.CodeDom.Compiler.CompilerParameters)">
      <summary>Returns an assembly that contains custom-made serializers used to serialize or deserialize the specified type or types, using the specified mappings and compiler settings and options. </summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> that contains special versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="types">An array of type <see cref="T:System.Type" /> that contains objects used to serialize and deserialize data.</param>
      <param name="mappings">An array of type <see cref="T:System.Xml.Serialization.XmlMapping" /> that maps the XML data to the type data.</param>
      <param name="parameters">An instance of the <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> class that represents the parameters used to invoke a compiler.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type)">
      <summary>Returns the name of the assembly that contains one or more versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> especially created to serialize or deserialize the specified type.</summary>
      <returns>The name of the assembly that contains an <see cref="T:System.Xml.Serialization.XmlSerializer" /> for the type.</returns>
      <param name="type">The <see cref="T:System.Type" /> you are deserializing.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.GetXmlSerializerAssemblyName(System.Type,System.String)">
      <summary>Returns the name of the assembly that contains the serializer for the specified type in the specified namespace.</summary>
      <returns>The name of the assembly that contains specially built serializers.</returns>
      <param name="type">The <see cref="T:System.Type" /> you are interested in.</param>
      <param name="defaultNamespace">The namespace of the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" />that references the specified namespaces.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" /> and references the specified namespaces.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> that contains namespaces for the generated XML document. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />.</summary>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="writer">The <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> used to write the XML document. </param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces.</summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String)">
      <summary>Serializes the specified object and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces and encoding style.</summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
      <param name="o">The object to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <param name="encodingStyle">The encoding style of the serialized XML. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.String,System.String)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />, XML namespaces, and encoding. </summary>
      <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</param>
      <param name="o">The object to serialize.</param>
      <param name="namespaces">An instance of the XmlSerializaerNamespaces that contains namespaces and prefixes to use.</param>
      <param name="encodingStyle">The encoding used in the document.</param>
      <param name="id">For SOAP encoded messages, the base used to generate id attributes. </param>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
      <summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML attribute of unknown type during deserialization.</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
      <summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML element of unknown type during deserialization.</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
      <summary>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML node of unknown type during deserialization.</summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
      <summary>Occurs during deserialization of a SOAP-encoded XML stream, when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters a recognized type that is not used or is unreferenced.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute">
      <summary>Applied to a Web service client proxy, enables you to specify an assembly that contains custom-made serializers. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> class with the specified assembly name.</summary>
      <param name="assemblyName">The simple, unencrypted name of the assembly. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerAssemblyAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" /> class with the specified assembly name and location of the assembly.</summary>
      <param name="assemblyName">The simple, unencrypted name of the assembly. </param>
      <param name="codeBase">A string that is the URL location of the assembly.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerAssemblyAttribute.AssemblyName">
      <summary>Gets or sets the name of the assembly that contains serializers for a specific set of types.</summary>
      <returns>The simple, unencrypted name of the assembly. </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerAssemblyAttribute.CodeBase">
      <summary>Gets or sets the location of the assembly that contains the serializers.</summary>
      <returns>A location, such as a path or URI, that points to the assembly.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerFactory">
      <summary>Creates typed versions of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> for more efficient serialization.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that is specifically created to serialize the specified type.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.String)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type and namespace.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that is specifically created to serialize the specified type.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="defaultNamespace">The default namespace to use for all the XML elements. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Type[])">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class that is used to serialize the specified type. If a property or field returns an array, the <paramref name="extraTypes" /> parameter specifies objects that can be inserted into the array.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that contains fields that override the default serialization behavior.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that contains fields that override the default serialization behavior.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element.</param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String)"></member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String,System.String,System.Security.Policy.Evidence)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML document instances, and vice versa. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes. This overload also specifies the default namespace for all the XML elements, and the class to use as the XML root element.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the type parameter.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document.</param>
      <param name="location">The path that specifies the location of the types.</param>
      <param name="evidence">An instance of the <see cref="T:System.Security.Policy.Evidence" /> class that contains credentials needed to access types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents, and vice versa. Specifies the object that represents the XML root element.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to serialize.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerFactory.CreateSerializer(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Returns a derivation of the <see cref="T:System.Xml.Serialization.XmlSerializerFactory" /> class using an object that maps one type to another.</summary>
      <returns>A derivation of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that is specifically created to serialize the mapped type.</returns>
      <param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerImplementation">
      <summary>Defines the reader, writer, and methods for pre-generated, typed serializers.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerImplementation" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.CanSerialize(System.Type)">
      <summary>Gets a value that determines whether a type can be serialized.</summary>
      <returns>true if the type can be serialized; otherwise, false.</returns>
      <param name="type">The <see cref="T:System.Type" /> to be serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.GetSerializer(System.Type)">
      <summary>Returns a serializer for the specified type.</summary>
      <returns>An instance of a type derived from the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </returns>
      <param name="type">The <see cref="T:System.Type" /> to be serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.Reader">
      <summary>Gets the XML reader object that is used by the serializer.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> that is used to read an XML document or data stream.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.ReadMethods">
      <summary>Gets the collection of methods that is used to read a data stream.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the methods.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.TypedSerializers">
      <summary>Gets the collection of typed serializers that is found in the assembly.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the typed serializers.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.WriteMethods">
      <summary>Get the collection of methods that is used to write to a data stream.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the methods.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.Writer">
      <summary>Gets the XML writer object for the serializer.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> that is used to write to an XML data stream or document.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>Contains the XML namespaces and prefixes that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> uses to generate qualified names in an XML-document instance.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class, using the specified instance of XmlSerializerNamespaces containing the collection of prefix and namespace pairs.</summary>
      <param name="namespaces">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />containing the namespace and prefix pairs. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</summary>
      <param name="namespaces">An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>Adds a prefix and namespace pair to an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</summary>
      <param name="prefix">The prefix associated with an XML namespace. </param>
      <param name="ns">An XML namespace. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>Gets the number of prefix and namespace pairs in the collection.</summary>
      <returns>The number of prefix and namespace pairs in the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>Gets the array of prefix and namespace pairs in an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</summary>
      <returns>An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects that are used as qualified names in an XML document.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerVersionAttribute">
      <summary>Signifies that the code was generated by the serialization infrastructure and can be reused for increased performance, when this attribute is applied to an assembly.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerVersionAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute" /> class for the specified type.</summary>
      <param name="type">The type that is being serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Namespace">
      <summary>Gets or sets the common language runtime (CLR) namespace of the assembly.</summary>
      <returns>A <see cref="T:System.String" /> containing the common language runtime (CLR) namespace of the assembly.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.ParentAssemblyId">
      <summary>Gets or sets the identity of the parent assembly.</summary>
      <returns>The version of the parent assembly.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Type">
      <summary>Gets or sets the type that the serializer operates on.</summary>
      <returns>The <see cref="T:System.Type" /> to be serialized.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerVersionAttribute.Version">
      <summary>Gets or sets the assembly's version number.</summary>
      <returns>The version of the assembly.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>Indicates to the <see cref="T:System.Xml.Serialization.XmlSerializer" /> that the member must be treated as XML text when the class that contains it is serialized or deserialized.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the member to be serialized. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>Gets or sets the XML Schema definition language (XSD) data type of the text generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document "XML Schema Part 2: Datatypes".</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type. </exception>
      <exception cref="T:System.InvalidOperationException">The XML Schema data type you have specified is invalid for the property and cannot be converted to the member type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>Gets or sets the type of the member.</summary>
      <returns>The <see cref="T:System.Type" /> of the member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeAttribute">
      <summary>Controls the XML schema that is generated when the attribute target is serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class and specifies the name of the XML type.</summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.AnonymousType">
      <summary>Gets or sets a value that determines whether the resulting schema type is an XSD anonymous type.</summary>
      <returns>true, if the resulting schema type is an XSD anonymous type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
      <summary>Gets or sets a value that indicates whether to include the type in XML schema documents.</summary>
      <returns>true to include the type in XML schema documents; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML type.</summary>
      <returns>The namespace of the XML type.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
      <summary>Gets or sets the name of the XML type.</summary>
      <returns>The name of the XML type.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeMapping">
      <summary>Contains a mapping of one type to another.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeFullName">
      <summary>The fully qualified type name that includes the namespace (or namespaces) and type.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeName">
      <summary>Gets the type name of the mapped object.</summary>
      <returns>The type name of the mapped object.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeName">
      <summary>Gets the XML element name of the mapped object.</summary>
      <returns>The XML element name of the mapped object. The default is the class name of the object.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeNamespace">
      <summary>Gets the XML namespace of the mapped object.</summary>
      <returns>The XML namespace of the mapped object. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullableSpecified"></member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullableSpecified"></member>
    <member name="T:System.Xml.Serialization.Advanced.SchemaImporterExtension">
      <summary>Allows you to customize the code generated from a Web Services Description Language (WSDL) document when using automated query tools.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement(System.Xml.Schema.XmlSchemaAny,System.Boolean,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>Handles the importation of the &lt;xsd:any&gt; elements in the schema.</summary>
      <returns>The name of the CLR type that the element maps to. </returns>
      <param name="any">An <see cref="T:System.Xml.Schema.XmlSchemaAny" /> that represents the xsd:any element found in the XML Schema Document (XSD).</param>
      <param name="mixed">A <see cref="T:System.Boolean" /> that indicates whether the XSD complex attribute has been set to "mixed". true, if the attribute has been set to mixed, otherwise false. </param>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" /> that contains the collection of schemas found in the XSD.</param>
      <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> that is the importer being used.</param>
      <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> to which you can add CodeDOM structures to generate alternative code for the XSD. </param>
      <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that represents the current namespace for the element.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> for the setting options on the code compiler.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> that is the CodeDOM provider used to generate the new code. </param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue(System.String,System.String)">
      <summary>Allows you to specify the default value for the XSD type being imported.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> setting the new default value.</returns>
      <param name="value">The value found in the original XSD.</param>
      <param name="type">The XSD type name.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.</summary>
      <returns>The name of the CLR type that this maps to.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that represents schema information, such as the line number of the XML element.</param>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" /> that contains the collection of schemas in the document.</param>
      <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> that is the importer being used.</param>
      <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
      <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that represents the current namespace for the element.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> for the setting options on the code compiler.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> that is used to generate the new code.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)">
      <summary>Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.</summary>
      <returns>The name of the CLR type that this maps to.</returns>
      <param name="type">An <see cref="T:System.Xml.Schema.XmlSchemaType" /> that represents the XSD type.</param>
      <param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that represents schema information, such as the line number of the XML element.</param>
      <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas" /> that contains the collection of schemas in the document.</param>
      <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> that is the importer being used.</param>
      <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit" /> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
      <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace" /> that represents the current namespace for the element.</param>
      <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> for the setting options on the code compiler.</param>
      <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> that is used to generate the new code.</param>
    </member>
    <member name="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> objects.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.String,System.Type)">
      <summary>Adds the specified importer extension to the collection. The name parameter allows you to supply a custom name for the extension.</summary>
      <returns>The index of the newly added item.</returns>
      <param name="name">A custom name for the extension.</param>
      <param name="type">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> to add.</param>
      <exception cref="T:System.ArgumentException">The value of type does not inherit from <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" />.</exception>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Adds the specified importer extension to the collection.</summary>
      <returns>The index of the added extension.</returns>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> to add.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Clear">
      <summary>Clears the collection of importer extensions.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Contains(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Gets a value that indicates whether the specified importer extension exists in the collection.</summary>
      <returns>true if the extension is found; otherwise, false.</returns>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> to search for.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.CopyTo(System.Xml.Serialization.Advanced.SchemaImporterExtension[],System.Int32)">
      <summary>Copies all the elements of the current <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> to the specified array of <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> objects at the specified index. </summary>
      <param name="array">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to copy the current collection to.</param>
      <param name="index">The zero-based index at which the collection is added.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.IndexOf(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Searches for the specified item and returns the zero-based index of the first occurrence within the collection.</summary>
      <returns>The index of the found item.</returns>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to search for.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Insert(System.Int32,System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Inserts the specified <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> into the collection at the specified index.</summary>
      <param name="index">The zero-base index at which the extension should be inserted.</param>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to insert.</param>
    </member>
    <member name="P:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" /> at the specified index.</returns>
      <param name="index">The index of the item to find.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Remove(System.String)">
      <summary>Removes the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />, specified by name, from the collection.</summary>
      <param name="name">The name of the <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to remove. The name is set using the <see cref="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.String,System.Type)" /> method.</param>
    </member>
    <member name="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Remove(System.Xml.Serialization.Advanced.SchemaImporterExtension)">
      <summary>Removes the specified <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> from the collection.</summary>
      <param name="extension">The <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" /> to remove. </param>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection">
      <summary>Handles configuration settings for XML serialization of <see cref="T:System.DateTime" /> instances.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.DateTimeSerializationSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection" /> class.</summary>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.DateTimeSerializationSection.Mode">
      <summary>Gets or sets a value that determines the serialization format.</summary>
      <returns>One of the <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode" /> values.</returns>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode">
      <summary>Determines XML serialization format of <see cref="T:System.DateTime" /> objects.</summary>
    </member>
    <member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Default">
      <summary>Same as Roundtrip.</summary>
    </member>
    <member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Roundtrip">
      <summary>The serializer examines individual <see cref="T:System.DateTime" />  instances to determine the serialization format: UTC, local, or unspecified.</summary>
    </member>
    <member name="F:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode.Local">
      <summary>The serializer formats all <see cref="T:System.DateTime" /> objects as local time. This is for version 1.0 and 1.1 compatibility.</summary>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.RootedPathValidator">
      <summary>Validates the rules governing the use of the tempFilesLocation configuration switch. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.RootedPathValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.RootedPathValidator.CanValidate(System.Type)">
      <summary>Determines whether the type of the object can be validated.</summary>
      <returns>true if the <paramref name="type" /> parameter matches a valid XMLSerializer object; otherwise, false.</returns>
      <param name="type">The type of the object.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.RootedPathValidator.Validate(System.Object)">
      <summary>Determines whether the value of an object is valid.</summary>
      <param name="value">The value of an object.</param>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement">
      <summary>Handles the configuration for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> class and specifies the name and type of the extension.</summary>
      <param name="name">The name of the new extension. The name must be unique.</param>
      <param name="type">The type of the new extension, specified as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> class using the specified name and type.</summary>
      <param name="name">The name of the new extension. The name must be unique.</param>
      <param name="type">The <see cref="T:System.Type" /> of the new extension.</param>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.Name">
      <summary>Gets or sets the name of the extension.</summary>
      <returns>The name of the extension.</returns>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.Type">
      <summary>Gets or sets the type of the extension.</summary>
      <returns>A type of the extension.</returns>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection">
      <summary>Handles the XML elements used to configure the operation of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Add(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
      <summary>Adds an item to the end of the collection.</summary>
      <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> to add to the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.IndexOf(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
      <summary>Returns the zero-based index of the first element in the collection with the specified value.</summary>
      <returns>The index of the found element.</returns>
      <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> to find.</param>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Item(System.Int32)">
      <summary>Gets or sets the object that represents the XML element at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> at the specified index.</returns>
      <param name="index">The zero-based index of the XML element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is equal to or greater than Count.</exception>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Item(System.String)">
      <summary>Gets or sets the item with the specified name.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> with the specified name.</returns>
      <param name="name">The name of the item to get or set.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Remove(System.String)">
      <summary>Removes the item with the specified name from the collection.</summary>
      <param name="name">The name of the item to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.Remove(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
      <summary>Removes the first occurrence of a specific item from the collection.</summary>
      <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" /> to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index from the collection.</summary>
      <param name="index">The index of the object to remove.</param>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection">
      <summary>Handles the configuration for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection" /> class.</summary>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection.SchemaImporterExtensions">
      <summary>Gets the object that represents the collection of extensions.</summary>
      <returns>A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" /> that contains the objects that represent configuration elements.</returns>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.SerializationSectionGroup">
      <summary>Handles the XML elements used to configure XML serialization.</summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.SerializationSectionGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SerializationSectionGroup" /> class.</summary>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.DateTimeSerialization">
      <summary>Gets the object that represents the <see cref="T:System.DateTime" /> serialization configuration element.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection" /> object that represents the configuration element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.SchemaImporterExtensions">
      <summary>Gets the object that represents the section that contains configuration elements for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection" /> that represents the schemaImporterExtenstion element in the configuration file.</returns>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.SerializationSectionGroup.XmlSerializer">
      <summary>Gets the object that represents the configuration group for the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.Configuration.XmlSerializerSection" /> that represents the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</returns>
    </member>
    <member name="T:System.Xml.Serialization.Configuration.XmlSerializerSection">
      <summary>Handles the XML elements used to configure XML serialization. </summary>
    </member>
    <member name="M:System.Xml.Serialization.Configuration.XmlSerializerSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.XmlSerializerSection" /> class. </summary>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.XmlSerializerSection.CheckDeserializeAdvances">
      <summary>Gets or sets a value that determines whether an additional check of progress of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is done.</summary>
      <returns>true if the check is made; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Xml.Serialization.Configuration.XmlSerializerSection.TempFilesLocation"></member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>Provides an accessor to the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>Returns a new <see cref="T:System.Xml.XPath.XPathNavigator" /> object. </summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>Specifies the sort order for uppercase and lowercase letters.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>Ignore the case.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>Uppercase letters are sorted before lowercase letters.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>Lowercase letters are sorted before uppercase letters.</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>Specifies the data type used to determine sort order.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>Values are sorted alphabetically.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>Values are sorted numerically.</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>Specifies the sort order.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>Nodes are sorted in ascending order. For example, if the numbers 1,2,3, and 4 are sorted in ascending order, they appear as 1,2,3,4.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>Nodes are sorted in descending order. For example, if the numbers 1,2,3, and 4 are sorted in descending order, they appear as, 4,3,2,1. </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathDocument">
      <summary>Provides a fast, read-only, in-memory representation of an XML document by using the XPath data model.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data in the specified <see cref="T:System.IO.Stream" /> object.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object that contains the XML data.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.IO.Stream" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data that is contained in the specified <see cref="T:System.IO.TextReader" /> object.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> object that contains the XML data.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.IO.TextReader" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data in the specified file.</summary>
      <param name="uri">The path of the file that contains the XML data.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The file path parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data in the file specified with the white space handling specified.</summary>
      <param name="uri">The path of the file that contains the XML data.</param>
      <param name="space">An <see cref="T:System.Xml.XmlSpace" /> object.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The file path parameter or <see cref="T:System.Xml.XmlSpace" /> object parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data that is contained in the specified <see cref="T:System.Xml.XmlReader" /> object.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that contains the XML data. </param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object passed as a parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathDocument" /> class from the XML data that is contained in the specified <see cref="T:System.Xml.XmlReader" /> object with the specified white space handling.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that contains the XML data.</param>
      <param name="space">An <see cref="T:System.Xml.XmlSpace" /> object.</param>
      <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data. The <see cref="T:System.Xml.XPath.XPathDocument" /> remains empty. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter or <see cref="T:System.Xml.XmlSpace" /> object parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.CreateNavigator">
      <summary>Initializes a read-only <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating through nodes in this <see cref="T:System.Xml.XPath.XPathDocument" />.</summary>
      <returns>A read-only <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathException">
      <summary>Provides the exception thrown when an error occurs while processing an XPath expression. </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException" /> class.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Uses the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects to initialize a new instance of the <see cref="T:System.Xml.XPath.XPathException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains all the properties of an <see cref="T:System.Xml.XPath.XPathException" />. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException" /> class with the specified exception message.</summary>
      <param name="message">The description of the error condition.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathException" /> class using the specified exception message and <see cref="T:System.Exception" /> object.</summary>
      <param name="message">The description of the error condition. </param>
      <param name="innerException">The <see cref="T:System.Exception" /> that threw the <see cref="T:System.Xml.XPath.XPathException" />, if any. This value can be null. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the <see cref="T:System.Xml.XPath.XPathException" /> properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the specified <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathException.Message">
      <summary>Gets the description of the error condition for this exception.</summary>
      <returns>The string description of the error condition for this exception.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>Provides a typed class that represents a compiled XPath expression.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>When overridden in a derived class, sorts the nodes selected by the XPath expression according to the specified <see cref="T:System.Collections.IComparer" /> object.</summary>
      <param name="expr">An object representing the sort key. This can be the string value of the node or an <see cref="T:System.Xml.XPath.XPathExpression" /> object with a compiled XPath expression.</param>
      <param name="comparer">An <see cref="T:System.Collections.IComparer" /> object that provides the specific data type comparisons for comparing two objects for equivalence. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XPath.XPathExpression" /> or sort key includes a prefix and either an <see cref="T:System.Xml.XmlNamespaceManager" /> is not provided, or the prefix cannot be found in the supplied <see cref="T:System.Xml.XmlNamespaceManager" />.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>When overridden in a derived class, sorts the nodes selected by the XPath expression according to the supplied parameters.</summary>
      <param name="expr">An object representing the sort key. This can be the string value of the node or an <see cref="T:System.Xml.XPath.XPathExpression" /> object with a compiled XPath expression. </param>
      <param name="order">An <see cref="T:System.Xml.XPath.XmlSortOrder" /> value indicating the sort order. </param>
      <param name="caseOrder">An <see cref="T:System.Xml.XPath.XmlCaseOrder" /> value indicating how to sort uppercase and lowercase letters.</param>
      <param name="lang">The language to use for comparison. Uses the <see cref="T:System.Globalization.CultureInfo" /> class that can be passed to the <see cref="Overload:System.String.Compare" /> method for the language types, for example, "us-en" for U.S. English. If an empty string is specified, the system environment is used to determine the <see cref="T:System.Globalization.CultureInfo" />. </param>
      <param name="dataType">An <see cref="T:System.Xml.XPath.XmlDataType" /> value indicating the sort order for the data type. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XPath.XPathExpression" /> or sort key includes a prefix and either an <see cref="T:System.Xml.XmlNamespaceManager" /> is not provided, or the prefix cannot be found in the supplied <see cref="T:System.Xml.XmlNamespaceManager" />. </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>When overridden in a derived class, returns a clone of this <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
      <returns>A new <see cref="T:System.Xml.XPath.XPathExpression" /> object.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary>Compiles the XPath expression specified and returns an <see cref="T:System.Xml.XPath.XPathExpression" /> object representing the XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathExpression" /> object.</returns>
      <param name="xpath">An XPath expression.</param>
      <exception cref="T:System.ArgumentException">The XPath expression parameter is not a valid XPath expression.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Compiles the specified XPath expression, with the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified for namespace resolution, and returns an <see cref="T:System.Xml.XPath.XPathExpression" /> object that represents the XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathExpression" /> object.</returns>
      <param name="xpath">An XPath expression.</param>
      <param name="nsResolver">An object that implements the <see cref="T:System.Xml.IXmlNamespaceResolver" /> interface for namespace resolution.</param>
      <exception cref="T:System.ArgumentException">The XPath expression parameter is not a valid XPath expression.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>When overridden in a derived class, gets a string representation of the <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
      <returns>A string representation of the <see cref="T:System.Xml.XPath.XPathExpression" />.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>When overridden in a derived class, gets the result type of the XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathResultType" /> value representing the result type of the XPath expression.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary>When overridden in a derived class, specifies the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object to use for namespace resolution.</summary>
      <param name="nsResolver">An object that implements the <see cref="T:System.Xml.IXmlNamespaceResolver" /> interface to use for namespace resolution.</param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object parameter is not derived from <see cref="T:System.Xml.IXmlNamespaceResolver" />. </exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>When overridden in a derived class, specifies the <see cref="T:System.Xml.XmlNamespaceManager" /> object to use for namespace resolution.</summary>
      <param name="nsManager">An <see cref="T:System.Xml.XmlNamespaceManager" /> object to use for namespace resolution. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The <see cref="T:System.Xml.XmlNamespaceManager" /> object parameter is not derived from the <see cref="T:System.Xml.XmlNamespaceManager" /> class. </exception>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary>Represents an item in the XQuery 1.0 and XPath 2.0 Data Model.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathItem" /> class.</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary>When overridden in a derived class, gets a value indicating whether the item represents an XPath node or an atomic value.</summary>
      <returns>true if the item represents an XPath node; false if the item represents an atomic value.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary>When overridden in a derived class, gets the current item as a boxed object of the most appropriate .NET Framework version 2.0 type according to its schema type.</summary>
      <returns>The current item as a boxed object of the most appropriate .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary>When overridden in a derived class, gets the string value of the item.</summary>
      <returns>The string value of the item.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary>Returns the item's value as the specified type.</summary>
      <returns>The value of the item as the type requested.</returns>
      <param name="returnType">The type to return the item value as.</param>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>When overridden in a derived class, returns the item's value as the type specified using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>The value of the item as the type requested.</returns>
      <param name="returnType">The type to return the item's value as.</param>
      <param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes.</param>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.Boolean" />.</summary>
      <returns>The item's value as a <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Boolean" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.DateTime" />.</summary>
      <returns>The item's value as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.DateTime" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary>When overridden in a derived class, gets the item's value as a <see cref="T:System.Double" />.</summary>
      <returns>The item's value as a <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Double" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary>When overridden in a derived class, gets the item's value as an <see cref="T:System.Int32" />.</summary>
      <returns>The item's value as an <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Int32" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary>When overridden in a derived class, gets the item's value as an <see cref="T:System.Int64" />.</summary>
      <returns>The item's value as an <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.FormatException">The item's value is not in the correct format for the <see cref="T:System.Int64" /> type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64" /> is not valid.</exception>
      <exception cref="T:System.OverflowException">The attempted cast resulted in an overflow.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary>When overridden in a derived class, gets the .NET Framework version 2.0 type of the item.</summary>
      <returns>The .NET Framework type of the item. The default value is <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.Schema.XmlSchemaType" /> for the item.</summary>
      <returns>The <see cref="T:System.Xml.Schema.XmlSchemaType" /> for the item.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>Defines the namespace scope.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>Returns all namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>Returns all namespaces defined in the scope of the current node, excluding the xmlns:xml namespace. The xmlns:xml namespace is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>Returns all namespaces that are defined locally at the current node. </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>Provides a cursor model for navigating and editing XML data.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create one or more new child nodes at the end of the list of child nodes of the current node. </summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create new child nodes at the end of the list of child nodes of the current node.</returns>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary>Creates a new child node at the end of the list of child nodes of the current node using the XML data string specified.</summary>
      <param name="newChild">The XML data string for the new child node.</param>
      <exception cref="T:System.ArgumentNullException">The XML data string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML data string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary>Creates a new child node at the end of the list of child nodes of the current node using the XML contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newChild">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new child node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary>Creates a new child node at the end of the list of child nodes of the current node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
      <param name="newChild">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new child node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary>Creates a new child element node at the end of the list of child nodes of the current node using the namespace prefix, local name and namespace URI specified with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new child element node (if any).</param>
      <param name="localName">The local name of the new child element node (if any).</param>
      <param name="namespaceURI">The namespace URI of the new child element node (if any). <see cref="F:System.String.Empty" /> and null are equivalent.</param>
      <param name="value">The value of the new child element node. If <see cref="F:System.String.Empty" /> or null are passed, an empty element is created.</param>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on is not the root node or an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>When overridden in a derived class, gets the base URI for the current node.</summary>
      <returns>The location from which the node was loaded, or <see cref="F:System.String.Empty" /> if there is no value.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XPath.XPathNavigator" /> can edit the underlying XML data.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> can edit the underlying XML data; otherwise false.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>Verifies that the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> conforms to the XML Schema definition language (XSD) schema provided.</summary>
      <returns>true if no schema validation errors occurred; otherwise, false.</returns>
      <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet" /> containing the schemas used to validate the XML data contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
      <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> that receives information about schema validation warnings and errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation error occurred, and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> was specified to handle validation errors.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on a node that is not an element, attribute, or the root node or there is not type information to perform validation.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" /> method was called with an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> parameter when the <see cref="T:System.Xml.XPath.XPathNavigator" /> was not positioned on the root node of the XML data.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>When overridden in a derived class, creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned at the same node as this <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>A new <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned at the same node as this <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>Compares the position of the current <see cref="T:System.Xml.XPath.XPathNavigator" /> with the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeOrder" /> value representing the comparative position of the two <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</returns>
      <param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare against.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>Compiles a string representing an XPath expression and returns an <see cref="T:System.Xml.XPath.XPathExpression" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathExpression" /> object representing the XPath expression.</returns>
      <param name="xpath">A string representing an XPath expression.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="xpath" /> parameter contains an XPath expression that is not valid.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary>Creates an attribute node on the current element node using the namespace prefix, local name and namespace URI specified with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new attribute node (if any).</param>
      <param name="localName">The local name of the new attribute node which cannot <see cref="F:System.String.Empty" /> or null.</param>
      <param name="namespaceURI">The namespace URI for the new attribute node (if any).</param>
      <param name="value">The value of the new attribute node. If <see cref="F:System.String.Empty" /> or null are passed, an empty attribute node is created.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create new attributes on the current element.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create new attributes on the current element.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary>Returns a copy of the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> copy of this <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary>Deletes a range of sibling nodes from the current node to the node specified.</summary>
      <param name="lastSiblingToDelete">An <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the last sibling node in the range to delete.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> specified is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.InvalidOperationException">The last node to delete specified is not a valid sibling node of the current node.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary>Deletes the current node and its child nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on a node that cannot be deleted such as the root node or a namespace node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>Evaluates the specified XPath expression and returns the typed result.</summary>
      <returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
      <param name="xpath">A string representing an XPath expression that can be evaluated.</param>
      <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Evaluates the specified XPath expression and returns the typed result, using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes in the XPath expression.</summary>
      <returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
      <param name="xpath">A string representing an XPath expression that can be evaluated.</param>
      <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes in the XPath expression.</param>
      <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>Evaluates the <see cref="T:System.Xml.XPath.XPathExpression" /> and returns the typed result.</summary>
      <returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
      <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> that can be evaluated.</param>
      <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>Uses the supplied context to evaluate the <see cref="T:System.Xml.XPath.XPathExpression" />, and returns the typed result.</summary>
      <returns>The result of the expression (Boolean, number, string, or node set). This maps to <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, or <see cref="T:System.Xml.XPath.XPathNodeIterator" /> objects respectively.</returns>
      <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> that can be evaluated.</param>
      <param name="context">An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set that the evaluation is to be performed on.</param>
      <exception cref="T:System.ArgumentException">The return type of the XPath expression is a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of the specified attribute; <see cref="F:System.String.Empty" /> if a matching attribute is not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</returns>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>Returns the value of the namespace node corresponding to the specified local name.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of the namespace node; <see cref="F:System.String.Empty" /> if a matching namespace node is not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</returns>
      <param name="name">The local name of the namespace node.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Returns the in-scope namespaces of the current node.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> collection of namespace names keyed by prefix.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value specifying the namespaces to return.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>Gets a value indicating whether the current node has any attributes.</summary>
      <returns>Returns true if the current node has attributes; returns false if the current node has no attributes, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>Gets a value indicating whether the current node has any child nodes.</summary>
      <returns>Returns true if the current node has any child nodes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary>Gets or sets the markup representing the child nodes of the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the markup of the child nodes of the current node.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> property cannot be set.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create a new sibling node after the currently selected node.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create a new sibling node after the currently selected node.</returns>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary>Creates a new sibling node after the currently selected node using the XML string specified.</summary>
      <param name="newSibling">The XML data string for the new sibling node.</param>
      <exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary>Creates a new sibling node after the currently selected node using the XML contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newSibling">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new sibling node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary>Creates a new sibling node after the currently selected node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
      <param name="newSibling">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new sibling node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create a new sibling node before the currently selected node.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create a new sibling node before the currently selected node.</returns>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary>Creates a new sibling node before the currently selected node using the XML string specified.</summary>
      <param name="newSibling">The XML data string for the new sibling node.</param>
      <exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary>Creates a new sibling node before the currently selected node using the XML contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newSibling">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new sibling node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary>Creates a new sibling node before the currently selected node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> specified.</summary>
      <param name="newSibling">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new sibling node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary>Creates a new sibling element after the current node using the namespace prefix, local name and namespace URI specified, with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new child element (if any).</param>
      <param name="localName">The local name of the new child element (if any).</param>
      <param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty" /> and null are equivalent.</param>
      <param name="value">The value of the new child element. If <see cref="F:System.String.Empty" /> or null are passed, an empty element is created.</param>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted after the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary>Creates a new sibling element before the current node using the namespace prefix, local name, and namespace URI specified, with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new child element (if any).</param>
      <param name="localName">The local name of the new child element (if any).</param>
      <param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty" /> and null are equivalent.</param>
      <param name="value">The value of the new child element. If <see cref="F:System.String.Empty" /> or null are passed, an empty element is created.</param>
      <exception cref="T:System.InvalidOperationException">The position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> does not allow a new sibling node to be inserted before the current node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>Determines whether the specified <see cref="T:System.Xml.XPath.XPathNavigator" /> is a descendant of the current <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>Returns true if the specified <see cref="T:System.Xml.XPath.XPathNavigator" /> is a descendant of the current <see cref="T:System.Xml.XPath.XPathNavigator" />; otherwise, false.</returns>
      <param name="nav">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>When overridden in a derived class, gets a value indicating whether the current node is an empty element without an end element tag.</summary>
      <returns>Returns true if the current node is an empty element; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary>Gets a value indicating if the current node represents an XPath node.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>When overridden in a derived class, determines whether the current <see cref="T:System.Xml.XPath.XPathNavigator" /> is at the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>Returns true if the two <see cref="T:System.Xml.XPath.XPathNavigator" /> objects have the same position; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator" /> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>When overridden in a derived class, gets the <see cref="P:System.Xml.XPath.XPathNavigator.Name" /> of the current node without any namespace prefix.</summary>
      <returns>A <see cref="T:System.String" /> that contains the local name of the current node, or <see cref="F:System.String.Empty" /> if the current node does not have a name (for example, text or comment nodes).</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary>Gets the namespace URI for the specified prefix.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace URI assigned to the namespace prefix specified; null if no namespace URI is assigned to the prefix specified. The <see cref="T:System.String" /> returned is atomized.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass <see cref="F:System.String.Empty" />.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary>Gets the prefix declared for the specified namespace URI.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace prefix assigned to the namespace URI specified; otherwise, <see cref="F:System.String.Empty" /> if no prefix is assigned to the namespace URI specified. The <see cref="T:System.String" /> returned is atomized.</returns>
      <param name="namespaceURI">The namespace URI to resolve for the prefix.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>Determines whether the current node matches the specified XPath expression.</summary>
      <returns>Returns true if the current node matches the specified XPath expression; otherwise, false.</returns>
      <param name="xpath">The XPath expression.</param>
      <exception cref="T:System.ArgumentException">The XPath expression cannot be evaluated.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>Determines whether the current node matches the specified <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
      <returns>Returns true if the current node matches the <see cref="T:System.Xml.XPath.XPathExpression" />; otherwise, false.</returns>
      <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath expression.</param>
      <exception cref="T:System.ArgumentException">The XPath expression cannot be evaluated.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator" />; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the node that you want to move to. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the attribute with the matching local name and namespace URI.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the attribute; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute; null for an empty namespace.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the child node with the local name and namespace URI specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the child node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="localName">The local name of the child node to move to.</param>
      <param name="namespaceURI">The namespace URI of the child node to move to.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the child node of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the child node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the child node to move to.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first sibling node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first sibling node of the current node; false if there is no first sibling, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If the <see cref="T:System.Xml.XPath.XPathNavigator" /> is already positioned on the first sibling, <see cref="T:System.Xml.XPath.XPathNavigator" /> will return true and will not move its position.If <see cref="T:System.Xml.XPath.XPathNavigator.MoveToFirst" /> returns false because there is no first sibling, or if <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first attribute of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first attribute of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first child node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first child node of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to first namespace node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the first namespace node that matches the <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the first namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the element with the local name and namespace URI specified in document order.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise false.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the element with the local name and namespace URI specified, to the boundary specified, in document order.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise false.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <param name="end">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the element boundary which the current <see cref="T:System.Xml.XPath.XPathNavigator" /> will not move past while searching for the following element.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the following element of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified in document order.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise false.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the element. The <see cref="T:System.Xml.XPath.XPathNodeType" /> cannot be <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> or <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the following element of the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified, to the boundary specified, in document order.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> moved successfully; otherwise false.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the element. The <see cref="T:System.Xml.XPath.XPathNodeType" /> cannot be <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> or <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />.</param>
      <param name="end">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the element boundary which the current <see cref="T:System.Xml.XPath.XPathNavigator" /> will not move past while searching for the following element.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>When overridden in a derived class, moves to the node that has an attribute of type ID whose value matches the specified <see cref="T:System.String" />.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving; otherwise, false. If false, the position of the navigator is unchanged.</returns>
      <param name="id">A <see cref="T:System.String" /> representing the ID value of the node to which you want to move.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the namespace node with the specified namespace prefix.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the specified namespace; false if a matching namespace node was not found, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="name">The namespace prefix of the namespace node.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node of the current node.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; otherwise, false if there are no more siblings or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node with the local name and namespace URI specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; false if there are no more siblings, or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="localName">The local name of the next sibling node to move to.</param>
      <param name="namespaceURI">The namespace URI of the next sibling node to move to.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next sibling node of the current node that matches the <see cref="T:System.Xml.XPath.XPathNodeType" /> specified.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next sibling node; otherwise, false if there are no more siblings or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the sibling node to move to.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next attribute.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next attribute; false if there are no more attributes. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next namespace node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next namespace node matching the <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> specified.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the next namespace node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
      <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the parent node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the parent node of the current node; otherwise, false. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the previous sibling node of the current node.</summary>
      <returns>Returns true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is successful moving to the previous sibling node; otherwise, false if there is no previous sibling node or if the <see cref="T:System.Xml.XPath.XPathNavigator" /> is currently positioned on an attribute node. If false, the position of the <see cref="T:System.Xml.XPath.XPathNavigator" /> is unchanged.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the root node that the current node belongs to.</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the qualified <see cref="P:System.Xml.XPath.XPathNavigator.Name" /> of the current node, or <see cref="F:System.String.Empty" /> if the current node does not have a name (for example, text or comment nodes).</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>When overridden in a derived class, gets the namespace URI of the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace URI of the current node, or <see cref="F:System.String.Empty" /> if the current node has no namespace URI.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> of the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNameTable" /> object enabling you to get the atomized version of a <see cref="T:System.String" /> within the XML document.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary>Gets an <see cref="T:System.Collections.IEqualityComparer" /> used for equality comparison of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</summary>
      <returns>An <see cref="T:System.Collections.IEqualityComparer" /> used for equality comparison of <see cref="T:System.Xml.XPath.XPathNavigator" /> objects.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XPath.XPathNodeType" /> of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XPath.XPathNodeType" /> values representing the current node.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary>Gets or sets the markup representing the opening and closing tags of the current node and its child nodes.</summary>
      <returns>A <see cref="T:System.String" /> that contains the markup representing the opening and closing tags of the current node and its child nodes.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace prefix associated with the current node.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary>Returns an <see cref="T:System.Xml.XmlWriter" /> object used to create a new child node at the beginning of the list of child nodes of the current node.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to create a new child node at the beginning of the list of child nodes of the current node.</returns>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the XML string specified.</summary>
      <param name="newChild">The XML data string for the new child node.</param>
      <exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the XML contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newChild">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new child node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary>Creates a new child node at the beginning of the list of child nodes of the current node using the nodes in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
      <param name="newChild">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the node to add as the new child node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary>Creates a new child element at the beginning of the list of child nodes of the current node using the namespace prefix, local name, and namespace URI specified with the value specified.</summary>
      <param name="prefix">The namespace prefix of the new child element (if any).</param>
      <param name="localName">The local name of the new child element (if any).</param>
      <param name="namespaceURI">The namespace URI of the new child element (if any). <see cref="F:System.String.Empty" /> and null are equivalent.</param>
      <param name="value">The value of the new child element. If <see cref="F:System.String.Empty" /> or null are passed, an empty element is created.</param>
      <exception cref="T:System.InvalidOperationException">The current node the <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on does not allow a new child node to be prepended.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary>Returns an <see cref="T:System.Xml.XmlReader" /> object that contains the current node and its child nodes.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object that contains the current node and its child nodes.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element node or the root node.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary>Replaces a range of sibling nodes from the current node to the node specified.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object used to specify the replacement range.</returns>
      <param name="lastSiblingToReplace">An <see cref="T:System.Xml.XPath.XPathNavigator" /> positioned on the last sibling node in the range to replace.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> specified is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.InvalidOperationException">The last node to replace specified is not a valid sibling node of the current node.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary>Replaces the current node with the content of the string specified.</summary>
      <param name="newNode">The XML data string for the new node.</param>
      <exception cref="T:System.ArgumentNullException">The XML string parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML string parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary>Replaces the current node with the contents of the <see cref="T:System.Xml.XmlReader" /> object specified.</summary>
      <param name="newNode">An <see cref="T:System.Xml.XmlReader" /> object positioned on the XML data for the new node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlReader" /> object is in an error state or closed.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XmlReader" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XmlReader" /> object parameter is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary>Replaces the current node with the contents of the <see cref="T:System.Xml.XPath.XPathNavigator" /> object specified.</summary>
      <param name="newNode">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the new node.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element, text, processing instruction, or comment node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
      <exception cref="T:System.Xml.XmlException">The XML contents of the <see cref="T:System.Xml.XPath.XPathNavigator" /> object parameter is not well-formed.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary>Gets the schema information that has been assigned to the current node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object that contains the schema information for the current node.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>Selects a node set, using the specified XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected node set.</returns>
      <param name="xpath">A <see cref="T:System.String" /> representing an XPath expression.</param>
      <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Selects a node set using the specified XPath expression with the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set.</returns>
      <param name="xpath">A <see cref="T:System.String" /> representing an XPath expression.</param>
      <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes.</param>
      <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>Selects a node set using the specified <see cref="T:System.Xml.XPath.XPathExpression" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that points to the selected node set.</returns>
      <param name="expr">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath query.</param>
      <exception cref="T:System.ArgumentException">The XPath expression contains an error or its return type is not a node set.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>Selects all the ancestor nodes of the current node that have the specified local name and namespace URI.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes. The returned nodes are in reverse document order.</returns>
      <param name="name">The local name of the ancestor nodes.</param>
      <param name="namespaceURI">The namespace URI of the ancestor nodes.</param>
      <param name="matchSelf">To include the context node in the selection, true; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>Selects all the ancestor nodes of the current node that have a matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes. The returned nodes are in reverse document order.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the ancestor nodes.</param>
      <param name="matchSelf">To include the context node in the selection, true; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>Selects all the child nodes of the current node that have the local name and namespace URI specified.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
      <param name="name">The local name of the child nodes. </param>
      <param name="namespaceURI">The namespace URI of the child nodes. </param>
      <exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>Selects all the child nodes of the current node that have the matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the child nodes.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>Selects all the descendant nodes of the current node with the local name and namespace URI specified.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
      <param name="name">The local name of the descendant nodes. </param>
      <param name="namespaceURI">The namespace URI of the descendant nodes. </param>
      <param name="matchSelf">true to include the context node in the selection; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">null cannot be passed as a parameter.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>Selects all the descendant nodes of the current node that have a matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> that contains the selected nodes.</returns>
      <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType" /> of the descendant nodes.</param>
      <param name="matchSelf">true to include the context node in the selection; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified XPath query.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise, null if there are no query results.</returns>
      <param name="xpath">A <see cref="T:System.String" /> representing an XPath expression.</param>
      <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> object using the specified XPath query with the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise null if there are no query results.</returns>
      <param name="xpath">A <see cref="T:System.String" /> representing an XPath expression.</param>
      <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes in the XPath query.</param>
      <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary>Selects a single node in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <see cref="T:System.Xml.XPath.XPathExpression" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the first matching node for the XPath query specified; otherwise null if there are no query results.</returns>
      <param name="expression">An <see cref="T:System.Xml.XPath.XPathExpression" /> object containing the compiled XPath query.</param>
      <exception cref="T:System.ArgumentException">An error was encountered in the XPath query or the return type of the XPath expression is not a node.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath query is not valid.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary>Sets the typed value of the current node.</summary>
      <param name="typedValue">The new typed value of the node.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support the type of the object specified.</exception>
      <exception cref="T:System.ArgumentNullException">The value specified cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is not positioned on an element or attribute node.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary>Sets the value of the current node.</summary>
      <param name="value">The new value of the node.</param>
      <exception cref="T:System.ArgumentNullException">The value parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> is positioned on the root node, a namespace node, or the specified value is invalid.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XPath.XPathNavigator" /> does not support editing.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.Xml.XPath.XPathNavigator.Clone" />.</summary>
      <returns>An <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>Gets the text value of the current node.</summary>
      <returns>A string that contains the text value of the current node.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary>Gets the current node as a boxed object of the most appropriate .NET Framework type.</summary>
      <returns>The current node as a boxed object of the most appropriate .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary>Used by <see cref="T:System.Xml.XPath.XPathNavigator" /> implementations which provide a "virtualized" XML view over a store, to provide access to underlying objects.</summary>
      <returns>The default is null.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Gets the current node's value as the <see cref="T:System.Type" /> specified, using the <see cref="T:System.Xml.IXmlNamespaceResolver" /> object specified to resolve namespace prefixes.</summary>
      <returns>The value of the current node as the <see cref="T:System.Type" /> requested.</returns>
      <param name="returnType">The <see cref="T:System.Type" /> to return the current node's value as.</param>
      <param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver" /> object used to resolve namespace prefixes.</param>
      <exception cref="T:System.FormatException">The current node's value is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary>Gets the current node's value as a <see cref="T:System.Boolean" />.</summary>
      <returns>The current node's value as a <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Boolean" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary>Gets the current node's value as a <see cref="T:System.DateTime" />.</summary>
      <returns>The current node's value as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary>Gets the current node's value as a <see cref="T:System.Double" />.</summary>
      <returns>The current node's value as a <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary>Gets the current node's value as an <see cref="T:System.Int32" />.</summary>
      <returns>The current node's value as an <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary>Gets the current node's value as an <see cref="T:System.Int64" />.</summary>
      <returns>The current node's value as an <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64" /> is not valid.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary>Gets the .NET Framework <see cref="T:System.Type" /> of the current node.</summary>
      <returns>The .NET Framework <see cref="T:System.Type" /> of the current node. The default value is <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary>Streams the current node and its child nodes to the <see cref="T:System.Xml.XmlWriter" /> object specified.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to stream to.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>Gets the xml:lang scope for the current node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of the xml:lang scope, or <see cref="F:System.String.Empty" /> if the current node has no xml:lang scope value to return.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary>Gets the <see cref="T:System.Xml.Schema.XmlSchemaType" /> information for the current node.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> object; default is null.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>Provides an iterator over a selected set of nodes.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XPath.XPathNodeIterator" /> class.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>When overridden in a derived class, returns a clone of this <see cref="T:System.Xml.XPath.XPathNodeIterator" /> object.</summary>
      <returns>A new <see cref="T:System.Xml.XPath.XPathNodeIterator" /> object clone of this <see cref="T:System.Xml.XPath.XPathNodeIterator" /> object.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>Gets the index of the last node in the selected set of nodes.</summary>
      <returns>The int index of the last node in the selected set of nodes, or 0 if there are no selected nodes.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Xml.XPath.XPathNavigator" /> object for this <see cref="T:System.Xml.XPath.XPathNodeIterator" />, positioned on the current context node.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object positioned on the context node from which the node set was selected. The <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> method must be called to move the <see cref="T:System.Xml.XPath.XPathNodeIterator" /> to the first node in the selected set.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>When overridden in a derived class, gets the index of the current position in the selected set of nodes.</summary>
      <returns>The int index of the current position.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object to iterate through the selected node set.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object to iterate through the selected node set.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>When overridden in a derived class, moves the <see cref="T:System.Xml.XPath.XPathNavigator" /> object returned by the <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> property to the next node in the selected node set.</summary>
      <returns>true if the <see cref="T:System.Xml.XPath.XPathNavigator" /> object moved to the next node; false if there are no more selected nodes.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.Xml.XPath.XPathNodeIterator.Clone" />.</summary>
      <returns>An <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>Defines the XPath node types that can be returned from the <see cref="T:System.Xml.XPath.XPathNavigator" /> class.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>The root node of the XML document or node tree.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>An element, such as &lt;element&gt;.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>An attribute, such as id='123'.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>A namespace, such as xmlns="namespace".</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>The text content of a node. Equivalent to the Document Object Model (DOM) Text and CDATA node types. Contains at least one character.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>A node with white space characters and xml:space set to preserve.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>A node with only white space characters and no significant white space. White space characters are #x20, #x9, #xD, or #xA.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>A processing instruction, such as &lt;?pi test?&gt;. This does not include XML declarations, which are not visible to the <see cref="T:System.Xml.XPath.XPathNavigator" /> class. </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>A comment, such as &lt;!-- my comment --&gt;</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>Any of the <see cref="T:System.Xml.XPath.XPathNodeType" /> node types.</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>Specifies the return type of the XPath expression.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>A numeric value.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>A <see cref="T:System.String" /> value.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>A <see cref="T:System.Boolean" />true or false value.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>A node collection.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>A tree fragment.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>Any of the XPath node types.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>The expression does not evaluate to the correct XPath type.</summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>Provides an interface to a given function defined in the Extensible Stylesheet Language for Transformations (XSLT) style sheet during runtime execution.</summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>Gets the supplied XML Path Language (XPath) types for the function's argument list. This information can be used to discover the signature of the function which allows you to differentiate between overloaded functions.</summary>
      <returns>An array of <see cref="T:System.Xml.XPath.XPathResultType" /> representing the types for the function's argument list.</returns>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>Provides the method to invoke the function with the given arguments in the given context.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the function.</returns>
      <param name="xsltContext">The XSLT context for the function call. </param>
      <param name="args">The arguments of the function call. Each argument is an element in the array. </param>
      <param name="docContext">The context node for the function call. </param>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>Gets the maximum number of arguments for the function. This enables the user to differentiate between overloaded functions.</summary>
      <returns>The maximum number of arguments for the function.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>Gets the minimum number of arguments for the function. This enables the user to differentiate between overloaded functions.</summary>
      <returns>The minimum number of arguments for the function.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>Gets the <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type returned by the function.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type returned by the function </returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>Provides an interface to a given variable that is defined in the style sheet during runtime execution.</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>Evaluates the variable at runtime and returns an object that represents the value of the variable.</summary>
      <returns>An <see cref="T:System.Object" /> representing the value of the variable. Possible return types include number, string, Boolean, document fragment, or node set.</returns>
      <param name="xsltContext">An <see cref="T:System.Xml.Xsl.XsltContext" /> representing the execution context of the variable. </param>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>Gets a value indicating whether the variable is local.</summary>
      <returns>true if the variable is a local variable in the current context; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>Gets a value indicating whether the variable is an Extensible Stylesheet Language Transformations (XSLT) parameter. This can be a parameter to a style sheet or a template.</summary>
      <returns>true if the variable is an XSLT parameter; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>Gets the <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XML Path Language (XPath) type of the variable.</summary>
      <returns>The <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type of the variable.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary>Transforms XML data using an XSLT style sheet.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> class. </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> class with the specified debug setting. </summary>
      <param name="enableDebug">true to generate debug information; otherwise false. Setting this to true enables you to debug the style sheet with the Microsoft Visual Studio Debugger.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)">
      <summary>Compiles an XSLT style sheet to a specified type.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> object containing compiler errors and warnings that indicate the results of the compilation.</returns>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> positioned at the beginning of the style sheet to be compiled.</param>
      <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to be applied to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> will be applied.</param>
      <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> use to resolve style sheet modules referenced in xsl:import and xsl:include elements. If this is null, external resources will not be resolved.</param>
      <param name="debug">Setting this to true enables debugging the style sheet with a debugger.</param>
      <param name="typeBuilder">The <see cref="T:System.Reflection.Emit.TypeBuilder" /> used for the style sheet compilation. The provided TypeBuilder is used to generate the resulting type.</param>
      <param name="scriptAssemblyPath">The base path for the assemblies generated for msxsl:script elements. If only one script assembly is generated, this parameter specifies the path for that assembly. In case of multiple script assemblies, a distinctive suffix will be appended to the file name to ensure uniqueness of assembly names.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary>Loads a method from a style sheet compiled using the XSLTC.exe utility.</summary>
      <param name="executeMethod">A <see cref="T:System.Reflection.MethodInfo" /> object representing the compiler-generated <paramref name="execute" /> method of the compiled style sheet.</param>
      <param name="queryData">A byte array of serialized data structures in the <paramref name="staticData" /> field of the compiled style sheet as generated by the <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> method.</param>
      <param name="earlyBoundTypes">An array of types stored in the compiler-generated <paramref name="ebTypes" /> field of the compiled style sheet.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary>Loads and compiles the style sheet located at the specified URI.</summary>
      <param name="stylesheetUri">The URI of the style sheet.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheetUri" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The style sheet cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="stylesheetUri" /> value includes a filename or directory that cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="stylesheetUri" /> value cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the style sheet.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>Loads and compiles the XSLT style sheet specified by the URI. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
      <param name="stylesheetUri">The URI of the style sheet.</param>
      <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
      <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the style sheet URI and any style sheets referenced in XSLT import and include elements. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheetUri" /> or <paramref name="stylesheetResolver" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The style sheet cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="stylesheetUri" /> value includes a filename or directory that cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="stylesheetUri" /> value cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the style sheet.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary>Loads the compiled style sheet that was created using the XSLT Compiler (xsltc.exe).</summary>
      <param name="compiledStylesheet">The name of the class that contains the compiled style sheet. This is usually the name of the style sheet. Unless otherwise specified, the xsltc.exe tool uses the name of the style sheet for the class and assembly names.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary>Compiles the style sheet contained in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> containing the style sheet.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
      <param name="stylesheet">The <see cref="T:System.Xml.XmlReader" /> containing the style sheet.</param>
      <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
      <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve any style sheets referenced in XSLT import and include elements. If this is null, external resources are not resolved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>Compiles the style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the style sheet.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT import or include elements and the XSLT settings determine the permissions for the style sheet.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the style sheet.</param>
      <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is null, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
      <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve any style sheets referenced in XSLT import and include elements. If this is null, external resources are not resolved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary>Gets an <see cref="T:System.Xml.XmlWriterSettings" /> object that contains the output information derived from the xsl:output element of the style sheet.</summary>
      <returns>A read-only <see cref="T:System.Xml.XmlWriterSettings" /> object that contains the output information derived from the xsl:output element of the style sheet. This value can be null.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles">
      <summary>Gets the <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that contains the temporary files generated on disk after a successful call to the <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> method. </summary>
      <returns>The <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that contains the temporary files generated on disk. This value is null if the <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> method has not been successfully called, or if debugging has not been enabled.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to a file.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="resultsFile">The URI of the output file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The input document cannot be found.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value cannot be resolved.-or-An error occurred while processing the request</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> or <paramref name="resultsFile" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The stream to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.-or-An error occurred while processing the request</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.-or-An error occurred while processing the request</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the URI and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="inputUri">The URI of the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputtUri" /> value includes a filename or directory cannot be found.</exception>
      <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.-or-An error occurred while processing the request.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> is not a valid URI.</exception>
      <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">The <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to a stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The stream to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to a <see cref="T:System.IO.TextWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments and the XmlResolver resolves the XSLT document() function.</summary>
      <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <param name="documentResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to a stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional runtime arguments.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The stream to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.IO.TextWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be null.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is null.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>Executes the transform by using the input document that is specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments and the <see cref="T:System.Xml.XmlResolver" /> resolves the XSLT document() function.</summary>
      <param name="input">The document to transform that is specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object.</param>
      <param name="arguments">Argument list as <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</param>
      <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.If the style sheet contains an xsl:output element, you should create the <see cref="T:System.Xml.XmlWriter" /> by using the <see cref="T:System.Xml.XmlWriterSettings" /> object that is returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
      <param name="documentResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>Contains a variable number of arguments which are either XSLT parameters or extension objects.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>Implements a new instance of the <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>Adds a new object to the <see cref="T:System.Xml.Xsl.XsltArgumentList" /> and associates it with the namespace URI.</summary>
      <param name="namespaceUri">The namespace URI to associate with the object. To use the default namespace, specify an empty string. </param>
      <param name="extension">The object to add to the list. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="namespaceUri" /> is either null or http://www.w3.org/1999/XSL/Transform The <paramref name="namespaceUri" /> already has an extension object associated with it. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have sufficient permissions to call this method. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>Adds a parameter to the <see cref="T:System.Xml.Xsl.XsltArgumentList" /> and associates it with the namespace qualified name.</summary>
      <param name="name">The name to associate with the parameter. </param>
      <param name="namespaceUri">The namespace URI to associate with the parameter. To use the default namespace, specify an empty string. </param>
      <param name="parameter">The parameter value or object to add to the list. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="namespaceUri" /> is either null or http://www.w3.org/1999/XSL/Transform.The <paramref name="name" /> is not a valid name according to the W3C XML specification.The <paramref name="namespaceUri" /> already has a parameter associated with it. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>Removes all parameters and extension objects from the <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>Gets the object associated with the given namespace.</summary>
      <returns>The namespace URI object or null if one was not found.</returns>
      <param name="namespaceUri">The namespace URI of the object. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>Gets the parameter associated with the namespace qualified name.</summary>
      <returns>The parameter object or null if one was not found.</returns>
      <param name="name">The name of the parameter. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> does not check to ensure the name passed is a valid local name; however, the name cannot be null. </param>
      <param name="namespaceUri">The namespace URI associated with the parameter. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>Removes the object with the namespace URI from the <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
      <returns>The object with the namespace URI or null if one was not found.</returns>
      <param name="namespaceUri">The namespace URI associated with the object to remove. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>Removes the parameter from the <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</summary>
      <returns>The parameter object or null if one was not found.</returns>
      <param name="name">The name of the parameter to remove. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> does not check to ensure the name passed is a valid local name; however, the name cannot be null. </param>
      <param name="namespaceUri">The namespace URI of the parameter to remove. </param>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary>Occurs when a message is specified in the style sheet by the xsl:message element. </summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>The exception that is thrown by the Load method when an error is found in the XSLT style sheet.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the XsltCompileException class.</summary>
      <param name="inner">The <see cref="T:System.Exception" /> that threw the XsltCompileException. </param>
      <param name="sourceUri">The location path of the style sheet. </param>
      <param name="lineNumber">The line number indicating where the error occurred in the style sheet. </param>
      <param name="linePosition">The line position indicating where the error occurred in the style sheet. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the XsltCompileException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</summary>
      <param name="info">The SerializationInfo object containing all the properties of an XsltCompileException. </param>
      <param name="context">The StreamingContext object containing the context information. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or null if no inner exception is specified. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the XsltCompileException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The SerializationInfo object. </param>
      <param name="context">The StreamingContext object. </param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>Encapsulates the current execution context of the Extensible Stylesheet Language for Transformations (XSLT) processor allowing XML Path Language (XPath) to resolve functions, parameters, and namespaces within XPath expressions.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext" /> class.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext" /> class with the specified <see cref="T:System.Xml.NameTable" />.</summary>
      <param name="table">The <see cref="T:System.Xml.NameTable" /> to use. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based upon the order the documents were loaded by the XSLT processor (that is, the <see cref="T:System.Xml.Xsl.XslTransform" /> class).</summary>
      <returns>An integer value describing the relative order of the two base URIs: -1 if <paramref name="baseUri" /> occurs before <paramref name="nextbaseUri" />; 0 if the two base URIs are identical; and 1 if <paramref name="baseUri" /> occurs after <paramref name="nextbaseUri" />.</returns>
      <param name="baseUri">The base URI of the first document to compare. </param>
      <param name="nextbaseUri">The base URI of the second document to compare. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.</summary>
      <returns>Returns true if the white space is to be preserved or false if the white space is to be stripped.</returns>
      <param name="node">The white space node that is to be preserved or stripped in the current context. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>When overridden in a derived class, resolves a function reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> representing the function. The <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> is used at execution time to get the return value of the function.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> representing the function.</returns>
      <param name="prefix">The prefix of the function as it appears in the XPath expression. </param>
      <param name="name">The name of the function. </param>
      <param name="ArgTypes">An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods). </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>When overridden in a derived class, resolves a variable reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> representing the variable.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> representing the variable at runtime.</returns>
      <param name="prefix">The prefix of the variable as it appears in the XPath expression. </param>
      <param name="name">The name of the variable. </param>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>When overridden in a derived class, gets a value indicating whether to include white space nodes in the output.</summary>
      <returns>true to check white space nodes in the source document for inclusion in the output; false to not evaluate white space nodes. The default is true.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>The exception that is thrown when an error occurs while processing an XSLT transformation.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltException" /> class.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the XsltException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</summary>
      <param name="info">The SerializationInfo object containing all the properties of an XsltException. </param>
      <param name="context">The StreamingContext object. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltException" /> class with a specified error message. </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the XsltException class.</summary>
      <param name="message">The description of the error condition. </param>
      <param name="innerException">The <see cref="T:System.Exception" /> which threw the XsltException, if any. This value can be null. </param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the XsltException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The SerializationInfo object. </param>
      <param name="context">The StreamingContext object. </param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>Gets the line number indicating where the error occurred in the style sheet.</summary>
      <returns>The line number indicating where the error occurred in the style sheet.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>Gets the line position indicating where the error occurred in the style sheet.</summary>
      <returns>The line position indicating where the error occurred in the style sheet.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>Gets the formatted error message describing the current exception.</summary>
      <returns>The formatted error message describing the current exception.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>Gets the location path of the style sheet.</summary>
      <returns>The location path of the style sheet.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> event.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary>Gets the contents of the xsl:message element.</summary>
      <returns>The contents of the xsl:message element.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> containing the event data.</param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>Transforms XML data using an Extensible Stylesheet Language for Transformations (XSLT) style sheet.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslTransform" /> class.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>Loads the XSLT style sheet specified by a URL.</summary>
      <param name="url">The URL that specifies the XSLT style sheet to load. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded script, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>Loads the XSLT style sheet specified by a URL.</summary>
      <param name="url">The URL that specifies the XSLT style sheet to load. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> to use to load the style sheet and any style sheet(s) referenced in xsl:import and xsl:include elements.If this is null, a default <see cref="T:System.Xml.XmlUrlResolver" /> with no user credentials is used to open the style sheet. The default <see cref="T:System.Xml.XmlUrlResolver" /> is not used to resolve any external resources in the style sheet, so xsl:import and xsl:include elements are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded script, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> object that contains the XSLT style sheet. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> object that contains the XSLT style sheet. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />  method completes. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> object containing the style sheet to load. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT style sheet. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT style sheet. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
      <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT style sheet. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The loaded resource is not a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the XSLT style sheet. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object that contains the XSLT style sheet. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The style sheet contains embedded scripts, and the caller does not have UnmanagedCode permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)">
      <summary>Loads the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.XPathNavigator" />. This method allows you to limit the permissions of the style sheet by specifying evidence.</summary>
      <param name="stylesheet">An <see cref="T:System.Xml.XPath.XPathNavigator" /> object containing the style sheet to load. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any style sheets referenced in xsl:import and xsl:include elements. If this is null, external resources are not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> method completes. </param>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> set on the assembly generated for the script block in the XSLT style sheet.If this is null, script blocks are not processed, the XSLT document() function is not supported, and privileged extension objects are disallowed.The caller must have ControlEvidence permission in order to supply evidence for the script assembly. Semi-trusted callers can set this parameter to null. </param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">The current node does not conform to a valid style sheet. </exception>
      <exception cref="T:System.Security.SecurityException">The referenced style sheet requires functionality that is not allowed by the evidence provided.The caller tries to supply evidence and does not have ControlEvidence permission. </exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>Transforms the XML data in the input file and outputs the result to an output file.</summary>
      <param name="inputfile">The URL of the source document to be transformed. </param>
      <param name="outputfile">The URL of the output file. </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the input file and outputs the result to an output file.</summary>
      <param name="inputfile">The URL of the source document to be transformed. </param>
      <param name="outputfile">The URL of the output file. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> method completes. </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> containing the results of the transformation.</returns>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The stream to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation.Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The stream to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> containing the results of the transformation.</returns>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> method completes. </param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> containing the results of the transformation.</returns>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The stream to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.Stream" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The stream to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" /> and outputs the result to an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> containing the results of the transformation.</returns>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="input">An <see cref="T:System.Xml.XPath.XPathNavigator" /> containing the data to be transformed. </param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transformation. </param>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output. </param>
      <param name="resolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT document() function. If this is null, the document() function is not resolved.The <see cref="T:System.Xml.XmlResolver" /> is not cached after the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> method completes. </param>
      <exception cref="T:System.InvalidOperationException">There was an error processing the XSLT transformation. Note: This is a change in behavior from earlier versions. An <see cref="T:System.Xml.Xsl.XsltException" /> is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used to resolve external resources when the <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> method is called.</summary>
      <returns>The <see cref="T:System.Xml.XmlResolver" /> to use during transformation. If set to null, the XSLT document() function is not resolved.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary>Specifies the XSLT features to support during execution of the XSLT style sheet.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltSettings" /> class with default settings.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltSettings" /> class with the specified settings.</summary>
      <param name="enableDocumentFunction">true to enable support for the XSLT document() function; otherwise, false.</param>
      <param name="enableScript">true to enable support for embedded scripts blocks; otherwise, false.</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary>Gets an <see cref="T:System.Xml.Xsl.XsltSettings" /> object with default settings. Support for the XSLT document() function and embedded script blocks is disabled.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.XsltSettings" /> object with the <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> and <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> properties set to false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary>Gets or sets a value indicating whether to enable support for the XSLT document() function.</summary>
      <returns>true to support the XSLT document() function; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary>Gets or sets a value indicating whether to enable support for embedded script blocks.</summary>
      <returns>true to support script blocks in XSLT style sheets; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary>Gets an <see cref="T:System.Xml.Xsl.XsltSettings" /> object that enables support for the XSLT document() function and embedded script blocks.</summary>
      <returns>An <see cref="T:System.Xml.Xsl.XsltSettings" /> object with the <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> and <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> properties set to true.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\RedistList\VSList.xml ===
<?xml version="1.0" encoding="UTF-8"?>
<FileList Redist="Microsoft.VisualStudio.Primary.Interop.Assemblies.8.0" >
    <File AssemblyName="adodb" Version="7.0.3300.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGAC="true" />
    <File AssemblyName="extensibility" Version="7.0.3300.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGAC="true" />
    <File AssemblyName="microsoft.stdformat" Version="7.0.3300.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGAC="true" />
    <File AssemblyName="microsoft.mshtml" Version="7.0.3300.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGAC="true" />
    <File AssemblyName="msdatasrc" Version="7.0.3300.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGAC="true" />
    <File AssemblyName="stdole" Version="7.0.3300.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGAC="true" />
</FileList>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\RedistList\FrameworkList.xml ===
<?xml version="1.0" encoding="utf-8"?>
<FileList  Redist="Microsoft-Windows-CLRCoreComp.4.0" Name=".NET Framework 4" RuntimeVersion="4.0" ToolsVersion="4.0">
  <File AssemblyName="Accessibility" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="CustomMarshalers" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="ISymWrapper" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.Build" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.Build.Conversion.v4.0" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.Build.Engine" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.Build.Framework" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.Build.Tasks.v4.0" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.Build.Utilities.v4.0" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.CSharp" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.JScript" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.VisualBasic" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.VisualBasic.Compatibility" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.VisualBasic.Compatibility.Data" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.VisualC" Version="10.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="Microsoft.VisualC.STLCLR" Version="2.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="mscorlib" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationBuildTasks" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationCore" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework.Aero" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework.Classic" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework.Luna" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="PresentationFramework.Royale" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="ReachFramework" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="sysglobl" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Activities" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Activities.Core.Presentation" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Activities.DurableInstancing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Activities.Presentation" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.AddIn.Contract" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.AddIn" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ComponentModel.Composition" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ComponentModel.DataAnnotations" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Configuration" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Configuration.Install" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Core" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.DataSetExtensions" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.Entity.Design" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.Entity" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.Linq" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.OracleClient" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.Services.Client" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.Services.Design" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.Services" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Data.SqlXml" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Deployment" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Design" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Device" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.DirectoryServices.AccountManagement" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.DirectoryServices" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.DirectoryServices.Protocols" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Drawing.Design" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Drawing" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Dynamic" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.EnterpriseServices" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.IdentityModel" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.IdentityModel.Selectors" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.IO.Log" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Management" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Management.Instrumentation" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Messaging" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Net" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Numerics" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Printing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.DurableInstancing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.Caching" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.Remoting" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.Serialization" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Runtime.Serialization.Formatters.Soap" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Security" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel.Activation" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel.Activities" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel.Channels" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel.Discovery" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel.Routing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceModel.Web" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.ServiceProcess" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Speech" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" /> 
  <File AssemblyName="System.Transactions" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Abstractions" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.ApplicationServices" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.DataVisualization.Design" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.DataVisualization" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.DynamicData.Design" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.DynamicData" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Entity.Design" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Entity" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Extensions.Design" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Extensions" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Mobile" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.RegularExpressions" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Routing" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Web.Services" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Forms.DataVisualization.Design" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Forms.DataVisualization" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Forms" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Input.Manipulations" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Windows.Presentation" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Workflow.Activities" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Workflow.ComponentModel" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Workflow.Runtime" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.WorkflowServices" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Xaml" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Xml" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="System.Xml.Linq" Version="4.0.0.0" PublicKeyToken="b77a5c561934e089" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="UIAutomationClient" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="UIAutomationClientsideProviders" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="UIAutomationProvider" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="UIAutomationTypes" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="WindowsBase" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="WindowsFormsIntegration" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="XamlBuildTask" Version="4.0.0.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
</FileList>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\RedistList\FSharpList.xml ===
<?xml version="1.0" encoding="utf-8"?>
<FileList  Redist="FSharp.4.0" Name="F# 4.0" RuntimeVersion="4.0" ToolsVersion="4.0">
  <File AssemblyName="FSharp.Core" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="FSharp.Core" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" />
</FileList>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\RedistList\FSharpList.xml ===
<?xml version="1.0" encoding="utf-8"?>
<FileList  Redist="FSharp.4.0" Name="F# 4.0" RuntimeVersion="4.0" ToolsVersion="4.0">
  <File AssemblyName="FSharp.Core" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="true" />
  <File AssemblyName="FSharp.Core" Version="4.0.0.0" PublicKeyToken="b03f5f7f11d50a3a" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" />
</FileList>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Web.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web</name>
  </assembly>
  <members>
    <member name="T:System.Web.ApplicationShutdownReason">
      <summary>Specifies why the <see cref="T:System.AppDomain" /> class shut down.</summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.None">
      <summary>No shutdown reason was provided. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.HostingEnvironment">
      <summary>The hosting environment shut down the application domain.</summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.ChangeInGlobalAsax">
      <summary>A change was made to the Global.asax file. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.ConfigurationChange">
      <summary>A change was made to the application-level configuration file.</summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.UnloadAppDomainCalled">
      <summary>A call was made to <see cref="M:System.Web.HttpRuntime.UnloadAppDomain" />. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.ChangeInSecurityPolicyFile">
      <summary>A change was made in the code access security policy file. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.BinDirChangeOrDirectoryRename">
      <summary>A change was made to the Bin folder or to files in it. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.BrowsersDirChangeOrDirectoryRename">
      <summary>A change was made to the App_Browsers folder or to files in it. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.CodeDirChangeOrDirectoryRename">
      <summary>A change was made to the App_Code folder or to files in it. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.ResourcesDirChangeOrDirectoryRename">
      <summary>A change was made to the App_GlobalResources folder or to files in it. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.IdleTimeout">
      <summary>The maximum idle time limit was reached. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.PhysicalApplicationPathChanged">
      <summary>A change was made to the physical path of the application. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.HttpRuntimeClose">
      <summary>A call was made to <see cref="M:System.Web.HttpRuntime.Close" />. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.InitializationError">
      <summary>An <see cref="T:System.AppDomain" /> initialization error occurred. </summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.MaxRecompilationsReached">
      <summary>The maximum number of dynamic recompiles of resources was reached.</summary>
    </member>
    <member name="F:System.Web.ApplicationShutdownReason.BuildManagerChange">
      <summary>The compilation system shut the application domain. The <see cref="F:System.Web.ApplicationShutdownReason.BuildManagerChange" /> member is introduced in the .NET Framework version 3.5.  For more information, see .NET Framework Architecture.</summary>
    </member>
    <member name="T:System.Web.BeginEventHandler">
      <summary>Represents the method that handles asynchronous events such as application events. This delegate is called at the start of an asynchronous operation.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="T:System.Web.BeginEventHandler" /> operation.</returns>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      <param name="cb">The delegate to call when the asynchronous method call is complete. If <paramref name="cb" /> is null, the delegate is not called. </param>
      <param name="extraData">Any additional data needed to process the request. </param>
    </member>
    <member name="T:System.Web.DefaultHttpHandler">
      <summary>Represents the properties and methods of a default HTTP handler.</summary>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.DefaultHttpHandler" /> class.</summary>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous call to the HTTP handler.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that contains information about the status of the process.</returns>
      <param name="context">An object that provides references to intrinsic server objects that are used to service HTTP requests.</param>
      <param name="callback">The method to call when the asynchronous method call is complete. If <paramref name="callback" /> is null, the delegate is not called.</param>
      <param name="state">Any state data that is needed to process the request.</param>
      <exception cref="T:System.Web.HttpException">The preconditions for processing a request fail and either the requested file has the suffix .asp or the request was sent through POST.</exception>
    </member>
    <member name="P:System.Web.DefaultHttpHandler.Context">
      <summary>Gets the context that is associated with the current <see cref="T:System.Web.DefaultHttpHandler" /> object.</summary>
      <returns>An <see cref="T:System.Web.HttpContext" /> object that contains the current context.</returns>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Provides an end method for an asynchronous process.</summary>
      <param name="result">An object that contains information about the status of the process.</param>
    </member>
    <member name="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders">
      <summary>Gets a collection of request headers and request values to transfer along with the request.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> containing request headers and values.</returns>
    </member>
    <member name="P:System.Web.DefaultHttpHandler.IsReusable">
      <summary>Gets a Boolean value indicating that another request can use the current instance of the <see cref="T:System.Web.DefaultHttpHandler" /> class.</summary>
      <returns>true if the <see cref="T:System.Web.DefaultHttpHandler" /> is reusable; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure">
      <summary>Called when preconditions prevent the <see cref="T:System.Web.DefaultHttpHandler" /> object from processing a request.</summary>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath">
      <summary>Overrides the target URL for the current request.</summary>
      <returns>The overridden URL to use in the request; or null if an overridden URL is not provided.</returns>
    </member>
    <member name="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>Enables a <see cref="T:System.Web.DefaultHttpHandler" /> object to process of HTTP Web requests.</summary>
      <param name="context">An object that provides references to intrinsic server objects used to service HTTP requests.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> is called synchronously.</exception>
    </member>
    <member name="T:System.Web.EndEventHandler">
      <summary>Represents the method that handles asynchronous events such as application events. </summary>
      <param name="ar">The <see cref="T:System.IAsyncResult" /> that is the result of the <see cref="T:System.Web.BeginEventHandler" /> operation. </param>
    </member>
    <member name="T:System.Web.HtmlString">
      <summary>Represents an HTML-encoded string that should not be encoded again.</summary>
    </member>
    <member name="M:System.Web.HtmlString.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HtmlString" /> class.</summary>
      <param name="value">The value to HTML-encode.</param>
    </member>
    <member name="M:System.Web.HtmlString.ToHtmlString">
      <summary>Returns an HTML-encoded string.</summary>
      <returns>An HTML-encoded string.</returns>
    </member>
    <member name="M:System.Web.HtmlString.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:System.Web.HttpApplication">
      <summary>Defines the methods, properties, and events that are common to all application objects in an ASP.NET application. This class is the base class for applications that are defined by the user in the Global.asax file.</summary>
    </member>
    <member name="M:System.Web.HttpApplication.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpApplication" /> class.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.AcquireRequestState">
      <summary>Occurs when ASP.NET acquires the current state (for example, session state) that is associated with the current request.</summary>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AcquireRequestState" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AcquireRequestState" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AcquireRequestState" />.</param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AcquireRequestState" />.</param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.AcquireRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.AuthenticateRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.AcquireRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.BeginRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.BeginRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.BeginRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.BeginRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.BeginRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.BeginRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.BeginRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.BeginRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.BeginRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.EndRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.EndRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.EndRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.EndRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.EndRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.EndRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.EndRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.EndRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.EndRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.LogRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.LogRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.LogRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.LogRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.LogRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.MapRequestHandler" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostAcquireRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostAuthorizeRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostLogRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostLogRequest" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostLogRequest" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostLogRequest" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostLogRequest" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostMapRequestHandler" /> collection.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostReleaseRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostRequestHandlerExecute" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostResolveRequestCache" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the event. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PostUpdateRequestCache" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.PreRequestHandlerExecute" /> collection.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.ReleaseRequestState" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event handler to the collection of asynchronous <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event handler to the collection of asynchronous <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.ResolveRequestCache" />.</param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event handlers for the current request.</summary>
      <param name="bh">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />. </param>
      <param name="eh">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />. </param>
    </member>
    <member name="M:System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)">
      <summary>Adds the specified <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event to the collection of asynchronous <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event handlers for the current request.</summary>
      <param name="beginHandler">The <see cref="T:System.Web.BeginEventHandler" /> that starts asynchronous processing of the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />. </param>
      <param name="endHandler">The <see cref="T:System.Web.EndEventHandler" /> that ends asynchronous processing of the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />. </param>
      <param name="state">The associated state to add to the asynchronous <see cref="E:System.Web.HttpApplication.UpdateRequestCache" />.</param>
    </member>
    <member name="P:System.Web.HttpApplication.Application">
      <summary>Gets the current state of an application.</summary>
      <returns>The <see cref="T:System.Web.HttpApplicationState" /> for the current request.</returns>
    </member>
    <member name="E:System.Web.HttpApplication.AuthenticateRequest">
      <summary>Occurs when a security module has established the identity of the user.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.AuthorizeRequest">
      <summary>Occurs when a security module has verified user authorization.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.BeginRequest">
      <summary>Occurs as the first event in the HTTP pipeline chain of execution when ASP.NET responds to a request.</summary>
    </member>
    <member name="M:System.Web.HttpApplication.CompleteRequest">
      <summary>Causes ASP.NET to bypass all events and filtering in the HTTP pipeline chain of execution and directly execute the <see cref="E:System.Web.HttpApplication.EndRequest" /> event.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Context">
      <summary>Gets HTTP-specific information about the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpContext" /> for the current request.</returns>
    </member>
    <member name="M:System.Web.HttpApplication.Dispose">
      <summary>Disposes the <see cref="T:System.Web.HttpApplication" /> instance.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.Disposed">
      <summary>Occurs when the application is disposed.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.EndRequest">
      <summary>Occurs as the last event in the HTTP pipeline chain of execution when ASP.NET responds to a request.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.Error">
      <summary>Occurs when an unhandled exception is thrown.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Events">
      <summary>Gets the list of event handler delegates that process all application events.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventHandlerList" /> that contains the names of the event handler delegates.</returns>
    </member>
    <member name="M:System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)">
      <summary>Gets the name of the default output-cache provider that is configured for a Web site. </summary>
      <returns>The name of the default provider.</returns>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that provides references to intrinsic server objects that are used to service HTTP requests.</param>
      <exception cref="T:System.Configuration.Provider.ProviderException">
        <paramref name="context" /> is null or is an empty string.</exception>
    </member>
    <member name="M:System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)">
      <summary>Provides an application-wide implementation of the <see cref="P:System.Web.UI.PartialCachingAttribute.VaryByCustom" /> property.</summary>
      <returns>If the value of the <paramref name="custom" /> parameter is "browser", the browser's <see cref="P:System.Web.Configuration.HttpCapabilitiesBase.Type" />; otherwise, null.</returns>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> object that contains information about the current Web request. </param>
      <param name="custom">The custom string that specifies which cached response is used to respond to the current request. </param>
    </member>
    <member name="M:System.Web.HttpApplication.Init">
      <summary>Executes custom initialization code after all event handler modules have been added.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.LogRequest">
      <summary>Occurs just before ASP.NET performs any logging for the current request.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.MapRequestHandler">
      <summary>Occurs when the handler is selected to respond to the request.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Modules">
      <summary>Gets the collection of modules for the current application.</summary>
      <returns>An <see cref="T:System.Web.HttpModuleCollection" /> that contains the names of the modules for the application.</returns>
    </member>
    <member name="E:System.Web.HttpApplication.PostAcquireRequestState">
      <summary>Occurs when the request state (for example, session state) that is associated with the current request has been obtained.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostAuthenticateRequest">
      <summary>Occurs when a security module has established the identity of the user.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostAuthorizeRequest">
      <summary>Occurs when the user for the current request has been authorized.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostLogRequest">
      <summary>Occurs when ASP.NET has completed processing all the event handlers for the <see cref="E:System.Web.HttpApplication.LogRequest" /> event.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostMapRequestHandler">
      <summary>Occurs when ASP.NET has mapped the current request to the appropriate event handler.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostReleaseRequestState">
      <summary>Occurs when ASP.NET has completed executing all request event handlers and the request state data has been stored.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostRequestHandlerExecute">
      <summary>Occurs when the ASP.NET event handler (for example, a page or an XML Web service) finishes execution.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostResolveRequestCache">
      <summary>Occurs when ASP.NET bypasses execution of the current event handler and allows a caching module to serve a request from the cache.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PostUpdateRequestCache">
      <summary>Occurs when ASP.NET finishes updating caching modules and storing responses that are used to serve subsequent requests from the cache.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PreRequestHandlerExecute">
      <summary>Occurs just before ASP.NET starts executing an event handler (for example, a page or an XML Web service).</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PreSendRequestContent">
      <summary>Occurs just before ASP.NET sends content to the client.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.PreSendRequestHeaders">
      <summary>Occurs just before ASP.NET sends HTTP headers to the client.</summary>
    </member>
    <member name="E:System.Web.HttpApplication.ReleaseRequestState">
      <summary>Occurs after ASP.NET finishes executing all request event handlers. This event causes state modules to save the current state data.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Request">
      <summary>Gets the intrinsic request object for the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpRequest" /> object that the application is processing.</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.HttpRequest" /> object is null.</exception>
    </member>
    <member name="E:System.Web.HttpApplication.ResolveRequestCache">
      <summary>Occurs when ASP.NET finishes an authorization event to let the caching modules serve requests from the cache, bypassing execution of the event handler (for example, a page or an XML Web service).</summary>
    </member>
    <member name="P:System.Web.HttpApplication.Response">
      <summary>Gets the intrinsic response object for the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpResponse" /> object that the application is processing.</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.HttpResponse" /> object is null. </exception>
    </member>
    <member name="P:System.Web.HttpApplication.Server">
      <summary>Gets the intrinsic server object for the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpServerUtility" /> object that the application is processing.</returns>
    </member>
    <member name="P:System.Web.HttpApplication.Session">
      <summary>Gets the intrinsic session object that provides access to session data.</summary>
      <returns>The <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current session.</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Web.SessionState.HttpSessionState" /> object is null. </exception>
    </member>
    <member name="P:System.Web.HttpApplication.Site">
      <summary>Gets or sets a site interface for an <see cref="T:System.ComponentModel.IComponent" /> implementation.</summary>
      <returns>An <see cref="T:System.ComponentModel.ISite" /> object that allows a container to manage and communicate with its child components.</returns>
    </member>
    <member name="M:System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous call to the HTTP event handler.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that contains information about the status of the process.</returns>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that provides references to intrinsic server objects that are used to service HTTP requests.</param>
      <param name="cb">The <see cref="T:System.AsyncCallback" /> to call when the asynchronous method call is complete. If the <paramref name="cb" /> parameter is null, the delegate is not called.</param>
      <param name="extraData">Any extra data that is required to process the request.</param>
    </member>
    <member name="M:System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>Provides an asynchronous process End method when the process finishes.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that contains information about the status of the process. </param>
    </member>
    <member name="P:System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable">
      <summary>Gets a Boolean value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> object.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> object is reusable; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of HTTP Web requests by a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that provides references to the intrinsic server objects that are used to service HTTP requests.</param>
      <exception cref="T:System.Web.HttpException">In all cases.</exception>
    </member>
    <member name="E:System.Web.HttpApplication.UpdateRequestCache">
      <summary>Occurs when ASP.NET finishes executing an event handler in order to let caching modules store responses that will be used to serve subsequent requests from the cache.</summary>
    </member>
    <member name="P:System.Web.HttpApplication.User">
      <summary>Gets the intrinsic user object for the current request.</summary>
      <returns>The <see cref="T:System.Security.Principal.IPrincipal" /> object that represents the current authenticated or anonymous user.</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Security.Principal.IPrincipal" /> object is null. </exception>
    </member>
    <member name="T:System.Web.HttpApplicationState">
      <summary>Enables sharing of global information across multiple sessions and requests within an ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
      <summary>Adds a new object to the <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <param name="name">The name of the object to be added to the collection. </param>
      <param name="value">The value of the object. </param>
    </member>
    <member name="P:System.Web.HttpApplicationState.AllKeys">
      <summary>Gets the access keys in the <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <returns>A string array of <see cref="T:System.Web.HttpApplicationState" /> object names.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationState.Clear">
      <summary>Removes all objects from an <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
    </member>
    <member name="P:System.Web.HttpApplicationState.Contents">
      <summary>Gets a reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</summary>
      <returns>A reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</returns>
    </member>
    <member name="P:System.Web.HttpApplicationState.Count">
      <summary>Gets the number of objects in the <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <returns>The number of item objects in the collection. The default is 0.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationState.Get(System.Int32)">
      <summary>Gets an <see cref="T:System.Web.HttpApplicationState" /> object by numerical index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the application state object. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.Get(System.String)">
      <summary>Gets an <see cref="T:System.Web.HttpApplicationState" /> object by name.</summary>
      <returns>The object referenced by <paramref name="name" />.</returns>
      <param name="name">The name of the object. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
      <summary>Gets an <see cref="T:System.Web.HttpApplicationState" /> object name by index.</summary>
      <returns>The name under which the application state object was saved.</returns>
      <param name="index">The index of the application state object. </param>
    </member>
    <member name="P:System.Web.HttpApplicationState.Item(System.Int32)">
      <summary>Gets a single <see cref="T:System.Web.HttpApplicationState" /> object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The numerical index of the object in the collection. </param>
    </member>
    <member name="P:System.Web.HttpApplicationState.Item(System.String)">
      <summary>Gets the value of a single <see cref="T:System.Web.HttpApplicationState" /> object by name.</summary>
      <returns>The object referenced by <paramref name="name" />.</returns>
      <param name="name">The name of the object in the collection. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.Lock">
      <summary>Locks access to an <see cref="T:System.Web.HttpApplicationState" /> variable to facilitate access synchronization.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationState.Remove(System.String)">
      <summary>Removes the named object from an <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <param name="name">The name of the object to be removed from the collection. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.RemoveAll">
      <summary>Removes all objects from an <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
      <summary>Removes an <see cref="T:System.Web.HttpApplicationState" /> object from a collection by index.</summary>
      <param name="index">The position in the collection of the item to remove. </param>
    </member>
    <member name="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
      <summary>Updates the value of an object in an <see cref="T:System.Web.HttpApplicationState" /> collection.</summary>
      <param name="name">The name of the object to be updated. </param>
      <param name="value">The updated value of the object. </param>
    </member>
    <member name="P:System.Web.HttpApplicationState.StaticObjects">
      <summary>Gets all objects declared by an &lt;object&gt; tag where the scope is set to "Application" within the ASP.NET application.</summary>
      <returns>A collection of objects on the page.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationState.UnLock">
      <summary>Unlocks access to an <see cref="T:System.Web.HttpApplicationState" /> variable to facilitate access synchronization.</summary>
    </member>
    <member name="T:System.Web.HttpApplicationStateBase">
      <summary>Serves as the base class for classes that enable information to be shared across multiple sessions and requests within an ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Add(System.String,System.Object)">
      <summary>When overridden in a derived class, adds a new object to the collection.</summary>
      <param name="name">The name of the object to add to the collection.</param>
      <param name="value">The value of the object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.AllKeys">
      <summary>When overridden in a derived class, gets the access keys for the objects in the collection.</summary>
      <returns>An array of state object keys.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Clear">
      <summary>When overridden in a derived class, removes all objects from the collection.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.Contents">
      <summary>When overridden in a derived class, gets a reference to the <see cref="T:System.Web.HttpApplicationStateBase" /> object.</summary>
      <returns>A reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.CopyTo(System.Array,System.Int32)">
      <summary>When overridden in a derived class, copies the elements of the collection to an array, starting at the specified index in the array.</summary>
      <param name="array">The one-dimensional array that is the destination for the elements that are copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which to begin copying. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.Count">
      <summary>When overridden in a derived class, gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Get(System.Int32)">
      <summary>When overridden in a derived class, gets a state object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the application state object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Get(System.String)">
      <summary>When overridden in a derived class, gets a state object by name.</summary>
      <returns>The object referenced by <paramref name="name" />.</returns>
      <param name="name">The name of the object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.GetEnumerator">
      <summary>When overridden in a derived class, returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.GetKey(System.Int32)">
      <summary>When overridden in a derived class, gets the name of a state object by index.</summary>
      <returns>The name of the application state object.</returns>
      <param name="index">The index of the application state object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.IsSynchronized">
      <summary>When overridden in a derived class, gets a value that indicates whether access to the collection is thread-safe.</summary>
      <returns>true if access is synchronized (thread-safe); otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.Item(System.Int32)">
      <summary>When overridden in a derived class, gets a state object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the object in the collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.Item(System.String)">
      <summary>When overridden in a derived class, gets a state object by name.</summary>
      <returns>The object referenced by <paramref name="name" />.</returns>
      <param name="name">The name of the object in the collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Lock">
      <summary>When overridden in a derived class, locks access to objects in the collection in order to enable synchronized access.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Remove(System.String)">
      <summary>When overridden in a derived class, removes the named object from the collection.</summary>
      <param name="name">The name of the object to remove from the collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.RemoveAll">
      <summary>When overridden in a derived class, removes all objects from the collection.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.RemoveAt(System.Int32)">
      <summary>When overridden in a derived class, removes a state object specified by index from the collection.</summary>
      <param name="index">The position in the collection of the item to remove.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.Set(System.String,System.Object)">
      <summary>When overridden in a derived class, updates the value of an object in the collection.</summary>
      <param name="name">The name of the object to update.</param>
      <param name="value">The updated value of the object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.StaticObjects">
      <summary>When overridden in a derived class, gets all objects that are declared by an object element where the scope is set to "Application" in the ASP.NET application.</summary>
      <returns>A collection of objects in the application.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateBase.SyncRoot">
      <summary>When overridden in a derived class, gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateBase.UnLock">
      <summary>When overridden in a derived class, unlocks access to objects in the collection to enable synchronized access.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpApplicationStateWrapper">
      <summary>Encapsulates the HTTP intrinsic object that enables information to be shared across multiple requests and sessions within an ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.#ctor(System.Web.HttpApplicationState)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpApplicationStateWrapper" /> class. </summary>
      <param name="httpApplicationState">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpApplicationState" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Add(System.String,System.Object)">
      <summary>Adds an object to the collection.</summary>
      <param name="name">The name of the object to add to the collection.</param>
      <param name="value">The value of the object.</param>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.AllKeys">
      <summary>Gets the keys for the objects in the collection.</summary>
      <returns>An array of state object keys.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Clear">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Contents">
      <summary>Gets a reference to the <see cref="T:System.Web.HttpApplicationStateBase" /> object.</summary>
      <returns>A reference to the <see cref="T:System.Web.HttpApplicationState" /> object.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at the specified index in the array.</summary>
      <param name="array">The one-dimensional array that is the destination for the elements that are copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which to begin copying.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Web.HttpApplicationStateWrapper" /> object is greater than the available space from <paramref name="index" /> to the end of the destination array.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Web.HttpApplicationStateWrapper" /> object cannot be cast to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Get(System.Int32)">
      <summary>Returns a state object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the application state object to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Get(System.String)">
      <summary>Returns a state object by name.</summary>
      <returns>The object referenced by <paramref name="name" />, if found; otherwise, null.</returns>
      <param name="name">The name of the object to get.</param>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.GetKey(System.Int32)">
      <summary>Returns the name of a state object by index.</summary>
      <returns>The name of the application state object.</returns>
      <param name="index">The index of the application state object to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the data that is necessary to serialize the <see cref="T:System.Web.HttpApplicationStateWrapper" /> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information that is required to serialize the <see cref="T:System.Web.HttpApplicationStateWrapper" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream that is associated with the <see cref="T:System.Web.HttpApplicationStateWrapper" /> object.</param>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is thread-safe.</summary>
      <returns>true if access is synchronized (thread-safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Item(System.Int32)">
      <summary>Gets a state object by index.</summary>
      <returns>The object referenced by <paramref name="index" />.</returns>
      <param name="index">The index of the object in the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Item(System.String)">
      <summary>Gets a state object by name.</summary>
      <returns>The object referenced by <paramref name="name" />, if found; otherwise, null.</returns>
      <param name="name">The name of the object in the collection.</param>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.Keys">
      <summary>Gets a <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> instance that contains all the keys in the <see cref="T:System.Web.HttpApplicationStateWrapper" /> instance.</summary>
      <returns>A collection of all the keys in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Lock">
      <summary>Locks access to objects in the collection in order to enable synchronized access.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.OnDeserialization(System.Object)">
      <summary>Raises the deserialization event when deserialization is finished.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that is associated with the current <see cref="T:System.Web.HttpApplicationStateWrapper" /> instance is invalid.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Remove(System.String)">
      <summary>Removes the object specified by name from the collection.</summary>
      <param name="name">The name of the object to remove from the collection.</param>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.RemoveAll">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.RemoveAt(System.Int32)">
      <summary>Removes the object specified by index from the collection.</summary>
      <param name="index">The position in the collection of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.Set(System.String,System.Object)">
      <summary>Updates the value of an object in the collection.</summary>
      <param name="name">The name of the object to update.</param>
      <param name="value">The updated value of the object.</param>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.StaticObjects">
      <summary>Gets all objects that are declared by an object element where the scope is set to "Application" in the ASP.NET application.</summary>
      <returns>A collection of objects in the application.</returns>
    </member>
    <member name="P:System.Web.HttpApplicationStateWrapper.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Web.HttpApplicationStateWrapper.UnLock">
      <summary>Unlocks access to objects in the collection to enable synchronized access.</summary>
    </member>
    <member name="T:System.Web.HttpBrowserCapabilities">
      <summary>Enables the server to gather information on the capabilities of the browser that is running on the client.</summary>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilities.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Web.HttpBrowserCapabilities" /> class.</summary>
    </member>
    <member name="T:System.Web.HttpBrowserCapabilitiesBase">
      <summary>Serves as the base class for classes that enable the server to gather information about the capabilities of the browser that made the current request.</summary>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ActiveXControls">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is capable of supporting ActiveX controls.</summary>
      <returns>true if the browser can support ActiveX controls; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Adapters">
      <summary>When overridden in a derived class, gets the collection of available control adapters.</summary>
      <returns>The registered control adapters for the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.AddBrowser(System.String)">
      <summary>When overridden in a derived class, used internally to add an entry to the internal collection of browsers for which capabilities are recognized.</summary>
      <param name="browserName">The name of the browser to add.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.AOL">
      <summary>When overridden in a derived class, gets a value that indicates whether the client is an America Online (AOL) browser.</summary>
      <returns>true if the browser is an AOL browser; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.BackgroundSounds">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports playing background sounds by using the bgsounds HTML element.</summary>
      <returns>true if the browser supports playing background sounds; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Beta">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is a beta version.</summary>
      <returns>true if the browser is a beta version; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Browser">
      <summary>When overridden in a derived class, gets the browser string (if any) that was sent by the browser in the User-Agent request header.</summary>
      <returns>The contents of the User-Agent request header that was sent by the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Browsers">
      <summary>When overridden in a derived class, gets a collection of browsers for which capabilities are recognized.</summary>
      <returns>The browsers for which capabilities are recognized.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanCombineFormsInDeck">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports decks that contain multiple forms, such as separate cards.</summary>
      <returns>true if the browser supports decks that contain multiple forms; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanInitiateVoiceCall">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser device is capable of initiating a voice call.</summary>
      <returns>true if the browser device is capable of initiating a voice call; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderAfterInputOrSelectElement">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports page content that follows WML select or input elements.</summary>
      <returns>true if the browser supports page content that follows HTML select or input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderEmptySelects">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports empty HTML select elements.</summary>
      <returns>true if the browser supports empty HTML select elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderInputAndSelectElementsTogether">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML input and select elements together in the same card.</summary>
      <returns>true if the browser supports WML input and select elements together; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderMixedSelects">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML option elements that specify both onpick and value attributes.</summary>
      <returns>true if the browser supports WML option elements that specify both onpick and value attributes; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderOneventAndPrevElementsTogether">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML onevent and prev elements in the same card.</summary>
      <returns>true if the browser supports WML onevent and prev elements in the same WML card; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderPostBackCards">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML cards for postback.</summary>
      <returns>true if the browser supports WML cards for postback; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanRenderSetvarZeroWithMultiSelectionList">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports WML setvar elements that have a value attribute of 0.</summary>
      <returns>true if the browser supports WML setvar elements that have a value attribute of 0; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CanSendMail">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports sending e-mail messages by using the HTML mailto scheme.</summary>
      <returns>true if the browser supports sending e-mail message by using the HTML mailto scheme; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Capabilities">
      <summary>When overridden in a derived class, used internally to get the defined capabilities of the browser.</summary>
      <returns>The defined capabilities of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.CDF">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports Channel Definition Format (CDF) for webcasting.</summary>
      <returns>true if the browser supports CDF; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ClrVersion">
      <summary>When overridden in a derived class, gets the version of the .NET Framework that is installed on the client.</summary>
      <returns>The common language runtime (CLR) version.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.CompareFilters(System.String,System.String)">
      <summary>When overridden in a derived class, used internally to compare filters.</summary>
      <returns>1 if <paramref name="filter1" /> is a parent of <paramref name="filter2" />; -1 if <paramref name="filter2" /> is a parent of <paramref name="filter1" />; or 0 if there is no parent-child relationship between <paramref name="filter1" /> and <paramref name="filter2" />.</returns>
      <param name="filter1">The first filter to compare.</param>
      <param name="filter2">The second filter to compare.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Cookies">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is capable of supporting cookies.</summary>
      <returns>true if the browser can support cookies; otherwise, false.NoteThis property does not indicate whether cookies are currently enabled in the browser, only whether the browser can support cookies.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Crawler">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is a search-engine Web crawler.</summary>
      <returns>true if the browser is a search-engine crawler; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.CreateHtmlTextWriter(System.IO.TextWriter)">
      <summary>When overridden in a derived class, creates a new instance of the <see cref="T:System.Web.UI.HtmlTextWriter" /> object to use to render markup to the browser.</summary>
      <returns>A new instance of the object.</returns>
      <param name="w">The object to be created.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.DefaultSubmitButtonLimit">
      <summary>When overridden in a derived class, gets the maximum number of submit buttons that are allowed for a form.</summary>
      <returns>The maximum number of submit buttons that are allowed for a form.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.DisableOptimizedCacheKey">
      <summary>When overridden in a derived class, used internally to disable use of an optimized cache key.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.EcmaScriptVersion">
      <summary>When overridden in a derived class, gets the version number of ECMAScript (JavaScript) that the browser supports.</summary>
      <returns>The version number of ECMAScript (JavaScript) that the browser supports.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.EvaluateFilter(System.String)">
      <summary>When overridden in a derived class, used internally to evaluate a filter.</summary>
      <returns>true if the filter was successfully evaluated; otherwise, false.</returns>
      <param name="filterName">The filter to evaluate.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Frames">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports HTML frames.</summary>
      <returns>true if the browser supports frames; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.GatewayMajorVersion">
      <summary>When overridden in a derived class, gets the major version number of the wireless gateway that is used to access the server, if known. </summary>
      <returns>The major version number of the wireless gateway that is used to access the server, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.GatewayMinorVersion">
      <summary>When overridden in a derived class, gets the minor version number of the wireless gateway that is used to access the server, if known. </summary>
      <returns>The minor version number of the wireless gateway that is used to access the server, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.GatewayVersion">
      <summary>When overridden in a derived class, gets the version of the wireless gateway that is used to access the server, if known.</summary>
      <returns>The version number of the wireless gateway that is used to access the server, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.GetClrVersions">
      <summary>When overridden in a derived class, gets all versions of the .NET Framework common language runtime (CLR) that are installed on the client.</summary>
      <returns>An array of <see cref="T:System.Version" /> objects.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.HasBackButton">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser has a dedicated Back button.</summary>
      <returns>true if the browser has a dedicated Back button; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.HidesRightAlignedMultiselectScrollbars">
      <summary>When overridden in a derived class, gets a value that indicates whether the scrollbar of an HTML select multiple element that has an align attribute value of right is obscured upon rendering.</summary>
      <returns>true if the scrollbar of an HTML select multiple element that has an align attribute value of right is obscured upon rendering; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.HtmlTextWriter">
      <summary>When overridden in a derived class, gets or sets the fully qualified class name of the <see cref="T:System.Web.UI.HtmlTextWriter" /> to use for writing markup characters and text.</summary>
      <returns>The fully qualified class name of the <see cref="T:System.Web.UI.HtmlTextWriter" /> to use for writing markup characters and text.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Id">
      <summary>When overridden in a derived class, gets the internal identifier of the browser as specified in the browser definition file.</summary>
      <returns>The internal identifier of the browser as specified in the browser definition file.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.InputType">
      <summary>When overridden in a derived class, gets the type of input that is supported by the browser.</summary>
      <returns>The type of input supported by the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesBase.IsBrowser(System.String)">
      <summary>When overridden in a derived class, gets a value that indicates whether the client browser is the same as the specified browser.</summary>
      <returns>true if the client browser is the same as the specified browser; otherwise, false.</returns>
      <param name="browserName">The specified browser.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.IsColor">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser has a color display.</summary>
      <returns>true if the browser has a color display; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.IsMobileDevice">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser is a recognized mobile device.</summary>
      <returns>true if the browser is a recognized mobile device; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Item(System.String)">
      <summary>When overridden in a derived class, gets the value of the specified browser capability. In C#, this property is the indexer for the class.</summary>
      <returns>The browser capability with the specified key name.</returns>
      <param name="key">The name of the browser capability to retrieve.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.JavaApplets">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports Java.</summary>
      <returns>true if the browser supports Java; otherwise, false.NoteThis property does not indicate whether Java is currently enabled in the browser, only whether the browser can support Java.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.JScriptVersion">
      <summary>When overridden in a derived class, gets the JScript version that the browser supports.</summary>
      <returns>The version of JScript that the browser supports.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MajorVersion">
      <summary>When overridden in a derived class, gets the major (integer) version number of the browser.</summary>
      <returns>The major version number of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MaximumHrefLength">
      <summary>When overridden in a derived class, gets the maximum length in characters for the href attribute of an HTML a (anchor) element.</summary>
      <returns>The maximum length in characters for the href attribute of an HTML a (anchor) element.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MaximumRenderedPageSize">
      <summary>When overridden in a derived class, gets the maximum length of the page, in bytes, that the browser can display. </summary>
      <returns>The maximum length of the page, in bytes, that the browser can display.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MaximumSoftkeyLabelLength">
      <summary>When overridden in a derived class, gets the maximum length of the text that a soft-key label can display.</summary>
      <returns>The maximum length of the text that a soft-key label can display.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MinorVersion">
      <summary>When overridden in a derived class, gets the minor (decimal) version number of the browser.</summary>
      <returns>The minor version number of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MinorVersionString">
      <summary>When overridden in a derived class, gets the minor (decimal) version number of the browser as a string.</summary>
      <returns>A string that represents the minor version number of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MobileDeviceManufacturer">
      <summary>When overridden in a derived class, gets the name of the manufacturer of a mobile device, if known.</summary>
      <returns>The name of the manufacturer of a mobile device, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MobileDeviceModel">
      <summary>When overridden in a derived class, gets the model name of a mobile device, if known.</summary>
      <returns>The model name of a mobile device, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.MSDomVersion">
      <summary>When overridden in a derived class, gets the version of the Microsoft HTML (MSHTML) Document Object Model (DOM) that the browser supports.</summary>
      <returns>The MSHTML DOM version that the browser supports.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.NumberOfSoftkeys">
      <summary>When overridden in a derived class, gets the number of softkeys on a mobile device.</summary>
      <returns>The number of softkeys supported on a mobile device.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Platform">
      <summary>When overridden in a derived class, gets the name of the operating system that the client is using, if known.</summary>
      <returns>The operating system that the client is using, if known.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredImageMime">
      <summary>When overridden in a derived class, gets the MIME type of the type of image content that the browser typically prefers.</summary>
      <returns>The MIME type of the type of image content that the browser typically prefers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredRenderingMime">
      <summary>When overridden in a derived class, gets the MIME type of the type of content that the browser typically prefers.</summary>
      <returns>The MIME type of the type of content that the browser typically prefers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredRenderingType">
      <summary>When overridden in a derived class, gets the general name for the type of content that the browser prefers.</summary>
      <returns>The values "html32" or "chtml10".</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredRequestEncoding">
      <summary>When overridden in a derived class, gets the request encoding that the browser prefers.</summary>
      <returns>The request encoding that the browser prefers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.PreferredResponseEncoding">
      <summary>When overridden in a derived class, gets the response encoding that the browser prefers.</summary>
      <returns>The response encoding that the browser prefers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersBreakBeforeWmlSelectAndInput">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders a line break before WML select or input elements.</summary>
      <returns>true if the browser renders a line break before select or input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersBreaksAfterHtmlLists">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders a line break after list-item elements.</summary>
      <returns>true if the browser renders a line break after list-item elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersBreaksAfterWmlAnchor">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders a line break after a standalone WML a (anchor) element.</summary>
      <returns>true if the browser renders a line break after a standalone WML a (anchor) element; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersBreaksAfterWmlInput">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders a line break after a WML input element.</summary>
      <returns>true if the browser renders a line break after a WML input element; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersWmlDoAcceptsInline">
      <summary>When overridden in a derived class, gets a value that indicates whether the mobile-device browser renders a WML do form accept construct as an inline button instead of as a softkey.</summary>
      <returns>true if the mobile-device browser renders a WML do form-accept construct as an inline button; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RendersWmlSelectsAsMenuCards">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser renders WML select elements as menu cards, instead of as a combo box.</summary>
      <returns>true if the browser renders WML select elements as menu cards; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiredMetaTagNameValue">
      <summary>When overridden in a derived class, used internally to produce a meta-tag that is required by some browsers.</summary>
      <returns>A meta-tag that is required by some browsers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresAttributeColonSubstitution">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires colons in element attribute values to be replaced with a different character.</summary>
      <returns>true if the browser requires colons in element attribute values to be replaced with a different character; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresContentTypeMetaTag">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires an HTML meta element for which the content-type attribute is specified.</summary>
      <returns>true if the browser requires an HTML meta element for which the content-type attribute is specified; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresControlStateInSession">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires control state to be maintained in sessions.</summary>
      <returns>true if the browser requires control state to be maintained in sessions; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresDBCSCharacter">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires a double-byte character set.</summary>
      <returns>true if the browser requires a double-byte character set; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresHtmlAdaptiveErrorReporting">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires nonstandard error messages.</summary>
      <returns>true if the browser requires nonstandard error messages; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresLeadingPageBreak">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires the first element in the body of a Web page to be an HTML br element.</summary>
      <returns>true if the browser requires the first element in the body of a Web page to be an HTML br element; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresNoBreakInFormatting">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser does not support HTML br elements to format line breaks.</summary>
      <returns>true if the browser does not support HTML br elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresOutputOptimization">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires pages to contain a size-optimized form of markup language tags.</summary>
      <returns>true if the browser requires pages to contain a size-optimized form of markup language tags; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresPhoneNumbersAsPlainText">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports telephone dialing based on plain text, or whether it requires special markup.</summary>
      <returns>true if the browser supports telephone dialing based on plain text; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresSpecialViewStateEncoding">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires view-state values to be specially encoded.</summary>
      <returns>true if the browser requires view-state values to be specially encoded; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresUniqueFilePathSuffix">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires unique form-action URLs.</summary>
      <returns>true if the browser requires unique form-action URLs; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresUniqueHtmlCheckboxNames">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires unique name attribute values for multiple HTML input type="checkbox" elements.</summary>
      <returns>true if the browser requires unique name attribute values for multiple HTML input type="checkbox" elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresUniqueHtmlInputNames">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser requires unique name attribute values for multiple HTML input elements.</summary>
      <returns>true if the browser requires unique name attribute values for multiple HTML input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.RequiresUrlEncodedPostfieldValues">
      <summary>When overridden in a derived class, gets a value that indicates whether postback data that is sent by the browser will be URL-encoded.</summary>
      <returns>true if postback data that is sent by the browser will be URL-encoded; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenBitDepth">
      <summary>When overridden in a derived class, gets the depth of the display, in bits per pixel.</summary>
      <returns>The depth of the display, in bits per pixel.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenCharactersHeight">
      <summary>When overridden in a derived class, gets the approximate height of the display, in character lines.</summary>
      <returns>The approximate height of the display, in character lines.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenCharactersWidth">
      <summary>When overridden in a derived class, gets the approximate width of the display, in characters.</summary>
      <returns>The approximate width of the display, in characters.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenPixelsHeight">
      <summary>When overridden in a derived class, gets the approximate height of the display, in pixels.</summary>
      <returns>The approximate height of the display, in pixels.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.ScreenPixelsWidth">
      <summary>When overridden in a derived class, gets the approximate width of the display, in pixels.</summary>
      <returns>The approximate width of the display, in pixels.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsAccesskeyAttribute">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the accesskey attribute of HTML a (anchor) and input elements.</summary>
      <returns>true if the browser supports the accesskey attribute of HTML a (anchor) and input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsBodyColor">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the bgcolor attribute of the HTML body element.</summary>
      <returns>true if the browser supports the bgcolor attribute of the HTML body element; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsBold">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports HTML b elements to format bold text.</summary>
      <returns>true if the browser supports HTML b elements to format bold text; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsCacheControlMetaTag">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the cache-control value for the http-equiv attribute of HTML meta elements.</summary>
      <returns>true if the browser supports the cache-control value for the http-equiv attribute of HTML meta elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsCallback">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports callback scripts.</summary>
      <returns>true if the browser supports callback scripts; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsCss">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports cascading style sheets (CSS).</summary>
      <returns>true if the browser supports CSS; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsDivAlign">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the align attribute of HTML div elements.</summary>
      <returns>true if the browser supports the align attribute of HTML div elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsDivNoWrap">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the nowrap attribute of HTML div elements.</summary>
      <returns>true if the browser supports the nowrap HTML div elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsEmptyStringInCookieValue">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports empty strings in cookie values.</summary>
      <returns>true if the browser supports empty strings in cookie values; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsFontColor">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the color attribute of HTML font elements.</summary>
      <returns>true if the browser supports the color attribute of HTML font elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsFontName">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the name attribute of HTML font elements.</summary>
      <returns>true if the browser supports the name attribute of HTML font elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsFontSize">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the size attribute of HTML font elements.</summary>
      <returns>true if the browser supports the size attribute of HTML font elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsImageSubmit">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the use of a custom image in place of a standard form submit button.</summary>
      <returns>true if the browser supports the use of a custom image in place of a standard form submit button; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsIModeSymbols">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports i-mode symbols.</summary>
      <returns>true if the browser supports i-mode symbols; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsInputIStyle">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the istyle attribute of HTML input elements.</summary>
      <returns>true if the browser supports the istyle attribute of HTML input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsInputMode">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the mode attribute of HTML input elements.</summary>
      <returns>true if the browser supports the mode attribute of HTML input elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsItalic">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports HTML i elements to format italic text.</summary>
      <returns>true if the browser supports HTML i elements to format italic text; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsJPhoneMultiMediaAttributes">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports J-Phone multimedia attributes.</summary>
      <returns>true if the browser supports J-Phone multimedia attributes; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsJPhoneSymbols">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports J-Phone–specific picture symbols.</summary>
      <returns>true if the browser supports J-Phone–specific picture symbols; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsQueryStringInFormAction">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports a query string in the action attribute value of HTML form elements.</summary>
      <returns>true if the browser supports a query string in the action attribute value of HTML form elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsRedirectWithCookie">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports cookies on redirection.</summary>
      <returns>true if the browser supports cookies on redirection; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsSelectMultiple">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports the multiple attribute of HTML select elements.</summary>
      <returns>true if the browser supports the multiple attribute of HTML select elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsUncheck">
      <summary>When overridden in a derived class, gets a value that indicates whether clearing a checked HTML input type="checkbox" element is reflected in postback data.</summary>
      <returns>true if clearing a checked HTML input type="checkbox" element is reflected in postback data; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.SupportsXmlHttp">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports receiving XML over HTTP.</summary>
      <returns>true if the browser supports receiving XML over HTTP; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Tables">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports HTML table elements.</summary>
      <returns>true if the browser supports HTML table elements; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.TagWriter">
      <summary>When overridden in a derived class, used internally to get the type of the object that is used to write tags for the browser.</summary>
      <returns>The type of the object that is used to write tags for the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Type">
      <summary>When overridden in a derived class, gets the name and major (integer) version number of the browser.</summary>
      <returns>The name and major version number of the browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.UseOptimizedCacheKey">
      <summary>When overridden in a derived class, used internally to get a value that indicates whether to use an optimized cache key.</summary>
      <returns>true to use an optimized cache key; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.VBScript">
      <summary>When overridden in a derived class, gets a value that indicates whether the browser supports Visual Basic Scripting edition (VBScript).</summary>
      <returns>true if the browser supports VBScript; otherwise, false.NoteThis property does not indicate whether VBScript is currently enabled in the browser, only whether the browser can support VBScript.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Version">
      <summary>When overridden in a derived class, gets the full version number (integer and decimal) of the browser as a string.</summary>
      <returns>The full version number of the browser as a string.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.W3CDomVersion">
      <summary>When overridden in a derived class, gets the version of the World Wide Web Consortium (W3C) XML Document Object Model (DOM) that the browser supports.</summary>
      <returns>The number of the W3C XML DOM version number that the browser supports.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Win16">
      <summary>When overridden in a derived class, gets a value that indicates whether the client is a Win16-based computer.</summary>
      <returns>true if the browser is running on a Win16-based computer; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesBase.Win32">
      <summary>When overridden in a derived class, gets a value that indicates whether the client is a Win32-based computer.</summary>
      <returns>true if the client is a Win32-based computer; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpBrowserCapabilitiesWrapper">
      <summary>Encapsulates the HTTP intrinsic object that enables the server to gather information about the capabilities of the browser that has made the current request.</summary>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.#ctor(System.Web.HttpBrowserCapabilities)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpBrowserCapabilitiesWrapper" /> class. </summary>
      <param name="httpBrowserCapabilities">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpBrowserCapabilities" /> is null.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ActiveXControls">
      <summary>Gets a value that indicates whether the browser is capable of supporting ActiveX controls.</summary>
      <returns>true if the browser can support ActiveX controls; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Adapters">
      <summary>Gets the collection of available control adapters.</summary>
      <returns>The collection of registered control adapters for the browser.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.AddBrowser(System.String)">
      <summary>Used internally to add an entry to the internal collection of browsers for which capabilities are recognized.</summary>
      <param name="browserName">The name of the browser to add.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.AOL">
      <summary>Gets a value that indicates whether the client is an America Online (AOL) browser.</summary>
      <returns>true if the browser is an AOL browser; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.BackgroundSounds">
      <summary>Gets a value that indicates whether the browser supports playing background sounds by using the bgsounds HTML element.</summary>
      <returns>true if the browser supports playing background sounds; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Beta">
      <summary>Gets a value that indicates whether the browser is a beta version.</summary>
      <returns>true if the browser is a beta version; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Browser">
      <summary>Gets the browser string (if any) that was sent by the browser in the User-Agent request header.</summary>
      <returns>The contents of the User-Agent request header sent by the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Browsers">
      <summary>Gets a collection of browsers for which capabilities are recognized.</summary>
      <returns>The browsers for which capabilities are recognized.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanCombineFormsInDeck">
      <summary>Gets a value that indicates whether the browser supports decks that contain multiple forms, such as separate cards.</summary>
      <returns>true if the browser supports decks that contain multiple forms; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanInitiateVoiceCall">
      <summary>Gets a value that indicates whether the browser device is capable of initiating a voice call.</summary>
      <returns>true if the browser device is capable of initiating a voice call; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderAfterInputOrSelectElement">
      <summary>Gets a value that indicates whether the browser supports page content that follows WML select or input elements.</summary>
      <returns>true if the browser supports page content that follows HTML select or input elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderEmptySelects">
      <summary>Gets a value that indicates whether the browser supports empty HTML select elements.</summary>
      <returns>true if the browser supports empty HTML select elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderInputAndSelectElementsTogether">
      <summary>Gets a value that indicates whether the browser supports WML input and select elements together in the same card.</summary>
      <returns>true if the browser supports WML input and select elements together; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderMixedSelects">
      <summary>Gets a value that indicates whether the browser supports WML option elements that specify both onpick and value attributes.</summary>
      <returns>true if the browser supports WML option elements that specify both onpick and value attributes; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderOneventAndPrevElementsTogether">
      <summary>Gets a value that indicates whether the browser supports WML onevent and prev elements in the same card.</summary>
      <returns>true if the browser supports WML onevent and prev elements in the same card; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderPostBackCards">
      <summary>Gets a value that indicates whether the browser supports WML cards for postback.</summary>
      <returns>true if the browser supports WML cards for postback; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanRenderSetvarZeroWithMultiSelectionList">
      <summary>Gets a value that indicates whether the browser supports WML setvar elements that have a value attribute of 0.</summary>
      <returns>true if the browser supports WML setvar elements that have a value attribute of 0; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CanSendMail">
      <summary>Gets a value that indicates whether the browser supports sending e-mail messages by using the HTML mailto scheme.</summary>
      <returns>true if the browser supports sending e-mail message by using the HTML mailto scheme; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Capabilities">
      <summary>Used internally to get the defined capabilities of the browser.</summary>
      <returns>The defined capabilities of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.CDF">
      <summary>Gets a value that indicates whether the browser supports Channel Definition Format (CDF) for webcasting.</summary>
      <returns>true if the browser supports CDF; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ClrVersion">
      <summary>Gets the version of the .NET Framework that is installed on the client.</summary>
      <returns>The common language runtime (CLRS) version.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.CompareFilters(System.String,System.String)">
      <summary>Used internally to compare filters.</summary>
      <returns>1 if <paramref name="filter1" /> is a parent of <paramref name="filter2" />; -1 if <paramref name="filter2" /> is a parent of <paramref name="filter1" />; or 0 if there is no parent-child relationship between <paramref name="filter1" /> and <paramref name="filter2" />.</returns>
      <param name="filter1">The first filter to compare.</param>
      <param name="filter2">The second filter to compare.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Cookies">
      <summary>Gets a value that indicates whether the browser is capable of supporting cookies.</summary>
      <returns>true if the browser can support cookies; otherwise, false. The default is false.NoteThis property does not indicate whether cookies are currently enabled in the browser, only whether the browser can support cookies.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Crawler">
      <summary>Gets a value that indicates whether the browser is a search-engine Web crawler.</summary>
      <returns>true if the browser is a search-engine crawler; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.CreateHtmlTextWriter(System.IO.TextWriter)">
      <summary>Creates a new instance of the <see cref="T:System.Web.UI.HtmlTextWriter" /> object to use to render markup to the browser.</summary>
      <returns>A new instance of the object.</returns>
      <param name="w">The object to be created.</param>
      <exception cref="T:System.Exception">An error occurred when creating the <see cref="T:System.Web.UI.HtmlTextWriter" /> object.</exception>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.DefaultSubmitButtonLimit">
      <summary>Gets the maximum number of submit buttons that are allowed for a form.</summary>
      <returns>The maximum number of submit buttons that are allowed for a form.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.DisableOptimizedCacheKey">
      <summary>Used internally to disable use of an optimized cache key.</summary>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.EcmaScriptVersion">
      <summary>Gets the version number of ECMAScript (JavaScript) that the browser supports.</summary>
      <returns>The version number of ECMAScript (JavaScript) that the browser supports.</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.EvaluateFilter(System.String)">
      <summary>Used internally to evaluate a filter.</summary>
      <returns>true if the filter was successfully evaluated; otherwise, false.</returns>
      <param name="filterName">The filter to evaluate.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Frames">
      <summary>Gets a value that indicates whether the browser supports HTML frames.</summary>
      <returns>true if the browser supports frames; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.GatewayMajorVersion">
      <summary>Gets the major version number of the wireless gateway that is used to access the server, if known. </summary>
      <returns>The major version number of the wireless gateway that is used to access the server, if known. The default is 0.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.GatewayMinorVersion">
      <summary>Gets the minor version number of the wireless gateway that is used to access the server, if known. </summary>
      <returns>The minor version number of the wireless gateway that is used to access the server, if known. The default is 0.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.GatewayVersion">
      <summary>Gets the version of the wireless gateway that is used to access the server, if known.</summary>
      <returns>The version number of the wireless gateway that is used to access the server, if known. The default is "None".</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.GetClrVersions">
      <summary>Gets all versions of the .NET Framework common language runtime (CLR) that are installed on the client.</summary>
      <returns>An array of <see cref="T:System.Version" /> objects.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.HasBackButton">
      <summary>Gets a value that indicates whether the browser has a dedicated Back button.</summary>
      <returns>true if the browser has a dedicated Back button; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.HidesRightAlignedMultiselectScrollbars">
      <summary>Gets a value that indicates whether the scrollbar of an HTML select multiple element that has an align attribute value of right is obscured upon rendering.</summary>
      <returns>true if the scrollbar of an HTML select multiple element that has an align attribute value of right is obscured upon rendering; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.HtmlTextWriter">
      <summary>Gets or sets the fully qualified class name of the <see cref="T:System.Web.UI.HtmlTextWriter" /> to use for writing markup characters and text.</summary>
      <returns>The fully qualified class name of the <see cref="T:System.Web.UI.HtmlTextWriter" /> to use for writing markup characters and text.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Id">
      <summary>Gets the internal identifier of the browser as specified in the browser definition file.</summary>
      <returns>The internal identifier of the browser as specified in the browser definition file.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.InputType">
      <summary>Gets the type of input that is supported by the browser.</summary>
      <returns>The type of input supported by the browser. The default is "telephoneKeypad".</returns>
    </member>
    <member name="M:System.Web.HttpBrowserCapabilitiesWrapper.IsBrowser(System.String)">
      <summary>Gets a value that indicates whether the client browser is the same as the specified browser.</summary>
      <returns>true if the client browser is the same as the specified browser; otherwise, false. The default is false.</returns>
      <param name="browserName">The specified browser.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.IsColor">
      <summary>Gets a value that indicates whether the browser has a color display.</summary>
      <returns>true if the browser has a color display; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.IsMobileDevice">
      <summary>Gets a value that indicates whether the browser is a recognized mobile device.</summary>
      <returns>true if the browser is a recognized mobile device; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Item(System.String)">
      <summary>Gets the value of the specified browser capability. In C#, this property is the indexer for the class.</summary>
      <returns>The browser capability with the specified key name.</returns>
      <param name="key">The name of the browser capability to retrieve.</param>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.JavaApplets">
      <summary>Gets a value that indicates whether the browser supports Java.</summary>
      <returns>true if the browser supports Java; otherwise, false. The default is false.NoteThis property does not indicate whether Java is currently enabled in the browser, only whether the browser can support Java.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.JScriptVersion">
      <summary>Gets the JScript version that the browser supports.</summary>
      <returns>The version of JScript that the browser supports.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MajorVersion">
      <summary>Gets the major (integer) version number of the browser.</summary>
      <returns>The major version number of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MaximumHrefLength">
      <summary>Gets the maximum length in characters for the href attribute of an HTML a (anchor) element.</summary>
      <returns>The maximum length in characters for the href attribute of an HTML a (anchor) element. The default value is the value in the <see cref="P:System.Web.HttpBrowserCapabilitiesWrapper.Item(System.String)" /> property with the key name of "maximumHrefLength".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MaximumRenderedPageSize">
      <summary>Gets the maximum length of the page, in bytes, that the browser can display. </summary>
      <returns>The maximum length of the page, in bytes, that the browser can display. The default is 2000.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MaximumSoftkeyLabelLength">
      <summary>Gets the maximum length of the text that a soft-key label can display.</summary>
      <returns>The maximum length of the text that a soft-key label can display. The default is 5.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MinorVersion">
      <summary>Gets the minor (decimal) version number of the browser.</summary>
      <returns>The minor version number of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MinorVersionString">
      <summary>Gets the minor (decimal) version number of the browser as a string.</summary>
      <returns>A string that represents the minor version number of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MobileDeviceManufacturer">
      <summary>Gets the name of the manufacturer of a mobile device, if known.</summary>
      <returns>The name of the manufacturer of a mobile device, if known. The default is "Unknown".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MobileDeviceModel">
      <summary>Gets the model name of a mobile device, if known.</summary>
      <returns>The model name of a mobile device, if known. The default is "Unknown".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.MSDomVersion">
      <summary>Gets the version of the Microsoft HTML (MSHTML) Document Object Model (DOM) that the browser supports.</summary>
      <returns>The MSHTML DOM version that the browser supports. The default is 0.0.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.NumberOfSoftkeys">
      <summary>Gets the number of softkeys on a mobile device.</summary>
      <returns>The number of softkeys supported on a mobile device. The default is 0.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Platform">
      <summary>Gets the name of the operating system that the client is using, if known.</summary>
      <returns>The operating system that the client is using, if known, otherwise the value is set to "Unknown".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredImageMime">
      <summary>Gets the MIME type of the type of image content that the browser typically prefers.</summary>
      <returns>The MIME type of the type of image content that the browser typically prefers. The default is "image/gif".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredRenderingMime">
      <summary>Gets the MIME type of the type of content that the browser typically prefers.</summary>
      <returns>The MIME type of the type of content that the browser typically prefers. The default is "text/html".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredRenderingType">
      <summary>Gets the general name for the type of content that the browser prefers.</summary>
      <returns>The values "html32" or "chtml10". The default is "html32".</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredRequestEncoding">
      <summary>Gets the request encoding that the browser prefers.</summary>
      <returns>The request encoding preferred by the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.PreferredResponseEncoding">
      <summary>Gets the response encoding that the browser prefers.</summary>
      <returns>The response encoding preferred by the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersBreakBeforeWmlSelectAndInput">
      <summary>Gets a value that indicates whether the browser renders a line break before select or input elements.</summary>
      <returns>true if the browser renders a line break before select or input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersBreaksAfterHtmlLists">
      <summary>Gets a value that indicates whether the browser renders a line break after list-item elements.</summary>
      <returns>true if the browser renders a line break after list-item elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersBreaksAfterWmlAnchor">
      <summary>Gets a value that indicates whether the browser renders a line break after a standalone WML a (anchor) element.</summary>
      <returns>true if the browser renders a line break after a standalone WML a (anchor) element; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersBreaksAfterWmlInput">
      <summary>Gets a value that indicates whether the browser renders a line break after a WML input element.</summary>
      <returns>true if the browser renders a line break after a WML input element; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersWmlDoAcceptsInline">
      <summary>Gets a value that indicates whether the mobile-device browser renders a WML do form accept construct as an inline button instead of as a softkey.</summary>
      <returns>true if the mobile-device browser renders a WML do form-accept construct as an inline button; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RendersWmlSelectsAsMenuCards">
      <summary>Gets a value that indicates whether the browser renders WML select elements as menu cards, instead of as a combo box.</summary>
      <returns>true if the browser renders WML select elements as menu cards; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiredMetaTagNameValue">
      <summary>Used internally to produce a meta-tag that is required by some browsers.</summary>
      <returns>A meta-tag that is required by some browsers.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresAttributeColonSubstitution">
      <summary>Gets a value that indicates whether the browser requires colons in element attribute values to be replaced with a different character.</summary>
      <returns>true if the browser requires colons in element attribute values to be replaced with a different character; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresContentTypeMetaTag">
      <summary>Gets a value that indicates whether the browser requires an HTML meta element for which the content-type attribute is specified.</summary>
      <returns>true if the browser requires an HTML meta element for which the content-type attribute is specified; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresControlStateInSession">
      <summary>Gets a value that indicates whether the browser requires control state to be maintained in sessions.</summary>
      <returns>true if the browser requires control state to be maintained in sessions; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresDBCSCharacter">
      <summary>Gets a value that indicates whether the browser requires a double-byte character set.</summary>
      <returns>true if the browser requires a double-byte character set; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresHtmlAdaptiveErrorReporting">
      <summary>Gets a value that indicates whether the browser requires nonstandard error messages.</summary>
      <returns>true if the browser requires nonstandard error messages; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresLeadingPageBreak">
      <summary>Gets a value that indicates whether the browser requires the first element in the body of a Web page to be an HTML br element.</summary>
      <returns>true if the browser requires the first element in the body of a Web page to be an HTML br element; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresNoBreakInFormatting">
      <summary>Gets a value that indicates whether the browser does not support HTML br elements to format line breaks.</summary>
      <returns>true if the browser does not support HTML br elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresOutputOptimization">
      <summary>Gets a value that indicates whether the browser requires pages to contain a size-optimized form of markup language tags.</summary>
      <returns>true if the browser requires pages to contain a size-optimized form of markup language tags; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresPhoneNumbersAsPlainText">
      <summary>Gets a value that indicates whether the browser supports telephone dialing based on plain text, or whether it requires special markup.</summary>
      <returns>true if the browser supports telephone dialing based on plain text; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresSpecialViewStateEncoding">
      <summary>Gets a value that indicates whether the browser requires view-state values to be specially encoded.</summary>
      <returns>true if the browser requires view-state values to be specially encoded; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresUniqueFilePathSuffix">
      <summary>Gets a value that indicates whether the browser requires unique form-action URLs.</summary>
      <returns>true if the browser requires unique form-action URLs; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresUniqueHtmlCheckboxNames">
      <summary>Gets a value that indicates whether the browser requires unique name attribute values for multiple HTML input type="checkbox" elements.</summary>
      <returns>true if the browser requires unique name attribute values for multiple HTML input type="checkbox" elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresUniqueHtmlInputNames">
      <summary>Gets a value that indicates whether the browser requires unique name attribute values for multiple HTML input elements.</summary>
      <returns>true if the browser requires unique name attribute values for multiple HTML input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.RequiresUrlEncodedPostfieldValues">
      <summary>Gets a value that indicates whether postback data that is sent by the browser will be URL-encoded.</summary>
      <returns>true if postback data that is sent by the browser will be URL-encoded; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenBitDepth">
      <summary>Gets the depth of the display, in bits per pixel.</summary>
      <returns>The depth of the display, in bits per pixel. The default is 1.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenCharactersHeight">
      <summary>Gets the approximate height of the display, in character lines.</summary>
      <returns>The approximate height of the display, in character lines. The default is 6.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenCharactersWidth">
      <summary>Gets the approximate width of the display, in characters.</summary>
      <returns>The approximate width of the display, in characters. The default is 12.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenPixelsHeight">
      <summary>Gets the approximate height of the display, in pixels.</summary>
      <returns>The approximate height of the display, in pixels. The default is 72.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.ScreenPixelsWidth">
      <summary>Gets the approximate width of the display, in pixels.</summary>
      <returns>The approximate width of the display, in pixels. The default is 96.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsAccesskeyAttribute">
      <summary>Gets a value that indicates whether the browser supports the accesskey attribute of HTML a (anchor) and input elements.</summary>
      <returns>true if the browser supports the accesskey attribute of HTML a (anchor) and input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsBodyColor">
      <summary>Gets a value that indicates whether the browser supports the bgcolor attribute of the HTML body element.</summary>
      <returns>true if the browser supports the bgcolor attribute of the HTML body element; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsBold">
      <summary>Gets a value that indicates whether the browser supports HTML b elements to format bold text.</summary>
      <returns>true if the browser supports HTML b elements to format bold text; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsCacheControlMetaTag">
      <summary>Gets a value that indicates whether the browser supports the cache-control value for the http-equiv attribute of HTML meta elements.</summary>
      <returns>true if the browser supports the cache-control value for the http-equiv attribute of HTML meta elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsCallback">
      <summary>Gets a value that indicates whether the browser supports callback scripts.</summary>
      <returns>true if the browser supports callback scripts; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsCss">
      <summary>Gets a value that indicates whether the browser supports cascading style sheets (CSS).</summary>
      <returns>true if the browser supports CSS; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsDivAlign">
      <summary>Gets a value that indicates whether the browser supports the align attribute of HTML div elements.</summary>
      <returns>true if the browser supports the align attribute of HTML div elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsDivNoWrap">
      <summary>Gets a value that indicates whether the browser supports the nowrap attribute of HTML div elements.</summary>
      <returns>true if the browser supports the nowrap HTML div elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsEmptyStringInCookieValue">
      <summary>Gets a value that indicates whether the browser supports empty strings in cookie values.</summary>
      <returns>true if the browser supports empty strings in cookie values; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsFontColor">
      <summary>Gets a value that indicates whether the browser supports the color attribute of HTML font elements.</summary>
      <returns>true if the browser supports the color attribute of HTML font elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsFontName">
      <summary>Gets a value that indicates whether the browser supports the name attribute of HTML font elements.</summary>
      <returns>true if the browser supports the name attribute of HTML font elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsFontSize">
      <summary>Gets a value that indicates whether the browser supports the size attribute of HTML font elements.</summary>
      <returns>true if the browser supports the size attribute of HTML font elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsImageSubmit">
      <summary>Gets a value that indicates whether the browser supports the use of a custom image in place of a standard form submit button.</summary>
      <returns>true if the browser supports the use of a custom image in place of a standard form submit button; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsIModeSymbols">
      <summary>Gets a value that indicates whether the browser supports i-mode symbols.</summary>
      <returns>true if the browser supports i-mode symbols; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsInputIStyle">
      <summary>Gets a value that indicates whether the browser supports the istyle attribute of HTML input elements.</summary>
      <returns>true if the browser supports the istyle attribute of HTML input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsInputMode">
      <summary>Gets a value that indicates whether the browser supports the mode attribute of HTML input elements.</summary>
      <returns>true if the browser supports the mode attribute of HTML input elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsItalic">
      <summary>Gets a value that indicates whether the browser supports HTML i elements to format italic text.</summary>
      <returns>true if the browser supports HTML i elements to format italic text; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsJPhoneMultiMediaAttributes">
      <summary>Gets a value that indicates whether the browser supports J-Phone multimedia attributes.</summary>
      <returns>true if the browser supports J-Phone multimedia attributes; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsJPhoneSymbols">
      <summary>Gets a value that indicates whether the browser supports J-Phone–specific picture symbols.</summary>
      <returns>true if the browser supports J-Phone–specific picture symbols; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsQueryStringInFormAction">
      <summary>Gets a value that indicates whether the browser supports a query string in the action attribute value of HTML form elements.</summary>
      <returns>true if the browser supports a query string in the action attribute value of HTML form elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsRedirectWithCookie">
      <summary>Gets a value that indicates whether the browser supports cookies on redirection.</summary>
      <returns>true if the browser supports cookies on redirection; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsSelectMultiple">
      <summary>Gets a value that indicates whether the browser supports the multiple attribute of HTML select elements.</summary>
      <returns>true if the browser supports the multiple attribute of HTML select elements; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsUncheck">
      <summary>Gets a value that indicates whether clearing a checked HTML input type="checkbox" element is reflected in postback data.</summary>
      <returns>true if clearing a checked HTML input type="checkbox" element is reflected in postback data; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.SupportsXmlHttp">
      <summary>Gets a value that indicates whether the browser supports receiving XML over HTTP.</summary>
      <returns>true if the browser supports receiving XML over HTTP; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Tables">
      <summary>Gets a value that indicates whether the browser supports HTML table elements.</summary>
      <returns>true if the browser supports HTML table elements; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.TagWriter">
      <summary>Used internally to get the type of the object that is used to write tags for the browser.</summary>
      <returns>The type of the object that is used to write tags for the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Type">
      <summary>Gets the name and major (integer) version number of the browser.</summary>
      <returns>The name and major version number of the browser.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.UseOptimizedCacheKey">
      <summary>Used internally to get a value that indicates whether to use an optimized cache key.</summary>
      <returns>true to use an optimized cache key; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.VBScript">
      <summary>Gets a value that indicates whether the browser supports Visual Basic Scripting edition (VBScript).</summary>
      <returns>true if the browser supports VBScript; otherwise, false. The default is false.NoteThis property does not indicate whether VBScript is currently enabled in the browser, only whether the browser can support VBScript.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Version">
      <summary>Gets the full version number (integer and decimal) of the browser as a string.</summary>
      <returns>The full version number of the browser as a string.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.W3CDomVersion">
      <summary>Gets the version of the World Wide Web Consortium (W3C) XML Document Object Model (DOM) that the browser supports.</summary>
      <returns>The number of the W3C XML DOM version number that the browser supports.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Win16">
      <summary>Gets a value that indicates whether the client is a Win16-based computer.</summary>
      <returns>true if the browser is running on a Win16-based computer; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpBrowserCapabilitiesWrapper.Win32">
      <summary>Gets a value that indicates whether the client is a Win32-based computer.</summary>
      <returns>true if the client is a Win32-based computer; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Web.HttpCacheability">
      <summary>Provides enumerated values that are used to set the Cache-Control HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpCacheability.NoCache">
      <summary>Sets the Cache-Control: no-cache header. Without a field name, the directive applies to the entire request and a shared (proxy server) cache must force a successful revalidation with the origin Web server before satisfying the request. With a field name, the directive applies only to the named field; the rest of the response may be supplied from a shared cache. </summary>
    </member>
    <member name="F:System.Web.HttpCacheability.Private">
      <summary>Default value. Sets Cache-Control: private to specify that the response is cacheable only on the client and not by shared (proxy server) caches. </summary>
    </member>
    <member name="F:System.Web.HttpCacheability.Server">
      <summary>Specifies that the response is cached only at the origin server. Similar to the <see cref="F:System.Web.HttpCacheability.NoCache" /> option. Clients receive a Cache-Control: no-cache directive but the document is cached on the origin server. Equivalent to <see cref="F:System.Web.HttpCacheability.ServerAndNoCache" />.</summary>
    </member>
    <member name="F:System.Web.HttpCacheability.ServerAndNoCache">
      <summary>Applies the settings of both <see cref="F:System.Web.HttpCacheability.Server" /> and <see cref="F:System.Web.HttpCacheability.NoCache" /> to indicate that the content is cached at the server but all others are explicitly denied the ability to cache the response. </summary>
    </member>
    <member name="F:System.Web.HttpCacheability.Public">
      <summary>Sets Cache-Control: public to specify that the response is cacheable by clients and shared (proxy) caches. </summary>
    </member>
    <member name="F:System.Web.HttpCacheability.ServerAndPrivate">
      <summary>Indicates that the response is cached at the server and at the client but nowhere else. Proxy servers are not allowed to cache the response. </summary>
    </member>
    <member name="T:System.Web.HttpCachePolicy">
      <summary>Contains methods for setting cache-specific HTTP headers and for controlling the ASP.NET page output cache.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)">
      <summary>Registers a validation callback for the current response.</summary>
      <param name="handler">The <see cref="T:System.Web.HttpCacheValidateHandler" /> value. </param>
      <param name="data">The arbitrary user-supplied data that is passed back to the <see cref="M:System.Web.HttpCachePolicy.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)" /> delegate. </param>
      <exception cref="T:System.ArgumentNullException">The specified <paramref name="handler" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.AppendCacheExtension(System.String)">
      <summary>Appends the specified text to the Cache-Control HTTP header.</summary>
      <param name="extension">The text to append to the Cache-Control header. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetAllowResponseInBrowserHistory(System.Boolean)">
      <summary>Makes the response is available in the client browser History cache, regardless of the <see cref="T:System.Web.HttpCacheability" /> setting made on the server, when the <paramref name="allow" /> parameter is true.</summary>
      <param name="allow">true to direct the client browser to store responses in the History folder; otherwise false. The default is false. </param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetCacheability(System.Web.HttpCacheability)">
      <summary>Sets the Cache-Control header to one of the values of <see cref="T:System.Web.HttpCacheability" />.</summary>
      <param name="cacheability">An <see cref="T:System.Web.HttpCacheability" /> enumeration value. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cacheability" /> is not one of the enumeration values. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetCacheability(System.Web.HttpCacheability,System.String)">
      <summary>Sets the Cache-Control header to one of the values of <see cref="T:System.Web.HttpCacheability" /> and appends an extension to the directive.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to. </param>
      <param name="field">The cache control extension to add to the header. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cacheability" /> is not <see cref="F:System.Web.HttpCacheability.Private" /> or <see cref="F:System.Web.HttpCacheability.NoCache" />. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetETag(System.String)">
      <summary>Sets the ETag HTTP header to the specified string.</summary>
      <param name="etag">The text to use for the ETag header. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="etag" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The ETag header has already been set. - or -The <see cref="M:System.Web.HttpCachePolicy.SetETagFromFileDependencies" /> has already been called.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetETagFromFileDependencies">
      <summary>Sets the ETag HTTP header based on the time stamps of the handler's file dependencies.</summary>
      <exception cref="T:System.InvalidOperationException">The ETag header has already been set. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetExpires(System.DateTime)">
      <summary>Sets the Expires HTTP header to an absolute date and time.</summary>
      <param name="date">The absolute <see cref="T:System.DateTime" /> value to set the Expires header to. </param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetLastModified(System.DateTime)">
      <summary>Sets the Last-Modified HTTP header to the <see cref="T:System.DateTime" /> value supplied.</summary>
      <param name="date">The new <see cref="T:System.DateTime" /> value for the Last-Modified header. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="date" /> is later than the current DateTime. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetLastModifiedFromFileDependencies">
      <summary>Sets the Last-Modified HTTP header based on the time stamps of the handler's file dependencies.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetMaxAge(System.TimeSpan)">
      <summary>Sets the Cache-Control: max-age HTTP header based on the specified time span.</summary>
      <param name="delta">The time span used to set the Cache - Control: max-age header. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delta" /> is less than 0 or greater than one year. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetNoServerCaching">
      <summary>Stops all origin-server caching for the current response.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetNoStore">
      <summary>Sets the Cache-Control: no-store HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetNoTransforms">
      <summary>Sets the Cache-Control: no-transform HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetOmitVaryStar(System.Boolean)">
      <summary>Specifies whether the response should contain the vary:* header when varying by parameters.</summary>
      <param name="omit">true to direct the <see cref="T:System.Web.HttpCachePolicy" /> to not use the * value for its <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" /> property; otherwise, false.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetProxyMaxAge(System.TimeSpan)">
      <summary>Sets the Cache-Control: s-maxage HTTP header based on the specified time span.</summary>
      <param name="delta">The time span used to set the Cache-Control: s-maxage header. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delta" /> is less than 0. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetRevalidation(System.Web.HttpCacheRevalidation)">
      <summary>Sets the Cache-Control HTTP header to either the must-revalidate or the proxy-revalidate directives based on the supplied enumeration value.</summary>
      <param name="revalidation">The <see cref="T:System.Web.HttpCacheRevalidation" /> enumeration value to set the Cache-Control header to. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="revalidation" /> is not one of the enumeration values. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetSlidingExpiration(System.Boolean)">
      <summary>Sets cache expiration to from absolute to sliding.</summary>
      <param name="slide">true or false. </param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetValidUntilExpires(System.Boolean)">
      <summary>Specifies whether the ASP.NET cache should ignore HTTP Cache-Control headers sent by the client that invalidate the cache.</summary>
      <param name="validUntilExpires">true if the cache ignores Cache-Control invalidation headers; otherwise, false. </param>
    </member>
    <member name="M:System.Web.HttpCachePolicy.SetVaryByCustom(System.String)">
      <summary>Specifies a custom text string to vary cached output responses by.</summary>
      <param name="custom">The text string to vary cached output by. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="custom" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.HttpCachePolicy.SetVaryByCustom(System.String)" /> method has already been called. </exception>
    </member>
    <member name="P:System.Web.HttpCachePolicy.VaryByContentEncodings">
      <summary>Gets the list of Content-Encoding headers that will be used to vary the output cache.</summary>
      <returns>An object that specifies which Content-Encoding headers are used to select the cached response.</returns>
    </member>
    <member name="P:System.Web.HttpCachePolicy.VaryByHeaders">
      <summary>Gets the list of all HTTP headers that will be used to vary cache output.</summary>
      <returns>An <see cref="T:System.Web.HttpCacheVaryByHeaders" /> that specifies which HTTP headers are used to select the cached response.</returns>
    </member>
    <member name="P:System.Web.HttpCachePolicy.VaryByParams">
      <summary>Gets the list of parameters received by an HTTP GET or HTTP POST that affect caching.</summary>
      <returns>An <see cref="T:System.Web.HttpCacheVaryByParams" /> that specifies which cache-control headers are used to select the cached response.</returns>
    </member>
    <member name="T:System.Web.HttpCachePolicyBase">
      <summary>Serves as the base class for classes that contain methods for setting cache-specific HTTP headers and for controlling the ASP.NET page output cache.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)">
      <summary>When overridden in a derived class, registers a validation callback for the current response.</summary>
      <param name="handler">The object that will handle the request.</param>
      <param name="data">The user-supplied data that is passed to the <see cref="M:System.Web.HttpCachePolicyWrapper.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)" /> delegate.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.AppendCacheExtension(System.String)">
      <summary>When overridden in a derived class, appends the specified text to the Cache-Control HTTP header.</summary>
      <param name="extension">The text to append to the Cache-Control header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetAllowResponseInBrowserHistory(System.Boolean)">
      <summary>When overridden in a derived class, makes the response available in the browser history cache, regardless of the <see cref="T:System.Web.HttpCacheability" /> setting made on the server.</summary>
      <param name="allow">true to direct the client browser to store responses in the browser history cache; otherwise false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetCacheability(System.Web.HttpCacheability)">
      <summary>When overridden in a derived class, sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability" /> value.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetCacheability(System.Web.HttpCacheability,System.String)">
      <summary>When overridden in a derived class, sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability" /> value and appends an extension to the directive.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to.</param>
      <param name="field">The cache-control extension to add to the header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetETag(System.String)">
      <summary>When overridden in a derived class, sets the ETag HTTP header to the specified string.</summary>
      <param name="etag">The text to use for the ETag header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetETagFromFileDependencies">
      <summary>When overridden in a derived class, sets the ETag HTTP header based on the time stamps of the handler's file dependencies.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetExpires(System.DateTime)">
      <summary>When overridden in a derived class, sets the Expires HTTP header to an absolute date and time.</summary>
      <param name="date">The absolute expiration time.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetLastModified(System.DateTime)">
      <summary>When overridden in a derived class, sets the Last-Modified HTTP header to the specified date and time.</summary>
      <param name="date">The date-time value to set the Last-Modified header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetLastModifiedFromFileDependencies">
      <summary>When overridden in a derived class, sets the Last-Modified HTTP header based on the time stamps of the handler's file dependencies.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetMaxAge(System.TimeSpan)">
      <summary>When overridden in a derived class, sets the Cache-Control: max-age HTTP header to the specified time span.</summary>
      <param name="delta">The time span to set the Cache-Control: max-age header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetNoServerCaching">
      <summary>When overridden in a derived class, stops all origin-server caching for the current response.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetNoStore">
      <summary>When overridden in a derived class, sets the Cache-Control: no-store HTTP header.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetNoTransforms">
      <summary>When overridden in a derived class, sets the Cache-Control: no-transform HTTP header.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetOmitVaryStar(System.Boolean)">
      <summary>When overridden in a derived class, specifies whether the response contains the vary:* header when caching varies by parameters.</summary>
      <param name="omit">true to direct the <see cref="T:System.Web.HttpCachePolicy" /> object not to use the * value for its <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" /> property; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetProxyMaxAge(System.TimeSpan)">
      <summary>When overridden in a derived class, sets the Cache-Control: s-maxage HTTP header to the specified time span.</summary>
      <param name="delta">The time span to set the Cache-Control: s-maxage header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetRevalidation(System.Web.HttpCacheRevalidation)">
      <summary>When overridden in a derived class, sets the Cache-Control HTTP header to either the must-revalidate or the proxy-revalidate directives, based on the specified enumeration value.</summary>
      <param name="revalidation">The <see cref="T:System.Web.HttpCacheRevalidation" /> enumeration value to set the Cache-Control header to.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetSlidingExpiration(System.Boolean)">
      <summary>When overridden in a derived class, sets cache expiration to absolute or sliding.</summary>
      <param name="slide">true to set a sliding cache expiration, or false to set an absolute cache expiration.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetValidUntilExpires(System.Boolean)">
      <summary>When overridden in a derived class, specifies whether the ASP.NET cache should ignore HTTP Cache-Control headers that are sent by the client that invalidate the cache.</summary>
      <param name="validUntilExpires">true to specify that ASP.NET should ignore Cache-Control invalidation headers; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyBase.SetVaryByCustom(System.String)">
      <summary>When overridden in a derived class, specifies a text string to vary cached output responses by.</summary>
      <param name="custom">The text string to vary cached output by.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpCachePolicyBase.VaryByContentEncodings">
      <summary>When overridden in a derived class, gets the list of Content-Encoding headers that are used to vary the output cache.</summary>
      <returns>The Content-Encoding headers that are used to select the cached response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpCachePolicyBase.VaryByHeaders">
      <summary>When overridden in a derived class, gets the list of all HTTP headers that are used to vary cache output.</summary>
      <returns>The HTTP headers that are used to select the cached response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpCachePolicyBase.VaryByParams">
      <summary>When overridden in a derived class, gets the list of parameters that are received by an HTTP GET or POST verb that affect caching.</summary>
      <returns>The cache-control parameters that are used to select the cached response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpCachePolicyWrapper">
      <summary>Encapsulates the HTTP intrinsic object that contains methods for setting cache-specific HTTP headers and for controlling the ASP.NET page output cache.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.#ctor(System.Web.HttpCachePolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCachePolicyWrapper" /> class. </summary>
      <param name="httpCachePolicy">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpCachePolicy" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)">
      <summary>Registers a validation callback for the current response.</summary>
      <param name="handler">The object that will handle the request.</param>
      <param name="data">The user-supplied data that is passed to the <see cref="M:System.Web.HttpCachePolicyWrapper.AddValidationCallback(System.Web.HttpCacheValidateHandler,System.Object)" /> delegate.</param>
      <exception cref="T:System.ArgumentNullException">The specified <paramref name="handler" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.AppendCacheExtension(System.String)">
      <summary>Appends the specified text to the Cache-Control HTTP header.</summary>
      <param name="extension">The text to append to the Cache-Control header.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetAllowResponseInBrowserHistory(System.Boolean)">
      <summary>Makes the response available in the browser history cache, regardless of the <see cref="T:System.Web.HttpCacheability" /> setting made on the server.</summary>
      <param name="allow">true to direct the client browser to store responses in the browser history cache; otherwise false. The default is false.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetCacheability(System.Web.HttpCacheability)">
      <summary>Sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability" /> value.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cacheability" /> is not one of the enumeration values. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetCacheability(System.Web.HttpCacheability,System.String)">
      <summary>Sets the Cache-Control header to the specified <see cref="T:System.Web.HttpCacheability" /> value and appends an extension to the directive.</summary>
      <param name="cacheability">The <see cref="T:System.Web.HttpCacheability" /> enumeration value to set the header to.</param>
      <param name="field">The cache-control extension to add to the header.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="cacheability" /> is not <see cref="F:System.Web.HttpCacheability.Private" /> or <see cref="F:System.Web.HttpCacheability.NoCache" />. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetETag(System.String)">
      <summary>Sets the ETag HTTP header to the specified string.</summary>
      <param name="etag">The text to use for the ETag header.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="etag" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The ETag header has already been set. - or -The <see cref="M:System.Web.HttpCachePolicy.SetETagFromFileDependencies" /> method has already been called.</exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetETagFromFileDependencies">
      <summary>Sets the ETag HTTP header based on the time stamps of the handler's file dependencies.</summary>
      <exception cref="T:System.InvalidOperationException">The ETag header has already been set. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetExpires(System.DateTime)">
      <summary>Sets the Expires HTTP header to an absolute date and time.</summary>
      <param name="date">The absolute expiration time.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetLastModified(System.DateTime)">
      <summary>Sets the Last-Modified HTTP header to the specified date and time.</summary>
      <param name="date">The date-time value to set the Last-Modified header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="date" /> is later than the current DateTime. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetLastModifiedFromFileDependencies">
      <summary>Sets the Last-Modified HTTP header based on the time stamps of the handler's file dependencies.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetMaxAge(System.TimeSpan)">
      <summary>Sets the Cache-Control: max-age HTTP header to the specified time span.</summary>
      <param name="delta">The time span to set the Cache-Control: max-age header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delta" /> is less than 0 or greater than one year. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetNoServerCaching">
      <summary>Stops all origin-server caching for the current response.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetNoStore">
      <summary>Sets the Cache-Control: no-store HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetNoTransforms">
      <summary>Sets the Cache-Control: no-transform HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetOmitVaryStar(System.Boolean)">
      <summary>Specifies whether the response contains the vary:* header when varying by parameters.</summary>
      <param name="omit">true to direct the <see cref="T:System.Web.HttpCachePolicy" /> object to not use the * value for its <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" /> property; otherwise, false.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetProxyMaxAge(System.TimeSpan)">
      <summary>Sets the Cache-Control: s-maxage HTTP header to the specified time span.</summary>
      <param name="delta">The time span to set the Cache-Control: s-maxage header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delta" /> is less than 0. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetRevalidation(System.Web.HttpCacheRevalidation)">
      <summary>Sets the Cache-Control HTTP header to either the must-revalidate or the proxy-revalidate directives, based on the specified enumeration value.</summary>
      <param name="revalidation">The <see cref="T:System.Web.HttpCacheRevalidation" /> enumeration value to set the Cache-Control header to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="revalidation" /> is not one of the enumeration values. </exception>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetSlidingExpiration(System.Boolean)">
      <summary>Sets cache expiration to absolute or sliding.</summary>
      <param name="slide">true to set a sliding cache expiration, and false to set an absolute cache expiration.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetValidUntilExpires(System.Boolean)">
      <summary>Specifies whether the ASP.NET cache should ignore HTTP Cache-Control headers sent by the client that invalidate the cache.</summary>
      <param name="validUntilExpires">true to specify that ASP.NET should ignore Cache-Control invalidation headers; otherwise, false.</param>
    </member>
    <member name="M:System.Web.HttpCachePolicyWrapper.SetVaryByCustom(System.String)">
      <summary>Specifies a text string to vary cached output responses by.</summary>
      <param name="custom">The text string to vary cached output by.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="custom" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.HttpCachePolicy.SetVaryByCustom(System.String)" /> method has already been called. </exception>
    </member>
    <member name="P:System.Web.HttpCachePolicyWrapper.VaryByContentEncodings">
      <summary>Gets the list of Content-Encoding headers that will be used to vary the output cache.</summary>
      <returns>An object that specifies which Content-Encoding headers are used to select the cached response.</returns>
    </member>
    <member name="P:System.Web.HttpCachePolicyWrapper.VaryByHeaders">
      <summary>Gets the list of all HTTP headers that will be used to vary cache output.</summary>
      <returns>An object that specifies which HTTP headers are used to select the cached response.</returns>
    </member>
    <member name="P:System.Web.HttpCachePolicyWrapper.VaryByParams">
      <summary>Gets the list of parameters received by an HTTP GET or HTTP POST that affect caching.</summary>
      <returns>An object that specifies which cache-control parameters are used to select the cached response.</returns>
    </member>
    <member name="T:System.Web.HttpCacheRevalidation">
      <summary>Provides enumerated values that are used to set revalidation-specific Cache-Control HTTP headers.</summary>
    </member>
    <member name="F:System.Web.HttpCacheRevalidation.AllCaches">
      <summary>Sets the HTTP header to Cache-Control: must-revalidate.</summary>
    </member>
    <member name="F:System.Web.HttpCacheRevalidation.ProxyCaches">
      <summary>Sets the HTTP header to Cache-Control: proxy-revalidate.</summary>
    </member>
    <member name="F:System.Web.HttpCacheRevalidation.None">
      <summary>If this value is set, no cache-revalidation directive is sent. The default value. </summary>
    </member>
    <member name="T:System.Web.HttpCacheValidateHandler">
      <summary>Represents a method that is called to validate a cached item before the item is served from the cache. </summary>
      <param name="context">The <see cref="T:System.Web.HttpContext" /> object containing information about the current request. </param>
      <param name="data">User-supplied data used to validate the cached item. </param>
      <param name="validationStatus">An <see cref="T:System.Web.HttpValidationStatus" /> enumeration value. Your delegate should set this value to indicate the result of the validation. </param>
    </member>
    <member name="T:System.Web.HttpCacheVaryByContentEncodings">
      <summary>Provides a type-safe way to set the <see cref="P:System.Web.HttpCachePolicy.VaryByContentEncodings" /> property of the <see cref="T:System.Web.HttpCachePolicy" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpCacheVaryByContentEncodings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCacheVaryByContentEncodings" /> class.</summary>
    </member>
    <member name="P:System.Web.HttpCacheVaryByContentEncodings.Item(System.String)">
      <summary>Gets or sets a value that indicates whether the cache varies according to the specified content encoding.</summary>
      <returns>true if the cache should vary by the specified content encoding; otherwise, false.</returns>
      <param name="contentEncoding">The name of the content encoding.</param>
      <exception cref="T:System.ArgumentNullException">The content encoding is null.</exception>
    </member>
    <member name="T:System.Web.HttpCacheVaryByHeaders">
      <summary>Provides a type-safe way to set the <see cref="P:System.Web.HttpCachePolicy.VaryByHeaders" /> property.</summary>
    </member>
    <member name="M:System.Web.HttpCacheVaryByHeaders.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCacheVaryByHeaders" /> class.</summary>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.AcceptTypes">
      <summary>Gets or sets a value indicating whether the ASP.NET output cache varies the cached responses by the Accept HTTP header, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when the ASP.NET output cache varies by the Accept header; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.Item(System.String)">
      <summary>Gets or sets a custom header field that the ASP.NET output cache varies the cached responses by, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when the ASP.NET output cache varies by the specified custom field; otherwise, false. The default value is false. </returns>
      <param name="header">The name of the custom header. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="header" /> is null. </exception>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.UserAgent">
      <summary>Gets or sets a value indicating whether the ASP.NET output cache varies the cached responses by the User-Agent header, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when the ASP.NET output cache varies by the User-Agent header, and adds it to the Vary HTTP header sent to the client; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.UserCharSet">
      <summary>Gets or sets a value indicating whether the ASP.NET output cache varies the cached responses by the Accept-Charset header, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when the ASP.NET output cache varies by the Accept-Charset header and adds it to the Vary HTTP header sent to the client; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Web.HttpCacheVaryByHeaders.UserLanguage">
      <summary>Gets or sets a value indicating whether the ASP.NET output cache varies the cached responses by the Accept-Language header, and appends it to the out-going Vary HTTP header.</summary>
      <returns>true when ASP.NET output cache varies by the Accept-Language header and adds it to the Vary HTTP header sent to the client; otherwise, false. The default value is false.</returns>
    </member>
    <member name="M:System.Web.HttpCacheVaryByHeaders.VaryByUnspecifiedParameters">
      <summary>Causes ASP.NET to vary by all header values and sets the Vary HTTP header to the value * (an asterisk). All other Vary header information to be dropped.</summary>
    </member>
    <member name="T:System.Web.HttpCacheVaryByParams">
      <summary>Provides a type-safe way to set the <see cref="P:System.Web.HttpCachePolicy.VaryByParams" /> property.</summary>
    </member>
    <member name="M:System.Web.HttpCacheVaryByParams.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCacheVaryByParams" /> class.</summary>
    </member>
    <member name="P:System.Web.HttpCacheVaryByParams.IgnoreParams">
      <summary>Gets or sets a value indicating whether an HTTP response varies by Get or Post parameters. </summary>
      <returns>true if HTTP request parameters are ignored; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpCacheVaryByParams.Item(System.String)">
      <summary>Gets or sets a value indicating whether the cache varies according to the specified HTTP request parameter.</summary>
      <returns>true if the cache should vary by the specified parameter value.</returns>
      <param name="header">The name of the custom parameter. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="header" /> is null. </exception>
    </member>
    <member name="T:System.Web.HttpClientCertificate">
      <summary>Provides the client certificate fields issued by the client in response to the server's request for the client's identity.</summary>
    </member>
    <member name="P:System.Web.HttpClientCertificate.BinaryIssuer">
      <summary>Gets or sets the certificate issuer, in binary format.</summary>
      <returns>The certificate issuer, expressed in binary format.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.CertEncoding">
      <summary>Gets the encoding of the certificate.</summary>
      <returns>One of the CERT_CONTEXT.dwCertEncodingType values.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Certificate">
      <summary>Gets a string containing the binary stream of the entire certificate content, in ASN.1 format.</summary>
      <returns>The client certificate.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Cookie">
      <summary>Gets the unique ID for the client certificate, if provided.</summary>
      <returns>The client certificate ID.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Flags">
      <summary>A set of flags that provide additional client certificate information.</summary>
      <returns>A set of Boolean flags.</returns>
    </member>
    <member name="M:System.Web.HttpClientCertificate.Get(System.String)">
      <summary>Returns individual client certificate fields by name.</summary>
      <returns>The value of the item specified by <paramref name="field" />.</returns>
      <param name="field">The item in the collection to retrieve. </param>
    </member>
    <member name="P:System.Web.HttpClientCertificate.IsPresent">
      <summary>Gets a value that indicates whether the client certificate is present.</summary>
      <returns>true if the client certificate is present; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Issuer">
      <summary>A string that contains a list of subfield values containing information about the certificate issuer.</summary>
      <returns>The certificate issuer's information.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.IsValid">
      <summary>Gets a value that indicates whether the client certificate is valid.</summary>
      <returns>true if the client certificate is valid; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.KeySize">
      <summary>Gets the number of bits in the digital certificate key size. For example, 128.</summary>
      <returns>The number of bits in the key size.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.PublicKey">
      <summary>Gets the public key binary value from the certificate.</summary>
      <returns>A byte array that contains the public key value.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.SecretKeySize">
      <summary>Gets the number of bits in the server certificate private key. For example, 1024.</summary>
      <returns>The number of bits in the server certificate private key.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.SerialNumber">
      <summary>Provides the certificate serial number as an ASCII representation of hexadecimal bytes separated by hyphens. For example, 04-67-F3-02.</summary>
      <returns>The certificate serial number.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.ServerIssuer">
      <summary>Gets the issuer field of the server certificate.</summary>
      <returns>The issuer field of the server certificate.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.ServerSubject">
      <summary>Gets the subject field of the server certificate.</summary>
      <returns>The subject field of the server certificate.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.Subject">
      <summary>Gets the subject field of the client certificate.</summary>
      <returns>The subject field of the client certificate.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.ValidFrom">
      <summary>Gets the date when the certificate becomes valid. The date varies with international settings.</summary>
      <returns>The date when the certificate becomes valid.</returns>
    </member>
    <member name="P:System.Web.HttpClientCertificate.ValidUntil">
      <summary>Gets the certificate expiration date.</summary>
      <returns>The certificate expiration date.</returns>
    </member>
    <member name="T:System.Web.HttpCompileException">
      <summary>The exception that is thrown when a compiler error occurs.</summary>
    </member>
    <member name="M:System.Web.HttpCompileException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCompileException" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpCompileException.#ctor(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCompileException" /> class.</summary>
      <param name="results">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> containing compiler output and error information. </param>
      <param name="sourceCode">The path to the file that contains the source code being compiled when the error occurs.</param>
    </member>
    <member name="M:System.Web.HttpCompileException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCompileException" /> class.</summary>
      <param name="message">The exception message to specify when the error occurs.</param>
    </member>
    <member name="M:System.Web.HttpCompileException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCompileException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException" /> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Web.HttpCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="P:System.Web.HttpCompileException.Message">
      <summary>Gets a message that describes the reason for the current exception.</summary>
      <returns>A string that describes the first compilation error listed in the compiler results. If no compiler results were provided, the property returns the error message provided for this exception, or an empty string (""), if no error message was provided.</returns>
    </member>
    <member name="P:System.Web.HttpCompileException.Results">
      <summary>Gets compiler output and error information for the exception.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> containing compiler output and error information.</returns>
    </member>
    <member name="P:System.Web.HttpCompileException.SourceCode">
      <summary>Gets a string containing the path to the file that contains the source code being compiled when the error occurs.</summary>
      <returns>The path of the source file being compiled when the error occurs. The default is null.</returns>
    </member>
    <member name="T:System.Web.HttpContext">
      <summary>Encapsulates all HTTP-specific information about an individual HTTP request.</summary>
    </member>
    <member name="M:System.Web.HttpContext.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpContext" /> class by using the specified request and response objects.</summary>
      <param name="request">The <see cref="T:System.Web.HttpRequest" /> object for the current HTTP request.</param>
      <param name="response">The <see cref="T:System.Web.HttpResponse" /> object for the current HTTP request.</param>
    </member>
    <member name="M:System.Web.HttpContext.#ctor(System.Web.HttpWorkerRequest)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpContext" /> class that uses the specified worker-request object.</summary>
      <param name="wr">The <see cref="T:System.Web.HttpWorkerRequest" /> object for the current HTTP request.</param>
    </member>
    <member name="M:System.Web.HttpContext.AddError(System.Exception)">
      <summary>Adds an exception to the exception collection for the current HTTP request.</summary>
      <param name="errorInfo">The <see cref="T:System.Exception" /> to add to the exception collection.</param>
    </member>
    <member name="P:System.Web.HttpContext.AllErrors">
      <summary>Gets an array of errors accumulated while processing an HTTP request.</summary>
      <returns>An array of <see cref="T:System.Exception" /> objects for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.Application">
      <summary>Gets the <see cref="T:System.Web.HttpApplicationState" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.HttpApplicationState" /> for the current HTTP request.To get the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request, use <see cref="P:System.Web.HttpContext.ApplicationInstance" />. (ASP.NET uses ApplicationInstance instead of Application as a property name to refer to the current <see cref="T:System.Web.HttpApplication" /> instance in order to avoid confusion between ASP.NET and classic ASP. In classic ASP, Application refers to the global application state dictionary.) </returns>
    </member>
    <member name="P:System.Web.HttpContext.ApplicationInstance">
      <summary>Gets or sets the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.HttpApplication" /> for the current HTTP request.ASP.NET uses ApplicationInstance instead of Application as a property name to refer to the current <see cref="T:System.Web.HttpApplication" /> instance in order to avoid confusion between ASP.NET and classic ASP. In classic ASP, Application refers to the global application state dictionary.</returns>
      <exception cref="T:System.InvalidOperationException">The Web application is running under IIS 7.0 in Integrated mode, and an attempt was made to change the property value from a non-null value to null.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Cache">
      <summary>Gets the <see cref="T:System.Web.Caching.Cache" /> object for the current application domain.</summary>
      <returns>The <see cref="T:System.Web.Caching.Cache" /> for the current application domain.</returns>
    </member>
    <member name="M:System.Web.HttpContext.ClearError">
      <summary>Clears all errors for the current HTTP request.</summary>
    </member>
    <member name="P:System.Web.HttpContext.Current">
      <summary>Gets or sets the <see cref="T:System.Web.HttpContext" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.HttpContext" /> for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.CurrentHandler">
      <summary>Gets the <see cref="T:System.Web.IHttpHandler" /> object that represents the currently executing handler.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> that represents the currently executing handler. </returns>
    </member>
    <member name="P:System.Web.HttpContext.CurrentNotification">
      <summary>Gets a <see cref="T:System.Web.RequestNotification" /> value that indicates the current <see cref="T:System.Web.HttpApplication" /> event that is processing. </summary>
      <returns>One of the <see cref="T:System.Web.RequestNotification" /> values.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operation requires integrated pipeline mode in IIS 7.0 and at least the .NET Framework version 3.0.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Error">
      <summary>Gets the first error (if any) accumulated during HTTP request processing.</summary>
      <returns>The first <see cref="T:System.Exception" /> for the current HTTP request/response process; otherwise, null if no errors were accumulated during the HTTP request processing. The default is null.</returns>
    </member>
    <member name="M:System.Web.HttpContext.GetAppConfig(System.String)">
      <summary>Returns requested configuration information for the current application.</summary>
      <returns>An object containing configuration information. (Cast the returned configuration section to the appropriate configuration type before use.)</returns>
      <param name="name">The application configuration tag for which information is requested.</param>
    </member>
    <member name="M:System.Web.HttpContext.GetConfig(System.String)">
      <summary>Returns requested configuration information for the current HTTP request.</summary>
      <returns>The specified <see cref="T:System.Configuration.ConfigurationSection" />, null if the section does not exist, or an internal object if the section is not accessible at run time. (Cast the returned object to the appropriate configuration type before use.) </returns>
      <param name="name">The configuration tag for which information is requested.</param>
    </member>
    <member name="M:System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)">
      <summary>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested application-level resource object; otherwise, null if a resource object is not found or if a resource object is found but it does not have the requested property.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">A resource object with the specified <paramref name="classKey" /> parameter was not found.- or -The main assembly does not contain the resources for the neutral culture, and these resources are required because the appropriate satellite assembly is missing.</exception>
    </member>
    <member name="M:System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested application-level resource object, which is localized for the specified culture; otherwise, null if a resource object is not found or if a resource object is found but it does not have the requested property.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource.</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">A resource object for which the specified <paramref name="classKey" /> parameter was not found.- or -The main assembly does not contain the resources for the neutral culture, and these resources are required because the appropriate satellite assembly is missing.</exception>
    </member>
    <member name="M:System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)">
      <summary>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested page-level resource object; otherwise, null if a matching resource object is found but not a <paramref name="resourceKey" /> parameter.</returns>
      <param name="virtualPath">The <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property for the local resource object.</param>
      <param name="resourceKey">A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">A resource object was not found for the specified <paramref name="virtualPath" /> parameter.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="virtualPath" /> parameter is not in the current application's root directory.</exception>
      <exception cref="T:System.InvalidOperationException">The resource class for the page was not found.</exception>
    </member>
    <member name="M:System.Web.HttpContext.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested local resource object, which is localized for the specified culture; otherwise null if a matching resource object is found but not a <paramref name="resourceKey" /> parameter.</returns>
      <param name="virtualPath">The <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property for the local resource object.</param>
      <param name="resourceKey">A string that represents a <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource object.</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">A resource object was not found for the specified <paramref name="virtualPath" /> Parameter.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="virtualPath" /> parameter is not in the current application's root directory.</exception>
      <exception cref="T:System.InvalidOperationException">The resource class for the page was not found.</exception>
    </member>
    <member name="M:System.Web.HttpContext.GetSection(System.String)">
      <summary>Gets a specified configuration section for the current application's default configuration. </summary>
      <returns>The specified <see cref="T:System.Configuration.ConfigurationSection" />, null if the section does not exist, or an internal object if the section is not accessible at run time.</returns>
      <param name="sectionName">The configuration section path (in XPath format) and the configuration element name.</param>
    </member>
    <member name="P:System.Web.HttpContext.Handler">
      <summary>Gets or sets the <see cref="T:System.Web.IHttpHandler" /> object responsible for processing the HTTP request.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> responsible for processing the HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.IsCustomErrorEnabled">
      <summary>Gets a value indicating whether custom errors are enabled for the current HTTP request.</summary>
      <returns>true if custom errors are enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContext.IsDebuggingEnabled">
      <summary>Gets a value indicating whether the current HTTP request is in debug mode.</summary>
      <returns>true if the request is in debug mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContext.IsPostNotification">
      <summary>Gets a value that is the current processing point in the ASP.NET pipeline just after an <see cref="T:System.Web.HttpApplication" /> event has finished processing. </summary>
      <returns>true if custom errors are enabled; otherwise, false.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operation requires the integrated pipeline mode in IIS 7.0 and at least the .NET Framework 3.0.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Items">
      <summary>Gets a key/value collection that can be used to organize and share data between an <see cref="T:System.Web.IHttpModule" /> interface and an <see cref="T:System.Web.IHttpHandler" /> interface during an HTTP request.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> key/value collection that provides access to an individual value in the collection by a specified key.</returns>
    </member>
    <member name="P:System.Web.HttpContext.PreviousHandler">
      <summary>Gets the <see cref="T:System.Web.IHttpHandler" /> object for the parent handler.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> instance, or null if no previous handler was found.</returns>
    </member>
    <member name="P:System.Web.HttpContext.Profile">
      <summary>Gets the <see cref="T:System.Web.Profile.ProfileBase" /> object for the current user profile.</summary>
      <returns>A <see cref="T:System.Web.Profile.ProfileBase" /> if the application configuration file contains a definition for the profile's properties; otherwise, null.</returns>
    </member>
    <member name="M:System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)">
      <summary>Enables you to specify a handler for the request.</summary>
      <param name="handler">The object that should process the request.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)" /> method was called after the <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event occurred.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Request">
      <summary>Gets the <see cref="T:System.Web.HttpRequest" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.HttpRequest" /> for the current HTTP request.</returns>
      <exception cref="T:System.Web.HttpException">The Web application is running under IIS 7 in Integrated mode.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Response">
      <summary>Gets the <see cref="T:System.Web.HttpResponse" /> object for the current HTTP response.</summary>
      <returns>The <see cref="T:System.Web.HttpResponse" /> for the current HTTP response.</returns>
      <exception cref="T:System.Web.HttpException">The Web application is running under IIS 7 in Integrated mode.</exception>
    </member>
    <member name="M:System.Web.HttpContext.RewritePath(System.String)">
      <summary>Rewrites the URL using the given path.</summary>
      <param name="path">The internal rewrite path.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="path" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContext.RewritePath(System.String,System.Boolean)">
      <summary>Rewrites the URL using the given path and a Boolean value that specifies whether the virtual path for server resources is modified.</summary>
      <param name="path">The internal rewrite path.</param>
      <param name="rebaseClientPath">true to reset the virtual path; false to keep the virtual path unchanged.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="path" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContext.RewritePath(System.String,System.String,System.String)">
      <summary>Rewrites the URL by using the given path, path information, and query string information.</summary>
      <param name="filePath">The internal rewrite path.</param>
      <param name="pathInfo">Additional path information for a resource.</param>
      <param name="queryString">The request query string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is not in the current application's root directory.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="filePath" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)">
      <summary>Rewrites the URL using the given virtual path, path information, query string information, and a Boolean value that specifies whether the client file path is set to the rewrite path. </summary>
      <param name="filePath">The virtual path to the resource that services the request.</param>
      <param name="pathInfo">Additional path information to use for the URL redirect.</param>
      <param name="queryString">The request query string to use for the URL redirect.</param>
      <param name="setClientFilePath">true to set the file path used for client resources to the value of the <paramref name="filePath" /> parameter; otherwise false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is not in the current application's root directory.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="filePath" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="P:System.Web.HttpContext.Server">
      <summary>Gets the <see cref="T:System.Web.HttpServerUtility" /> object that provides methods used in processing Web requests.</summary>
      <returns>The <see cref="T:System.Web.HttpServerUtility" /> for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.Session">
      <summary>Gets the <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current HTTP request.</summary>
      <returns>The <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.HttpContext.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)">
      <summary>Sets the type of session state behavior that is required in order to support an HTTP request.</summary>
      <param name="sessionStateBehavior">One of the enumeration values that specifies what type of session state behavior is required.</param>
      <exception cref="T:System.InvalidOperationException">The method was called after the <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event was raised. </exception>
    </member>
    <member name="P:System.Web.HttpContext.SkipAuthorization">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Web.Security.UrlAuthorizationModule" /> object should skip the authorization check for the current request.</summary>
      <returns>true if <see cref="T:System.Web.Security.UrlAuthorizationModule" /> should skip the authorization check; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Web.HttpContext.System#IServiceProvider#GetService(System.Type)">
      <summary>Returns an object for the current service type.</summary>
      <returns>A <see cref="T:System.Web.HttpContext" />; otherwise, null if no service is found.</returns>
      <param name="service">A type of <see cref="T:System.Web.HttpContext" /> service to set the service provider to.</param>
    </member>
    <member name="P:System.Web.HttpContext.Timestamp">
      <summary>Gets the initial timestamp of the current HTTP request.</summary>
      <returns>The timestamp of the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContext.Trace">
      <summary>Gets the <see cref="T:System.Web.TraceContext" /> object for the current HTTP response.</summary>
      <returns>The <see cref="T:System.Web.TraceContext" /> for the current HTTP response.</returns>
    </member>
    <member name="P:System.Web.HttpContext.User">
      <summary>Gets or sets security information for the current HTTP request.</summary>
      <returns>Security information for the current HTTP request.</returns>
    </member>
    <member name="T:System.Web.HttpContextBase">
      <summary>Serves as the base class for classes that contain HTTP-specific information about an individual HTTP request.</summary>
    </member>
    <member name="M:System.Web.HttpContextBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpContextBase.AddError(System.Exception)">
      <summary>When overridden in a derived class, adds an exception to the exception collection for the current HTTP request.</summary>
      <param name="errorInfo">The exception to add to the exception collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.AllErrors">
      <summary>When overridden in a derived class, gets an array of errors (if any) that accumulated when an HTTP request was being processed.</summary>
      <returns>An array of <see cref="T:System.Exception" /> objects for the current HTTP request, or null if no errors accumulated during the HTTP request processing.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Application">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.HttpApplicationState" /> object for the current HTTP request.</summary>
      <returns>The application state object for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.ApplicationInstance">
      <summary>When overridden in a derived class, gets or sets the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request.</summary>
      <returns>The object for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Cache">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.Caching.Cache" /> object for the current application domain.</summary>
      <returns>The cache for the current application domain.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.ClearError">
      <summary>When overridden in a derived class, clears all errors for the current HTTP request.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.CurrentHandler">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.IHttpHandler" /> object that represents the handler that is currently executing.</summary>
      <returns>An object that represents the currently executing handler. </returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.CurrentNotification">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Web.RequestNotification" /> value that indicates the <see cref="T:System.Web.HttpApplication" /> event that is currently processing. </summary>
      <returns>One of the <see cref="T:System.Web.RequestNotification" /> values.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Error">
      <summary>When overridden in a derived class, gets the first error (if any) that accumulated when an HTTP request was being processed.</summary>
      <returns>The first exception for the current HTTP request/response process, or null if no errors accumulated during the HTTP request processing.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetGlobalResourceObject(System.String,System.String)">
      <summary>When overridden in a derived class, gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>The requested application-level resource object, or null if no matching resource object is found.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>The requested application-level resource object, which is localized for the specified culture, or null if no matching resource object is found.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetLocalResourceObject(System.String,System.String)">
      <summary>When overridden in a derived class, gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>The requested page-level resource object, or null if no matching resource object is found.</returns>
      <param name="virtualPath">A string that represents the <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property of the local resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>When overridden in a derived class, gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>The requested local resource object, which is localized for the specified culture, or null if no matching resource object is found.</returns>
      <param name="virtualPath">A string that represents the <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property of the local resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource object.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetSection(System.String)">
      <summary>When overridden in a derived class, gets the specified configuration section of the current application's default configuration. </summary>
      <returns>The specified section, or null if the section does not exist.</returns>
      <param name="sectionName">The configuration section path (in XPath format) and the configuration element name.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.GetService(System.Type)">
      <summary>When overridden in a derived class, returns an object for the current service type.</summary>
      <returns>The current service type, or null if no service is found.</returns>
      <param name="serviceType">The type of service object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Handler">
      <summary>When overridden in a derived class, gets or sets the <see cref="T:System.Web.IHttpHandler" /> object that is responsible for processing the HTTP request.</summary>
      <returns>The object that is responsible for processing the HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.IsCustomErrorEnabled">
      <summary>When overridden in a derived class, gets a value that indicates whether custom errors are enabled for the current HTTP request.</summary>
      <returns>true if custom errors are enabled; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.IsDebuggingEnabled">
      <summary>When overridden in a derived class, gets a value that indicates whether the current HTTP request is in debug mode.</summary>
      <returns>true if the request is in debug mode; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.IsPostNotification">
      <summary>When overridden in a derived class, gets a value that indicates whether an <see cref="T:System.Web.HttpApplication" /> event has finished processing. </summary>
      <returns>true if the event has finished processing; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Items">
      <summary>When overridden in a derived class, gets a key/value collection that can be used to organize and share data between a module and a handler during an HTTP request.</summary>
      <returns>A key/value collection that provides access to an individual value in the collection by using a specified key.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.PreviousHandler">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.IHttpHandler" /> object for the parent handler.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> object that represents the parent handler, or null if no parent handler was found.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Profile">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.Profile.ProfileBase" /> object for the current user profile.</summary>
      <returns>If the profile properties are defined in the application configuration file and profiles are enabled for the application, an object that represents the current user profile; otherwise, null.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RemapHandler(System.Web.IHttpHandler)">
      <summary>When overridden in a derived class, specifies a handler for the request.</summary>
      <param name="handler">The object that should process the request.</param>
      <exception cref="T:System.NotImplementedException">A derived type fails to implement this method.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Request">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.HttpRequest" /> object for the current HTTP request.</summary>
      <returns>The current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Response">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.HttpResponse" /> object for the current HTTP response.</summary>
      <returns>The current HTTP response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RewritePath(System.String)">
      <summary>When overridden in a derived class, rewrites the URL by using the specified path.</summary>
      <param name="path">The replacement path.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RewritePath(System.String,System.Boolean)">
      <summary>When overridden in a derived class, rewrites the URL by using the specified path and a value that specifies whether the virtual path for server resources is modified.</summary>
      <param name="path">The replacement path.</param>
      <param name="rebaseClientPath">true to reset the virtual path; false to keep the virtual path unchanged.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RewritePath(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, rewrites the URL by using the specified path, path information, and query string information.</summary>
      <param name="filePath">The replacement path.</param>
      <param name="pathInfo">Additional path information for a resource.</param>
      <param name="queryString">The request query string.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.RewritePath(System.String,System.String,System.String,System.Boolean)">
      <summary>When overridden in a derived class, rewrites the URL by using the specified path, path information, query string information, and a value that specifies whether the client file path is set to the rewrite path. </summary>
      <param name="filePath">The replacement path.</param>
      <param name="pathInfo">Additional path information for a resource.</param>
      <param name="queryString">The request query string.</param>
      <param name="setClientFilePath">true to set the file path used for client resources to the value of the <paramref name="filePath" /> parameter; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Server">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.HttpServerUtility" /> object that provides methods that are used when Web requests are being processed.</summary>
      <returns>The server utility object for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Session">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.SessionState.HttpSessionState" /> object for the current HTTP request.</summary>
      <returns>The session-state object for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpContextBase.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)">
      <summary>When overridden in a derived class, sets the type of session state behavior that is required to support an HTTP request.</summary>
      <param name="sessionStateBehavior">One of the enumeration values that specifies what type of session state behavior is required.</param>
      <exception cref="T:System.NotImplementedException">A derived type fails to implement this method.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.SkipAuthorization">
      <summary>When overridden in a derived class, gets or sets a value that specifies whether the <see cref="T:System.Web.Security.UrlAuthorizationModule" /> object should skip the authorization check for the current request.</summary>
      <returns>true if <see cref="T:System.Web.Security.UrlAuthorizationModule" /> should skip the authorization check; otherwise, false. </returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Timestamp">
      <summary>When overridden in a derived class, gets the initial timestamp of the current HTTP request.</summary>
      <returns>The timestamp of the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.Trace">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.TraceContext" /> object for the current HTTP response.</summary>
      <returns>The trace object for the current HTTP response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpContextBase.User">
      <summary>When overridden in a derived class, gets or sets security information for the current HTTP request.</summary>
      <returns>An object that contains security information for the current HTTP request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpContextWrapper">
      <summary>Encapsulates the HTTP intrinsic object that contains HTTP-specific information about an individual HTTP request.</summary>
    </member>
    <member name="M:System.Web.HttpContextWrapper.#ctor(System.Web.HttpContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpContextWrapper" /> class by using the specified context object.</summary>
      <param name="httpContext">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpContext" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpContextWrapper.AddError(System.Exception)">
      <summary>Adds an exception to the exception collection for the current HTTP request.</summary>
      <param name="errorInfo">The exception to add to the exception collection.</param>
    </member>
    <member name="P:System.Web.HttpContextWrapper.AllErrors">
      <summary>Gets an array of errors (if any) that accumulated when an HTTP request was being processed.</summary>
      <returns>An array of <see cref="T:System.Exception" /> objects for the current HTTP request, or null if no errors accumulated during the HTTP request processing.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Application">
      <summary>Gets the <see cref="T:System.Web.HttpApplicationState" /> object for the current HTTP request.</summary>
      <returns>The state object for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.ApplicationInstance">
      <summary>Gets or sets the <see cref="T:System.Web.HttpApplication" /> object for the current HTTP request.</summary>
      <returns>The object for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Cache">
      <summary>Gets the <see cref="T:System.Web.Caching.Cache" /> object for the current application domain.</summary>
      <returns>The cache object for the current application domain.</returns>
    </member>
    <member name="M:System.Web.HttpContextWrapper.ClearError">
      <summary>Clears all errors for the current HTTP request.</summary>
    </member>
    <member name="P:System.Web.HttpContextWrapper.CurrentHandler">
      <summary>Gets the <see cref="T:System.Web.IHttpHandler" /> object that represents the handler that is currently executing.</summary>
      <returns>An object that represents the handler that is currently executing.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.CurrentNotification">
      <summary>Gets a <see cref="T:System.Web.RequestNotification" /> value that indicates the current <see cref="T:System.Web.HttpApplication" /> event that is processing.</summary>
      <returns>One of the <see cref="T:System.Web.RequestNotification" /> values.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Error">
      <summary>Gets the first error (if any) that accumulated when an HTTP request was being processed.</summary>
      <returns>The first exception for the current HTTP request, or null if no errors accumulated when the HTTP request was being processed. The default is null.</returns>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetGlobalResourceObject(System.String,System.String)">
      <summary>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>The requested application-level resource object, or null if no matching resource object is found.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>Gets an application-level resource object based on the specified <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>The requested application-level resource object, which is localized for the specified culture, or null if no matching resource object is found.</returns>
      <param name="classKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ClassKey" /> property of the requested resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetLocalResourceObject(System.String,System.String)">
      <summary>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties.</summary>
      <returns>The requested page-level resource object, or null if no matching resource object is found.</returns>
      <param name="virtualPath">A string that represents the <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property of the local resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>Gets a page-level resource object based on the specified <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> and <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" /> properties, and on the <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>The requested local resource object, which is localized for the specified culture, or null if no matching resource object is found.</returns>
      <param name="virtualPath">A string that represents the <see cref="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath" /> property of the local resource object.</param>
      <param name="resourceKey">A string that represents the <see cref="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey" />   property of the requested resource object.</param>
      <param name="culture">A string that represents the <see cref="T:System.Globalization.CultureInfo" /> object of the requested resource object.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetSection(System.String)">
      <summary>Gets the specified configuration section of the current application's default configuration.</summary>
      <returns>The specified section, or null if the section does not exist.</returns>
      <param name="sectionName">The configuration section path (in XPath format) and the configuration element name.</param>
    </member>
    <member name="M:System.Web.HttpContextWrapper.GetService(System.Type)">
      <summary>Returns an object for the current service type.</summary>
      <returns>The current service type, or null if no service is found.</returns>
      <param name="serviceType">The type of service to get.</param>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Handler">
      <summary>Gets or sets the <see cref="T:System.Web.IHttpHandler" /> object that is responsible for processing the HTTP request.</summary>
      <returns>The object that is responsible for processing the HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.IsCustomErrorEnabled">
      <summary>Gets a value that indicates whether custom errors are enabled for the current HTTP request.</summary>
      <returns>true if custom errors are enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.IsDebuggingEnabled">
      <summary>Gets a value that indicates whether the current HTTP request is in debug mode.</summary>
      <returns>true if the request is in debug mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.IsPostNotification">
      <summary>Gets a value that indicates whether an <see cref="T:System.Web.HttpApplication" /> event has finished processing.</summary>
      <returns>true if the event has finished processing; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Items">
      <summary>Gets a key/value collection that can be used to organize and share data between a module and a handler during an HTTP request.</summary>
      <returns>A key/value collection that provides access to an individual value in the collection by using a specified key.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.PreviousHandler">
      <summary>Gets the <see cref="T:System.Web.IHttpHandler" /> object for the parent handler.</summary>
      <returns>An <see cref="T:System.Web.IHttpHandler" /> object that represents the parent handler, or null if no parent handler was found.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Profile">
      <summary>Gets the <see cref="T:System.Web.Profile.ProfileBase" /> object for the current user profile.</summary>
      <returns>If profile properties are defined in the application configuration file and profiles are enabled for the application, an object that represents the current user profile; otherwise, null.</returns>
    </member>
    <member name="M:System.Web.HttpContextWrapper.RemapHandler(System.Web.IHttpHandler)">
      <summary>Enables you to specify a handler for the request.</summary>
      <param name="handler">The object that should process the request.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Web.HttpContextWrapper.RemapHandler(System.Web.IHttpHandler)" /> method was called after the <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event occurred.</exception>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Request">
      <summary>Gets the <see cref="T:System.Web.HttpRequestBase" /> object for the current HTTP request.</summary>
      <returns>The current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Response">
      <summary>Gets the <see cref="T:System.Web.HttpResponseBase" /> object for the current HTTP response.</summary>
      <returns>The current HTTP response.</returns>
    </member>
    <member name="M:System.Web.HttpContextWrapper.RewritePath(System.String)">
      <summary>Rewrites the URL by using the specified path.</summary>
      <param name="path">The replacement path.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">
        <paramref name="path" /> is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContextWrapper.RewritePath(System.String,System.Boolean)">
      <summary>Rewrites the URL by using the specified path and a value that specifies whether the virtual path for server resources is modified.</summary>
      <param name="path">The path to rewrite to.</param>
      <param name="rebaseClientPath">true to reset the virtual path; false to keep the virtual path unchanged.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">
        <paramref name="path" /> is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContextWrapper.RewritePath(System.String,System.String,System.String)">
      <summary>Rewrites the URL by using the specified path, path information, and query string information.</summary>
      <param name="filePath">The replacement path.</param>
      <param name="pathInfo">Additional path information for a resource.</param>
      <param name="queryString">The request query string.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filePath" /> parameter is null.</exception>
      <exception cref="T:System.Web.HttpException">The <paramref name="filePath" /> parameter is not in the current application's root directory.</exception>
    </member>
    <member name="M:System.Web.HttpContextWrapper.RewritePath(System.String,System.String,System.String,System.Boolean)">
      <summary>Rewrites the URL by using the specified path, path information, query string information, and a value that specifies whether the client file path is set to the rewrite path.</summary>
      <param name="filePath">The replacement path.</param>
      <param name="pathInfo">Additional path information for a resource.</param>
      <param name="queryString">The request query string.</param>
      <param name="setClientFilePath">true to set the file path used for client resources to the value of the <paramref name="filePath" /> parameter; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">
        <paramref name="filePath" /> is not in the current application's root directory.</exception>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Server">
      <summary>Gets the <see cref="T:System.Web.HttpServerUtilityBase" /> object that provides methods that are used when Web requests are being processed.</summary>
      <returns>The server utility object for the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Session">
      <summary>Gets the <see cref="T:System.Web.HttpSessionStateBase" /> object for the current HTTP request.</summary>
      <returns>The session-state object for the current HTTP request.</returns>
    </member>
    <member name="M:System.Web.HttpContextWrapper.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)">
      <summary>Sets the type of session state behavior that is required in order to support an HTTP request.</summary>
      <param name="sessionStateBehavior">One of the enumeration values that specifies what type of session state behavior is required.</param>
    </member>
    <member name="P:System.Web.HttpContextWrapper.SkipAuthorization">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Web.Security.UrlAuthorizationModule" /> object should skip the authorization check for the current request.</summary>
      <returns>true if <see cref="T:System.Web.Security.UrlAuthorizationModule" /> should skip the authorization check; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Timestamp">
      <summary>Gets the initial timestamp of the current HTTP request.</summary>
      <returns>The timestamp of the current HTTP request.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.Trace">
      <summary>Gets the <see cref="T:System.Web.TraceContext" /> object for the current HTTP response.</summary>
      <returns>The trace object for the current HTTP response.</returns>
    </member>
    <member name="P:System.Web.HttpContextWrapper.User">
      <summary>Gets or sets security information for the current HTTP request.</summary>
      <returns>An object that contains security information for the current HTTP request.</returns>
    </member>
    <member name="T:System.Web.HttpCookie">
      <summary>Provides a type-safe way to create and manipulate individual HTTP cookies.</summary>
    </member>
    <member name="M:System.Web.HttpCookie.#ctor(System.String)">
      <summary>Creates and names a new cookie.</summary>
      <param name="name">The name of the new cookie. </param>
    </member>
    <member name="M:System.Web.HttpCookie.#ctor(System.String,System.String)">
      <summary>Creates, names, and assigns a value to a new cookie.</summary>
      <param name="name">The name of the new cookie. </param>
      <param name="value">The value of the new cookie. </param>
    </member>
    <member name="P:System.Web.HttpCookie.Domain">
      <summary>Gets or sets the domain to associate the cookie with.</summary>
      <returns>The name of the domain to associate the cookie with. The default value is the current domain.</returns>
    </member>
    <member name="P:System.Web.HttpCookie.Expires">
      <summary>Gets or sets the expiration date and time for the cookie.</summary>
      <returns>The time of day (on the client) at which the cookie expires.</returns>
    </member>
    <member name="P:System.Web.HttpCookie.HasKeys">
      <summary>Gets a value indicating whether a cookie has subkeys.</summary>
      <returns>true if the cookie has subkeys, otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Web.HttpCookie.HttpOnly">
      <summary>Gets or sets a value that specifies whether a cookie is accessible by client-side script.</summary>
      <returns>true if the cookie has the HttpOnly attribute and cannot be accessed through a client-side script; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpCookie.Item(System.String)">
      <summary>Gets a shortcut to the <see cref="P:System.Web.HttpCookie.Values" /> property. This property is provided for compatibility with previous versions of Active Server Pages (ASP).</summary>
      <returns>The cookie value.</returns>
      <param name="key">The key (index) of the cookie value. </param>
    </member>
    <member name="P:System.Web.HttpCookie.Name">
      <summary>Gets or sets the name of a cookie.</summary>
      <returns>The default value is a null reference (Nothing in Visual Basic) unless the constructor specifies otherwise.</returns>
    </member>
    <member name="P:System.Web.HttpCookie.Path">
      <summary>Gets or sets the virtual path to transmit with the current cookie.</summary>
      <returns>The virtual path to transmit with the cookie. The default is the path of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpCookie.Secure">
      <summary>Gets or sets a value indicating whether to transmit the cookie using Secure Sockets Layer (SSL)--that is, over HTTPS only.</summary>
      <returns>true to transmit the cookie over an SSL connection (HTTPS); otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Web.HttpCookie.Value">
      <summary>Gets or sets an individual cookie value.</summary>
      <returns>The value of the cookie. The default value is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Web.HttpCookie.Values">
      <summary>Gets a collection of key/value pairs that are contained within a single cookie object.</summary>
      <returns>A collection of cookie values.</returns>
    </member>
    <member name="T:System.Web.HttpCookieCollection">
      <summary>Provides a type-safe way to manipulate HTTP cookies.</summary>
    </member>
    <member name="M:System.Web.HttpCookieCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpCookieCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpCookieCollection.Add(System.Web.HttpCookie)">
      <summary>Adds the specified cookie to the cookie collection.</summary>
      <param name="cookie">The <see cref="T:System.Web.HttpCookie" /> to add to the collection. </param>
    </member>
    <member name="P:System.Web.HttpCookieCollection.AllKeys">
      <summary>Gets a string array containing all the keys (cookie names) in the cookie collection.</summary>
      <returns>An array of cookie names.</returns>
    </member>
    <member name="M:System.Web.HttpCookieCollection.Clear">
      <summary>Clears all cookies from the cookie collection.</summary>
    </member>
    <member name="M:System.Web.HttpCookieCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies members of the cookie collection to an <see cref="T:System.Array" /> beginning at the specified index of the array.</summary>
      <param name="dest">The destination <see cref="T:System.Array" />. </param>
      <param name="index">The index of the destination array where copying starts. </param>
    </member>
    <member name="M:System.Web.HttpCookieCollection.Get(System.Int32)">
      <summary>Returns the <see cref="T:System.Web.HttpCookie" /> item with the specified index from the cookie collection.</summary>
      <returns>The <see cref="T:System.Web.HttpCookie" /> specified by <paramref name="index" />.</returns>
      <param name="index">The index of the cookie to return from the collection. </param>
    </member>
    <member name="M:System.Web.HttpCookieCollection.Get(System.String)">
      <summary>Returns the cookie with the specified name from the cookie collection.</summary>
      <returns>The <see cref="T:System.Web.HttpCookie" /> specified by <paramref name="name" />.</returns>
      <param name="name">The name of the cookie to retrieve from the collection. </param>
    </member>
    <member name="M:System.Web.HttpCookieCollection.GetKey(System.Int32)">
      <summary>Returns the key (name) of the cookie at the specified numerical index.</summary>
      <returns>The name of the cookie specified by <paramref name="index" />.</returns>
      <param name="index">The index of the key to retrieve from the collection. </param>
    </member>
    <member name="P:System.Web.HttpCookieCollection.Item(System.Int32)">
      <summary>Gets the cookie with the specified numerical index from the cookie collection.</summary>
      <returns>The <see cref="T:System.Web.HttpCookie" /> specified by <paramref name="index" />.</returns>
      <param name="index">The index of the cookie to retrieve from the collection. </param>
    </member>
    <member name="P:System.Web.HttpCookieCollection.Item(System.String)">
      <summary>Gets the cookie with the specified name from the cookie collection.</summary>
      <returns>The <see cref="T:System.Web.HttpCookie" /> specified by <paramref name="name." /></returns>
      <param name="name">Name of cookie to retrieve. </param>
    </member>
    <member name="M:System.Web.HttpCookieCollection.Remove(System.String)">
      <summary>Removes the cookie with the specified name from the collection.</summary>
      <param name="name">The name of the cookie to remove from the collection. </param>
    </member>
    <member name="M:System.Web.HttpCookieCollection.Set(System.Web.HttpCookie)">
      <summary>Updates the value of an existing cookie in a cookie collection.</summary>
      <param name="cookie">The <see cref="T:System.Web.HttpCookie" /> object to update. </param>
    </member>
    <member name="T:System.Web.HttpCookieMode">
      <summary>Specifies how cookies are used for a Web application.</summary>
    </member>
    <member name="F:System.Web.HttpCookieMode.UseUri">
      <summary>The calling feature uses the query string to store an identifier regardless of whether the browser or device supports cookies.</summary>
    </member>
    <member name="F:System.Web.HttpCookieMode.UseCookies">
      <summary>Cookies are used to persist user data regardless of whether the browser or device supports cookies.</summary>
    </member>
    <member name="F:System.Web.HttpCookieMode.AutoDetect">
      <summary>ASP.NET determines whether the requesting browser or device supports cookies. If the requesting browser or device supports cookies then <see cref="F:System.Web.HttpCookieMode.AutoDetect" /> uses cookies to persist user data; otherwise, an identifier is used in the query string. If the browser or device supports the use of cookies but cookies are currently disabled, cookies are still used by the requesting feature.</summary>
    </member>
    <member name="F:System.Web.HttpCookieMode.UseDeviceProfile">
      <summary>ASP.NET determines whether to use cookies based on <see cref="T:System.Web.HttpBrowserCapabilities" /> setting. If the setting indicates that the browser or device supports cookies, cookies are used; otherwise, an identifier is used in the query string.</summary>
    </member>
    <member name="T:System.Web.HttpException">
      <summary>Describes an exception that occurred during the processing of HTTP requests.</summary>
    </member>
    <member name="M:System.Web.HttpException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpException" /> class and creates an empty <see cref="T:System.Web.HttpException" /> object.</summary>
    </member>
    <member name="M:System.Web.HttpException.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpException" /> class using an HTTP response status code and an error message.</summary>
      <param name="httpCode">The HTTP response status code sent to the client corresponding to this error. </param>
      <param name="message">The error message displayed to the client when the exception is thrown. </param>
    </member>
    <member name="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpException" /> class using an HTTP response status code, an error message, and the <see cref="P:System.Exception.InnerException" /> property.</summary>
      <param name="httpCode">The HTTP response status code displayed on the client. </param>
      <param name="message">The error message displayed to the client when the exception is thrown. </param>
      <param name="innerException">The <see cref="P:System.Exception.InnerException" />, if any, that threw the current exception. </param>
    </member>
    <member name="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpException" /> class using an HTTP response status code, an error message, and an exception code.</summary>
      <param name="httpCode">The HTTP response status code displayed on the client. </param>
      <param name="message">The error message displayed to the client when the exception is thrown. </param>
      <param name="hr">The exception code that defines the error. </param>
    </member>
    <member name="M:System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that holds the contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Web.HttpException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpException" /> class using a supplied error message.</summary>
      <param name="message">The error message displayed to the client when the exception is thrown. </param>
    </member>
    <member name="M:System.Web.HttpException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpException" /> class using an error message and the <see cref="P:System.Exception.InnerException" /> property.</summary>
      <param name="message">The error message displayed to the client when the exception is thrown. </param>
      <param name="innerException">The <see cref="P:System.Exception.InnerException" />, if any, that threw the current exception. </param>
    </member>
    <member name="M:System.Web.HttpException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpException" /> class using an error message and an exception code.</summary>
      <param name="message">The error message displayed to the client when the exception is thrown. </param>
      <param name="hr">The exception code that defines the error. </param>
    </member>
    <member name="M:System.Web.HttpException.CreateFromLastError(System.String)">
      <summary>Creates a new <see cref="T:System.Web.HttpException" /> exception based on the error code that is returned from the Win32 API GetLastError() method.</summary>
      <returns>An <see cref="T:System.Web.HttpException" /> based on the error code that is returned from a call to the Win32 API GetLastError() method.</returns>
      <param name="message">The error message displayed to the client when the exception is thrown. </param>
    </member>
    <member name="M:System.Web.HttpException.GetHtmlErrorMessage">
      <summary>Gets the HTML error message to return to the client.</summary>
      <returns>The HTML error message.</returns>
    </member>
    <member name="M:System.Web.HttpException.GetHttpCode">
      <summary>Gets the HTTP response status code to return to the client. </summary>
      <returns>A non-zero HTTP code representing the exception or the <see cref="P:System.Exception.InnerException" /> code; otherwise, HTTP response status code 500.</returns>
    </member>
    <member name="M:System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Gets information about the exception and adds it to the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that holds the contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Web.HttpException.WebEventCode">
      <summary>Gets the event codes that are associated with the HTTP exception.</summary>
      <returns>An integer representing a Web event code.</returns>
    </member>
    <member name="T:System.Web.HttpFileCollection">
      <summary>Provides access to and organizes files uploaded by a client.</summary>
    </member>
    <member name="P:System.Web.HttpFileCollection.AllKeys">
      <summary>Gets a string array containing the keys (names) of all members in the file collection.</summary>
      <returns>An array of file names.</returns>
    </member>
    <member name="M:System.Web.HttpFileCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies members of the file collection to an <see cref="T:System.Array" /> beginning at the specified index of the array.</summary>
      <param name="dest">The destination <see cref="T:System.Array" />. </param>
      <param name="index">The index of the destination array where copying starts. </param>
    </member>
    <member name="M:System.Web.HttpFileCollection.Get(System.Int32)">
      <summary>Returns the <see cref="T:System.Web.HttpPostedFile" /> object with the specified numerical index from the file collection.</summary>
      <returns>An <see cref="T:System.Web.HttpPostedFile" /> object.</returns>
      <param name="index">The index of the object to be returned from the file collection. </param>
    </member>
    <member name="M:System.Web.HttpFileCollection.Get(System.String)">
      <summary>Returns the <see cref="T:System.Web.HttpPostedFile" /> object with the specified name from the file collection.</summary>
      <returns>An <see cref="T:System.Web.HttpPostedFile" /> object. </returns>
      <param name="name">The name of the object to be returned from a file collection. </param>
    </member>
    <member name="M:System.Web.HttpFileCollection.GetKey(System.Int32)">
      <summary>Returns the name of the <see cref="T:System.Web.HttpFileCollection" /> member with the specified numerical index.</summary>
      <returns>The name of the <see cref="T:System.Web.HttpFileCollection" /> member specified by <paramref name="index" />.</returns>
      <param name="index">The index of the object name to be returned. </param>
    </member>
    <member name="P:System.Web.HttpFileCollection.Item(System.Int32)">
      <summary>Gets the object with the specified numerical index from the <see cref="T:System.Web.HttpFileCollection" />.</summary>
      <returns>The <see cref="T:System.Web.HttpPostedFile" /> specified by <paramref name="index" />.</returns>
      <param name="index">The index of the item to get from the file collection. </param>
    </member>
    <member name="P:System.Web.HttpFileCollection.Item(System.String)">
      <summary>Gets the object with the specified name from the file collection.</summary>
      <returns>The <see cref="T:System.Web.HttpPostedFile" /> specified by <paramref name="name" />.</returns>
      <param name="name">Name of item to be returned. </param>
    </member>
    <member name="T:System.Web.HttpFileCollectionBase">
      <summary>Serves as the base class for classes that provide access to files that were uploaded by a client.</summary>
    </member>
    <member name="M:System.Web.HttpFileCollectionBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="P:System.Web.HttpFileCollectionBase.AllKeys">
      <summary>When overridden in a derived class, gets an array that contains the keys (names) of all posted file objects in the collection.</summary>
      <returns>An array of file names.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpFileCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>When overridden in a derived class, copies the elements of the collection to an array, starting at the specified index in the array.</summary>
      <param name="dest">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionBase.Count">
      <summary>When overridden in a derived class, gets the number of posted file objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpFileCollectionBase.Get(System.Int32)">
      <summary>When overridden in a derived class, returns the posted file object at the specified index.</summary>
      <returns>The posted file object specified by <paramref name="index" />.</returns>
      <param name="index">The index of the object to return.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpFileCollectionBase.Get(System.String)">
      <summary>When overridden in a derived class, returns the posted file object that has the specified name from the collection.</summary>
      <returns>The posted file object that is specified by <paramref name="name" />.</returns>
      <param name="name">The name of the object to return.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpFileCollectionBase.GetEnumerator">
      <summary>When overridden in a derived class, returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpFileCollectionBase.GetKey(System.Int32)">
      <summary>When overridden in a derived class, returns the name of the posted file object at the specified index.</summary>
      <returns>The name of the posted file object that is specified by <paramref name="index" />.</returns>
      <param name="index">The index of the object name to return.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionBase.IsSynchronized">
      <summary>When overridden in a derived class, gets a value that indicates whether access to the collection is thread-safe.</summary>
      <returns>true if access is synchronized (thread-safe); otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionBase.Item(System.Int32)">
      <summary>When overridden in a derived class, gets the posted file object at the specified index.</summary>
      <returns>The posted file object specified by <paramref name="index" />.</returns>
      <param name="index">The index of the object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionBase.Item(System.String)">
      <summary>When overridden in a derived class, gets the posted file object that has the specified name from the collection.</summary>
      <returns>The posted file object that is specified by <paramref name="name" />.</returns>
      <param name="name">The name of the object to return.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionBase.SyncRoot">
      <summary>When overridden in a derived class, gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpFileCollectionWrapper">
      <summary>Encapsulates the HTTP intrinsic object that provides access to files that were uploaded by a client.</summary>
    </member>
    <member name="M:System.Web.HttpFileCollectionWrapper.#ctor(System.Web.HttpFileCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpFileCollectionWrapper" /> class. </summary>
      <param name="httpFileCollection">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpApplicationState" /> is null.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionWrapper.AllKeys">
      <summary>Gets an array that contains the keys (names) of all posted file objects in the collection.</summary>
      <returns>An array of file names.</returns>
    </member>
    <member name="M:System.Web.HttpFileCollectionWrapper.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at the specified index in the array.</summary>
      <param name="dest">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Web.HttpFileCollectionWrapper" /> object is greater than the available space from <paramref name="index" /> to the end of the destination array.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Web.HttpFileCollectionWrapper" /> object cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionWrapper.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpFileCollectionWrapper.Get(System.Int32)">
      <summary>Returns the posted file object at the specified index.</summary>
      <returns>The posted file object specified by <paramref name="index" />.</returns>
      <param name="index">The index of the item to return.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Web.HttpFileCollectionWrapper.Get(System.String)">
      <summary>Returns the posted file object that has the specified name from the collection.</summary>
      <returns>The posted file object specified by <paramref name="name" />, if found; otherwise, null.</returns>
      <param name="name">The name of the object to return.</param>
    </member>
    <member name="M:System.Web.HttpFileCollectionWrapper.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.HttpFileCollectionWrapper.GetKey(System.Int32)">
      <summary>Returns the name of the posted file object at the specified index.</summary>
      <returns>The name of the posted file object that is specified by <paramref name="index" />.</returns>
      <param name="index">The index of the object name to return.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="M:System.Web.HttpFileCollectionWrapper.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Returns the data that is required in order to serialize the <see cref="T:System.Web.HttpFileCollectionWrapper" /> object.</summary>
      <param name="info">The information that is required in order to serialize the <see cref="T:System.Web.HttpFileCollectionWrapper" /> object.</param>
      <param name="context">The source and destination of the serialized stream that is associated with the <see cref="T:System.Web.HttpFileCollectionWrapper" /> object.</param>
    </member>
    <member name="P:System.Web.HttpFileCollectionWrapper.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is thread-safe.</summary>
      <returns>true if access is synchronized (thread-safe); otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpFileCollectionWrapper.Item(System.Int32)">
      <summary>Gets the posted file object at the specified index.</summary>
      <returns>The posted file object specified by <paramref name="index" />.</returns>
      <param name="index">The index of the item to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionWrapper.Item(System.String)">
      <summary>Gets the posted file object that has the specified name from the collection.</summary>
      <returns>The posted file object specified by <paramref name="name" />, if found; otherwise, null.</returns>
      <param name="name">The name of the object to get.</param>
    </member>
    <member name="P:System.Web.HttpFileCollectionWrapper.Keys">
      <summary>Gets a <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> instance that contains all the keys in the <see cref="T:System.Web.HttpApplicationStateWrapper" /> instance.</summary>
      <returns>A collection that contains all the keys in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpFileCollectionWrapper.OnDeserialization(System.Object)">
      <summary>Raises the deserialization event when deserialization is finished.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that is associated with the current <see cref="T:System.Web.HttpFileCollectionWrapper" /> instance is invalid.</exception>
    </member>
    <member name="P:System.Web.HttpFileCollectionWrapper.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Web.HttpModuleCollection">
      <summary>Provides a way to index and retrieve a collection of <see cref="T:System.Web.IHttpModule" /> objects.</summary>
    </member>
    <member name="P:System.Web.HttpModuleCollection.AllKeys">
      <summary>Gets a string array containing all the keys (module names) in the <see cref="T:System.Web.HttpModuleCollection" />.</summary>
      <returns>An array of module names.</returns>
    </member>
    <member name="M:System.Web.HttpModuleCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies members of the module collection to an <see cref="T:System.Array" />, beginning at the specified index of the array.</summary>
      <param name="dest">The destination <see cref="T:System.Array" />. </param>
      <param name="index">The index of the destination <see cref="T:System.Array" /> where copying starts. </param>
    </member>
    <member name="M:System.Web.HttpModuleCollection.Get(System.Int32)">
      <summary>Returns the <see cref="T:System.Web.IHttpModule" /> object with the specified index from the <see cref="T:System.Web.HttpModuleCollection" />.</summary>
      <returns>The <see cref="T:System.Web.IHttpModule" /> member specified by the <paramref name="index" /> parameter.</returns>
      <param name="index">The index of the <see cref="T:System.Web.IHttpModule" /> object to return from the collection. </param>
    </member>
    <member name="M:System.Web.HttpModuleCollection.Get(System.String)">
      <summary>Returns the <see cref="T:System.Web.IHttpModule" /> object with the specified name from the <see cref="T:System.Web.HttpModuleCollection" />.</summary>
      <returns>The <see cref="T:System.Web.IHttpModule" /> member specified by the <paramref name="name" /> parameter.</returns>
      <param name="name">The key of the item to be retrieved. </param>
    </member>
    <member name="M:System.Web.HttpModuleCollection.GetKey(System.Int32)">
      <summary>Returns the key (name) of the <see cref="T:System.Web.IHttpModule" /> object at the specified numerical index.</summary>
      <returns>The name of the <see cref="T:System.Web.IHttpModule" /> member specified by the <paramref name="index" /> parameter.</returns>
      <param name="index">Index of the key to retrieve from the collection. </param>
    </member>
    <member name="P:System.Web.HttpModuleCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Web.IHttpModule" /> object with the specified numerical index from the <see cref="T:System.Web.HttpModuleCollection" />.</summary>
      <returns>The <see cref="T:System.Web.IHttpModule" /> object module specified by the <paramref name="index" /> parameter.</returns>
      <param name="index">The index of the <see cref="T:System.Web.IHttpModule" /> object to retrieve from the collection. </param>
    </member>
    <member name="P:System.Web.HttpModuleCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Web.IHttpModule" /> object with the specified name from the <see cref="T:System.Web.HttpModuleCollection" />.</summary>
      <returns>The <see cref="T:System.Web.IHttpModule" /> object module specified by the <paramref name="name" /> parameter.</returns>
      <param name="name">The key of the item to be retrieved. </param>
    </member>
    <member name="T:System.Web.HttpParseException">
      <summary>The exception that is thrown when a parse error occurs.</summary>
    </member>
    <member name="M:System.Web.HttpParseException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpParseException" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpParseException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpParseException" /> class with a specified error message. </summary>
      <param name="message">The exception message to specify when the error occurs.</param>
    </member>
    <member name="M:System.Web.HttpParseException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpParseException" /> class with a specified error message and a reference to the inner. </summary>
      <param name="message">The exception message to specify when the error occurs.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Web.HttpParseException.#ctor(System.String,System.Exception,System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpParseException" /> class with specific information about the source code being compiled and the line number on which the exception occurred. </summary>
      <param name="message">The exception message to specify when the error occurs.</param>
      <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException" /> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
      <param name="virtualPath">The virtual path for the exception.</param>
      <param name="sourceCode">The source code being compiled when the exception occurs.</param>
      <param name="line">The line number on which the exception occurred.</param>
    </member>
    <member name="P:System.Web.HttpParseException.FileName">
      <summary>Gets the name of the file being parsed when the error occurs.</summary>
      <returns>The physical path to the source file that is being parsed when the error occurs; otherwise, null, if the physical path is null.</returns>
    </member>
    <member name="M:System.Web.HttpParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.HttpParseException.Line">
      <summary>Gets the number of the line being parsed when the error occurs.</summary>
      <returns>The number of the line being parsed when the error occurs. This value is 1-based, not 0-based.</returns>
    </member>
    <member name="P:System.Web.HttpParseException.ParserErrors">
      <summary>Gets the parser errors for the current exception.</summary>
      <returns>A collection of the parser errors for the current exception.</returns>
    </member>
    <member name="P:System.Web.HttpParseException.VirtualPath">
      <summary>Gets the virtual path to source file that generated the error.</summary>
      <returns>The virtual path to the source file that generated the error.</returns>
    </member>
    <member name="T:System.Web.HttpPostedFile">
      <summary>Provides access to individual files that have been uploaded by a client.</summary>
    </member>
    <member name="P:System.Web.HttpPostedFile.ContentLength">
      <summary>Gets the size of an uploaded file, in bytes.</summary>
      <returns>The file length, in bytes.</returns>
    </member>
    <member name="P:System.Web.HttpPostedFile.ContentType">
      <summary>Gets the MIME content type of a file sent by a client.</summary>
      <returns>The MIME content type of the uploaded file.</returns>
    </member>
    <member name="P:System.Web.HttpPostedFile.FileName">
      <summary>Gets the fully qualified name of the file on the client.</summary>
      <returns>The name of the client's file, including the directory path.</returns>
    </member>
    <member name="P:System.Web.HttpPostedFile.InputStream">
      <summary>Gets a <see cref="T:System.IO.Stream" /> object that points to an uploaded file to prepare for reading the contents of the file.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> pointing to a file.</returns>
    </member>
    <member name="M:System.Web.HttpPostedFile.SaveAs(System.String)">
      <summary>Saves the contents of an uploaded file.</summary>
      <param name="filename">The name of the saved file. </param>
      <exception cref="T:System.Web.HttpException">The <see cref="P:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath" /> property of the <see cref="T:System.Web.Configuration.HttpRuntimeSection" /> object is set to true, but <paramref name="filename" /> is not an absolute path.</exception>
    </member>
    <member name="T:System.Web.HttpPostedFileBase">
      <summary>Serves as the base class for classes that provide access to individual files that have been uploaded by a client.</summary>
    </member>
    <member name="M:System.Web.HttpPostedFileBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="P:System.Web.HttpPostedFileBase.ContentLength">
      <summary>When overridden in a derived class, gets the size of an uploaded file, in bytes.</summary>
      <returns>The length of the file, in bytes.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpPostedFileBase.ContentType">
      <summary>When overridden in a derived class, gets the MIME content type of an uploaded file.</summary>
      <returns>The MIME content type of the file.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpPostedFileBase.FileName">
      <summary>When overridden in a derived class, gets the fully qualified name of the file on the client.</summary>
      <returns>The name of the file on the client, which includes the directory path.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpPostedFileBase.InputStream">
      <summary>When overridden in a derived class, gets a <see cref="T:System.IO.Stream" /> object that points to an uploaded file to prepare for reading the contents of the file.</summary>
      <returns>An object for reading a file.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpPostedFileBase.SaveAs(System.String)">
      <summary>When overridden in a derived class, saves the contents of an uploaded file.</summary>
      <param name="filename">The name of the file to save.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpPostedFileWrapper">
      <summary>Encapsulates the HTTP intrinsic object that provides access to individual files that have been uploaded by a client.</summary>
    </member>
    <member name="M:System.Web.HttpPostedFileWrapper.#ctor(System.Web.HttpPostedFile)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpPostedFileWrapper" /> class. </summary>
      <param name="httpPostedFile">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpApplicationState" /> is null.</exception>
    </member>
    <member name="P:System.Web.HttpPostedFileWrapper.ContentLength">
      <summary>Gets the size of an uploaded file, in bytes.</summary>
      <returns>The length of the file, in bytes.</returns>
    </member>
    <member name="P:System.Web.HttpPostedFileWrapper.ContentType">
      <summary>Gets the MIME content type of an uploaded file.</summary>
      <returns>The MIME content type of the file.</returns>
    </member>
    <member name="P:System.Web.HttpPostedFileWrapper.FileName">
      <summary>Gets the fully qualified name of the file on the client.</summary>
      <returns>The name of the file on the client, which includes the directory path.</returns>
    </member>
    <member name="P:System.Web.HttpPostedFileWrapper.InputStream">
      <summary>Gets a <see cref="T:System.IO.Stream" /> object that points to an uploaded file to prepare for reading the contents of the file.</summary>
      <returns>An object for reading a file.</returns>
    </member>
    <member name="M:System.Web.HttpPostedFileWrapper.SaveAs(System.String)">
      <summary>Saves the contents of an uploaded file.</summary>
      <param name="filename">The name of the file to save.</param>
    </member>
    <member name="T:System.Web.HttpRequest">
      <summary>Enables ASP.NET to read the HTTP values sent by a client during a Web request. </summary>
    </member>
    <member name="M:System.Web.HttpRequest.#ctor(System.String,System.String,System.String)">
      <summary>Initializes an <see cref="T:System.Web.HttpRequest" /> object.</summary>
      <param name="filename">The name of the file associated with the request. </param>
      <param name="url">Information regarding the URL of the current request. </param>
      <param name="queryString">The entire query string sent with the request (everything after the'?'). </param>
    </member>
    <member name="P:System.Web.HttpRequest.AcceptTypes">
      <summary>Gets a string array of client-supported MIME accept types.</summary>
      <returns>A string array of client-supported MIME accept types.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.AnonymousID">
      <summary>Gets the anonymous identifier for the user, if present.</summary>
      <returns>A string representing the current anonymous user identifier.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.ApplicationPath">
      <summary>Gets the ASP.NET application's virtual application root path on the server.</summary>
      <returns>The virtual path of the current application.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath">
      <summary>Gets the virtual path of the application root and makes it relative by using the tilde (~) notation for the application root (as in "~/page.aspx").</summary>
      <returns>The virtual path of the application root for the current request.</returns>
    </member>
    <member name="M:System.Web.HttpRequest.BinaryRead(System.Int32)">
      <summary>Performs a binary read of a specified number of bytes from the current input stream.</summary>
      <returns>A byte array.</returns>
      <param name="count">The number of bytes to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is 0.- or -<paramref name="count" /> is greater than the number of bytes available. </exception>
    </member>
    <member name="P:System.Web.HttpRequest.Browser">
      <summary>Gets or sets information about the requesting client's browser capabilities.</summary>
      <returns>An <see cref="T:System.Web.HttpBrowserCapabilities" /> object listing the capabilities of the client's browser.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.BufferlessInputStream">
      <summary>Gets a <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body.</returns>
      <exception cref="T:System.Web.HttpException">The request's entity body has already been loaded and parsed. Examples of properties that cause the entity body to be loaded and parsed include the following:<see cref="P:System.Web.HttpRequest.Form" /><see cref="P:System.Web.HttpRequest.InputStream" /><see cref="P:System.Web.HttpRequest.Files" /></exception>
    </member>
    <member name="P:System.Web.HttpRequest.ClientCertificate">
      <summary>Gets the current request's client security certificate.</summary>
      <returns>An <see cref="T:System.Web.HttpClientCertificate" /> object containing information about the client's security certificate settings.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.ContentEncoding">
      <summary>Gets or sets the character set of the entity-body.</summary>
      <returns>An <see cref="T:System.Text.Encoding" /> object representing the client's character set.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.ContentLength">
      <summary>Specifies the length, in bytes, of content sent by the client.</summary>
      <returns>The length, in bytes, of content sent by the client.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.ContentType">
      <summary>Gets or sets the MIME content type of the incoming request.</summary>
      <returns>A string representing the MIME content type of the incoming request, for example, "text/html". Additional common MIME types include "audio.wav", "image/gif", and "application/pdf".</returns>
    </member>
    <member name="P:System.Web.HttpRequest.Cookies">
      <summary>Gets a collection of cookies sent by the client.</summary>
      <returns>An <see cref="T:System.Web.HttpCookieCollection" /> object representing the client's cookie variables.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.CurrentExecutionFilePath">
      <summary>Gets the virtual path of the current request.</summary>
      <returns>The virtual path of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.CurrentExecutionFilePathExtension">
      <summary>Gets the extension of the file name that is specified in the <see cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" /> property.</summary>
      <returns>The extension of the file name that is specified in the <see cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" /> property.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.FilePath">
      <summary>Gets the virtual path of the current request.</summary>
      <returns>The virtual path of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.Files">
      <summary>Gets the collection of files uploaded by the client, in multipart MIME format.</summary>
      <returns>An <see cref="T:System.Web.HttpFileCollection" /> object representing a collection of files uploaded by the client. The items of the <see cref="T:System.Web.HttpFileCollection" /> object are of type <see cref="T:System.Web.HttpPostedFile" />.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.Filter">
      <summary>Gets or sets the filter to use when reading the current input stream.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object to be used as the filter.</returns>
      <exception cref="T:System.Web.HttpException">The specified <see cref="T:System.IO.Stream" /> is invalid.</exception>
    </member>
    <member name="P:System.Web.HttpRequest.Form">
      <summary>Gets a collection of form variables.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> representing a collection of form variables.</returns>
    </member>
    <member name="M:System.Web.HttpRequest.GetChannelBindingToken(System.IntPtr@,System.Int32@)">
      <summary>Use the <see cref="P:System.Web.HttpRequest.HttpChannelBinding" /> property instead.</summary>
      <param name="token">The token.</param>
      <param name="size">The size of the token.</param>
    </member>
    <member name="P:System.Web.HttpRequest.Headers">
      <summary>Gets a collection of HTTP headers.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of headers.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.HttpChannelBinding">
      <summary>Gets the <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> object of the current <see cref="T:System.Web.HttpWorkerRequest" /> instance.</summary>
      <returns>The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> object of the current <see cref="T:System.Web.HttpWorkerRequest" /> instance.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The current <see cref="T:System.Web.HttpWorkerRequest" /> object is not a System.Web.Hosting.IIS7WorkerRequest object or a System.Web.Hosting.ISAPIWorkerRequestInProc object.</exception>
    </member>
    <member name="P:System.Web.HttpRequest.HttpMethod">
      <summary>Gets the HTTP data transfer method (such as GET, POST, or HEAD) used by the client.</summary>
      <returns>The HTTP data transfer method used by the client.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.InputStream">
      <summary>Gets the contents of the incoming HTTP entity body.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object representing the contents of the incoming HTTP content body.</returns>
    </member>
    <member name="M:System.Web.HttpRequest.InsertEntityBody">
      <summary>Provides IIS with a copy of the HTTP request entity body.</summary>
      <exception cref="T:System.PlatformNotSupportedException">The method was invoked on a version of IIS earlier than IIS 7.0. </exception>
    </member>
    <member name="M:System.Web.HttpRequest.InsertEntityBody(System.Byte[],System.Int32,System.Int32)">
      <summary>Provides IIS with a copy of the HTTP request entity body and with information about the request entity object.</summary>
      <param name="buffer">An array that contains the request entity data.</param>
      <param name="offset">The zero-based position in <paramref name="buffer" /> at which to begin storing the request entity data.</param>
      <param name="count">The number of bytes to read into the <paramref name="buffer" /> array.</param>
      <exception cref="T:System.PlatformNotSupportedException">The method was invoked on a version of IIS earlier than IIS 7.0. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is a negative value. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is a negative value.</exception>
      <exception cref="T:System.ArgumentException">The number of items in <paramref name="count" /> is larger than the available space in <paramref name="buffer" />, given the <paramref name="offset" /> value.</exception>
    </member>
    <member name="P:System.Web.HttpRequest.IsAuthenticated">
      <summary>Gets a value indicating whether the request has been authenticated.</summary>
      <returns>true if the request is authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.IsLocal">
      <summary>Gets a value indicating whether the request is from the local computer.</summary>
      <returns>true if the request is from the local computer; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.IsSecureConnection">
      <summary>Gets a value indicating whether the HTTP connection uses secure sockets (that is, HTTPS).</summary>
      <returns>true if the connection is an SSL connection; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.Item(System.String)">
      <summary>Gets the specified object from the <see cref="P:System.Web.HttpRequest.Cookies" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.QueryString" /> or <see cref="P:System.Web.HttpRequest.ServerVariables" /> collections.</summary>
      <returns>The <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.Cookies" />, or <see cref="P:System.Web.HttpRequest.ServerVariables" /> collection member specified in the <paramref name="key" /> parameter. If the specified <paramref name="key" /> is not found, then null is returned.</returns>
      <param name="key">The name of the collection member to get. </param>
    </member>
    <member name="P:System.Web.HttpRequest.LogonUserIdentity">
      <summary>Gets the <see cref="T:System.Security.Principal.WindowsIdentity" /> type for the current user.</summary>
      <returns>A <see cref="T:System.Security.Principal.WindowsIdentity" /> object for the current Microsoft Internet Information Services (IIS) authentication settings.</returns>
      <exception cref="T:System.InvalidOperationException">The Web application is running in IIS 7 integrated mode and the <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> event has not yet been raised.</exception>
    </member>
    <member name="M:System.Web.HttpRequest.MapImageCoordinates(System.String)">
      <summary>Maps an incoming image-field form parameter to appropriate x-coordinate and y-coordinate values.</summary>
      <returns>A two-dimensional array of integers.</returns>
      <param name="imageFieldName">The name of the form image map. </param>
    </member>
    <member name="M:System.Web.HttpRequest.MapPath(System.String)">
      <summary>Maps the specified virtual path to a physical path.</summary>
      <returns>The physical path on the server specified by <paramref name="virtualPath" />.</returns>
      <param name="virtualPath">The virtual path (absolute or relative) for the current request. </param>
      <exception cref="T:System.Web.HttpException">No <see cref="T:System.Web.HttpContext" /> object is defined for the request. </exception>
    </member>
    <member name="M:System.Web.HttpRequest.MapPath(System.String,System.String,System.Boolean)">
      <summary>Maps the specified virtual path to a physical path.</summary>
      <returns>The physical path on the server.</returns>
      <param name="virtualPath">The virtual path (absolute or relative) for the current request. </param>
      <param name="baseVirtualDir">The virtual base directory path used for relative resolution. </param>
      <param name="allowCrossAppMapping">true to indicate that <paramref name="virtualPath" /> may belong to another application; otherwise, false. </param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="allowCrossMapping" /> is false and <paramref name="virtualPath" /> belongs to another application. </exception>
      <exception cref="T:System.Web.HttpException">No <see cref="T:System.Web.HttpContext" /> object is defined for the request. </exception>
    </member>
    <member name="P:System.Web.HttpRequest.Params">
      <summary>Gets a combined collection of <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.ServerVariables" />, and <see cref="P:System.Web.HttpRequest.Cookies" /> items.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> object. </returns>
    </member>
    <member name="P:System.Web.HttpRequest.Path">
      <summary>Gets the virtual path of the current request.</summary>
      <returns>The virtual path of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.PathInfo">
      <summary>Gets additional path information for a resource with a URL extension.</summary>
      <returns>Additional path information for a resource.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.PhysicalApplicationPath">
      <summary>Gets the physical file system path of the currently executing server application's root directory.</summary>
      <returns>The file system path of the current application's root directory.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.PhysicalPath">
      <summary>Gets the physical file system path corresponding to the requested URL.</summary>
      <returns>The file system path of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.QueryString">
      <summary>Gets the collection of HTTP query string variables.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> containing the collection of query string variables sent by the client. For example, If the request URL is <paramref name="http://www.contoso.com/default.aspx?id=44" /> then the value of <see cref="P:System.Web.HttpRequest.QueryString" /> is "<paramref name="id=44" />".</returns>
    </member>
    <member name="P:System.Web.HttpRequest.RawUrl">
      <summary>Gets the raw URL of the current request.</summary>
      <returns>The raw URL of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.RequestContext">
      <summary>Gets the <see cref="T:System.Web.Routing.RequestContext" /> instance of the current request.</summary>
      <returns>The <see cref="T:System.Web.Routing.RequestContext" /> instance of the current request. For non-routed requests, the <see cref="T:System.Web.Routing.RequestContext" /> object that is returned is empty.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.RequestType">
      <summary>Gets or sets the HTTP data transfer method (GET or POST) used by the client.</summary>
      <returns>A string representing the HTTP invocation type sent by the client.</returns>
    </member>
    <member name="M:System.Web.HttpRequest.SaveAs(System.String,System.Boolean)">
      <summary>Saves an HTTP request to disk.</summary>
      <param name="filename">The physical drive path. </param>
      <param name="includeHeaders">A Boolean value specifying whether an HTTP header should be saved to disk. </param>
      <exception cref="T:System.Web.HttpException">The <see cref="P:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath" /> property of the <see cref="T:System.Web.Configuration.HttpRuntimeSection" /> is set to true but <paramref name="filename" /> is not an absolute path.</exception>
    </member>
    <member name="P:System.Web.HttpRequest.ServerVariables">
      <summary>Gets a collection of Web server variables.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of server variables.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.TotalBytes">
      <summary>Gets the number of bytes in the current input stream.</summary>
      <returns>The number of bytes in the input stream.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.Url">
      <summary>Gets information about the URL of the current request.</summary>
      <returns>A <see cref="T:System.Uri" /> object containing information regarding the URL of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.UrlReferrer">
      <summary>Gets information about the URL of the client's previous request that linked to the current URL.</summary>
      <returns>A <see cref="T:System.Uri" /> object.</returns>
      <exception cref="T:System.UriFormatException">The HTTP Referer request header is malformed and cannot be converted to a <see cref="T:System.Uri" /> object. </exception>
    </member>
    <member name="P:System.Web.HttpRequest.UserAgent">
      <summary>Gets the raw user agent string of the client browser.</summary>
      <returns>The raw user agent string of the client browser.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.UserHostAddress">
      <summary>Gets the IP host address of the remote client.</summary>
      <returns>The IP address of the remote client.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.UserHostName">
      <summary>Gets the DNS name of the remote client.</summary>
      <returns>The DNS name of the remote client.</returns>
    </member>
    <member name="P:System.Web.HttpRequest.UserLanguages">
      <summary>Gets a sorted string array of client language preferences.</summary>
      <returns>A sorted string array of client language preferences, or null if empty.</returns>
    </member>
    <member name="M:System.Web.HttpRequest.ValidateInput">
      <summary>Causes validation to occur for the collections accessed through the <see cref="P:System.Web.HttpRequest.Cookies" />, <see cref="P:System.Web.HttpRequest.Form" />, and <see cref="P:System.Web.HttpRequest.QueryString" /> properties.</summary>
      <exception cref="T:System.Web.HttpRequestValidationException">Potentially dangerous data was received from the client. </exception>
    </member>
    <member name="T:System.Web.HttpRequestBase">
      <summary>Serves as the base class for classes that enable ASP.NET to read the HTTP values sent by a client during a Web request.</summary>
    </member>
    <member name="M:System.Web.HttpRequestBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="P:System.Web.HttpRequestBase.AcceptTypes">
      <summary>When overridden in a derived class, gets an array of client-supported MIME accept types.</summary>
      <returns>An array of client-supported MIME accept types.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.AnonymousID">
      <summary>When overridden in a derived class, gets the anonymous identifier for the user, if it is available.</summary>
      <returns>The current anonymous user identifier.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.ApplicationPath">
      <summary>When overridden in a derived class, gets the virtual root path of the ASP.NET application on the server.</summary>
      <returns>The virtual path of the current application.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.AppRelativeCurrentExecutionFilePath">
      <summary>When overridden in a derived class, gets the virtual path of the application root and makes it relative by using the tilde (~) notation for the application root (as in "~/page.aspx").</summary>
      <returns>The virtual path of the application root for the current request with the tilde operator (~) added.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpRequestBase.BinaryRead(System.Int32)">
      <summary>When overridden in a derived class, performs a binary read of a specified number of bytes from the current input stream.</summary>
      <returns>An array that contains the binary data.</returns>
      <param name="count">The number of bytes to read. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Browser">
      <summary>When overridden in a derived class, gets information about the requesting client's browser capabilities.</summary>
      <returns>An object that represents the capabilities of the client browser.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.ClientCertificate">
      <summary>When overridden in a derived class, gets the current request's client security certificate.</summary>
      <returns>The client's security certificate.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.ContentEncoding">
      <summary>When overridden in a derived class, gets or sets the character set of the data that is provided by the client.</summary>
      <returns>The client's character set.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.ContentLength">
      <summary>When overridden in a derived class, gets the length, in bytes, of content that was sent by the client.</summary>
      <returns>The length, in bytes, of content that was sent by the client.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.ContentType">
      <summary>When overridden in a derived class, gets or sets the MIME content type of the request.</summary>
      <returns>The MIME content type of the request, such as "text/html".</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Cookies">
      <summary>When overridden in a derived class, gets the collection of cookies that were sent by the client.</summary>
      <returns>The client's cookies.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.CurrentExecutionFilePath">
      <summary>When overridden in a derived class, gets the virtual path of the current request.</summary>
      <returns>The virtual path of the page handler that is currently executing.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.FilePath">
      <summary>When overridden in a derived class, gets the virtual path of the current request.</summary>
      <returns>The virtual path of the current request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Files">
      <summary>When overridden in a derived class, gets the collection of files that were uploaded by the client, in multipart MIME format.</summary>
      <returns>The files that were uploaded by the client. The items in the <see cref="T:System.Web.HttpFileCollection" /> object are of type <see cref="T:System.Web.HttpPostedFile" />.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Filter">
      <summary>When overridden in a derived class, gets or sets the filter to use when the current input stream is being read.</summary>
      <returns>An object to use as the filter.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Form">
      <summary>When overridden in a derived class, gets the collection of form variables that were sent by the client.</summary>
      <returns>The form variables.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Headers">
      <summary>When overridden in a derived class, gets the collection of HTTP headers that were sent by the client.</summary>
      <returns>The request headers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.HttpChannelBinding">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> object of the current <see cref="T:System.Web.HttpWorkerRequest" /> instance.</summary>
      <returns>The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> object of the current <see cref="T:System.Web.HttpWorkerRequest" /> instance.</returns>
      <exception cref="T:System.NotImplementedException">The current <see cref="T:System.Web.HttpWorkerRequest" /> object is not a System.Web.Hosting.IIS7WorkerRequest object or a System.Web.Hosting.ISAPIWorkerRequestInProc object.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.HttpMethod">
      <summary>When overridden in a derived class, gets the HTTP data-transfer method (such as GET, POST, or HEAD) that was used by the client.</summary>
      <returns>The HTTP data-transfer method that was used by the client.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.InputStream">
      <summary>When overridden in a derived class, gets the contents of the incoming HTTP entity body.</summary>
      <returns>The contents of the incoming HTTP entity body.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.IsAuthenticated">
      <summary>When overridden in a derived class, gets a value that indicates whether the request has been authenticated.</summary>
      <returns>true if the request has been authenticated; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.IsLocal">
      <summary>When overridden in a derived class, gets a value that indicates whether the request is from the local computer.</summary>
      <returns>true if the request is from the local computer; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.IsSecureConnection">
      <summary>When overridden in a derived class, gets a value that indicates whether the HTTP connection uses secure sockets (HTTPS protocol).</summary>
      <returns>true if the connection is an SSL connection that uses HTTPS protocol; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Item(System.String)">
      <summary>When overridden in a derived class, gets the specified object from the <see cref="P:System.Web.HttpRequestBase.Cookies" />, <see cref="P:System.Web.HttpRequestBase.Form" />, <see cref="P:System.Web.HttpRequestBase.QueryString" />, or <see cref="P:System.Web.HttpRequestBase.ServerVariables" /> collections.</summary>
      <returns>The <see cref="P:System.Web.HttpRequestBase.QueryString" />, <see cref="P:System.Web.HttpRequestBase.Form" />, <see cref="P:System.Web.HttpRequestBase.Cookies" />, or <see cref="P:System.Web.HttpRequestBase.ServerVariables" /> collection member that is specified by <paramref name="key" />. If the specified <paramref name="key" /> value is not found, null is returned.</returns>
      <param name="key">The name of the collection member to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.LogonUserIdentity">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Security.Principal.WindowsIdentity" /> type for the current user.</summary>
      <returns>The identity for the current user.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpRequestBase.MapImageCoordinates(System.String)">
      <summary>When overridden in a derived class, maps an incoming image-field form parameter to appropriate x-coordinate and y-coordinate values.</summary>
      <returns>A two-dimensional array of integers.</returns>
      <param name="imageFieldName">The name of the image map. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpRequestBase.MapPath(System.String)">
      <summary>When overridden in a derived class, maps the specified virtual path to a physical path on the server.</summary>
      <returns>The physical path on the server that is specified by <paramref name="virtualPath" />.</returns>
      <param name="virtualPath">The virtual path (absolute or relative) to map to a physical path. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpRequestBase.MapPath(System.String,System.String,System.Boolean)">
      <summary>When overridden in a derived class, maps the specified virtual path to a physical path on the server.</summary>
      <returns>The physical path on the server.</returns>
      <param name="virtualPath">The virtual path (absolute or relative) to map to a physical path. </param>
      <param name="baseVirtualDir">The virtual base directory path that is used for relative resolution. </param>
      <param name="allowCrossAppMapping">true to indicate that <paramref name="virtualPath" /> can belong to another application; otherwise, false. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Params">
      <summary>When overridden in a derived class, gets a combined collection of <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.ServerVariables" />, and <see cref="P:System.Web.HttpRequest.Cookies" /> items.</summary>
      <returns>The collection of combined values.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Path">
      <summary>When overridden in a derived class, gets the virtual path of the current request.</summary>
      <returns>The virtual path of the current request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.PathInfo">
      <summary>When overridden in a derived class, gets additional path information for a resource that has a URL extension.</summary>
      <returns>The additional path information for the resource.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.PhysicalApplicationPath">
      <summary>When overridden in a derived class, gets the physical file-system path of the current application's root directory.</summary>
      <returns>The file-system path of the current application's root directory.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.PhysicalPath">
      <summary>When overridden in a derived class, gets the physical file-system path of the requested resource.</summary>
      <returns>The file-system path of the requested resource.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.QueryString">
      <summary>When overridden in a derived class, gets the collection of HTTP query-string variables.</summary>
      <returns>The query-string variables that were sent by the client in the URL of the current request. </returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.RawUrl">
      <summary>When overridden in a derived class, gets the complete URL of the current request.</summary>
      <returns>The complete URL of the current request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.RequestContext">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Web.Routing.RequestContext" /> instance of the current request.</summary>
      <returns>The <see cref="T:System.Web.Routing.RequestContext" /> instance of the current request. For non-routed requests, the <see cref="T:System.Web.Routing.RequestContext" /> object that is returned is empty.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.RequestType">
      <summary>When overridden in a derived class, gets or sets the HTTP data-transfer method (GET or POST) that was used by the client.</summary>
      <returns>The HTTP data-transfer method type that was used by the client.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpRequestBase.SaveAs(System.String,System.Boolean)">
      <summary>When overridden in a derived class, saves an HTTP request to disk.</summary>
      <param name="filename">The physical drive path. </param>
      <param name="includeHeaders">A value that specifies whether to save HTTP headers to disk. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.ServerVariables">
      <summary>When overridden in a derived class, gets a collection of Web server variables.</summary>
      <returns>The server variables.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.TotalBytes">
      <summary>When overridden in a derived class, gets the number of bytes in the current input stream.</summary>
      <returns>The number of bytes in the input stream.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.Url">
      <summary>When overridden in a derived class, gets information about the URL of the current request.</summary>
      <returns>An object that contains information about the URL of the current request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.UrlReferrer">
      <summary>When overridden in a derived class, gets information about the URL of the client request that linked to the current URL.</summary>
      <returns>The URL of the page that linked to the current request.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.UserAgent">
      <summary>When overridden in a derived class, gets the complete user-agent string of the client.</summary>
      <returns>The complete user-agent string of the client.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.UserHostAddress">
      <summary>When overridden in a derived class, gets the IP host address of the client.</summary>
      <returns>The IP address of the client.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.UserHostName">
      <summary>When overridden in a derived class, gets the DNS name of the client.</summary>
      <returns>The DNS name of the client.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpRequestBase.UserLanguages">
      <summary>When overridden in a derived class, gets a sorted array of client language preferences.</summary>
      <returns>A sorted array of client language preferences, or null if the array is empty.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpRequestBase.ValidateInput">
      <summary>When overridden in a derived class, causes validation to occur for the collections that are accessed through the <see cref="P:System.Web.HttpRequestBase.Cookies" />, <see cref="P:System.Web.HttpRequestBase.Form" />, and <see cref="P:System.Web.HttpRequestBase.QueryString" /> properties.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpRequestValidationException">
      <summary>The exception that is thrown when a potentially malicious input string is received from the client as part of the request data. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.HttpRequestValidationException.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Web.HttpRequestValidationException" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpRequestValidationException.#ctor(System.String)">
      <summary>Creates a new <see cref="T:System.Web.HttpRequestValidationException" /> exception with the specified error message.</summary>
      <param name="message">A string that describes the error.</param>
    </member>
    <member name="M:System.Web.HttpRequestValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpRequestValidationException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If this parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Web.HttpRequestWrapper">
      <summary>Encapsulates the HTTP intrinsic object that enables ASP.NET to read the HTTP values that are sent by a client during a Web request. </summary>
    </member>
    <member name="M:System.Web.HttpRequestWrapper.#ctor(System.Web.HttpRequest)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpRequestWrapper" /> class by using the specified request object.</summary>
      <param name="httpRequest">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpRequest" /> is null.</exception>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.AcceptTypes">
      <summary>Gets an array of client-supported MIME accept types.</summary>
      <returns>An array of client-supported MIME accept types.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.AnonymousID">
      <summary>Gets the anonymous identifier for the user, if it is available.</summary>
      <returns>The current anonymous user identifier.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.ApplicationPath">
      <summary>Gets the virtual path of the root of the ASP.NET application on the server.</summary>
      <returns>The virtual root path of the current application.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.AppRelativeCurrentExecutionFilePath">
      <summary>Gets the virtual path of the application root and makes it relative by using the tilde (~) notation for the application root (as in "~/page.aspx").</summary>
      <returns>The virtual path of the application root for the current request with the tilde operator added.</returns>
    </member>
    <member name="M:System.Web.HttpRequestWrapper.BinaryRead(System.Int32)">
      <summary>Performs a binary read of a specified number of bytes from the current input stream.</summary>
      <returns>An array that contains the binary data.</returns>
      <param name="count">The number of bytes to read. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.- or -<paramref name="count" /> is greater than the number of bytes available. </exception>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Browser">
      <summary>Gets information about the requesting client's browser capabilities.</summary>
      <returns>An object that represents the capabilities of the client browser.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.ClientCertificate">
      <summary>Gets the current request's client security certificate.</summary>
      <returns>The client's security certificate.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.ContentEncoding">
      <summary>Gets or sets the character set of the data that was provided by the client.</summary>
      <returns>The client's character set.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.ContentLength">
      <summary>Gets the length, in bytes, of content that was sent by the client.</summary>
      <returns>The length, in bytes, of content that was sent by the client.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.ContentType">
      <summary>Gets or sets the MIME content type of the request.</summary>
      <returns>The MIME content type of the request, such as "text/html".</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Cookies">
      <summary>Gets the collection of cookies that were sent by the client.</summary>
      <returns>The client's cookies.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.CurrentExecutionFilePath">
      <summary>Gets the virtual path of the current request.</summary>
      <returns>The virtual path of the page handler that is currently executing.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.FilePath">
      <summary>Gets the virtual path of the current request.</summary>
      <returns>The virtual path of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Files">
      <summary>Gets the collection of files that were uploaded by the client, in multipart MIME format.</summary>
      <returns>The files that were uploaded by the client. The items in the <see cref="T:System.Web.HttpFileCollection" /> object are of type <see cref="T:System.Web.HttpPostedFile" />.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Filter">
      <summary>Gets or sets the filter to use when the current input stream is being read.</summary>
      <returns>An object to use as the filter.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Form">
      <summary>Gets the collection of form variables that were sent by the client.</summary>
      <returns>The form variables.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Headers">
      <summary>Gets the collection of HTTP headers that were sent by the client.</summary>
      <returns>The request headers.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.HttpChannelBinding">
      <summary>Gets the <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> object of the current <see cref="T:System.Web.HttpWorkerRequest" /> instance.</summary>
      <returns>The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> object of the current <see cref="T:System.Web.HttpWorkerRequest" /> instance.</returns>
      <exception cref="T:System.NotImplementedException">The current <see cref="T:System.Web.HttpWorkerRequest" /> object is not a System.Web.Hosting.IIS7WorkerRequest object or a System.Web.Hosting.ISAPIWorkerRequestInProc object.</exception>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.HttpMethod">
      <summary>Gets the HTTP data-transfer method (such as GET, POST, or HEAD) that was used by the client.</summary>
      <returns>The HTTP data-transfer method that was used by the client.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.InputStream">
      <summary>Gets the contents of the incoming HTTP entity body.</summary>
      <returns>The contents of the incoming HTTP content body.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.IsAuthenticated">
      <summary>Gets a value that indicates whether the request has been authenticated.</summary>
      <returns>true if the request has been authenticated; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.IsLocal">
      <summary>Gets a value that indicates whether the request is from the local computer.</summary>
      <returns>true if the request is from the local computer; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.IsSecureConnection">
      <summary>Gets a value that indicates whether the HTTP connection uses secure sockets (HTTPS protocol).</summary>
      <returns>true if the connection is an SSL connection that uses HTTPS protocol; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Item(System.String)">
      <summary>Gets the specified object from the <see cref="P:System.Web.HttpRequest.Cookies" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.QueryString" />, or <see cref="P:System.Web.HttpRequest.ServerVariables" /> collections.</summary>
      <returns>The <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.Cookies" />, or <see cref="P:System.Web.HttpRequest.ServerVariables" /> collection member that is specified by <paramref name="key" />. If the specified <paramref name="key" /> value is not found, null is returned.</returns>
      <param name="key">The name of the collection member to get. </param>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.LogonUserIdentity">
      <summary>Gets the <see cref="T:System.Security.Principal.WindowsIdentity" /> type for the current user.</summary>
      <returns>The identity for the current user.</returns>
    </member>
    <member name="M:System.Web.HttpRequestWrapper.MapImageCoordinates(System.String)">
      <summary>Maps an incoming image-field form parameter to appropriate x-coordinate and y-coordinate values.</summary>
      <returns>A two-dimensional array of integers.</returns>
      <param name="imageFieldName">The name of the image map. </param>
    </member>
    <member name="M:System.Web.HttpRequestWrapper.MapPath(System.String)">
      <summary>Maps the specified virtual path to a physical path on the server.</summary>
      <returns>The physical path on the server that is specified by <paramref name="virtualPath" />.</returns>
      <param name="virtualPath">The virtual path (absolute or relative) to map to a physical path. </param>
    </member>
    <member name="M:System.Web.HttpRequestWrapper.MapPath(System.String,System.String,System.Boolean)">
      <summary>Maps the specified virtual path to a physical path on the server.</summary>
      <returns>The physical path on the server.</returns>
      <param name="virtualPath">The virtual path (absolute or relative) to map to a physical path. </param>
      <param name="baseVirtualDir">The virtual base directory path that is used for relative resolution. </param>
      <param name="allowCrossAppMapping">true to indicate that <paramref name="virtualPath" /> can belong to another application; otherwise, false. </param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="allowCrossAppMapping" /> is false and <paramref name="virtualPath" /> belongs to another application. </exception>
      <exception cref="T:System.Web.HttpException">No <see cref="T:System.Web.HttpContext" /> object is defined for the request. </exception>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Params">
      <summary>Gets a combined collection of <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.ServerVariables" />, and <see cref="P:System.Web.HttpRequest.Cookies" /> items.</summary>
      <returns>The collection of combined values.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Path">
      <summary>Gets the virtual path of the current request.</summary>
      <returns>The virtual path of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.PathInfo">
      <summary>Gets additional path information for a resource that has a URL extension.</summary>
      <returns>The additional path information for the resource.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.PhysicalApplicationPath">
      <summary>Gets the physical file-system path of the current application's root directory.</summary>
      <returns>The file-system path of the current application's root directory.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.PhysicalPath">
      <summary>Gets the physical file-system path of the requested resource.</summary>
      <returns>The file-system path of the requested resource.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.QueryString">
      <summary>Gets the collection of HTTP query-string variables.</summary>
      <returns>The query-string variables that were sent by the client in the URL of the current request. </returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.RawUrl">
      <summary>Gets the complete URL of the current request.</summary>
      <returns>The complete URL of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.RequestContext">
      <summary>Gets the <see cref="T:System.Web.Routing.RequestContext" /> instance of the current request.</summary>
      <returns>The <see cref="T:System.Web.Routing.RequestContext" /> instance of the current request. For non-routed requests, the <see cref="T:System.Web.Routing.RequestContext" /> object that is returned is empty.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.RequestType">
      <summary>Gets or sets the HTTP data-transfer method (GET or POST) that was used by the client.</summary>
      <returns>The HTTP data-transfer method type that was used by the client.</returns>
    </member>
    <member name="M:System.Web.HttpRequestWrapper.SaveAs(System.String,System.Boolean)">
      <summary>Saves an HTTP request to disk.</summary>
      <param name="filename">The physical drive path. </param>
      <param name="includeHeaders">A value that specifies whether to save HTTP headers to disk. </param>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.ServerVariables">
      <summary>Gets a collection of Web server variables.</summary>
      <returns>The server variables.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.TotalBytes">
      <summary>Gets the number of bytes in the current input stream.</summary>
      <returns>The number of bytes in the input stream.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.Url">
      <summary>Gets information about the URL of the current request.</summary>
      <returns>An object that contains information about the URL of the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.UrlReferrer">
      <summary>Gets information about the URL of the client request that linked to the current URL.</summary>
      <returns>The URL of the page that linked to the current request.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.UserAgent">
      <summary>Gets the complete user-agent string of the client.</summary>
      <returns>The complete user-agent string of the client.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.UserHostAddress">
      <summary>Gets the IP host address of the client.</summary>
      <returns>The IP address of the client.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.UserHostName">
      <summary>Gets the DNS name of the client.</summary>
      <returns>The DNS name of the client.</returns>
    </member>
    <member name="P:System.Web.HttpRequestWrapper.UserLanguages">
      <summary>Gets a sorted array of client language preferences.</summary>
      <returns>A sorted array of client language preferences, or null if the array is empty.</returns>
    </member>
    <member name="M:System.Web.HttpRequestWrapper.ValidateInput">
      <summary>Causes validation to occur for the collections that are accessed through the <see cref="P:System.Web.HttpRequest.Cookies" />, <see cref="P:System.Web.HttpRequest.Form" />, and <see cref="P:System.Web.HttpRequest.QueryString" /> properties.</summary>
    </member>
    <member name="T:System.Web.HttpResponse">
      <summary>Encapsulates HTTP-response information from an ASP.NET operation.</summary>
    </member>
    <member name="M:System.Web.HttpResponse.#ctor(System.IO.TextWriter)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpResponse" /> class.</summary>
      <param name="writer">A <see cref="T:System.IO.TextWriter" /> object that enables custom HTTP output.</param>
    </member>
    <member name="M:System.Web.HttpResponse.AddCacheDependency(System.Web.Caching.CacheDependency[])">
      <summary>Associates a set of cache dependencies with the response to facilitate invalidation of the response if it is stored in the output cache and the specified dependencies change.</summary>
      <param name="dependencies">A file, cache key, or <see cref="T:System.Web.Caching.CacheDependency" /> to add to the list of application dependencies.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dependencies" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">This method was called too late in the cache processing pipeline, after the cached response was already created.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.AddCacheItemDependencies(System.Collections.ArrayList)">
      <summary>Makes the validity of a cached response dependent on other items in the cache.</summary>
      <param name="cacheKeys">The <see cref="T:System.Collections.ArrayList" /> that contains the keys of the items that the current cached response is dependent upon.</param>
    </member>
    <member name="M:System.Web.HttpResponse.AddCacheItemDependencies(System.String[])">
      <summary>Makes the validity of a cached item dependent on another item in the cache.</summary>
      <param name="cacheKeys">An array of item keys that the cached response is dependent upon.</param>
    </member>
    <member name="M:System.Web.HttpResponse.AddCacheItemDependency(System.String)">
      <summary>Makes the validity of a cached response dependent on another item in the cache.</summary>
      <param name="cacheKey">The key of the item that the cached response is dependent upon.</param>
    </member>
    <member name="M:System.Web.HttpResponse.AddFileDependencies(System.Collections.ArrayList)">
      <summary>Adds a group of file names to the collection of file names on which the current response is dependent.</summary>
      <param name="filenames">The collection of files to add.</param>
    </member>
    <member name="M:System.Web.HttpResponse.AddFileDependencies(System.String[])">
      <summary>Adds an array of file names to the collection of file names on which the current response is dependent.</summary>
      <param name="filenames">An array of files to add.</param>
    </member>
    <member name="M:System.Web.HttpResponse.AddFileDependency(System.String)">
      <summary>Adds a single file name to the collection of file names on which the current response is dependent.</summary>
      <param name="filename">The name of the file to add.</param>
    </member>
    <member name="M:System.Web.HttpResponse.AddHeader(System.String,System.String)">
      <summary>Adds an HTTP header to the output stream. <see cref="M:System.Web.HttpResponse.AddHeader(System.String,System.String)" /> is provided for compatibility with earlier versions of ASP.</summary>
      <param name="name">The name of the HTTP header to add <paramref name="value" /> to.</param>
      <param name="value">The string to add to the header.</param>
    </member>
    <member name="M:System.Web.HttpResponse.AppendCookie(System.Web.HttpCookie)">
      <summary>Adds an HTTP cookie to the intrinsic cookie collection.</summary>
      <param name="cookie">The <see cref="T:System.Web.HttpCookie" /> to add to the output stream.</param>
      <exception cref="T:System.Web.HttpException">A cookie is appended after the HTTP headers have been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.AppendHeader(System.String,System.String)">
      <summary>Adds an HTTP header to the output stream.</summary>
      <param name="name">The name of the HTTP header to add to the output stream.</param>
      <param name="value">The string to append to the header.</param>
      <exception cref="T:System.Web.HttpException">The header is appended after the HTTP headers have been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.AppendToLog(System.String)">
      <summary>Adds custom log information to the Internet Information Services (IIS) log file.</summary>
      <param name="param">The text to add to the log file.</param>
    </member>
    <member name="M:System.Web.HttpResponse.ApplyAppPathModifier(System.String)">
      <summary>Adds a session ID to the virtual path if the session is using <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" /> session state and returns the combined path. If <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" /> session state is not used, <see cref="M:System.Web.HttpResponse.ApplyAppPathModifier(System.String)" /> returns the original virtual path.</summary>
      <returns>The <paramref name="virtualPath" /> with the session ID inserted.</returns>
      <param name="virtualPath">The virtual path to a resource. </param>
    </member>
    <member name="M:System.Web.HttpResponse.BinaryWrite(System.Byte[])">
      <summary>Writes a string of binary characters to the HTTP output stream.</summary>
      <param name="buffer">The bytes to write to the output stream.</param>
    </member>
    <member name="P:System.Web.HttpResponse.Buffer">
      <summary>Gets or sets a value indicating whether to buffer output and send it after the complete response is finished processing.</summary>
      <returns>true if the output to client is buffered; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpResponse.BufferOutput">
      <summary>Gets or sets a value indicating whether to buffer output and send it after the complete page is finished processing.</summary>
      <returns>true if the output to client is buffered; otherwise false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpResponse.Cache">
      <summary>Gets the caching policy (such as expiration time, privacy settings, and vary clauses) of a Web page.</summary>
      <returns>An <see cref="T:System.Web.HttpCachePolicy" /> object that contains information about the caching policy of the current response.</returns>
    </member>
    <member name="P:System.Web.HttpResponse.CacheControl">
      <summary>Gets or sets the Cache-Control HTTP header that matches one of the <see cref="T:System.Web.HttpCacheability" /> enumeration values.</summary>
      <returns>A string representation of the <see cref="T:System.Web.HttpCacheability" /> enumeration value.</returns>
      <exception cref="T:System.ArgumentException">The string value set does not match one of the <see cref="T:System.Web.HttpCacheability" /> enumeration values.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.Charset">
      <summary>Gets or sets the HTTP character set of the output stream.</summary>
      <returns>The HTTP character set of the output stream.</returns>
      <exception cref="T:System.Web.HttpException">The Charset property was set after headers were sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.Clear">
      <summary>Clears all content output from the buffer stream.</summary>
    </member>
    <member name="M:System.Web.HttpResponse.ClearContent">
      <summary>Clears all content output from the buffer stream.</summary>
    </member>
    <member name="M:System.Web.HttpResponse.ClearHeaders">
      <summary>Clears all headers from the buffer stream.</summary>
      <exception cref="T:System.Web.HttpException">Headers are cleared after the HTTP headers have been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.Close">
      <summary>Closes the socket connection to a client.</summary>
    </member>
    <member name="P:System.Web.HttpResponse.ContentEncoding">
      <summary>Gets or sets the HTTP character set of the output stream.</summary>
      <returns>A <see cref="T:System.Text.Encoding" /> object that contains information about the character set of the current response.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Web.HttpResponse.ContentEncoding" /> to null.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.ContentType">
      <summary>Gets or sets the HTTP MIME type of the output stream.</summary>
      <returns>The HTTP MIME type of the output stream. The default value is "text/html".</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="P:System.Web.HttpResponse.ContentType" /> property is set to null.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.Cookies">
      <summary>Gets the response cookie collection.</summary>
      <returns>The response cookie collection.</returns>
    </member>
    <member name="M:System.Web.HttpResponse.DisableKernelCache">
      <summary>Disables kernel caching for the current response.</summary>
    </member>
    <member name="M:System.Web.HttpResponse.End">
      <summary>Sends all currently buffered output to the client, stops execution of the page, and raises the <see cref="E:System.Web.HttpApplication.EndRequest" /> event.</summary>
      <exception cref="T:System.Threading.ThreadAbortException">The call to <see cref="M:System.Web.HttpResponse.End" /> has terminated the current request.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.Expires">
      <summary>Gets or sets the number of minutes before a page cached on a browser expires. If the user returns to the same page before it expires, the cached version is displayed. <see cref="P:System.Web.HttpResponse.Expires" /> is provided for compatibility with earlier versions of ASP.</summary>
      <returns>The number of minutes before the page expires.</returns>
    </member>
    <member name="P:System.Web.HttpResponse.ExpiresAbsolute">
      <summary>Gets or sets the absolute date and time at which to remove cached information from the cache. <see cref="P:System.Web.HttpResponse.ExpiresAbsolute" /> is provided for compatibility with earlier versions of ASP.</summary>
      <returns>The date and time at which the page expires.</returns>
    </member>
    <member name="P:System.Web.HttpResponse.Filter">
      <summary>Gets or sets a wrapping filter object that is used to modify the HTTP entity body before transmission.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> object that acts as the output filter.</returns>
      <exception cref="T:System.Web.HttpException">Filtering is not allowed with the entity.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.Flush">
      <summary>Sends all currently buffered output to the client.</summary>
      <exception cref="T:System.Web.HttpException">The cache is flushed after the response has been sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.HeaderEncoding">
      <summary>Gets or sets an <see cref="T:System.Text.Encoding" /> object that represents the encoding for the current header output stream.</summary>
      <returns>An <see cref="T:System.Text.Encoding" /> that contains information about the character set for the current header.</returns>
      <exception cref="T:System.ArgumentNullException">The encoding value is null.</exception>
      <exception cref="T:System.Web.HttpException">The encoding value is <see cref="P:System.Text.Encoding.Unicode" />.- or -The headers have already been sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.Headers">
      <summary>Gets the collection of response headers.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of response headers.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operation requires the integrated pipeline mode in IIS 7.0 and at least the .NET Framework version 3.0.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.IsClientConnected">
      <summary>Gets a value indicating whether the client is still connected to the server.</summary>
      <returns>true if the client is currently connected; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpResponse.IsRequestBeingRedirected">
      <summary>Gets a Boolean value indicating whether the client is being transferred to a new location.</summary>
      <returns>true if the value of the location response header is different than the current location; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpResponse.Output">
      <summary>Enables output of text to the outgoing HTTP response stream.</summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> object that enables custom output to the client.</returns>
    </member>
    <member name="P:System.Web.HttpResponse.OutputStream">
      <summary>Enables binary output to the outgoing HTTP content body.</summary>
      <returns>An IO <see cref="T:System.IO.Stream" /> representing the raw contents of the outgoing HTTP content body.</returns>
      <exception cref="T:System.Web.HttpException">
        <paramref name="OutputStream" /> is not available.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.Pics(System.String)">
      <summary>Appends a HTTP PICS-Label header to the output stream.</summary>
      <param name="value">The string to add to the PICS-Label header.</param>
    </member>
    <member name="M:System.Web.HttpResponse.Redirect(System.String)">
      <summary>Redirects a request to a new URL and specifies the new URL.</summary>
      <param name="url">The target location. </param>
      <exception cref="T:System.Web.HttpException">A redirection is attempted after the HTTP headers have been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.Redirect(System.String,System.Boolean)">
      <summary>Redirects a client to a new URL. Specifies the new URL and whether execution of the current page should terminate.</summary>
      <param name="url">The location of the target. </param>
      <param name="endResponse">Indicates whether execution of the current page should terminate. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> contains a newline character.</exception>
      <exception cref="T:System.Web.HttpException">A redirection is attempted after the HTTP headers have been sent.</exception>
      <exception cref="T:System.ApplicationException">The page request is the result of a callback.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.RedirectLocation">
      <summary>Gets or sets the value of the Http Location header.</summary>
      <returns>The absolute URI that is transmitted to the client in the HTTP Location header.</returns>
      <exception cref="T:System.Web.HttpException">The HTTP headers have already been written.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectPermanent(System.String)">
      <summary>Performs a permanent redirection from the requested URL to the specified URL.</summary>
      <param name="url">The location to redirect the request to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> includes a newline character (\n).</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectPermanent(System.String,System.Boolean)">
      <summary>Performs a permanent redirection from the requested URL to the specified URL, and provides the option to complete the response. </summary>
      <param name="url">The location to redirect the request to. </param>
      <param name="endResponse">true to terminate the response; otherwise false. The default is false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> includes a newline character (\n).</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoute(System.Object)">
      <summary>Redirects a request to a new URL by using route parameter values.</summary>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoute(System.String)">
      <summary>Redirects a request to a new URL by using a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoute(System.String,System.Object)">
      <summary>Redirects a request to a new URL by using route parameter values and a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects a request to a new URL by using route parameter values and a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoute(System.Web.Routing.RouteValueDictionary)">
      <summary>Redirects a request to a new URL by using route parameter values.</summary>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoutePermanent(System.Object)">
      <summary>Performs a permanent redirection from a requested URL to a new URL by using route parameter values.</summary>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoutePermanent(System.String)">
      <summary>Performs a permanent redirection from a requested URL to a new URL by using a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoutePermanent(System.String,System.Object)">
      <summary>Performs a permanent redirection from a requested URL to a new URL by using the route parameter values and the name of the route that correspond to the new URL.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Performs a permanent redirection from a requested URL to a new URL by using route parameter values and a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)">
      <summary>Performs a permanent redirection from a requested URL to a new URL by using route parameter values.</summary>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.InvalidOperationException">No route corresponds to the specified route parameters.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers had been sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RemoveOutputCacheItem(System.String)">
      <summary>Removes from the cache all cached items that are associated with the default output-cache provider. This method is static.</summary>
      <param name="path">The virtual absolute path to the items that are removed from the cache.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is not an absolute virtual path.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.RemoveOutputCacheItem(System.String,System.String)">
      <summary>Uses the specified output-cache provider to remove all output-cache items that are associated with the specified path. </summary>
      <param name="path">The virtual absolute path of the items that are removed from the cache. </param>
      <param name="providerName">The provider that is used to remove the output-cache artifacts that are associated with the specified path.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an invalid path.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.SetCookie(System.Web.HttpCookie)">
      <summary>Updates an existing cookie in the cookie collection.</summary>
      <param name="cookie">The cookie in the collection to be updated.</param>
      <exception cref="T:System.Web.HttpException">The cookie is set after the HTTP headers have been sent.</exception>
      <exception cref="T:System.Web.HttpException">Attempted to set the cookie after the HTTP headers were sent.</exception>
      <exception cref="T:System.Web.HttpException">The cookie is set after the HTTP headers have been sent.</exception>
      <exception cref="T:System.Web.HttpException">Attempted to set the cookie after the HTTP headers were sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.Status">
      <summary>Sets the Status line that is returned to the client.</summary>
      <returns>Setting the status code causes a string describing the status of the HTTP output to be returned to the client. The default value is 200 (OK).</returns>
      <exception cref="T:System.Web.HttpException">Status is set to an invalid status code.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.StatusCode">
      <summary>Gets or sets the HTTP status code of the output returned to the client.</summary>
      <returns>An Integer representing the status of the HTTP output returned to the client. The default value is 200 (OK). For a listing of valid status codes, see Http Status Codes.</returns>
      <exception cref="T:System.Web.HttpException">
        <see cref="P:System.Web.HttpResponse.StatusCode" /> is set after the HTTP headers have been sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.StatusDescription">
      <summary>Gets or sets the HTTP status string of the output returned to the client.</summary>
      <returns>A string that describes the status of the HTTP output returned to the client. The default value is "OK". For a listing of valid status codes, see Http Status Codes.</returns>
      <exception cref="T:System.Web.HttpException">
        <paramref name="StatusDescription" /> is set after the HTTP headers have been sent.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value has a length greater than 512.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.SubStatusCode">
      <summary>Gets or sets a value qualifying the status code of the response.</summary>
      <returns>An integer value that represents the IIS 7.0 substatus code.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operation requires the integrated pipeline mode in IIS 7.0 and at least the .NET Framework version 3.0.</exception>
      <exception cref="T:System.Web.HttpException">The status code is set after all HTTP headers have been sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.SuppressContent">
      <summary>Gets or sets a value indicating whether to send HTTP content to the client.</summary>
      <returns>true to suppress output; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpResponse.TransmitFile(System.String)">
      <summary>Writes the specified file directly to an HTTP response output stream, without buffering it in memory.</summary>
      <param name="filename">The name of the file to write to the HTTP output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filename" /> parameter is null</exception>
    </member>
    <member name="M:System.Web.HttpResponse.TransmitFile(System.String,System.Int64,System.Int64)">
      <summary>Writes the specified part of a file directly to an HTTP response output stream without buffering it in memory.</summary>
      <param name="filename">The name of the file to write to the HTTP output.</param>
      <param name="offset">The position in the file to begin to write to the HTTP output.</param>
      <param name="length">The number of bytes to be transmitted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="offset" /> parameter is less than zero.- or -The <paramref name="length" /> parameter is less than -1.- or - The <paramref name="length" /> parameter specifies a number of bytes that is greater than the number of bytes the file contains minus the offset.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The out-of-process worker request is not supported.- or -The response is not using an <see cref="T:System.Web.HttpWriter" /> object.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="offset" /> parameter is less than zero or greater than the file size.- or -The <paramref name="length" /> parameter is less than -1 or greater than the value of the <paramref name="offset" /> parameter plus the file size.</exception>
    </member>
    <member name="P:System.Web.HttpResponse.TrySkipIisCustomErrors">
      <summary>Gets or sets a value that specifies whether IIS 7.0 custom errors are disabled.</summary>
      <returns>true to disable IIS custom errors; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpResponse.Write(System.Char)">
      <summary>Writes a character to an HTTP response output stream.</summary>
      <param name="ch">The character to write to the HTTP output stream.</param>
    </member>
    <member name="M:System.Web.HttpResponse.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes an array of characters to an HTTP response output stream.</summary>
      <param name="buffer">The character array to write.</param>
      <param name="index">The position in the character array where writing starts.</param>
      <param name="count">The number of characters to write, beginning at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Web.HttpResponse.Write(System.Object)">
      <summary>Writes an <see cref="T:System.Object" /> to an HTTP response stream.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to write to the HTTP output stream.</param>
    </member>
    <member name="M:System.Web.HttpResponse.Write(System.String)">
      <summary>Writes a string to an HTTP response output stream.</summary>
      <param name="s">The string to write to the HTTP output stream.</param>
    </member>
    <member name="M:System.Web.HttpResponse.WriteFile(System.IntPtr,System.Int64,System.Int64)">
      <summary>Writes the specified file directly to an HTTP response output stream.</summary>
      <param name="fileHandle">The file handle of the file to write to the HTTP output stream.</param>
      <param name="offset">The byte position in the file where writing will start.</param>
      <param name="size">The number of bytes to write to the output stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileHandler" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">
        <paramref name="offset" /> is less than 0.- or -<paramref name="size" /> is greater than the file size minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.WriteFile(System.String)">
      <summary>Writes the contents of the specified file directly to an HTTP response output stream as a file block.</summary>
      <param name="filename">The name of the file to write to the HTTP output.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filename" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.WriteFile(System.String,System.Boolean)">
      <summary>Writes the contents of the specified file directly to an HTTP response output stream as a memory block.</summary>
      <param name="filename">The name of the file to write into a memory block.</param>
      <param name="readIntoMemory">Indicates whether the file will be written into a memory block.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filename" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.WriteFile(System.String,System.Int64,System.Int64)">
      <summary>Writes the specified file directly to an HTTP response output stream.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <param name="offset">The byte position in the file where writing will start.</param>
      <param name="size">The number of bytes to write to the output stream.</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="offset" /> is less than 0.- or -<paramref name="size" /> is greater than the file size minus <paramref name="offset" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filename" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpResponse.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)">
      <summary>Allows insertion of response substitution blocks into the response, which allows dynamic generation of specified response regions for output cached responses.</summary>
      <param name="callback">The method, user control, or object to substitute.</param>
      <exception cref="T:System.ArgumentException">The target of the <paramref name="callback" /> parameter is of type <see cref="T:System.Web.UI.Control" />.</exception>
    </member>
    <member name="T:System.Web.HttpResponseBase">
      <summary>Serves as the base class for classes that provides HTTP-response information from an ASP.NET operation.</summary>
    </member>
    <member name="M:System.Web.HttpResponseBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpResponseBase.AddCacheDependency(System.Web.Caching.CacheDependency[])">
      <summary>When overridden in a derived class, associates cache dependencies with the response that enable the response to be invalidated if it is cached and if the specified dependencies change.</summary>
      <param name="dependencies">A file, cache key, or <see cref="T:System.Web.Caching.CacheDependency" /> object to add to the list of application dependencies.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AddCacheItemDependencies(System.Collections.ArrayList)">
      <summary>When overridden in a derived class, makes the validity of a cached response dependent on the specified items in the cache.</summary>
      <param name="cacheKeys">A collection that contains the keys of the items that the cached response is dependent on.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AddCacheItemDependencies(System.String[])">
      <summary>When overridden in a derived class, makes the validity of a cached item dependent on the specified items in the cache.</summary>
      <param name="cacheKeys">An array that contains the keys of the items that the cached response is dependent on.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AddCacheItemDependency(System.String)">
      <summary>When overridden in a derived class, makes the validity of a cached response dependent on the specified item in the cache.</summary>
      <param name="cacheKey">The key of the item that the cached response is dependent on.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AddFileDependencies(System.Collections.ArrayList)">
      <summary>When overridden in a derived class, adds file names to the collection of file names on which the current response is dependent.</summary>
      <param name="filenames">The names of the files to add.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AddFileDependencies(System.String[])">
      <summary>When overridden in a derived class, adds an array of file names to the collection of file names on which the current response is dependent.</summary>
      <param name="filenames">An array of file names to add.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AddFileDependency(System.String)">
      <summary>When overridden in a derived class, adds a single file name to the collection of file names on which the current response is dependent.</summary>
      <param name="filename">The name of the file to add.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AddHeader(System.String,System.String)">
      <summary>When overridden in a derived class, adds an HTTP header to the current response. This method is provided for compatibility with earlier versions of ASP.</summary>
      <param name="name">The name of the HTTP header to add <paramref name="value" /> to.</param>
      <param name="value">The string to add to the header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AppendCookie(System.Web.HttpCookie)">
      <summary>When overridden in a derived class, adds an HTTP cookie to the HTTP response cookie collection.</summary>
      <param name="cookie">The cookie to add to the response.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AppendHeader(System.String,System.String)">
      <summary>When overridden in a derived class, adds an HTTP header to the current response.</summary>
      <param name="name">The name of the HTTP header to add to the current response.</param>
      <param name="value">The value of the header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.AppendToLog(System.String)">
      <summary>When overridden in a derived class, adds custom log information to the Internet Information Services (IIS) log file.</summary>
      <param name="param">The text to add to the log file.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.ApplyAppPathModifier(System.String)">
      <summary>When overridden in a derived class, adds a session ID to the virtual path if the session is using <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" /> session state, and returns the combined path. </summary>
      <returns>The virtual path, with the session ID inserted.</returns>
      <param name="virtualPath">The virtual path of a resource.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.BinaryWrite(System.Byte[])">
      <summary>When overridden in a derived class, writes a string of binary characters to the HTTP output stream.</summary>
      <param name="buffer">The binary characters to write to the current response.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Buffer">
      <summary>When overridden in a derived class, gets or sets a value that indicates whether to buffer output and send it after the complete response has finished processing.</summary>
      <returns>true if the output is buffered; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.BufferOutput">
      <summary>When overridden in a derived class, gets or sets a value that indicates whether to buffer output and send it after the complete page has finished processing.</summary>
      <returns>true if the output is buffered; otherwise false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Cache">
      <summary>When overridden in a derived class, gets the caching policy (such as expiration time, privacy settings, and vary clauses) of the current Web page.</summary>
      <returns>The caching policy of the current response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.CacheControl">
      <summary>When overridden in a derived class, gets or sets the Cache-Control HTTP header that matches one of the <see cref="T:System.Web.HttpCacheability" /> enumeration values.</summary>
      <returns>The caching policy of the current response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Charset">
      <summary>When overridden in a derived class, gets or sets the HTTP character set of the current response.</summary>
      <returns>The HTTP character set of the current response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Clear">
      <summary>When overridden in a derived class, clears all headers and content output from the current response.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.ClearContent">
      <summary>When overridden in a derived class, clears all content from the current response.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.ClearHeaders">
      <summary>When overridden in a derived class, clears all headers from the current response.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Close">
      <summary>When overridden in a derived class, closes the socket connection to a client.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.ContentEncoding">
      <summary>When overridden in a derived class, gets or sets the content encoding of the current response.</summary>
      <returns>Information about the content encoding of the current response.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.ContentType">
      <summary>When overridden in a derived class, gets or sets the HTTP MIME type of the current response.</summary>
      <returns>The HTTP MIME type of the current response. </returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Cookies">
      <summary>When overridden in a derived class, gets the response cookie collection.</summary>
      <returns>The response cookie collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.DisableKernelCache">
      <summary>When overridden in a derived class, disables kernel caching for the current response.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.End">
      <summary>When overridden in a derived class, sends all currently buffered output to the client, stops execution of the requested process, and raises the <see cref="E:System.Web.HttpApplication.EndRequest" /> event.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Expires">
      <summary>When overridden in a derived class, gets or sets the number of minutes before a page that is cached on the client or proxy expires. If the user returns to the same page before it expires, the cached version is displayed. <see cref="P:System.Web.HttpResponseBase.Expires" /> is provided for compatibility with earlier versions of Active Server Pages (ASP).</summary>
      <returns>The number of minutes before the page expires.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.ExpiresAbsolute">
      <summary>When overridden in a derived class, gets or sets the absolute date and time at which cached information expires in the cache. <see cref="P:System.Web.HttpResponseBase.ExpiresAbsolute" /> is provided for compatibility with earlier versions of Active Server Pages (ASP).</summary>
      <returns>The date and time at which the page expires.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Filter">
      <summary>When overridden in a derived class, gets or sets a filter object that is used to modify the HTTP entity body before transmission.</summary>
      <returns>An object that acts as the output filter.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Flush">
      <summary>When overridden in a derived class, sends all currently buffered output to the client.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.HeaderEncoding">
      <summary>When overridden in a derived class, gets or sets the encoding for the header of the current response.</summary>
      <returns>Information about the encoding for the current header.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Headers">
      <summary>When overridden in a derived class, gets the collection of response headers.</summary>
      <returns>The response headers.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.IsClientConnected">
      <summary>When overridden in a derived class, gets a value that indicates whether the client is connected to the server.</summary>
      <returns>true if the client is currently connected; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.IsRequestBeingRedirected">
      <summary>When overridden in a derived class, gets a value that indicates whether the client is being redirected to a new location.</summary>
      <returns>true if the value of the location response header differs from the current location; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Output">
      <summary>When overridden in a derived class, gets the object that enables text output to the HTTP response stream.</summary>
      <returns>An object that enables output to the client.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.OutputStream">
      <summary>When overridden in a derived class, enables binary output to the outgoing HTTP content body.</summary>
      <returns>An object that represents the raw contents of the outgoing HTTP content body.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Pics(System.String)">
      <summary>When overridden in a derived class, appends an HTTP PICS-Label header to the current response.</summary>
      <param name="value">The string to add to the PICS-Label header.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Redirect(System.String)">
      <summary>When overridden in a derived class, redirects a request to the specified URL.</summary>
      <param name="url">The target location.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Redirect(System.String,System.Boolean)">
      <summary>When overridden in a derived class, redirects a request to the specified URL and specifies whether execution of the current process should terminate.</summary>
      <param name="url">The target location. </param>
      <param name="endResponse">true to terminate the current process. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.RedirectLocation">
      <summary>When overridden in a derived class, gets or sets the value of the HTTP Location header.</summary>
      <returns>The absolute URL of the HTTP Location header.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectPermanent(System.String)">
      <summary>When overridden in a derived class, performs a permanent redirect from the requested URL to the specified URL.</summary>
      <param name="url">The location to which the request is redirected.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectPermanent(System.String,System.Boolean)">
      <summary>When overridden in a derived class, performs a permanent redirect from the requested URL to the specified URL, and provides the option to complete the response.</summary>
      <param name="url">The location to which the request is redirected.</param>
      <param name="endResponse">true to terminate the response; otherwise false. The default is false.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoute(System.Object)">
      <summary>When overridden in a derived class, redirects the request to a new URL by using route parameter values.</summary>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoute(System.String)">
      <summary>When overridden in a derived class, redirects the request to a new URL by using a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoute(System.String,System.Object)">
      <summary>When overridden in a derived class, redirects the request to a new URL by using route parameter values and a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>When overridden in a derived class, redirects the request to a new URL by using route parameter values and a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoute(System.Web.Routing.RouteValueDictionary)">
      <summary>When overridden in a derived class, redirects the request to a new URL by using route parameter values.</summary>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoutePermanent(System.Object)">
      <summary>When overridden in a derived class, performs a permanent redirection from the requested URL to a new URL by using route parameter values.</summary>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoutePermanent(System.String)">
      <summary>When overridden in a derived class, performs a permanent redirection from the requested URL to a new URL by using a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoutePermanent(System.String,System.Object)">
      <summary>When overridden in a derived class, performs a permanent redirection from the requested URL to a new URL by using the route parameter values and the name of the route that correspond to the new URL.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>When overridden in a derived class, performs a permanent redirection from the requested URL to a new URL by using route parameter values and a route name.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)">
      <summary>When overridden in a derived class, performs a permanent redirection from the requested URL to a new URL by using route parameter values.</summary>
      <param name="routeValues">The route parameter values.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RemoveOutputCacheItem(System.String)">
      <summary>When overridden in a derived class, removes from the cache all cached items that are associated with the specified path.</summary>
      <param name="path">The virtual absolute path to the items to be removed from the cache.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.RemoveOutputCacheItem(System.String,System.String)">
      <summary>When overridden in a derived class, uses the specified output-cache provider to remove all output-cache artifacts that are associated with the specified path.</summary>
      <param name="path">The virtual absolute path of the items that are removed from the cache. </param>
      <param name="providerName">The provider that is used to remove the output-cache artifacts that are associated with the specified path.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.SetCookie(System.Web.HttpCookie)">
      <summary>When overridden in a derived class, updates an existing cookie in the cookie collection.</summary>
      <param name="cookie">The cookie in the collection to be updated.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.Status">
      <summary>When overridden in a derived class, gets or sets the Status value that is returned to the client.</summary>
      <returns>The status of the HTTP output. For information about valid status codes, see HTTP Status Codes on the MSDN Web site.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.StatusCode">
      <summary>When overridden in a derived class, gets or sets the HTTP status code of the output that is returned to the client.</summary>
      <returns>The status code of the HTTP output that is returned to the client. For information about valid status codes, see HTTP Status Codes on the MSDN Web site.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.StatusDescription">
      <summary>When overridden in a derived class, gets or sets the HTTP status message of the output that is returned to the client.</summary>
      <returns>The status message of the HTTP output that is returned to the client. For information about valid status codes, see HTTP Status Codes on the MSDN Web site.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.SubStatusCode">
      <summary>When overridden in a derived class, gets or sets a value that qualifies the status code of the response.</summary>
      <returns>The IIS 7.0 substatus code.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.SuppressContent">
      <summary>When overridden in a derived class, gets or sets a value that indicates whether to send HTTP content to the client.</summary>
      <returns>true if output is suppressed; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.TransmitFile(System.String)">
      <summary>When overridden in a derived class, writes the specified file to the HTTP response output stream, without buffering it in memory.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.TransmitFile(System.String,System.Int64,System.Int64)">
      <summary>When overridden in a derived class, writes the specified part of a file to the HTTP response output stream, without buffering it in memory.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <param name="offset">The position in the file where writing starts.</param>
      <param name="length">The number of bytes to write, starting at <paramref name="offset" />.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpResponseBase.TrySkipIisCustomErrors">
      <summary>When overridden in a derived class, gets or sets a value that specifies whether IIS 7.0 custom errors are disabled.</summary>
      <returns>true if IIS custom errors are disabled; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Write(System.Char)">
      <summary>When overridden in a derived class, writes a character to an HTTP response output stream.</summary>
      <param name="ch">The character to write to the HTTP output stream.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Write(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes the specified array of characters to the HTTP response output stream.</summary>
      <param name="buffer">The character array to write.</param>
      <param name="index">The position in the character array where writing starts.</param>
      <param name="count">The number of characters to write, starting at <paramref name="index" />.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Write(System.Object)">
      <summary>When overridden in a derived class, writes the specified object to the HTTP response stream.</summary>
      <param name="obj">The object to write to the HTTP output stream.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.Write(System.String)">
      <summary>When overridden in a derived class, writes the specified string to the HTTP response output stream.</summary>
      <param name="s">The string to write to the HTTP output stream.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.WriteFile(System.IntPtr,System.Int64,System.Int64)">
      <summary>When overridden in a derived class, writes the specified file to the HTTP response output stream.</summary>
      <param name="fileHandle">The file handle of the file to write to the HTTP output stream.</param>
      <param name="offset">The position in the file where writing starts.</param>
      <param name="size">The number of bytes to write, starting at <paramref name="offset" />.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.WriteFile(System.String)">
      <summary>When overridden in a derived class, writes the contents of the specified file to the HTTP response output stream as a file block.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.WriteFile(System.String,System.Boolean)">
      <summary>When overridden in a derived class, writes the contents of the specified file to the HTTP response output stream and specifies whether the content is written as a memory block.</summary>
      <param name="filename">The name of the file to write to the current response.</param>
      <param name="readIntoMemory">true to write the file into a memory block.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.WriteFile(System.String,System.Int64,System.Int64)">
      <summary>When overridden in a derived class, writes the specified file to the HTTP response output stream.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <param name="offset">The position in the file where writing starts.</param>
      <param name="size">The number of bytes to write, starting at <paramref name="offset" />.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpResponseBase.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)">
      <summary>When overridden in a derived class, inserts substitution blocks into the response, which enables dynamic generation of regions for cached output responses.</summary>
      <param name="callback">The method, user control, or object to substitute.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpResponseSubstitutionCallback">
      <summary>Represents the method that handles post-cache substitution.</summary>
      <returns>The content inserted into the cached response before being sent to the client. </returns>
      <param name="context">The <see cref="T:System.Web.HttpContext" /> that contains the HTTP request information for the page with the control that requires post-cache substitution.</param>
    </member>
    <member name="T:System.Web.HttpResponseWrapper">
      <summary>Encapsulates the HTTP intrinsic object that provides HTTP-response information from an ASP.NET operation.</summary>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.#ctor(System.Web.HttpResponse)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpResponseWrapper" /> class.</summary>
      <param name="httpResponse">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpResponse" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AddCacheDependency(System.Web.Caching.CacheDependency[])">
      <summary>When overridden in a derived class, associates cache dependencies with the response that enable the response to be invalidated if it is cached and if the specified dependencies change.</summary>
      <param name="dependencies">A file, cache key, or <see cref="T:System.Web.Caching.CacheDependency" /> object to add to the list of application dependencies.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AddCacheItemDependencies(System.Collections.ArrayList)">
      <summary>Makes the validity of a cached response dependent on the specified items in the cache.</summary>
      <param name="cacheKeys">A collection that contains the keys of the items that the cached response is dependent on.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AddCacheItemDependencies(System.String[])">
      <summary>Makes the validity of a cached item dependent on the specified items in the cache.</summary>
      <param name="cacheKeys">An array that contains the keys of the items that the cached response is dependent on.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AddCacheItemDependency(System.String)">
      <summary>Makes the validity of a cached response dependent on the specified item in the cache.</summary>
      <param name="cacheKey">The key of the item that the cached response is dependent on.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AddFileDependencies(System.Collections.ArrayList)">
      <summary>Adds file names to the collection of file names on which the current response is dependent.</summary>
      <param name="filenames">The names of the files to add.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AddFileDependencies(System.String[])">
      <summary>Adds an array of file names to the collection of file names on which the current response is dependent.</summary>
      <param name="filenames">An array of files names to add.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AddFileDependency(System.String)">
      <summary>Adds a single file name to the collection of file names on which the current response is dependent.</summary>
      <param name="filename">The name of the file to add.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AddHeader(System.String,System.String)">
      <summary>Adds an HTTP header to the current response. This method is provided for compatibility with earlier versions of ASP.</summary>
      <param name="name">The name of the HTTP header to add <paramref name="value" /> to.</param>
      <param name="value">The string to add to the header.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AppendCookie(System.Web.HttpCookie)">
      <summary>Adds an HTTP cookie to the HTTP response cookie collection.</summary>
      <param name="cookie">The cookie to add to the response.</param>
      <exception cref="T:System.Web.HttpException">The cookie was added after the HTTP headers were sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AppendHeader(System.String,System.String)">
      <summary>Adds an HTTP header to the current response.</summary>
      <param name="name">The name of the HTTP header to add to the current response.</param>
      <param name="value">The value of the header.</param>
      <exception cref="T:System.Web.HttpException">The header was appended after the HTTP headers were sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.AppendToLog(System.String)">
      <summary>Adds custom log information to the Internet Information Services (IIS) log file.</summary>
      <param name="param">The text to add to the log file.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.ApplyAppPathModifier(System.String)">
      <summary>Adds a session ID to the virtual path if the session is using <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" /> session state, and returns the combined path. </summary>
      <returns>The virtual path with the session ID inserted. If <see cref="P:System.Web.Configuration.SessionStateSection.Cookieless" /> session state is not used, returns the original <paramref name="virtualpath" /> value.</returns>
      <param name="virtualPath">The virtual path of a resource.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.BinaryWrite(System.Byte[])">
      <summary>Writes a string of binary characters to the HTTP output stream.</summary>
      <param name="buffer">The binary characters to write to the current response.</param>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Buffer">
      <summary>Gets or sets a value that indicates whether to buffer output and send it after the complete response has finished processing.</summary>
      <returns>true if the output is buffered; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.BufferOutput">
      <summary>Gets or sets a value that indicates whether to buffer output and send it after the complete page has finished processing.</summary>
      <returns>true if the output is buffered; otherwise false. The default is true.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Cache">
      <summary>Gets the caching policy (such as expiration time, privacy settings, and vary clauses) of the current Web page.</summary>
      <returns>The caching policy of the current response.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.CacheControl">
      <summary>Gets or sets the Cache-Control HTTP header that matches one of the <see cref="T:System.Web.HttpCacheability" /> enumeration values.</summary>
      <returns>The caching policy of the current response.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Charset">
      <summary>Gets or sets the HTTP character set of the current response.</summary>
      <returns>The HTTP character set of the current response.</returns>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Clear">
      <summary>Clears all headers and content output from the current response.</summary>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.ClearContent">
      <summary>Clears all content output from the current response.</summary>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.ClearHeaders">
      <summary>Clears all headers from the current response.</summary>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Close">
      <summary>Closes the socket connection to a client.</summary>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.ContentEncoding">
      <summary>Gets or sets the content encoding of the current response.</summary>
      <returns>Information about the content encoding of the current response.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Web.HttpResponse.ContentEncoding" /> to null.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.ContentType">
      <summary>Gets or sets the HTTP MIME type of the current response.</summary>
      <returns>The HTTP MIME type of the current response. The default value is "text/html".</returns>
      <exception cref="T:System.Web.HttpException">The <see cref="P:System.Web.HttpResponse.ContentType" /> property is set to null.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Cookies">
      <summary>Gets the response cookie collection.</summary>
      <returns>The response cookie collection.</returns>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.DisableKernelCache">
      <summary>Disables kernel caching for the current response.</summary>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.End">
      <summary>Sends all currently buffered output to the client, stops execution of the requested process, and raises the <see cref="E:System.Web.HttpApplication.EndRequest" /> event.</summary>
      <exception cref="T:System.Threading.ThreadAbortException">The call to <see cref="M:System.Web.HttpResponse.End" /> has terminated the current request.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Expires">
      <summary>Gets or sets the number of minutes before a page that is cached on the client or proxy expires. If the user returns to the same page before it expires, the cached version is displayed. <see cref="P:System.Web.HttpResponseWrapper.Expires" /> is provided for compatibility with earlier versions of ASP.</summary>
      <returns>The number of minutes before the page expires.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.ExpiresAbsolute">
      <summary>Gets or sets the absolute date and time at which cached information expires in the cache. <see cref="P:System.Web.HttpResponseWrapper.ExpiresAbsolute" /> is provided for compatibility with earlier versions of ASP.</summary>
      <returns>The date and time at which the page expires.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Filter">
      <summary>Gets or sets a filter object that is used to modify the HTTP entity body before transmission.</summary>
      <returns>An object that acts as the output filter.</returns>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Flush">
      <summary>Sends all currently buffered output to the client.</summary>
      <exception cref="T:System.Web.HttpException">The method was called after the response was finished.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.HeaderEncoding">
      <summary>Gets or sets the encoding for the header of the current response.</summary>
      <returns>Information about the encoding for the current header.</returns>
      <exception cref="T:System.ArgumentNullException">The encoding value is null.</exception>
      <exception cref="T:System.Web.HttpException">The encoding value is <see cref="P:System.Text.Encoding.Unicode" />.- or -The headers have already been sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Headers">
      <summary>Gets the collection of response headers.</summary>
      <returns>The response headers.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operation requires the integrated pipeline mode in IIS 7.0 and at least the .NET Framework version 3.0.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.IsClientConnected">
      <summary>Gets a value that indicates whether the client is connected to the server.</summary>
      <returns>true if the client is currently connected; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.IsRequestBeingRedirected">
      <summary>Gets a value that indicates whether the client is being redirected to a new location.</summary>
      <returns>true if the value of the location response header differs from the current location; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Output">
      <summary>Gets the object that enables output of text to the outgoing HTTP response stream.</summary>
      <returns>An object that enables custom output to the client.</returns>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.OutputStream">
      <summary>Provides binary output to the outgoing HTTP content body.</summary>
      <returns>An object that represents the raw contents of the outgoing HTTP content body.</returns>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Pics(System.String)">
      <summary>Appends an HTTP PICS-Label header to the current response.</summary>
      <param name="value">The string to add to the PICS-Label header.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Redirect(System.String)">
      <summary>Redirects a request to the specified URL.</summary>
      <param name="url">The target location.</param>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers were sent.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Redirect(System.String,System.Boolean)">
      <summary>Redirects a request to the specified URL and specifies whether execution of the current process should terminate.</summary>
      <param name="url">The target location. </param>
      <param name="endResponse">true to terminate the current process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> contains a newline character.</exception>
      <exception cref="T:System.Web.HttpException">Redirection was attempted after the HTTP headers were sent.</exception>
      <exception cref="T:System.ApplicationException">The request is the result of a callback.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.RedirectLocation">
      <summary>Gets or sets the value of the HTTP Location header.</summary>
      <returns>The absolute URL of the HTTP Location header.</returns>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.RedirectPermanent(System.String)">
      <summary>Performs a permanent redirect from the requested URL to the specified URL.</summary>
      <param name="url">The URL to redirect the request to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> includes a newline character (\n).</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.RedirectPermanent(System.String,System.Boolean)">
      <summary>Performs a permanent redirect from the requested URL to the specified URL, and provides the option to complete the response.</summary>
      <param name="url">The URL to redirect the request to.</param>
      <param name="endResponse">true to terminate the response; otherwise false. The default is false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> includes a newline character (\n).</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.RemoveOutputCacheItem(System.String)">
      <summary>Removes from the cache all cached items that are associated with the specified path.</summary>
      <param name="path">The virtual absolute path to the items to be removed from the cache.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.RemoveOutputCacheItem(System.String,System.String)">
      <summary>Uses the specified output-cache provider to remove all output-cache artifacts that are associated with the specified path.</summary>
      <param name="path">The virtual absolute path of the items that are removed from the cache. </param>
      <param name="providerName">The provider that is used to remove the output-cache artifacts that are associated with the specified path.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an invalid path.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.SetCookie(System.Web.HttpCookie)">
      <summary>Updates an existing cookie in the cookie collection.</summary>
      <param name="cookie">The cookie in the collection to be updated.</param>
      <exception cref="T:System.Web.HttpException">The cookie was set after the HTTP headers were sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.Status">
      <summary>Sets the Status value that is returned to the client.</summary>
      <returns>The status of the HTTP output. The default value is "200 (OK)". For information about valid status codes, see HTTP Status Codes on the MSDN Web site.</returns>
      <exception cref="T:System.Web.HttpException">Status is set to an invalid status code.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.StatusCode">
      <summary>Gets or sets the HTTP status code of the output that is returned to the client.</summary>
      <returns>The status code of the HTTP output that is returned to the client. The default value is 200. For information about valid status codes, see HTTP Status Codes on the MSDN Web site.</returns>
      <exception cref="T:System.Web.HttpException">
        <see cref="P:System.Web.HttpResponse.StatusCode" /> was set after the HTTP headers were sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.StatusDescription">
      <summary>Gets or sets the HTTP status message of the output that is returned to the client.</summary>
      <returns>The status message of the HTTP output that is returned to the client. The default value is "OK". For information about valid status codes, see HTTP Status Codes on the MSDN Web site.</returns>
      <exception cref="T:System.Web.HttpException">StatusDescription was set after the HTTP headers were sent.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The status value is longer than 512 characters.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.SubStatusCode">
      <summary>Gets or sets a value that qualifies the status code of the response.</summary>
      <returns>The IIS 7.0 substatus code.</returns>
      <exception cref="T:System.PlatformNotSupportedException">The operation requires the integrated pipeline mode in IIS 7.0 and at least the .NET Framework version 3.0.</exception>
      <exception cref="T:System.Web.HttpException">The status code was set after all HTTP headers were sent.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.SuppressContent">
      <summary>Gets or sets a value that indicates whether to send HTTP content to the client.</summary>
      <returns>true if output is suppressed; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.TransmitFile(System.String)">
      <summary>Writes the specified file to the HTTP response output stream, without buffering it in memory.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> is null</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.TransmitFile(System.String,System.Int64,System.Int64)">
      <summary>Writes the specified part of a file to the HTTP response output stream, without buffering it in memory.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <param name="offset">The position in the file where writing starts.</param>
      <param name="length">The number of bytes to write, starting at <paramref name="offset" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="offset" /> parameter is less than zero.- or -The <paramref name="length" /> parameter is less than -1.- or - The <paramref name="length" /> parameter is greater than the file size minus <paramref name="offset" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The out-of-process worker request is not supported.- or -The response is not using an <see cref="T:System.Web.HttpWriter" /> object.</exception>
    </member>
    <member name="P:System.Web.HttpResponseWrapper.TrySkipIisCustomErrors">
      <summary>Gets or sets a value that specifies whether IIS 7.0 custom errors are disabled.</summary>
      <returns>true if IIS custom errors are disabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Write(System.Char)">
      <summary>Writes a character to an HTTP response output stream.</summary>
      <param name="ch">The character to write to the HTTP output stream.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes the specified array of characters to the HTTP response output stream.</summary>
      <param name="buffer">The character array to write.</param>
      <param name="index">The position in the character array where writing starts.</param>
      <param name="count">The number of characters to write, starting at <paramref name="index" />.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Write(System.Object)">
      <summary>Writes the specified object to the HTTP response stream.</summary>
      <param name="obj">The object to write to the HTTP output stream.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.Write(System.String)">
      <summary>Writes the specified string to the HTTP response output stream.</summary>
      <param name="s">The string to write to the HTTP output stream.</param>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.WriteFile(System.IntPtr,System.Int64,System.Int64)">
      <summary>Writes the specified file to the HTTP response output stream.</summary>
      <param name="fileHandle">The file handle of the file to write to the HTTP output stream.</param>
      <param name="offset">The position in the file where writing starts.</param>
      <param name="size">The number of bytes to write, starting at <paramref name="offset" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileHandle" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">
        <paramref name="offset" /> is less than 0.- or -<paramref name="size" /> is greater than the file size minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.WriteFile(System.String)">
      <summary>Writes the contents of the specified file to the HTTP response output stream as a file block.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filename" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.WriteFile(System.String,System.Boolean)">
      <summary>Writes the contents of the specified file to the HTTP response output stream and specifies whether the content is written as a memory block.</summary>
      <param name="filename">The name of the file to write to the current response.</param>
      <param name="readIntoMemory">true to write the file into a memory block.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filename" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.WriteFile(System.String,System.Int64,System.Int64)">
      <summary>Writes the specified file to the HTTP response output stream.</summary>
      <param name="filename">The name of the file to write to the HTTP output stream.</param>
      <param name="offset">The position in the file where writing starts.</param>
      <param name="size">The number of bytes to write, starting at <paramref name="offset" />.</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="offset" /> is less than 0.- or -<paramref name="size" /> is greater than the file size minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Web.HttpResponseWrapper.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)">
      <summary>Inserts substitution blocks into the response, which enables dynamic generation of regions for cached output responses.</summary>
      <param name="callback">The method, user control, or object to substitute.</param>
      <exception cref="T:System.ArgumentException">The target of the <paramref name="callback" /> parameter is of type <see cref="T:System.Web.UI.Control" />.</exception>
    </member>
    <member name="T:System.Web.HttpRuntime">
      <summary>Provides a set of ASP.NET run-time services for the current application. </summary>
    </member>
    <member name="M:System.Web.HttpRuntime.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpRuntime" /> class.</summary>
    </member>
    <member name="P:System.Web.HttpRuntime.AppDomainAppId">
      <summary>Gets the application identification of the application domain where the <see cref="T:System.Web.HttpRuntime" /> exists.</summary>
      <returns>The application identification of the application domain where the <see cref="T:System.Web.HttpRuntime" /> exists.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.AppDomainAppPath">
      <summary>Gets the physical drive path of the application directory for the application hosted in the current application domain.</summary>
      <returns>The physical drive path of the application directory for the application hosted in the current application domain.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.AppDomainAppVirtualPath">
      <summary>Gets the virtual path of the directory that contains the application hosted in the current application domain.</summary>
      <returns>The virtual path of the directory that contains the application hosted in the current application domain.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.AppDomainId">
      <summary>Gets the domain identification of the application domain where the <see cref="T:System.Web.HttpRuntime" /> instance exists.</summary>
      <returns>The unique application domain identifier.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.AspClientScriptPhysicalPath">
      <summary>Gets the folder path for the ASP.NET client script files.</summary>
      <returns>The folder path for the ASP.NET client script files.</returns>
      <exception cref="T:System.Web.HttpException">ASP.NET is not installed.</exception>
    </member>
    <member name="P:System.Web.HttpRuntime.AspClientScriptVirtualPath">
      <summary>Gets the virtual path for the ASP.NET client script files.</summary>
      <returns>The virtual path for the ASP.NET client script files.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.AspInstallDirectory">
      <summary>Gets the physical path of the directory where the ASP.NET executable files are installed.</summary>
      <returns>The physical path to the ASP.NET executable files.</returns>
      <exception cref="T:System.Web.HttpException">ASP.NET is not installed on this computer.</exception>
    </member>
    <member name="P:System.Web.HttpRuntime.BinDirectory">
      <summary>Gets the physical path to the /bin directory for the current application.</summary>
      <returns>The path to the current application's /bin directory.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.Cache">
      <summary>Gets the <see cref="T:System.Web.Caching.Cache" /> for the current application.</summary>
      <returns>The current <see cref="T:System.Web.Caching.Cache" />.</returns>
      <exception cref="T:System.Web.HttpException">ASP.NET is not installed.</exception>
    </member>
    <member name="M:System.Web.HttpRuntime.Close">
      <summary>Removes all items from the cache.</summary>
    </member>
    <member name="P:System.Web.HttpRuntime.ClrInstallDirectory">
      <summary>Gets the physical path to the directory where the common language runtime executable files are installed.</summary>
      <returns>The physical path to the common language runtime executable files.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.CodegenDir">
      <summary>Gets the physical path to the directory where ASP.NET stores temporary files (generated sources, compiled assemblies, and so on) for the current application.</summary>
      <returns>The physical path to the application's temporary file storage directory.</returns>
    </member>
    <member name="M:System.Web.HttpRuntime.GetNamedPermissionSet">
      <summary>Returns the set of permissions associated with code groups.</summary>
      <returns>A <see cref="T:System.Security.NamedPermissionSet" /> object containing the names and descriptions of permissions, or null if none exists.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.IsOnUNCShare">
      <summary>Gets a value that indicates whether the application is mapped to a universal naming convention (UNC) share.</summary>
      <returns>true if the application is mapped to a UNC share; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpRuntime.MachineConfigurationDirectory">
      <summary>Gets the physical path to the directory where the Machine.config file for the current application is located.</summary>
      <returns>The physical path to the Machine.config file for the current application.</returns>
    </member>
    <member name="M:System.Web.HttpRuntime.ProcessRequest(System.Web.HttpWorkerRequest)">
      <summary>Drives all ASP.NET Web processing execution.</summary>
      <param name="wr">An <see cref="T:System.Web.HttpWorkerRequest" /> for the current application. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="wr" /> parameter is null. </exception>
      <exception cref="T:System.PlatformNotSupportedException">The Web application is running under IIS 7 in Integrated mode.</exception>
    </member>
    <member name="M:System.Web.HttpRuntime.UnloadAppDomain">
      <summary>Terminates the current application. The application restarts the next time a request is received for it.</summary>
    </member>
    <member name="P:System.Web.HttpRuntime.UsingIntegratedPipeline">
      <summary>Gets a value that indicates whether the current application is running in the integrated-pipeline mode of IIS 7.0.</summary>
      <returns>true if the application is running in integrated-pipeline mode; otherwise, false.</returns>
    </member>
    <member name="T:System.Web.HttpServerUtility">
      <summary>Provides helper methods for processing Web requests.</summary>
    </member>
    <member name="M:System.Web.HttpServerUtility.ClearError">
      <summary>Clears the previous exception.</summary>
    </member>
    <member name="M:System.Web.HttpServerUtility.CreateObject(System.String)">
      <summary>Creates a server instance of a COM object identified by the object's programmatic identifier (ProgID).</summary>
      <returns>The new object.</returns>
      <param name="progID">The class or type of object to create an instance of.</param>
      <exception cref="T:System.Web.HttpException">An instance of the object could not be created.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.CreateObject(System.Type)">
      <summary>Creates a server instance of a COM object identified by the object's type.</summary>
      <returns>The new object.</returns>
      <param name="type">A <see cref="T:System.Type" /> representing the object to create.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)">
      <summary>Creates a server instance of a COM object identified by the object's class identifier (CLSID).</summary>
      <returns>The new object.</returns>
      <param name="clsid">The class identifier of the object to create an instance of.</param>
      <exception cref="T:System.Web.HttpException">An instance of the object could not be created.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.Execute(System.String)">
      <summary>Executes the handler for the specified virtual path in the context of the current request. </summary>
      <param name="path">The URL path to execute.</param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is null.- or -An error occurred while executing the handler specified by <paramref name="path" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. - or -<paramref name="path" /> is not a virtual path.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.Execute(System.String,System.Boolean)">
      <summary>Executes the handler for the specified virtual path in the context of the current request and specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="path">The URL path to execute. </param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is null.- or -An error occurred while executing the handler specified by <paramref name="path" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. - or -<paramref name="path" /> is not a virtual path. </exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)">
      <summary>Executes the handler for the specified virtual path in the context of the current request. A <see cref="T:System.IO.TextWriter" /> captures output from the executed handler.</summary>
      <param name="path">The URL path to execute. </param>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to capture the output. </param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is null. - or -An error occurred while executing the handler specified by <paramref name="path" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. - or -<paramref name="path" /> is not a virtual path. </exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)">
      <summary>Executes the handler for the specified virtual path in the context of the current request. A <see cref="T:System.IO.TextWriter" /> captures output from the page and a Boolean parameter specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="path">The URL path to execute.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to capture the output.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is a null reference (Nothing in Visual Basic). - or -<paramref name="path" /> ends with a period (.).- or -An error occurred while executing the handler specified by <paramref name="path" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is not a virtual path.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)">
      <summary>Executes the handler for the specified virtual path in the context of the current request. A <see cref="T:System.IO.TextWriter" /> captures output from the executed handler and a Boolean parameter specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="handler">The HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> to transfer the current request to.</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to capture the output.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.Web.HttpException">An error occurred while executing the handler specified by <paramref name="handler" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="handler" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.GetLastError">
      <summary>Returns the previous exception.</summary>
      <returns>The previous exception that was thrown.</returns>
    </member>
    <member name="M:System.Web.HttpServerUtility.HtmlDecode(System.String)">
      <summary>Decodes an HTML-encoded string and returns the decoded string.</summary>
      <returns>The decoded text.</returns>
      <param name="s">The HTML string to decode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>Decodes an HTML-encoded string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</summary>
      <param name="s">The HTML string to decode.</param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> output stream that contains the decoded string.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.HtmlEncode(System.String)">
      <summary>HTML-encodes a string and returns the encoded string.</summary>
      <returns>The HTML-encoded text.</returns>
      <param name="s">The text string to encode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>HTML-encodes a string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</summary>
      <param name="s">The string to encode. </param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> output stream that contains the encoded string.</param>
    </member>
    <member name="P:System.Web.HttpServerUtility.MachineName">
      <summary>Gets the server's computer name.</summary>
      <returns>The name of the local computer.</returns>
      <exception cref="T:System.Web.HttpException">The computer name cannot be found.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.MapPath(System.String)">
      <summary>Returns the physical file path that corresponds to the specified virtual path on the Web server.</summary>
      <returns>The physical file path that corresponds to <paramref name="path" />.</returns>
      <param name="path">The virtual path of the Web server.</param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is null.</exception>
    </member>
    <member name="P:System.Web.HttpServerUtility.ScriptTimeout">
      <summary>Gets and sets the request time-out value in seconds.</summary>
      <returns>The time-out value setting for requests.</returns>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The time-out period is null or otherwise could not be set.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.Transfer(System.String)">
      <summary>For the current request, terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.</summary>
      <param name="path">The URL path of the new page on the server to execute.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)">
      <summary>Terminates execution of the current page and starts execution of a new page by using the specified URL path of the page. Specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="path">The URL path of the new page on the server to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.ApplicationException">The current page request is a callback.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)">
      <summary>Terminates execution of the current page and starts execution of a new request by using a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface and specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="handler">The HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> to transfer the current request to.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.ApplicationException">The current page request is a callback.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.TransferRequest(System.String)">
      <summary>Performs an asynchronous execution of the specified URL.</summary>
      <param name="path">The URL path of the new page on the server to execute.</param>
      <exception cref="T:System.PlatformNotSupportedException">The request requires the integrated pipeline mode of IIS 7.0.</exception>
      <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)">
      <summary>Performs an asynchronous execution of the specified URL and preserves query string parameters.</summary>
      <param name="path">The URL path of the new page on the server to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.PlatformNotSupportedException">The request requires the integrated pipeline mode of IIS 7.0.</exception>
      <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Performs an asynchronous execution of the specified URL using the specified HTTP method and headers.</summary>
      <param name="path">The URL path of the new page on the server to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <param name="method">The HTTP method to use in the execution of the new request.</param>
      <param name="headers">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of request headers for the new request.</param>
      <exception cref="T:System.PlatformNotSupportedException">The request requires IIS 7.0 running in integrated mode.</exception>
      <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.UrlDecode(System.String)">
      <summary>URL-decodes a string and returns the decoded string.</summary>
      <returns>The decoded text.</returns>
      <param name="s">The text string to decode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)">
      <summary>Decodes an HTML string received in a URL and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</summary>
      <param name="s">The HTML string to decode.</param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> output stream that contains the decoded string.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.UrlEncode(System.String)">
      <summary>URL-encodes a string and returns the encoded string.</summary>
      <returns>The URL-encoded text.</returns>
      <param name="s">The text to URL-encode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)">
      <summary>URL-encodes a string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</summary>
      <param name="s">The text string to encode.</param>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> output stream that contains the encoded string.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.UrlPathEncode(System.String)">
      <summary>URL-encodes the path section of a URL string and returns the encoded string.</summary>
      <returns>The URL encoded text.</returns>
      <param name="s">The text to URL-encode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)">
      <summary>Decodes a URL string token to its equivalent byte array using base 64 digits.</summary>
      <returns>The byte array containing the decoded URL string token.</returns>
      <param name="input">The URL string token to decode.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="input" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])">
      <summary>Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL.</summary>
      <returns>The string containing the encoded token if the byte array length is greater than one; otherwise, an empty string ("").</returns>
      <param name="input">The byte array to encode.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="input" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.HttpServerUtilityBase">
      <summary>Serves as the base class for classes that provide helper methods for processing Web requests.</summary>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.ClearError">
      <summary>When overridden in a derived class, clears the most recent exception.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.CreateObject(System.String)">
      <summary>When overridden in a derived class, creates a server instance of a COM object that is identified by the object's programmatic identifier (ProgID).</summary>
      <returns>The new object.</returns>
      <param name="progID">The class or type of object to create an instance of.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.CreateObject(System.Type)">
      <summary>When overridden in a derived class, creates a server instance of a COM object that is identified by the object's type.</summary>
      <returns>The new object.</returns>
      <param name="type">A type that represents the object to create.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.CreateObjectFromClsid(System.String)">
      <summary>When overridden in a derived class, creates a server instance of a COM object that is identified by the object's class identifier (CLSID).</summary>
      <returns>The new object.</returns>
      <param name="clsid">The class identifier of the object to create an instance of.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.Execute(System.String)">
      <summary>When overridden in a derived class, executes the handler for the specified virtual path in the context of the current process.</summary>
      <param name="path">The URL of the handler to execute.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.Execute(System.String,System.Boolean)">
      <summary>When overridden in a derived class, executes the handler for the specified virtual path in the context of the current process and specifies whether to clear the <see cref="P:System.Web.HttpRequestBase.QueryString" /> and <see cref="P:System.Web.HttpRequestBase.Form" /> collections.</summary>
      <param name="path">The URL of the handler to execute. </param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.Execute(System.String,System.IO.TextWriter)">
      <summary>When overridden in a derived class, executes the handler for the specified virtual path in the context of the current process, using a <see cref="T:System.IO.TextWriter" /> instance to capture output from the executed handler.</summary>
      <param name="path">The URL of the handler to execute. </param>
      <param name="writer">An object to capture the output. </param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.Execute(System.String,System.IO.TextWriter,System.Boolean)">
      <summary>When overridden in a derived class, executes the handler for the specified virtual path in the context of the current request, using a <see cref="T:System.IO.TextWriter" /> instance to capture output from the page and a value that indicates whether to clear the <see cref="P:System.Web.HttpRequestBase.QueryString" /> and <see cref="P:System.Web.HttpRequestBase.Form" /> collections.</summary>
      <param name="path">The URL of the handler to execute.</param>
      <param name="writer">The object to capture the output.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)">
      <summary>When overridden in a derived class, executes the specified handler in the context of the current process, using a <see cref="T:System.IO.TextWriter" /> instance to capture output from the executed handler and a value that specifies whether to clear the <see cref="P:System.Web.HttpRequestBase.QueryString" /> and <see cref="P:System.Web.HttpRequestBase.Form" /> collections.</summary>
      <param name="handler">The HTTP handler that implements the interface to transfer the current request to.</param>
      <param name="writer">The object to capture the output.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.GetLastError">
      <summary>When overridden in a derived class, returns the most recent exception.</summary>
      <returns>The most recent exception that was thrown.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.HtmlDecode(System.String)">
      <summary>When overridden in a derived class, decodes an HTML-encoded string and returns the decoded string.</summary>
      <returns>The decoded text.</returns>
      <param name="s">The HTML string to decode.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>When overridden in a derived class, decodes an HTML-encoded string and returns the results in a stream.</summary>
      <param name="s">The HTML string to decode.</param>
      <param name="output">The stream to contain the decoded string.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.HtmlEncode(System.String)">
      <summary>When overridden in a derived class, HTML-encodes a string and returns the encoded string.</summary>
      <returns>The HTML-encoded text.</returns>
      <param name="s">The string to encode.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>When overridden in a derived class, HTML-encodes a string and sends the resulting output to an output stream.</summary>
      <param name="s">The string to encode. </param>
      <param name="output">The stream to contain the encoded string.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpServerUtilityBase.MachineName">
      <summary>When overridden in a derived class, gets the server's computer name.</summary>
      <returns>The name of the server computer.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.MapPath(System.String)">
      <summary>When overridden in a derived class, returns the physical file path that corresponds to the specified virtual path on the Web server.</summary>
      <returns>The physical file path that corresponds to <paramref name="path" />.</returns>
      <param name="path">The virtual path to get the physical path for.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpServerUtilityBase.ScriptTimeout">
      <summary>When overridden in a derived class, gets or sets the request time-out value in seconds.</summary>
      <returns>The time-out value for requests.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.Transfer(System.String)">
      <summary>When overridden in a derived class, terminates execution of the current process and starts execution of a page or handler that is specified with a URL.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.Transfer(System.String,System.Boolean)">
      <summary>When overridden in a derived class, terminates execution of the current page and starts execution of a different page or handler by using the specified URL and a value that specifies whether to clear the <see cref="P:System.Web.HttpRequestBase.QueryString" /> and <see cref="P:System.Web.HttpRequestBase.Form" /> collections.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.Transfer(System.Web.IHttpHandler,System.Boolean)">
      <summary>When overridden in a derived class, terminates execution of the current process and starts execution of a new request, using a custom HTTP handler and a value that specifies whether to clear the <see cref="P:System.Web.HttpRequestBase.QueryString" /> and <see cref="P:System.Web.HttpRequestBase.Form" /> collections.</summary>
      <param name="handler">The HTTP handler to transfer the current request to.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.TransferRequest(System.String)">
      <summary>When overridden in a derived class, asynchronously executes the end point at the specified URL.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.TransferRequest(System.String,System.Boolean)">
      <summary>When overridden in a derived class, asynchronously executes the endpoint at the specified URL and specifies whether to clear the <see cref="P:System.Web.HttpRequestBase.QueryString" /> and <see cref="P:System.Web.HttpRequestBase.Form" /> collections.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>When overridden in a derived class, asynchronously executes the endpoint at the specified URL by using the specified HTTP method and headers.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <param name="method">The HTTP method (GET, POST, and so on) to use for the new request. If null, the HTTP method of the original request is used.</param>
      <param name="headers">A collection of request headers for the new request.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.UrlDecode(System.String)">
      <summary>When overridden in a derived class, decodes a URL-encoded string and returns the decoded string.</summary>
      <returns>The decoded text.</returns>
      <param name="s">The string to decode.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.UrlDecode(System.String,System.IO.TextWriter)">
      <summary>When overridden in a derived class, decodes a URL-encoded string and sends the resulting output to a stream.</summary>
      <param name="s">The string to decode.</param>
      <param name="output">The stream to contain the decoded string.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.UrlEncode(System.String)">
      <summary>When overridden in a derived class, URL-encodes a string and returns the encoded string.</summary>
      <returns>The URL-encoded text.</returns>
      <param name="s">The text to URL-encode.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.UrlEncode(System.String,System.IO.TextWriter)">
      <summary>When overridden in a derived class, URL-encodes a string and sends the resulting output to a stream.</summary>
      <param name="s">The string to encode.</param>
      <param name="output">The stream to contain the encoded string.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.UrlPathEncode(System.String)">
      <summary>When overridden in a derived class, URL-encodes the path section of a URL string.</summary>
      <returns>The URL-encoded text.</returns>
      <param name="s">The string to URL-encode.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.UrlTokenDecode(System.String)">
      <summary>When overridden in a derived class, decodes a URL string token into an equivalent byte array by using base64-encoded digits.</summary>
      <returns>The byte array that contains the decoded URL token.</returns>
      <param name="input">The URL string token to decode.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityBase.UrlTokenEncode(System.Byte[])">
      <summary>When overridden in a derived class, encodes a byte array into an equivalent string representation by using base64 digits, which makes it usable for transmission on the URL.</summary>
      <returns>The string that contains the encoded array if the length of <paramref name="input" /> is greater than 1; otherwise, an empty string ("")</returns>
      <param name="input">The byte array to encode.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpServerUtilityWrapper">
      <summary>Encapsulates the HTTP intrinsic object that provides helper methods for processing Web requests.</summary>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.#ctor(System.Web.HttpServerUtility)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpServerUtilityWrapper" /> class.</summary>
      <param name="httpServerUtility">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpServerUtility" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.ClearError">
      <summary>Clears the most recent exception.</summary>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.CreateObject(System.String)">
      <summary>Creates a server instance of a COM object that is identified by the object's programmatic identifier (ProgID).</summary>
      <returns>The new object.</returns>
      <param name="progID">The class or type of object to create an instance of.</param>
      <exception cref="T:System.Web.HttpException">An instance of the object could not be created.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.CreateObject(System.Type)">
      <summary>Creates a server instance of a COM object that is identified by the object's type.</summary>
      <returns>The new object.</returns>
      <param name="type">A type that represents the object to create.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.CreateObjectFromClsid(System.String)">
      <summary>Creates a server instance of a COM object that is identified by the object's class identifier (CLSID).</summary>
      <returns>The new object.</returns>
      <param name="clsid">The class identifier of the object to create an instance of.</param>
      <exception cref="T:System.Web.HttpException">An instance of the object cannot be created.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.Execute(System.String)">
      <summary>Executes the handler for the specified virtual path in the context of the current process.</summary>
      <param name="path">The URL of the handler to execute.</param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> object is null.- or -An error occurred when the handler specified by <paramref name="path" /> was executed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. - or -<paramref name="path" /> is not a virtual path.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.Execute(System.String,System.Boolean)">
      <summary>Executes the handler for the specified virtual path in the context of the current process and specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="path">The URL of the handler to execute. </param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> object is null.- or -An error occurred when the handler specified by <paramref name="path" /> was executed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. - or -<paramref name="path" /> is not a virtual path. </exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.Execute(System.String,System.IO.TextWriter)">
      <summary>Executes the handler for the specified virtual path in the context of the current process, using a <see cref="T:System.IO.TextWriter" /> instance to capture output from the executed handler.</summary>
      <param name="path">The URL of the handler to execute. </param>
      <param name="writer">An object to capture the output. </param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> is null. - or -An error occurred when the handler specified by <paramref name="path" /> was executed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. - or -<paramref name="path" /> is not a virtual path. </exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.Execute(System.String,System.IO.TextWriter,System.Boolean)">
      <summary>Executes the handler for the specified virtual path in the context of the current request, using a <see cref="T:System.IO.TextWriter" /> instance to capture output from the page and a value that indicates whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="path">The URL of the handler to execute.</param>
      <param name="writer">The object to capture the output.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> instance is null. - or -<paramref name="path" /> ends with a period (.).- or -An error occurred when the handler specified by <paramref name="path" /> was executed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is not a virtual path.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)">
      <summary>Executes the specified handler in the context of the current process, using a <see cref="T:System.IO.TextWriter" /> instance to capture output from the executed handler and a value that specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="handler">The HTTP handler that implements the interface to transfer the current request to.</param>
      <param name="writer">The object to capture the output.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.Web.HttpException">An error occurred when the handler specified by <paramref name="handler" /> was executed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="handler" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.GetLastError">
      <summary>Returns the most recent exception.</summary>
      <returns>The previous exception that was thrown.</returns>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.HtmlDecode(System.String)">
      <summary>Decodes an HTML-encoded string and returns the decoded string.</summary>
      <returns>The decoded text.</returns>
      <param name="s">The HTML string to decode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>Decodes an HTML-encoded string and returns the results in a stream.</summary>
      <param name="s">The HTML string to decode.</param>
      <param name="output">The stream to contain the decoded string.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.HtmlEncode(System.String)">
      <summary>HTML-encodes a string and returns the encoded string.</summary>
      <returns>The HTML-encoded text.</returns>
      <param name="s">The string to encode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>HTML-encodes a string and sends the resulting output to an output stream.</summary>
      <param name="s">The string to encode. </param>
      <param name="output">The stream to contain the encoded string.</param>
    </member>
    <member name="P:System.Web.HttpServerUtilityWrapper.MachineName">
      <summary>Gets the server's computer name.</summary>
      <returns>The name of the server computer.</returns>
      <exception cref="T:System.Web.HttpException">The computer name cannot be found.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.MapPath(System.String)">
      <summary>Returns the physical file path that corresponds to the specified virtual path on the Web server.</summary>
      <returns>The physical file path that corresponds to <paramref name="path" />.</returns>
      <param name="path">The virtual path to get the physical path for.</param>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> object is null.</exception>
    </member>
    <member name="P:System.Web.HttpServerUtilityWrapper.ScriptTimeout">
      <summary>Gets or sets the request time-out value in seconds.</summary>
      <returns>The time-out value for requests.</returns>
      <exception cref="T:System.Web.HttpException">The current <see cref="T:System.Web.HttpContext" /> object is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The time-out period is null or otherwise cannot be set.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.Transfer(System.String)">
      <summary>Terminates execution of the current process and starts execution of a page or handler that is specified with a URL.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.Transfer(System.String,System.Boolean)">
      <summary>Terminates execution of the current page and starts execution of a different page or handler by using the specified URL and a value that specifies whether to clear the <see cref="P:System.Web.HttpRequestBase.QueryString" /> and <see cref="P:System.Web.HttpRequestBase.Form" /> collections.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.ApplicationException">The current page request is a callback.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.Transfer(System.Web.IHttpHandler,System.Boolean)">
      <summary>Terminates execution of the current process and starts execution of a new request, using a custom HTTP handler and a value that specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</summary>
      <param name="handler">The HTTP handler to transfer the current request to.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.ApplicationException">The current page request is a callback.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.TransferRequest(System.String)">
      <summary>Asynchronously executes the end point at the specified URL.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
      <exception cref="T:System.PlatformNotSupportedException">The request requires the integrated pipeline mode of IIS 7.0.</exception>
      <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.TransferRequest(System.String,System.Boolean)">
      <summary>Asynchronously executes the endpoint at the specified URL and specifies whether to clear the <see cref="P:System.Web.HttpRequestBase.QueryString" /> and <see cref="P:System.Web.HttpRequestBase.Form" /> collections.</summary>
      <param name="path">The URL of the page to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <exception cref="T:System.PlatformNotSupportedException">The request requires the integrated pipeline mode of IIS 7.0.</exception>
      <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Asynchronously executes the endpoint at the specified URL by using the specified HTTP method and headers.</summary>
      <param name="path">The URL of the page or handler to execute.</param>
      <param name="preserveForm">true to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; false to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</param>
      <param name="method">The HTTP method (GET, POST, and so on) to use for the new request. If null, the HTTP method of the original request is used.</param>
      <param name="headers">A collection of request headers for the new request.</param>
      <exception cref="T:System.PlatformNotSupportedException">The request requires IIS 7.0 running in integrated mode.</exception>
      <exception cref="T:System.Web.HttpException">The server is not available to handle the request.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.UrlDecode(System.String)">
      <summary>Decodes a URL-encoded string and returns the decoded string.</summary>
      <returns>The decoded text.</returns>
      <param name="s">The string to decode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.UrlDecode(System.String,System.IO.TextWriter)">
      <summary>Decodes a URL-encoded string and sends the resulting output to a stream.</summary>
      <param name="s">The HTML string to decode.</param>
      <param name="output">The stream to contain the decoded string.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.UrlEncode(System.String)">
      <summary>URL-encodes a string and returns the encoded string.</summary>
      <returns>The URL-encoded text.</returns>
      <param name="s">The text to URL-encode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.UrlEncode(System.String,System.IO.TextWriter)">
      <summary>URL-encodes a string and sends the resulting output to a stream.</summary>
      <param name="s">The string to encode.</param>
      <param name="output">The stream to contain the encoded string.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.UrlPathEncode(System.String)">
      <summary>URL-encodes the path section of a URL string.</summary>
      <returns>The URL-encoded text.</returns>
      <param name="s">The string to URL-encode.</param>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.UrlTokenDecode(System.String)">
      <summary>Decodes a URL string token into an equivalent byte array by using base64 digits.</summary>
      <returns>The byte array that contains the decoded URL string token.</returns>
      <param name="input">The URL string token to decode.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="input" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.HttpServerUtilityWrapper.UrlTokenEncode(System.Byte[])">
      <summary>Encodes a byte array into an equivalent string representation by using base64 digits, which makes it usable for transmission on the URL.</summary>
      <returns>The string that contains the encoded array if the length of <paramref name="input" /> is greater than 1; otherwise, an empty string ("").</returns>
      <param name="input">The byte array to encode.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="input" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.HttpSessionStateBase">
      <summary>Serves as the base class for classes that provides access to session-state values, session-level settings, and lifetime management methods.</summary>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.Abandon">
      <summary>When overridden in a derived class, cancels the current session.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.Add(System.String,System.Object)">
      <summary>When overridden in a derived class, adds an item to the session-state collection.</summary>
      <param name="name">The name of the item to add to the session-state collection.</param>
      <param name="value">The value of the item to add to the session-state collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.Clear">
      <summary>When overridden in a derived class, removes all keys and values from the session-state collection.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.CodePage">
      <summary>When overridden in a derived class, gets or sets the character-set identifier for the current session.</summary>
      <returns>The character-set identifier for the current session.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.Contents">
      <summary>When overridden in a derived class, gets a reference to the current session-state object.</summary>
      <returns>The current session-state object.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.CookieMode">
      <summary>When overridden in a derived class, gets a value that indicates whether the application is configured for cookieless sessions.</summary>
      <returns>One of the cookie-mode values that indicate whether the application is configured for cookieless sessions.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.CopyTo(System.Array,System.Int32)">
      <summary>When overridden in a derived class, copies the collection of session-state values to a one-dimensional array, starting at the specified index in the array.</summary>
      <param name="array">The array to copy session values to.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.Count">
      <summary>When overridden in a derived class, gets the number of items in the session-state collection.</summary>
      <returns>The number of items in the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.GetEnumerator">
      <summary>When overridden in a derived class, returns an enumerator that can be used to read all the session-state variable names in the current session.</summary>
      <returns>An enumerator that can iterate through the variable names in the session-state collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.IsCookieless">
      <summary>When overridden in a derived class, gets a value that indicates whether the session ID is embedded in the URL.</summary>
      <returns>true if the session ID is embedded in the URL; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.IsNewSession">
      <summary>When overridden in a derived class, gets a value that indicates whether the session was created during the current request.</summary>
      <returns>true if the session was created during the current request; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.IsReadOnly">
      <summary>When overridden in a derived class, gets a value that indicates whether the session is read-only.</summary>
      <returns>true if the session is read-only; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.IsSynchronized">
      <summary>When overridden in a derived class, gets a value that indicates whether access to the collection of session-state values is synchronized (thread safe).</summary>
      <returns>true if access to the collection is synchronized (thread safe); otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.Item(System.Int32)">
      <summary>When overridden in a derived class, gets or sets a session value by using the specified index.</summary>
      <returns>The session-state value that is stored at the specified index.</returns>
      <param name="index">The index of the session value.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.Item(System.String)">
      <summary>When overridden in a derived class, gets or sets a session value by using the specified name.</summary>
      <returns>The session-state value that has the specified name, or null if the item does not exist.</returns>
      <param name="name">The key name of the session value.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.Keys">
      <summary>When overridden in a derived class, gets a collection of the keys for all values that are stored in the session-state collection.</summary>
      <returns>The session keys.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.LCID">
      <summary>When overridden in a derived class, gets or sets the locale identifier (LCID) of the current session.</summary>
      <returns>The LCID (culture) of the current session.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.Mode">
      <summary>When overridden in a derived class, gets the current session-state mode.</summary>
      <returns>The session-state mode.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.Remove(System.String)">
      <summary>When overridden in a derived class, deletes an item from the session-state collection.</summary>
      <param name="name">The name of the item to delete from the session-state collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.RemoveAll">
      <summary>When overridden in a derived class, removes all keys and values from the session-state collection.</summary>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpSessionStateBase.RemoveAt(System.Int32)">
      <summary>When overridden in a derived class, deletes the item at the specified index from the session-state collection.</summary>
      <param name="index">The index of the item to remove from the session-state collection.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.SessionID">
      <summary>When overridden in a derived class, gets the unique identifier for the session.</summary>
      <returns>The unique session identifier.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.StaticObjects">
      <summary>When overridden in a derived class, gets a collection of objects that are declared by object elements that are marked as server controls and scoped to the current session in the application's Global.asax file.</summary>
      <returns>The objects that are declared in the Global.asax file.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.SyncRoot">
      <summary>When overridden in a derived class, gets an object that can be used to synchronize access to the collection of session-state values.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateBase.Timeout">
      <summary>When overridden in a derived class, gets or sets the time, in minutes, that can elapse between requests before the session-state provider ends the session.</summary>
      <returns>The time-out period, in minutes.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpSessionStateWrapper">
      <summary>Encapsulates the HTTP intrinsic object that provides access to session-state values, session-level settings, and lifetime management methods.</summary>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.#ctor(System.Web.SessionState.HttpSessionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpSessionStateWrapper" /> class.</summary>
      <param name="httpSessionState">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpSessionState" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.Abandon">
      <summary>Cancels the current session.</summary>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.Add(System.String,System.Object)">
      <summary>Adds an item to the session-state collection.</summary>
      <param name="name">The name of the item to add to the session-state collection.</param>
      <param name="value">The value of the item to add to the session-state collection.</param>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.Clear">
      <summary>Removes all keys and values from the session-state collection.</summary>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.CodePage">
      <summary>Gets or sets the character-set identifier for the current session.</summary>
      <returns>The character-set identifier for the current session.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.Contents">
      <summary>Gets a reference to the current session-state object.</summary>
      <returns>The current session-state object.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.CookieMode">
      <summary>Gets a value that indicates whether the application is configured for cookieless sessions.</summary>
      <returns>One of the cookie-mode values that indicate whether the application is configured for cookieless sessions. The default is <see cref="F:System.Web.HttpCookieMode.UseCookies" />.</returns>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.CopyTo(System.Array,System.Int32)">
      <summary>Copies the collection of session-state values to a one-dimensional array, starting at the specified index in the array.</summary>
      <param name="array">The array to copy session values to</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying starts.</param>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.Count">
      <summary>Gets the number of items in the session-state collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.GetEnumerator">
      <summary>Returns an enumerator that can be used to read all the session-state variable names in the current session.</summary>
      <returns>An enumerator that can iterate through the variable names in the session-state collection.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.IsCookieless">
      <summary>Gets a value that indicates whether the session ID is embedded in the URL.</summary>
      <returns>true if the session ID is embedded in the URL; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.IsNewSession">
      <summary>Gets a value that indicates whether the session was created during the current request.</summary>
      <returns>true if the session was created during the current request; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.IsReadOnly">
      <summary>Gets a value that indicates whether the session is read-only.</summary>
      <returns>true if the session is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection of session-state values is synchronized (thread safe).</summary>
      <returns>true if access to the collection is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.Item(System.Int32)">
      <summary>Gets or sets a session value by using the specified index.</summary>
      <returns>The session-state value that is stored at the specified index.</returns>
      <param name="index">The index of the session value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.Item(System.String)">
      <summary>Gets or sets a session value by using the specified name.</summary>
      <returns>The session-state value that has the specified name, or null if the item does not exist.</returns>
      <param name="name">The key name of the session value.</param>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.Keys">
      <summary>Gets a collection of the keys for all values that are stored in the session-state collection.</summary>
      <returns>The session keys.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.LCID">
      <summary>Gets or sets the locale identifier (LCID) of the current session.</summary>
      <returns>The LCID (culture) of the current session.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.Mode">
      <summary>Gets the current session-state mode.</summary>
      <returns>The session-state mode.</returns>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.Remove(System.String)">
      <summary>Deletes an item from the session-state collection.</summary>
      <param name="name">The name of the item to delete from the session-state collection.</param>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.RemoveAll">
      <summary>Removes all keys and values from the session-state collection.</summary>
    </member>
    <member name="M:System.Web.HttpSessionStateWrapper.RemoveAt(System.Int32)">
      <summary>Deletes the item at the specified index from the session-state collection.</summary>
      <param name="index">The index of the item to remove from the session-state collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.- or -<paramref name="index" /> is equal to or greater than <see cref="P:System.Web.SessionState.HttpSessionState.Count" />.</exception>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.SessionID">
      <summary>Gets the unique identifier for the session.</summary>
      <returns>The unique session identifier.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.StaticObjects">
      <summary>Gets a collection of objects that are declared by object elements that are marked as server controls and scoped to the current session in the application's Global.asax file.</summary>
      <returns>The objects that are declared in the Global.asax file.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection of session-state values.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="P:System.Web.HttpSessionStateWrapper.Timeout">
      <summary>Gets or sets the time, in minutes, that can elapse between requests before the session-state provider ends the session.</summary>
      <returns>The time-out period, in minutes.</returns>
    </member>
    <member name="T:System.Web.HttpStaticObjectsCollection">
      <summary>Provides a collection of application-scoped objects for the <see cref="P:System.Web.HttpApplicationState.StaticObjects" /> property.</summary>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpStaticObjectsCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies members of an <see cref="T:System.Web.HttpStaticObjectsCollection" /> into an array.</summary>
      <param name="array">The array to copy the <see cref="T:System.Web.HttpStaticObjectsCollection" /> into. </param>
      <param name="index">The member of the collection where copying starts. </param>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollection.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollection.Deserialize(System.IO.BinaryReader)">
      <summary>Creates an <see cref="T:System.Web.HttpStaticObjectsCollection" /> object from a binary file that was written by using the <see cref="M:System.Web.HttpStaticObjectsCollection.Serialize(System.IO.BinaryWriter)" /> method.</summary>
      <returns>An <see cref="T:System.Web.HttpStaticObjectsCollection" /> populated with the contents from a binary file written using the <see cref="M:System.Web.HttpStaticObjectsCollection.Serialize(System.IO.BinaryWriter)" /> method.</returns>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> used to read the serialized collection from a stream or encoded string.</param>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollection.GetEnumerator">
      <summary>Returns a dictionary enumerator used for iterating through the key-and-value pairs contained in the collection.</summary>
      <returns>The enumerator for the collection.</returns>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollection.GetObject(System.String)">
      <summary>Returns the object with the specified name from the collection. This property is an alternative to the this accessor.</summary>
      <returns>An object from the collection.</returns>
      <param name="name">The case-insensitive name of the object to return. </param>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollection.IsReadOnly">
      <summary>Gets a value indicating whether the collection is read-only.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollection.IsSynchronized">
      <summary>Gets a value indicating whether the collection is synchronized (that is, thread-safe).</summary>
      <returns>In this implementation, this property always returns false.</returns>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollection.Item(System.String)">
      <summary>Gets the object with the specified name from the collection.</summary>
      <returns>An object from the collection.</returns>
      <param name="name">The case-insensitive name of the object to get. </param>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollection.NeverAccessed">
      <summary>Gets a Boolean value indicating whether the collection has been accessed before.</summary>
      <returns>true if the <see cref="T:System.Web.HttpStaticObjectsCollection" /> has never been accessed; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollection.Serialize(System.IO.BinaryWriter)">
      <summary>Writes the contents of the collection to a <see cref="T:System.IO.BinaryWriter" /> object.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> used to write the serialized collection to a stream or encoded string.</param>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>The current <see cref="T:System.Web.HttpStaticObjectsCollection" />.</returns>
    </member>
    <member name="T:System.Web.HttpStaticObjectsCollectionBase">
      <summary>Serves as the base class for classes that provide a collection of application-scoped objects for the <see cref="P:System.Web.HttpApplicationState.StaticObjects" /> property.</summary>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionBase.#ctor">
      <summary>Initializes the class for use by an inherited class instance. This constructor can only be called by an inherited class.</summary>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>When overridden in a derived class, copies the elements of the collection to an array, starting at the specified index in the array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements that are copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which to begin copying.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionBase.Count">
      <summary>When overridden in a derived class, gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionBase.GetEnumerator">
      <summary>When overridden in a derived class, returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionBase.GetObject(System.String)">
      <summary>When overridden in a derived class, returns the object that has the specified name from the collection.</summary>
      <returns>The object that is specified by <paramref name="name" />.</returns>
      <param name="name">The case-insensitive name of the object to return.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionBase.IsReadOnly">
      <summary>When overridden in a derived class, gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionBase.IsSynchronized">
      <summary>When overridden in a derived class, gets a value that indicates whether the collection is thread-safe.</summary>
      <returns>true if the collection is thread-safe; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionBase.Item(System.String)">
      <summary>When overridden in a derived class, gets the object that has the specified name from the collection.</summary>
      <returns>The object that is specified by <paramref name="name" />.</returns>
      <param name="name">The case-insensitive name of the object to get.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionBase.NeverAccessed">
      <summary>When overridden in a derived class, gets a value that indicates whether the collection has been accessed.</summary>
      <returns>true if the collection has never been accessed; otherwise, false.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionBase.Serialize(System.IO.BinaryWriter)">
      <summary>When overridden in a derived class, writes the contents of the collection to a <see cref="T:System.IO.BinaryWriter" /> object.</summary>
      <param name="writer">The object to use to write the serialized collection to a stream or encoded string.</param>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionBase.SyncRoot">
      <summary>When overridden in a derived class, gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
      <exception cref="T:System.NotImplementedException">Always.</exception>
    </member>
    <member name="T:System.Web.HttpStaticObjectsCollectionWrapper">
      <summary>Encapsulates the HTTP intrinsic object that provides a collection of application-scoped objects for the <see cref="P:System.Web.HttpApplicationState.StaticObjects" /> property.</summary>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionWrapper.#ctor(System.Web.HttpStaticObjectsCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpStaticObjectsCollectionWrapper" /> class. </summary>
      <param name="httpStaticObjectsCollection">The object that this wrapper class provides access to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="httpStaticObjectsCollection" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionWrapper.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at the specified index in the array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements that are copied from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which to begin copying.</param>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionWrapper.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionWrapper.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionWrapper.GetObject(System.String)">
      <summary>Returns the object that has the specified name from the collection.</summary>
      <returns>The object that is specified by <paramref name="name" />, if found; otherwise, null.</returns>
      <param name="name">The case-insensitive name of the object to return.</param>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionWrapper.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionWrapper.IsSynchronized">
      <summary>Gets a value that indicates whether the collection is thread-safe.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionWrapper.Item(System.String)">
      <summary>Gets the object that has the specified name from the collection.</summary>
      <returns>The object that is specified by <paramref name="name" />, if found; otherwise, null.</returns>
      <param name="name">The case-insensitive name of the object to get.</param>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionWrapper.NeverAccessed">
      <summary>Gets a value that indicates whether the collection has been accessed.</summary>
      <returns>true if the collection has never been accessed; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpStaticObjectsCollectionWrapper.Serialize(System.IO.BinaryWriter)">
      <summary>Writes the contents of the collection to a <see cref="T:System.IO.BinaryWriter" /> object.</summary>
      <param name="writer">The object to use to write the serialized collection to a stream or encoded string.</param>
    </member>
    <member name="P:System.Web.HttpStaticObjectsCollectionWrapper.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>The current instance of the <see cref="T:System.Web.HttpStaticObjectsCollection" /> class that is wrapped by this class.</returns>
    </member>
    <member name="T:System.Web.HttpUnhandledException">
      <summary>The exception that is thrown when a generic exception occurs.</summary>
    </member>
    <member name="M:System.Web.HttpUnhandledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpUnhandledException" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpUnhandledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpUnhandledException" /> class with the specified error messages.</summary>
      <param name="message">The message displayed to the client when the exception is thrown. </param>
    </member>
    <member name="M:System.Web.HttpUnhandledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpUnhandledException" /> class with the specified error message and inner exception.</summary>
      <param name="message">The message displayed to the client when the exception is thrown. </param>
      <param name="innerException">The <see cref="P:System.Exception.InnerException" />, if any, that threw the current exception. </param>
    </member>
    <member name="T:System.Web.HttpUtility">
      <summary>Provides methods for encoding and decoding URLs when processing Web requests. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Web.HttpUtility.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpUtility" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)">
      <summary>Minimally converts a string to an HTML-encoded string.</summary>
      <returns>An encoded string.</returns>
      <param name="s">The string to encode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)">
      <summary>Minimally converts a string into an HTML-encoded string and sends the encoded string to a <see cref="T:System.IO.TextWriter" /> output stream.</summary>
      <param name="s">The string to encode </param>
      <param name="output">A <see cref="T:System.IO.TextWriter" /> output stream. </param>
    </member>
    <member name="M:System.Web.HttpUtility.HtmlDecode(System.String)">
      <summary>Converts a string that has been HTML-encoded for HTTP transmission into a decoded string.</summary>
      <returns>A decoded string.</returns>
      <param name="s">The string to decode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>Converts a string that has been HTML-encoded into a decoded string, and sends the decoded string to a <see cref="T:System.IO.TextWriter" /> output stream.</summary>
      <param name="s">The string to decode. </param>
      <param name="output">A <see cref="T:System.IO.TextWriter" /> stream of output. </param>
    </member>
    <member name="M:System.Web.HttpUtility.HtmlEncode(System.Object)">
      <summary>Converts an object's string representation into an HTML-encoded string, and returns the encoded string.</summary>
      <returns>An encoded string.</returns>
      <param name="value">An object.</param>
    </member>
    <member name="M:System.Web.HttpUtility.HtmlEncode(System.String)">
      <summary>Converts a string to an HTML-encoded string.</summary>
      <returns>An encoded string.</returns>
      <param name="s">The string to encode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>Converts a string into an HTML-encoded string, and returns the output as a <see cref="T:System.IO.TextWriter" /> stream of output.</summary>
      <param name="s">The string to encode </param>
      <param name="output">A <see cref="T:System.IO.TextWriter" /> output stream. </param>
    </member>
    <member name="M:System.Web.HttpUtility.JavaScriptStringEncode(System.String)">
      <summary>Encodes a string.</summary>
      <returns>An encoded string.</returns>
      <param name="value">A string to encode.</param>
    </member>
    <member name="M:System.Web.HttpUtility.JavaScriptStringEncode(System.String,System.Boolean)">
      <summary>Encodes a string.</summary>
      <returns>An encoded string.</returns>
      <param name="value">A string to encode.</param>
      <param name="addDoubleQuotes">A value that indicates whether double quotation marks will be included around the encoded string.</param>
    </member>
    <member name="M:System.Web.HttpUtility.ParseQueryString(System.String)">
      <summary>Parses a query string into a <see cref="T:System.Collections.Specialized.NameValueCollection" /> using <see cref="P:System.Text.Encoding.UTF8" /> encoding.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of query parameters and values.</returns>
      <param name="query">The query string to parse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> is null. </exception>
    </member>
    <member name="M:System.Web.HttpUtility.ParseQueryString(System.String,System.Text.Encoding)">
      <summary>Parses a query string into a <see cref="T:System.Collections.Specialized.NameValueCollection" /> using the specified <see cref="T:System.Text.Encoding" />. </summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of query parameters and values.</returns>
      <param name="query">The query string to parse.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> is null.- or -<paramref name="encoding" /> is null.</exception>
    </member>
    <member name="M:System.Web.HttpUtility.UrlDecode(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
      <summary>Converts a URL-encoded byte array into a decoded string using the specified encoding object, starting at the specified position in the array, and continuing for the specified number of bytes.</summary>
      <returns>A decoded string.</returns>
      <param name="bytes">The array of bytes to decode. </param>
      <param name="offset">The position in the byte to begin decoding. </param>
      <param name="count">The number of bytes to decode. </param>
      <param name="e">The <see cref="T:System.Text.Encoding" /> object that specifies the decoding scheme. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null, but <paramref name="count" /> does not equal 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0 or greater than the length of the <paramref name="bytes" /> array.- or -<paramref name="count" /> is less than 0, or <paramref name="count" /> + <paramref name="offset" /> is greater than the length of the <paramref name="bytes" /> array.</exception>
    </member>
    <member name="M:System.Web.HttpUtility.UrlDecode(System.Byte[],System.Text.Encoding)">
      <summary>Converts a URL-encoded byte array into a decoded string using the specified decoding object.</summary>
      <returns>A decoded string.</returns>
      <param name="bytes">The array of bytes to decode. </param>
      <param name="e">The <see cref="T:System.Text.Encoding" /> that specifies the decoding scheme. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlDecode(System.String)">
      <summary>Converts a string that has been encoded for transmission in a URL into a decoded string.</summary>
      <returns>A decoded string.</returns>
      <param name="str">The string to decode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlDecode(System.String,System.Text.Encoding)">
      <summary>Converts a URL-encoded string into a decoded string, using the specified encoding object.</summary>
      <returns>A decoded string.</returns>
      <param name="str">The string to decode. </param>
      <param name="e">The <see cref="T:System.Text.Encoding" /> that specifies the decoding scheme. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlDecodeToBytes(System.Byte[])">
      <summary>Converts a URL-encoded array of bytes into a decoded array of bytes.</summary>
      <returns>A decoded array of bytes.</returns>
      <param name="bytes">The array of bytes to decode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a URL-encoded array of bytes into a decoded array of bytes, starting at the specified position in the array and continuing for the specified number of bytes.</summary>
      <returns>A decoded array of bytes.</returns>
      <param name="bytes">The array of bytes to decode. </param>
      <param name="offset">The position in the byte array at which to begin decoding. </param>
      <param name="count">The number of bytes to decode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null, but <paramref name="count" /> does not equal 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0 or greater than the length of the <paramref name="bytes" /> array.- or -<paramref name="count" /> is less than 0, or <paramref name="count" /> + <paramref name="offset" /> is greater than the length of the <paramref name="bytes" /> array.</exception>
    </member>
    <member name="M:System.Web.HttpUtility.UrlDecodeToBytes(System.String)">
      <summary>Converts a URL-encoded string into a decoded array of bytes.</summary>
      <returns>A decoded array of bytes.</returns>
      <param name="str">The string to decode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlDecodeToBytes(System.String,System.Text.Encoding)">
      <summary>Converts a URL-encoded string into a decoded array of bytes using the specified decoding object.</summary>
      <returns>A decoded array of bytes.</returns>
      <param name="str">The string to decode. </param>
      <param name="e">The <see cref="T:System.Text.Encoding" /> object that specifies the decoding scheme. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncode(System.Byte[])">
      <summary>Converts a byte array into an encoded URL string.</summary>
      <returns>An encoded string.</returns>
      <param name="bytes">The array of bytes to encode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncode(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a byte array into a URL-encoded string, starting at the specified position in the array and continuing for the specified number of bytes.</summary>
      <returns>An encoded string.</returns>
      <param name="bytes">The array of bytes to encode. </param>
      <param name="offset">The position in the byte array at which to begin encoding. </param>
      <param name="count">The number of bytes to encode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncode(System.String)">
      <summary>Encodes a URL string.</summary>
      <returns>An encoded string.</returns>
      <param name="str">The text to encode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncode(System.String,System.Text.Encoding)">
      <summary>Encodes a URL string using the specified encoding object.</summary>
      <returns>An encoded string.</returns>
      <param name="str">The text to encode. </param>
      <param name="e">The <see cref="T:System.Text.Encoding" /> object that specifies the encoding scheme. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncodeToBytes(System.Byte[])">
      <summary>Converts an array of bytes into a URL-encoded array of bytes.</summary>
      <returns>An encoded array of bytes.</returns>
      <param name="bytes">The array of bytes to encode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts an array of bytes into a URL-encoded array of bytes, starting at the specified position in the array and continuing for the specified number of bytes.</summary>
      <returns>An encoded array of bytes.</returns>
      <param name="bytes">The array of bytes to encode. </param>
      <param name="offset">The position in the byte array at which to begin encoding. </param>
      <param name="count">The number of bytes to encode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null, but <paramref name="count" /> does not equal 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0 or greater than the length of the <paramref name="bytes" /> array.- or -<paramref name="count" /> is less than 0, or <paramref name="count" /> + <paramref name="offset" /> is greater than the length of the <paramref name="bytes" /> array.</exception>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncodeToBytes(System.String)">
      <summary>Converts a string into a URL-encoded array of bytes.</summary>
      <returns>An encoded array of bytes.</returns>
      <param name="str">The string to encode. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncodeToBytes(System.String,System.Text.Encoding)">
      <summary>Converts a string into a URL-encoded array of bytes using the specified encoding object.</summary>
      <returns>An encoded array of bytes.</returns>
      <param name="str">The string to encode </param>
      <param name="e">The <see cref="T:System.Text.Encoding" /> that specifies the encoding scheme. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncodeUnicode(System.String)">
      <summary>Converts a string into a Unicode string.</summary>
      <returns>A Unicode string in %<paramref name="UnicodeValue" /> notation.</returns>
      <param name="str">The string to convert. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlEncodeUnicodeToBytes(System.String)">
      <summary>Converts a Unicode string into an array of bytes.</summary>
      <returns>A byte array.</returns>
      <param name="str">The string to convert. </param>
    </member>
    <member name="M:System.Web.HttpUtility.UrlPathEncode(System.String)">
      <summary>Encodes the path portion of a URL string for reliable HTTP transmission from the Web server to a client.</summary>
      <returns>The URL-encoded text.</returns>
      <param name="str">The text to URL-encode. </param>
    </member>
    <member name="T:System.Web.HttpValidationStatus">
      <summary>Provides enumerated values that indicate cache validation status.</summary>
    </member>
    <member name="F:System.Web.HttpValidationStatus.Invalid">
      <summary>Indicates that the cache is invalid. The item is evicted from the cache and the request is handled as a cache miss. </summary>
    </member>
    <member name="F:System.Web.HttpValidationStatus.IgnoreThisRequest">
      <summary>Indicates that the request is treated as a cache miss and the page is executed. The cache is not invalidated. </summary>
    </member>
    <member name="F:System.Web.HttpValidationStatus.Valid">
      <summary>Indicates that the cache is valid. </summary>
    </member>
    <member name="T:System.Web.HttpWorkerRequest">
      <summary>This abstract class defines the base worker methods and enumerations used by ASP.NET managed code to process requests. </summary>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.HttpWorkerRequest" /> class.</summary>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.CloseConnection">
      <summary>Terminates the connection with the client.</summary>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.EndOfRequest">
      <summary>Used by the runtime to notify the <see cref="T:System.Web.HttpWorkerRequest" /> that request processing for the current request is complete.</summary>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.FlushResponse(System.Boolean)">
      <summary>Sends all pending response data to the client.</summary>
      <param name="finalFlush">true if this is the last time response data will be flushed; otherwise, false. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetAppPath">
      <summary>Returns the virtual path to the currently executing server application.</summary>
      <returns>The virtual path of the current application.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetAppPathTranslated">
      <summary>Returns the physical path to the currently executing server application.</summary>
      <returns>The physical path of the current application.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetAppPoolID">
      <summary>When overridden in a derived class, returns the application pool ID for the current URL.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetBytesRead">
      <summary>Gets the number of bytes read in from the client.</summary>
      <returns>A Long containing the number of bytes read.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetClientCertificate">
      <summary>When overridden in a derived class, gets the certification fields (specified in the X.509 standard) from a request issued by the client.</summary>
      <returns>A byte array containing the stream of the entire certificate content.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetClientCertificateBinaryIssuer">
      <summary>Gets the certificate issuer, in binary format.</summary>
      <returns>A byte array containing the certificate issuer expressed in binary format.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetClientCertificateEncoding">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Text.Encoding" /> object in which the client certificate was encoded. </summary>
      <returns>The certificate encoding, expressed as an integer.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetClientCertificatePublicKey">
      <summary>When overridden in a derived class, gets a PublicKey object associated with the client certificate.</summary>
      <returns>A PublicKey object.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetClientCertificateValidFrom">
      <summary>When overridden in a derived class, gets the date when the certificate becomes valid. The date varies with international settings. </summary>
      <returns>A <see cref="T:System.DateTime" /> object representing when the certificate becomes valid.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetClientCertificateValidUntil">
      <summary>Gets the certificate expiration date.</summary>
      <returns>A <see cref="T:System.DateTime" /> object representing the date that the certificate expires.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetConnectionID">
      <summary>When overridden in a derived class, returns the ID of the current connection.</summary>
      <returns>Always returns 0.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetFilePath">
      <summary>When overridden in a derived class, returns the virtual path to the requested URI.</summary>
      <returns>The path to the requested URI.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetFilePathTranslated">
      <summary>Returns the physical file path to the requested URI (and translates it from virtual path to physical path: for example, "/proj1/page.aspx" to "c:\dir\page.aspx") </summary>
      <returns>The translated physical file path to the requested URI.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetHttpVerbName">
      <summary>Returns the specified member of the request header.</summary>
      <returns>The HTTP verb returned in the request header.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetHttpVersion">
      <summary>Provides access to the HTTP version of the request (for example, "HTTP/1.1").</summary>
      <returns>The HTTP version returned in the request header.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetKnownRequestHeader(System.Int32)">
      <summary>Returns the standard HTTP request header that corresponds to the specified index.</summary>
      <returns>The HTTP request header.</returns>
      <param name="index">The index of the header. For example, the <see cref="F:System.Web.HttpWorkerRequest.HeaderAllow" /> field. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetKnownRequestHeaderIndex(System.String)">
      <summary>Returns the index number of the specified HTTP request header.</summary>
      <returns>The index number of the HTTP request header specified in the <paramref name="header" /> parameter.</returns>
      <param name="header">The name of the header. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetKnownRequestHeaderName(System.Int32)">
      <summary>Returns the name of the specified HTTP request header.</summary>
      <returns>The name of the HTTP request header specified in the <paramref name="index" /> parameter.</returns>
      <param name="index">The index number of the header. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetKnownResponseHeaderIndex(System.String)">
      <summary>Returns the index number of the specified HTTP response header.</summary>
      <returns>The index number of the HTTP response header specified in the <paramref name="header" /> parameter.</returns>
      <param name="header">The name of the HTTP header. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetKnownResponseHeaderName(System.Int32)">
      <summary>Returns the name of the specified HTTP response header.</summary>
      <returns>The name of the HTTP response header specified in the <paramref name="index" /> parameter.</returns>
      <param name="index">The index number of the header. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetLocalAddress">
      <summary>Provides access to the specified member of the request header.</summary>
      <returns>The server IP address returned in the request header.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetLocalPort">
      <summary>Provides access to the specified member of the request header.</summary>
      <returns>The server port number returned in the request header.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetPathInfo">
      <summary>Returns additional path information for a resource with a URL extension. That is, for the path /virdir/page.html/tail, the GetPathInfo value is /tail.</summary>
      <returns>Additional path information for a resource.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetPreloadedEntityBody">
      <summary>Returns the portion of the HTTP request body that has already been read.</summary>
      <returns>The portion of the HTTP request body that has been read.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetPreloadedEntityBody(System.Byte[],System.Int32)">
      <summary>Gets the portion of the HTTP request body that has currently been read by using the specified buffer data and byte offset.</summary>
      <returns>The portion of the HTTP request body that has been read.</returns>
      <param name="buffer">The data to read.</param>
      <param name="offset">The byte offset at which to begin reading.</param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetPreloadedEntityBodyLength">
      <summary>Gets the length of the portion of the HTTP request body that has currently been read.</summary>
      <returns>An integer containing the length of the currently read HTTP request body.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetProtocol">
      <summary>When overridden in a derived class, returns the HTTP protocol (HTTP or HTTPS).</summary>
      <returns>HTTPS if the <see cref="M:System.Web.HttpWorkerRequest.IsSecure" /> method is true, otherwise HTTP.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetQueryString">
      <summary>Returns the query string specified in the request URL.</summary>
      <returns>The request query string.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetQueryStringRawBytes">
      <summary>When overridden in a derived class, returns the response query string as an array of bytes.</summary>
      <returns>An array of bytes containing the response.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetRawUrl">
      <summary>Returns the URL path contained in the request header with the query string appended.</summary>
      <returns>The raw URL path of the request header.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetRemoteAddress">
      <summary>Provides access to the specified member of the request header.</summary>
      <returns>The client's IP address.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetRemoteName">
      <summary>When overridden in a derived class, returns the name of the client computer.</summary>
      <returns>The name of the client computer.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetRemotePort">
      <summary>Provides access to the specified member of the request header.</summary>
      <returns>The client's HTTP port number.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetRequestReason">
      <summary>When overridden in a derived class, returns the reason for the request.</summary>
      <returns>Reason code. The default is ReasonResponseCacheMiss.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetServerName">
      <summary>When overridden in a derived class, returns the name of the local server.</summary>
      <returns>The name of the local server.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetServerVariable(System.String)">
      <summary>Returns a single server variable from a dictionary of server variables associated with the request.</summary>
      <returns>The requested server variable.</returns>
      <param name="name">The name of the requested server variable. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetStatusDescription(System.Int32)">
      <summary>Returns a string that describes the name of the specified HTTP status code.</summary>
      <returns>The status description. For example, <see cref="M:System.Web.HttpWorkerRequest.GetStatusDescription(System.Int32)" /> (404) returns “Not Found”.</returns>
      <param name="code">The HTTP status code. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetTotalEntityBodyLength">
      <summary>Gets the length of the entire HTTP request body.</summary>
      <returns>An integer containing the length of the entire HTTP request body.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetUnknownRequestHeader(System.String)">
      <summary>Returns a nonstandard HTTP request header value.</summary>
      <returns>The header value.</returns>
      <param name="name">The header name. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetUnknownRequestHeaders">
      <summary>Get all nonstandard HTTP header name-value pairs.</summary>
      <returns>An array of header name-value pairs.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetUriPath">
      <summary>Returns the virtual path to the requested URI.</summary>
      <returns>The path to the requested URI.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetUrlContextID">
      <summary>When overridden in a derived class, returns the context ID of the current connection.</summary>
      <returns>Always returns 0.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetUserToken">
      <summary>When overridden in a derived class, returns the client's impersonation token.</summary>
      <returns>A value representing the client's impersonation token. The default is 0.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.GetVirtualPathToken">
      <summary>Gets the impersonation token for the request virtual path.</summary>
      <returns>An unmanaged memory pointer for the token for the request virtual path.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.HasEntityBody">
      <summary>Returns a value indicating whether the request contains body data.</summary>
      <returns>true if the request contains body data; otherwise, false.</returns>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderAccept">
      <summary>Specifies the index number for the Accept HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderAcceptCharset">
      <summary>Specifies the index number for the Accept-Charset HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderAcceptEncoding">
      <summary>Specifies the index number for the Accept-Encoding HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderAcceptLanguage">
      <summary>Specifies the index number for the Accept-Language HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderAcceptRanges">
      <summary>Specifies the index number for the Accept-Ranges HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderAge">
      <summary>Specifies the index number for the Age HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderAllow">
      <summary>Specifies the index number for the Allow HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderAuthorization">
      <summary>Specifies the index number for the Authorization HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderCacheControl">
      <summary>The index that represents the HTTP Cache-Control HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderConnection">
      <summary>Specifies the index number for the Connection HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderContentEncoding">
      <summary>Specifies the index number for the Content-Encoding HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderContentLanguage">
      <summary>Specifies the index number for the Content-Language HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderContentLength">
      <summary>Specifies the index number for the Content-Length HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderContentLocation">
      <summary>Specifies the index number for the Content-Location HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderContentMd5">
      <summary>Specifies the index number for the Content-MD5 HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderContentRange">
      <summary>Specifies the index number for the Content-Range HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderContentType">
      <summary>Specifies the index number for the Content-Type HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderCookie">
      <summary>Specifies the index number for the Cookie HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderDate">
      <summary>Specifies the index number for the Date HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderEtag">
      <summary>Specifies the index number for the ETag HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderExpect">
      <summary>Specifies the index number for the Except HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderExpires">
      <summary>Specifies the index number for the Expires HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderFrom">
      <summary>Specifies the index number for the From HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderHost">
      <summary>Specifies the index number for the Host HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderIfMatch">
      <summary>Specifies the index number for the If-Match HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderIfModifiedSince">
      <summary>Specifies the index number for the If-Modified-Since HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderIfNoneMatch">
      <summary>Specifies the index number for the If-None-Match HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderIfRange">
      <summary>Specifies the index number for the If-Range HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderIfUnmodifiedSince">
      <summary>Specifies the index number for the If-Unmodified-Since HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderKeepAlive">
      <summary>Specifies the index number for the Keep-Alive HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderLastModified">
      <summary>Specifies the index number for the Last-Modified HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderLocation">
      <summary>Specifies the index number for the Location HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderMaxForwards">
      <summary>Specifies the index number for the Max-Forwards HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderPragma">
      <summary>Specifies the index number for the Pragma HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderProxyAuthenticate">
      <summary>Specifies the index number for the Proxy-Authenticate HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderProxyAuthorization">
      <summary>Specifies the index number for the Proxy-Authorization HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderRange">
      <summary>Specifies the index number for the Range HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderReferer">
      <summary>Specifies the index number for the Referer HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderRetryAfter">
      <summary>Specifies the index number for the Retry-After HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderServer">
      <summary>Specifies the index number for the Server HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderSetCookie">
      <summary>Specifies the index number for the Set-Cookie HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.HeadersSent">
      <summary>Returns a value indicating whether HTTP response headers have been sent to the client for the current request.</summary>
      <returns>true if HTTP response headers have been sent to the client; otherwise, false.</returns>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderTe">
      <summary>Specifies the index number for the TE HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderTrailer">
      <summary>Specifies the index number for the Trailer HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderTransferEncoding">
      <summary>Specifies the index number for the Transfer-Encoding HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderUpgrade">
      <summary>Specifies the index number for the Upgrade HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderUserAgent">
      <summary>Specifies the index number for the User-Agent HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderVary">
      <summary>Specifies the index number for the Vary HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderVia">
      <summary>Specifies the index number for the Via HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderWarning">
      <summary>Specifies the index number for the Warning HTTP header.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.HeaderWwwAuthenticate">
      <summary>Specifies the index number for the WWW-Authenticate HTTP header.</summary>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.IsClientConnected">
      <summary>Returns a value indicating whether the client connection is still active.</summary>
      <returns>true if the client connection is still active; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.IsEntireEntityBodyIsPreloaded">
      <summary>Returns a value indicating whether all request data is available and no further reads from the client are required.</summary>
      <returns>true if all request data is available; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.IsSecure">
      <summary>Returns a value indicating whether the connection uses SSL.</summary>
      <returns>true if the connection is an SSL connection; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.HttpWorkerRequest.MachineConfigPath">
      <summary>Gets the full physical path to the Machine.config file.</summary>
      <returns>The physical path to the Machine.config file.</returns>
    </member>
    <member name="P:System.Web.HttpWorkerRequest.MachineInstallDirectory">
      <summary>Gets the physical path to the directory where the ASP.NET binaries are installed.</summary>
      <returns>The physical directory to the ASP.NET binary files.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.MapPath(System.String)">
      <summary>Returns the physical path corresponding to the specified virtual path.</summary>
      <returns>The physical path that corresponds to the virtual path specified in the <paramref name="virtualPath" /> parameter.</returns>
      <param name="virtualPath">The virtual path. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.ReadEntityBody(System.Byte[],System.Int32)">
      <summary>Reads request data from the client (when not preloaded).</summary>
      <returns>The number of bytes read.</returns>
      <param name="buffer">The byte array to read data into. </param>
      <param name="size">The maximum number of bytes to read. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.ReadEntityBody(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads request data from the client (when not preloaded) by using the specified buffer to read from, byte offset, and maximum bytes.</summary>
      <returns>The number of bytes read.</returns>
      <param name="buffer">The byte array to read data into.</param>
      <param name="offset">The byte offset at which to begin reading.</param>
      <param name="size">The maximum number of bytes to read.</param>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.ReasonCachePolicy">
      <summary>Specifies a reason for the request.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.ReasonCacheSecurity">
      <summary>Specifies a reason for the request.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.ReasonClientDisconnect">
      <summary>Specifies a reason for the request.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.ReasonDefault">
      <summary>Specifies a reason for the request. The default value is <see cref="F:System.Web.HttpWorkerRequest.ReasonResponseCacheMiss" />.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.ReasonFileHandleCacheMiss">
      <summary>Specifies a reason for the request.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.ReasonResponseCacheMiss">
      <summary>Specifies a reason for the request.</summary>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.RequestHeaderMaximum">
      <summary>Specifies the index number for the Maximum HTTP request header.</summary>
    </member>
    <member name="P:System.Web.HttpWorkerRequest.RequestTraceIdentifier">
      <summary>Gets the corresponding Event Tracking for Windows trace ID for the current request.</summary>
      <returns>A trace ID for the current ASP.NET request.</returns>
    </member>
    <member name="F:System.Web.HttpWorkerRequest.ResponseHeaderMaximum">
      <summary>Specifies the index number for the Maximum HTTP response header.</summary>
    </member>
    <member name="P:System.Web.HttpWorkerRequest.RootWebConfigPath">
      <summary>Gets the full physical path to the root Web.config file.</summary>
      <returns>The physical path to the root Web.config file.</returns>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendCalculatedContentLength(System.Int32)">
      <summary>Adds a Content-Length HTTP header to the response for message bodies that are less than or equal to 2 GB.</summary>
      <param name="contentLength">The length of the response, in bytes.</param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendCalculatedContentLength(System.Int64)">
      <summary>Adds a Content-Length HTTP header to the response for message bodies that are greater than 2 GB.</summary>
      <param name="contentLength">The length of the response, in bytes.</param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendKnownResponseHeader(System.Int32,System.String)">
      <summary>Adds a standard HTTP header to the response.</summary>
      <param name="index">The header index. For example, <see cref="F:System.Web.HttpWorkerRequest.HeaderContentLength" />. </param>
      <param name="value">The value of the header. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendResponseFromFile(System.IntPtr,System.Int64,System.Int64)">
      <summary>Adds the contents of the specified file to the response and specifies the starting position in the file and the number of bytes to send.</summary>
      <param name="handle">The handle of the file to send. </param>
      <param name="offset">The starting position in the file. </param>
      <param name="length">The number of bytes to send. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendResponseFromFile(System.String,System.Int64,System.Int64)">
      <summary>Adds the contents of the specified file to the response and specifies the starting position in the file and the number of bytes to send.</summary>
      <param name="filename">The name of the file to send. </param>
      <param name="offset">The starting position in the file. </param>
      <param name="length">The number of bytes to send. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendResponseFromMemory(System.Byte[],System.Int32)">
      <summary>Adds the specified number of bytes from a byte array to the response.</summary>
      <param name="data">The byte array to send. </param>
      <param name="length">The number of bytes to send, starting at the first byte. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendResponseFromMemory(System.IntPtr,System.Int32)">
      <summary>Adds the specified number of bytes from a block of memory to the response.</summary>
      <param name="data">An unmanaged pointer to the block of memory. </param>
      <param name="length">The number of bytes to send. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendStatus(System.Int32,System.String)">
      <summary>Specifies the HTTP status code and status description of the response, such as SendStatus(200, "Ok").</summary>
      <param name="statusCode">The status code to send </param>
      <param name="statusDescription">The status description to send. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SendUnknownResponseHeader(System.String,System.String)">
      <summary>Adds a nonstandard HTTP header to the response.</summary>
      <param name="name">The name of the header to send. </param>
      <param name="value">The value of the header. </param>
    </member>
    <member name="M:System.Web.HttpWorkerRequest.SetEndOfSendNotification(System.Web.HttpWorkerRequest.EndOfSendNotification,System.Object)">
      <summary>Registers for an optional notification when all the response data is sent.</summary>
      <param name="callback">The notification callback that is called when all data is sent (out-of-band). </param>
      <param name="extraData">An additional parameter to the callback. </param>
    </member>
    <member name="T:System.Web.HttpWorkerRequest.EndOfSendNotification">
      <summary>Represents the method that Notifies callers when sending of the response is complete.</summary>
      <param name="wr">The current <see cref="T:System.Web.HttpWorkerRequest" />. </param>
      <param name="extraData">Any additional data needed to process the request. </param>
    </member>
    <member name="T:System.Web.HttpWriter">
      <summary>Provides a <see cref="T:System.IO.TextWriter" /> object that is accessed through the intrinsic <see cref="T:System.Web.HttpResponse" /> object.</summary>
    </member>
    <member name="M:System.Web.HttpWriter.Close">
      <summary>Sends all buffered output to the HTTP output stream and closes the socket connection.</summary>
    </member>
    <member name="P:System.Web.HttpWriter.Encoding">
      <summary>Gets an <see cref="T:System.Text.Encoding" /> object for the <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>An instance of the <see cref="T:System.Text.Encoding" /> class indicating the character set of the current response.</returns>
    </member>
    <member name="M:System.Web.HttpWriter.Flush">
      <summary>Sends all buffered output to the HTTP output stream.</summary>
    </member>
    <member name="P:System.Web.HttpWriter.OutputStream">
      <summary>Gets a <see cref="T:System.IO.Stream" /> object to enable HTTP output directly from the <see cref="T:System.IO.Stream" />.</summary>
      <returns>An instance of the <see cref="T:System.IO.Stream" /> class containing the data to send to the client </returns>
    </member>
    <member name="M:System.Web.HttpWriter.Write(System.Char)">
      <summary>Sends a single character to the HTTP output stream.</summary>
      <param name="ch">The character to send to the HTTP output stream. </param>
    </member>
    <member name="M:System.Web.HttpWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Sends a stream of characters with the specified starting position and number of characters to the HTTP output stream.</summary>
      <param name="buffer">The memory buffer containing the characters to send to the HTTP output stream </param>
      <param name="index">The buffer position of the first character to send. </param>
      <param name="count">The number of characters to send beginning at the position specified by <paramref name="index" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffer" />, is null.- or -<paramref name="index" /> is less than zero.- or - <paramref name="count" /> is less than zero.- or -<paramref name="buffer" /> length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Web.HttpWriter.Write(System.Object)">
      <summary>Sends an <see cref="T:System.Object" /> to the HTTP output stream.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to send to the HTTP output stream. </param>
    </member>
    <member name="M:System.Web.HttpWriter.Write(System.String)">
      <summary>Sends a string to the HTTP output stream.</summary>
      <param name="s">The string to send to the HTTP output stream. </param>
    </member>
    <member name="M:System.Web.HttpWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Sends a stream of bytes with the specified starting position and number of bytes to the HTTP output stream.</summary>
      <param name="buffer">The memory buffer containing the bytes to send to the HTTP output stream. </param>
      <param name="index">The buffer position of the first byte to send. </param>
      <param name="count">The number of bytes to send, beginning at the byte position specified by <paramref name="index" />. </param>
    </member>
    <member name="M:System.Web.HttpWriter.WriteLine">
      <summary>Sends a carriage return + line feed (CRLF) pair of characters to the HTTP output stream.</summary>
    </member>
    <member name="M:System.Web.HttpWriter.WriteString(System.String,System.Int32,System.Int32)">
      <summary>Sends a string with the specified starting position and number of characters to the HTTP output stream.</summary>
      <param name="s">The string to send to the HTTP output stream. </param>
      <param name="index">The character position of the first byte to send. </param>
      <param name="count">The number of characters to send, beginning at the character position specified by <paramref name="index" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is less than zero.- or - The <paramref name="count" /> is less than zero. - or - The sum of the <paramref name="index" /> and the <paramref name="count" /> are greater than the string length.</exception>
    </member>
    <member name="T:System.Web.IHtmlString">
      <summary>Represents an HTML-encoded string that should not be encoded again.</summary>
    </member>
    <member name="M:System.Web.IHtmlString.ToHtmlString">
      <summary>Returns an HTML-encoded string.</summary>
      <returns>An HTML-encoded string.</returns>
    </member>
    <member name="T:System.Web.IHttpAsyncHandler">
      <summary>Defines the contract that HTTP asynchronous handler objects must implement.</summary>
    </member>
    <member name="M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Initiates an asynchronous call to the HTTP handler.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that contains information about the status of the process.</returns>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests. </param>
      <param name="cb">The <see cref="T:System.AsyncCallback" /> to call when the asynchronous method call is complete. If <paramref name="cb" /> is null, the delegate is not called. </param>
      <param name="extraData">Any extra data needed to process the request. </param>
    </member>
    <member name="M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Provides an asynchronous process End method when the process ends.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that contains information about the status of the process. </param>
    </member>
    <member name="T:System.Web.IHttpHandler">
      <summary>Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.</summary>
    </member>
    <member name="P:System.Web.IHttpHandler.IsReusable">
      <summary>Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests. </param>
    </member>
    <member name="T:System.Web.IHttpHandlerFactory">
      <summary>Defines the contract that class factories must implement to create new <see cref="T:System.Web.IHttpHandler" /> objects.</summary>
    </member>
    <member name="M:System.Web.IHttpHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
      <summary>Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
      <returns>A new <see cref="T:System.Web.IHttpHandler" /> object that processes the request.</returns>
      <param name="context">An instance of the <see cref="T:System.Web.HttpContext" /> class that provides references to intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests. </param>
      <param name="requestType">The HTTP data transfer method (GET or POST) that the client uses. </param>
      <param name="url">The <see cref="P:System.Web.HttpRequest.RawUrl" /> of the requested resource. </param>
      <param name="pathTranslated">The <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath" /> to the requested resource. </param>
    </member>
    <member name="M:System.Web.IHttpHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
      <summary>Enables a factory to reuse an existing handler instance.</summary>
      <param name="handler">The <see cref="T:System.Web.IHttpHandler" /> object to reuse. </param>
    </member>
    <member name="T:System.Web.IHttpModule">
      <summary>Provides module initialization and disposal events to the implementing class.</summary>
    </member>
    <member name="M:System.Web.IHttpModule.Dispose">
      <summary>Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule" />.</summary>
    </member>
    <member name="M:System.Web.IHttpModule.Init(System.Web.HttpApplication)">
      <summary>Initializes a module and prepares it to handle requests.</summary>
      <param name="context">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application </param>
    </member>
    <member name="T:System.Web.IisTraceListener">
      <summary>Provides a listener that routes all tracing and debugging output to the IIS 7.0 infrastructure.</summary>
    </member>
    <member name="M:System.Web.IisTraceListener.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
    </member>
    <member name="M:System.Web.IisTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>Writes trace information, a data object, and event information to the output of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name that identifies the output. This is typically the name of the application that generated the trace event.</param>
      <param name="eventType">A <see cref="T:System.Diagnostics.TraceEventType" /> value that specifies the type of event that caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">The trace data to write.</param>
    </member>
    <member name="M:System.Web.IisTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>Writes trace information, an array of data objects, and event information to the output of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name that identifies the output. This is typically the name of the application that generated the trace event.</param>
      <param name="eventType">A <see cref="T:System.Diagnostics.TraceEventType" /> value that specifies the type of event that caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">An array of objects to write as data.</param>
    </member>
    <member name="M:System.Web.IisTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>Writes trace and event information to the output of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name that identifies the output. This is typically the name of the application that generated the trace event.</param>
      <param name="severity">A <see cref="T:System.Diagnostics.TraceEventType" /> value that specifies the type of event that caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Web.IisTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>Writes trace information, a formatted array of objects, and event information to the output of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name that identifies the output. This is typically the name of the application that generated the trace event.</param>
      <param name="severity">A <see cref="T:System.Diagnostics.TraceEventType" /> value that specifies the type of event that caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A format string that contains zero or more format items that correspond to objects in the <paramref name="args" /> array.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
    </member>
    <member name="M:System.Web.IisTraceListener.Write(System.String)">
      <summary>Writes the specified message to the output of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
      <param name="message">The message to write.</param>
    </member>
    <member name="M:System.Web.IisTraceListener.Write(System.String,System.String)">
      <summary>Writes the specified message and the specified category name to the output of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
      <param name="message">The message to write.</param>
      <param name="category">Ignored. The <see cref="T:System.Web.IisTraceListener" /> implementation of the <see cref="T:System.Diagnostics.TraceListener" /> class disregards the <paramref name="category" /> parameter.</param>
    </member>
    <member name="M:System.Web.IisTraceListener.WriteLine(System.String)">
      <summary>Writes the specified message to the output of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
      <param name="message">The message to write.</param>
    </member>
    <member name="M:System.Web.IisTraceListener.WriteLine(System.String,System.String)">
      <summary>Writes the specified message and category name to the output of the <see cref="T:System.Web.IisTraceListener" /> class.</summary>
      <param name="message">The message to write.</param>
      <param name="category">Ignored. The <see cref="T:System.Web.Iis7TraceListener" /> implementation of <see cref="T:System.Diagnostics.TraceListener" /> class disregards the <paramref name="category" /> parameter.</param>
    </member>
    <member name="T:System.Web.IPartitionResolver">
      <summary>Defines methods that must be implemented for custom session-state partition resolution.</summary>
    </member>
    <member name="M:System.Web.IPartitionResolver.Initialize">
      <summary>Initializes the custom partition resolver. </summary>
    </member>
    <member name="M:System.Web.IPartitionResolver.ResolvePartition(System.Object)">
      <summary>Resolves the partition based on a key parameter.</summary>
      <returns>A string with connection information.</returns>
      <param name="key">An identifier used to determine which partition to use for the current session state.</param>
    </member>
    <member name="T:System.Web.ParserError">
      <summary>Represents a parser error or warning. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Web.ParserError.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.ParserError" /> class.</summary>
    </member>
    <member name="M:System.Web.ParserError.#ctor(System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.ParserError" /> class by using the specified error text, virtual path, and source line number.</summary>
      <param name="errorText">The error message text.</param>
      <param name="virtualPath">The virtual path of the file being parsed when the error occurred.</param>
      <param name="line">The line number of the error source.</param>
    </member>
    <member name="P:System.Web.ParserError.ErrorText">
      <summary>Gets or sets a string that represents the error for the <see cref="T:System.Web.ParserError" /> object.</summary>
      <returns>A string containing the error message.</returns>
    </member>
    <member name="P:System.Web.ParserError.Line">
      <summary>Gets or sets the line number of the source at which the error occurs.</summary>
      <returns>The source line number where the parser encountered the error.</returns>
    </member>
    <member name="P:System.Web.ParserError.VirtualPath">
      <summary>Gets or set the virtual path of the file that was being parsed when the error occurred.</summary>
      <returns>A string that specifies the virtual path of the file that contains the parser error.</returns>
    </member>
    <member name="T:System.Web.ParserErrorCollection">
      <summary>Manages a set of parser errors detected during parsing. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.ParserErrorCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.ParserErrorCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.ParserErrorCollection.#ctor(System.Web.ParserError[])">
      <summary>Initializes a new instance of the <see cref="T:System.Web.ParserErrorCollection" /> class.</summary>
      <param name="value">An array of type <see cref="T:System.Web.ParserError" /> that specifies the errors to add to the collection.</param>
    </member>
    <member name="M:System.Web.ParserErrorCollection.Add(System.Web.ParserError)">
      <summary>Adds a value to the collection.</summary>
      <returns>The index of the value within the collection; otherwise, -1 if the value is already in the collection.</returns>
      <param name="value">The <see cref="T:System.Web.ParserError" /> value to add to the collection.</param>
    </member>
    <member name="M:System.Web.ParserErrorCollection.AddRange(System.Web.ParserError[])">
      <summary>Adds an array of <see cref="T:System.Web.ParserError" /> objects to the collection.</summary>
      <param name="value">An array of type <see cref="T:System.Web.ParserError" /> that specifies the values to add to the collection. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Web.ParserErrorCollection.AddRange(System.Web.ParserErrorCollection)">
      <summary>Adds the objects in an existing <see cref="T:System.Web.ParserErrorCollection" /> to the collection. </summary>
      <param name="value">A <see cref="T:System.Web.ParserErrorCollection" /> containing the <see cref="T:System.Web.ParserError" /> objects to add to the collection. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Web.ParserError" /> value is null.</exception>
    </member>
    <member name="M:System.Web.ParserErrorCollection.Contains(System.Web.ParserError)">
      <summary>Determines whether the <see cref="T:System.Web.ParserError" /> object is located in the collection.</summary>
      <returns>true if the <see cref="T:System.Web.ParserError" /> is in the collection; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Web.ParserError" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Web.ParserErrorCollection.CopyTo(System.Web.ParserError[],System.Int32)">
      <summary>Copies the <see cref="T:System.Web.ParserError" /> objects in the collection to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">An array of type <see cref="T:System.Web.ParserError" /> to which the parser errors in the collection are copied.</param>
      <param name="index">The first index within the array to which the <see cref="T:System.Web.ParserError" /> is copied.</param>
    </member>
    <member name="M:System.Web.ParserErrorCollection.IndexOf(System.Web.ParserError)">
      <summary>Gets the index of the specified <see cref="T:System.Web.ParserError" /> object in the collection.</summary>
      <returns>The zero-based index of the <see cref="T:System.Web.ParserError" /> objects within the collection; otherwise, 1 if the <see cref="T:System.Web.ParserError" /> is not in the collection.</returns>
      <param name="value">The <see cref="T:System.Web.ParserError" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Web.ParserErrorCollection.Insert(System.Int32,System.Web.ParserError)">
      <summary>Inserts the specified <see cref="T:System.Web.ParserError" /> object into the collection at the specified index.</summary>
      <param name="index">The index within the collection at which to insert the <see cref="T:System.Web.ParserError" />.</param>
      <param name="value">The <see cref="T:System.Web.ParserError" /> object to insert into the collection.</param>
    </member>
    <member name="P:System.Web.ParserErrorCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Web.ParserError" /> object at the specified index within the collection.</summary>
      <returns>The <see cref="T:System.Web.ParserError" /> at the specified index within the collection.</returns>
      <param name="index">The index within the collection of the <see cref="T:System.Web.ParserError" /> object to get or set.</param>
    </member>
    <member name="M:System.Web.ParserErrorCollection.Remove(System.Web.ParserError)">
      <summary>Removes the specified <see cref="T:System.Web.ParserError" /> object from the collection.</summary>
      <param name="value">The <see cref="T:System.Web.ParserError" /> to remove from the collection.</param>
    </member>
    <member name="T:System.Web.PreApplicationStartMethodAttribute">
      <summary>Provides expanded support for application startup.</summary>
    </member>
    <member name="M:System.Web.PreApplicationStartMethodAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.PreApplicationStartMethodAttribute" /> class.</summary>
      <param name="type">An object that describes the type of the startup method..</param>
      <param name="methodName">An empty parameter signature that has no return value. </param>
    </member>
    <member name="P:System.Web.PreApplicationStartMethodAttribute.MethodName">
      <summary>Gets the associated startup method.</summary>
      <returns>A string that contains the name of the associated startup method.</returns>
    </member>
    <member name="P:System.Web.PreApplicationStartMethodAttribute.Type">
      <summary>Gets the type that is returned by the associated startup method.</summary>
      <returns>An object that describes the type of the startup method.</returns>
    </member>
    <member name="T:System.Web.ProcessInfo">
      <summary>Provides information on processes currently executing.</summary>
    </member>
    <member name="M:System.Web.ProcessInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.ProcessInfo" /> class.</summary>
    </member>
    <member name="M:System.Web.ProcessInfo.#ctor(System.DateTime,System.TimeSpan,System.Int32,System.Int32,System.Web.ProcessStatus,System.Web.ProcessShutdownReason,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.ProcessInfo" /> class and sets internal information indicating the status of the process.</summary>
      <param name="startTime">A <see cref="T:System.DateTime" /> that indicates the time at which the process started. </param>
      <param name="age">The <see cref="T:System.TimeSpan" /> that indicates the time elapsed since the process started. </param>
      <param name="processID">The ID number assigned to the process. </param>
      <param name="requestCount">The number of start requests for the process. </param>
      <param name="status">One of the <see cref="T:System.Web.ProcessStatus" /> values that indicates the current status of the process. </param>
      <param name="shutdownReason">One of the <see cref="T:System.Web.ProcessShutdownReason" /> values. </param>
      <param name="peakMemoryUsed">The maximum memory used, in kilobytes (KB). </param>
    </member>
    <member name="P:System.Web.ProcessInfo.Age">
      <summary>Gets the length of time the process has been running.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that indicates the time elapsed since the process started.</returns>
    </member>
    <member name="P:System.Web.ProcessInfo.PeakMemoryUsed">
      <summary>Gets the maximum amount of memory the process has used.</summary>
      <returns>The maximum memory used, in kilobytes (KB).</returns>
    </member>
    <member name="P:System.Web.ProcessInfo.ProcessID">
      <summary>Gets the ID number assigned to the process.</summary>
      <returns>The process ID number assigned by Windows.</returns>
    </member>
    <member name="P:System.Web.ProcessInfo.RequestCount">
      <summary>Gets the number of start requests for the process.</summary>
      <returns>The number of requests executed by the process.</returns>
    </member>
    <member name="M:System.Web.ProcessInfo.SetAll(System.DateTime,System.TimeSpan,System.Int32,System.Int32,System.Web.ProcessStatus,System.Web.ProcessShutdownReason,System.Int32)">
      <summary>Sets internal information indicating the status of the process.</summary>
      <param name="startTime">A <see cref="T:System.DateTime" /> that indicates the time at which the process started. </param>
      <param name="age">A <see cref="T:System.TimeSpan" /> that indicates the time elapsed since the process started. </param>
      <param name="processID">The ID number assigned to the process. </param>
      <param name="requestCount">The number of start requests for the process. </param>
      <param name="status">One of the <see cref="T:System.Web.ProcessStatus" /> values that indicates the time elapsed since the process started. </param>
      <param name="shutdownReason">One of the <see cref="T:System.Web.ProcessShutdownReason" /> values. </param>
      <param name="peakMemoryUsed">The maximum memory used, in kilobytes (KB). </param>
    </member>
    <member name="P:System.Web.ProcessInfo.ShutdownReason">
      <summary>Gets a value that indicates why the process shut down.</summary>
      <returns>On of the <see cref="T:System.Web.ProcessShutdownReason" /> values.</returns>
    </member>
    <member name="P:System.Web.ProcessInfo.StartTime">
      <summary>Gets the time at which the process started.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates the time at which the process started.</returns>
    </member>
    <member name="P:System.Web.ProcessInfo.Status">
      <summary>Gets the current status of the process.</summary>
      <returns>One of the <see cref="T:System.Web.ProcessStatus" /> values that indicates the current status of the process.</returns>
    </member>
    <member name="T:System.Web.ProcessModelInfo">
      <summary>Contains methods that return information about worker processes. </summary>
    </member>
    <member name="M:System.Web.ProcessModelInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.ProcessModelInfo" /> class.</summary>
    </member>
    <member name="M:System.Web.ProcessModelInfo.GetCurrentProcessInfo">
      <summary>Returns information about the worker process that is executing the current request.</summary>
      <returns>A <see cref="T:System.Web.ProcessInfo" /> that contains information about the current process.</returns>
      <exception cref="T:System.Web.HttpException">Process information is not available for the current request. </exception>
    </member>
    <member name="M:System.Web.ProcessModelInfo.GetHistory(System.Int32)">
      <summary>Returns information about recent worker processes.</summary>
      <returns>An array of the most recent <see cref="T:System.Web.ProcessInfo" /> objects (up to 100); otherwise, if the number of available objects is less than <paramref name="numRecords" />, all available objects.</returns>
      <param name="numRecords">The number of processes for which information is requested. </param>
      <exception cref="T:System.Web.HttpException">Process information is not available. </exception>
    </member>
    <member name="T:System.Web.ProcessShutdownReason">
      <summary>Provides enumerated values that indicate why a process has shut down.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.None">
      <summary>Indicates that the process has not shut down.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.Unexpected">
      <summary>Indicates that the process shut down unexpectedly.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.RequestsLimit">
      <summary>Indicates that requests executed by the process exceeded the allowable limit.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.RequestQueueLimit">
      <summary>Indicates that requests assigned to the process exceeded the allowable number in the queue.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.Timeout">
      <summary>Indicates that the process restarted because it was active longer than allowed.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.IdleTimeout">
      <summary>Indicates that the process exceeded the allowable idle time.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.MemoryLimitExceeded">
      <summary>Indicates that the process exceeded the per-process memory limit.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.PingFailed">
      <summary>Indicates that the worker process did not respond to a ping from the Internet Information Services (IIS) process.</summary>
    </member>
    <member name="F:System.Web.ProcessShutdownReason.DeadlockSuspected">
      <summary>Indicates that a deadlock was suspected because the response time limit was exceeded with requests in the queue.</summary>
    </member>
    <member name="T:System.Web.ProcessStatus">
      <summary>Provides enumerated values that indicate the current status of a process.</summary>
    </member>
    <member name="F:System.Web.ProcessStatus.Alive">
      <summary>Indicates that the process is running.</summary>
    </member>
    <member name="F:System.Web.ProcessStatus.ShuttingDown">
      <summary>Indicates that the process has begun to shut down.</summary>
    </member>
    <member name="F:System.Web.ProcessStatus.ShutDown">
      <summary>Indicates that the process has shut down normally after receiving a shutdown message from the Internet Information Services (IIS) process.</summary>
    </member>
    <member name="F:System.Web.ProcessStatus.Terminated">
      <summary>Indicates that the process was forced to terminate by the Internet Information Services (IIS) process.</summary>
    </member>
    <member name="T:System.Web.RequestNotification">
      <summary>Indicates when events and other life-cycle events occur while a <see cref="T:System.Web.HttpApplication" /> request is being processed.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.BeginRequest">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.BeginRequest" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.AuthenticateRequest">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.AuthorizeRequest">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.AuthorizeRequest" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.ResolveRequestCache">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.ResolveRequestCache" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.MapRequestHandler">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.MapRequestHandler" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.AcquireRequestState">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.AcquireRequestState" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.PreExecuteRequestHandler">
      <summary>Indicates a point in the application life cycle just before the handler that processes the request is mapped.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.ExecuteRequestHandler">
      <summary>Indicates that the handler that is mapped to the requested resource is being invoked to process the request.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.ReleaseRequestState">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.ReleaseRequestState" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.UpdateRequestCache">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.UpdateRequestCache" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.LogRequest">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.LogRequest" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.EndRequest">
      <summary>Indicates that the <see cref="E:System.Web.HttpApplication.EndRequest" /> event was raised for the request and is processing.</summary>
    </member>
    <member name="F:System.Web.RequestNotification.SendResponse">
      <summary>Indicates that processing of the request is complete and that the response is being sent.</summary>
    </member>
    <member name="T:System.Web.RequestNotificationStatus">
      <summary>Specifies the state of a notification in the request pipeline.</summary>
    </member>
    <member name="F:System.Web.RequestNotificationStatus.Continue">
      <summary>This member supports the ASP.NET infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Web.RequestNotificationStatus.Pending">
      <summary>This member supports the ASP.NET infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Web.RequestNotificationStatus.FinishRequest">
      <summary>This member supports the ASP.NET infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Web.SiteMap">
      <summary>The <see cref="T:System.Web.SiteMap" /> class is an in-memory representation of the navigation structure for a site, which is provided by one or more site map providers. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Web.SiteMap.CurrentNode">
      <summary>Gets a <see cref="T:System.Web.SiteMapNode" /> control that represents the currently requested page.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> instance that represents the currently requested page; otherwise, null, if no representative node exists in the site map information. </returns>
      <exception cref="T:System.InvalidOperationException">The site map feature is not enabled.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The default provider specified in the configuration does not exist.</exception>
      <exception cref="T:System.Web.HttpException">The feature is supported only when running in Low trust or higher.</exception>
    </member>
    <member name="P:System.Web.SiteMap.Enabled">
      <summary>Gets a Boolean value indicating if a site map provider is specified in the Web.config file and if the site map provider is enabled.</summary>
      <returns>true if a site map provider is configured and enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.SiteMap.Provider">
      <summary>Gets the default <see cref="T:System.Web.SiteMapProvider" /> object for the current site map.</summary>
      <returns>The default site map provider for the <see cref="T:System.Web.SiteMap" />. </returns>
      <exception cref="T:System.InvalidOperationException">The site map feature is not enabled.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The default provider specified in the configuration does not exist.</exception>
      <exception cref="T:System.Web.HttpException">The feature is supported only when running in Low trust or higher.</exception>
    </member>
    <member name="P:System.Web.SiteMap.Providers">
      <summary>Gets a read-only collection of named <see cref="T:System.Web.SiteMapProvider" /> objects that are available to the <see cref="T:System.Web.SiteMap" /> class.</summary>
      <returns>A <see cref="T:System.Web.SiteMapProviderCollection" /> of named <see cref="T:System.Web.SiteMapProvider" /> objects.</returns>
      <exception cref="T:System.InvalidOperationException">The site map feature is not enabled.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The default provider specified in the configuration does not exist.</exception>
      <exception cref="T:System.Web.HttpException">The feature is supported only when running in Low trust or higher.</exception>
    </member>
    <member name="P:System.Web.SiteMap.RootNode">
      <summary>Gets a <see cref="T:System.Web.SiteMapNode" /> object that represents the top-level page of the navigation structure for the site.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the top-level page of the site's navigation structure; otherwise, null, if security trimming is enabled and the node cannot be returned to the current user.</returns>
      <exception cref="T:System.InvalidOperationException">The site map feature is not enabled.- or -The <see cref="P:System.Web.SiteMap.RootNode" /> resolves to null, which occurs if security trimming is enabled and the root node is not visible to the current user. </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">The default provider specified in the configuration does not exist.</exception>
      <exception cref="T:System.Web.HttpException">The feature is supported only when running in Low trust or higher.</exception>
    </member>
    <member name="E:System.Web.SiteMap.SiteMapResolve">
      <summary>Occurs when the <see cref="P:System.Web.SiteMap.CurrentNode" /> property is accessed. </summary>
    </member>
    <member name="T:System.Web.SiteMapNode">
      <summary>Represents a node in the hierarchical site map structure such as that described by the <see cref="T:System.Web.SiteMap" /> class and classes that implement the abstract <see cref="T:System.Web.SiteMapProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.SiteMapNode.#ctor(System.Web.SiteMapProvider,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNode" /> class, using the specified <paramref name="key" /> to identify the page that the node represents and the site map provider that manages the node.</summary>
      <param name="provider">The <see cref="T:System.Web.SiteMapProvider" /> with which the node is associated. </param>
      <param name="key">A provider-specific lookup key.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Web.SiteMapProvider" /> is null. - or -<paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.#ctor(System.Web.SiteMapProvider,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNode" /> class using the specified URL, a <paramref name="key" /> to identify the page that the node represents, and the site map provider that manages the node.</summary>
      <param name="provider">The <see cref="T:System.Web.SiteMapProvider" /> with which the node is associated. </param>
      <param name="key">A provider-specific lookup key.</param>
      <param name="url">The URL of the page that the node represents within the site. </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Web.SiteMapProvider" /> is null. - or -<paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.#ctor(System.Web.SiteMapProvider,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNode" /> class using the specified URL, a <paramref name="key" /> to identify the page that the node represents, a title, and the site map provider that manages the node.</summary>
      <param name="provider">The <see cref="T:System.Web.SiteMapProvider" /> with which the node is associated. </param>
      <param name="key">A provider-specific lookup key.</param>
      <param name="url">The URL of the page that the node represents within the site. </param>
      <param name="title">A label for the node, often displayed by navigation controls. </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Web.SiteMapProvider" /> is null. - or -<paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.#ctor(System.Web.SiteMapProvider,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNode" /> class using the specified URL, a <paramref name="key" /> to identify the page that the node represents, a title and description, and the site map provider that manages the node.</summary>
      <param name="provider">The <see cref="T:System.Web.SiteMapProvider" /> with which the node is associated. </param>
      <param name="key">A provider-specific lookup key.</param>
      <param name="url">The URL of the page that the node represents within the site. </param>
      <param name="title">A label for the node, often displayed by navigation controls. </param>
      <param name="description">A description of the page that the node represents. </param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Web.SiteMapProvider" /> is null. - or -<paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.#ctor(System.Web.SiteMapProvider,System.String,System.String,System.String,System.String,System.Collections.IList,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNode" /> class using the specified site map provider that manages the node, URL, title, description, roles, additional attributes, and explicit and implicit resource keys for localization.</summary>
      <param name="provider">The <see cref="T:System.Web.SiteMapProvider" /> with which the node is associated. </param>
      <param name="key">A provider-specific lookup key. </param>
      <param name="url">The URL of the page that the node represents within the site. </param>
      <param name="title">A label for the node, often displayed by navigation controls. </param>
      <param name="description">A description of the page that the node represents. </param>
      <param name="roles">An <see cref="T:System.Collections.IList" /> of roles that are allowed to view the page represented by the <see cref="T:System.Web.SiteMapNode" />. </param>
      <param name="attributes">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of additional attributes used to initialize the <see cref="T:System.Web.SiteMapNode" />. </param>
      <param name="explicitResourceKeys">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of explicit resource keys used for localization. </param>
      <param name="implicitResourceKey">An implicit resource key used for localization.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Web.SiteMapProvider" /> is null. - or -<paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.SiteMapNode.Attributes">
      <summary>Gets or sets a collection of additional attributes beyond the strongly typed properties that are defined for the <see cref="T:System.Web.SiteMapNode" /> class.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of additional attributes for the <see cref="T:System.Web.SiteMapNode" /> beyond <see cref="P:System.Web.SiteMapNode.Title" />, <see cref="P:System.Web.SiteMapNode.Description" />, <see cref="P:System.Web.SiteMapNode.Url" />, and <see cref="P:System.Web.SiteMapNode.Roles" />; otherwise, null, if no attributes exist.</returns>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="P:System.Web.SiteMapNode.ChildNodes">
      <summary>Gets or sets all the child nodes of the current <see cref="T:System.Web.SiteMapNode" /> object from the associated <see cref="T:System.Web.SiteMapProvider" /> provider.</summary>
      <returns>A read-only <see cref="T:System.Web.SiteMapNodeCollection" /> of child nodes, if any exist for the current node; otherwise, null.</returns>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.Clone">
      <summary>Creates a new node that is a copy of the current node.</summary>
      <returns>A new node that is a copy of the current node.</returns>
    </member>
    <member name="M:System.Web.SiteMapNode.Clone(System.Boolean)">
      <summary>Creates a new copy that is a copy of the current node, optionally cloning all parent and ancestor nodes of the current node.</summary>
      <returns>A new node that is a copy of the current node.</returns>
      <param name="cloneParentNodes">true to clone all parent and ancestor nodes of the current node; otherwise, false.</param>
    </member>
    <member name="P:System.Web.SiteMapNode.Description">
      <summary>Gets or sets a description for the <see cref="T:System.Web.SiteMapNode" />. </summary>
      <returns>A string that represents a description of the node; otherwise, <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.Equals(System.Object)">
      <summary>Gets a value indicating whether the current <see cref="T:System.Web.SiteMapNode" /> is identical to the specified object. </summary>
      <returns>true if <paramref name="obj" /> is both a <see cref="T:System.Web.SiteMapNode" /> and identical to the current <see cref="T:System.Web.SiteMapNode" />; otherwise, false. </returns>
      <param name="obj">An object to compare to the current <see cref="T:System.Web.SiteMapNode" />. </param>
    </member>
    <member name="M:System.Web.SiteMapNode.GetAllNodes">
      <summary>Retrieves a read-only collection of all <see cref="T:System.Web.SiteMapNode" /> objects that are descendants of the calling node, regardless of the degree of separation.</summary>
      <returns>A read-only <see cref="T:System.Web.SiteMapNodeCollection" /> that represents all the descendants of a <see cref="T:System.Web.SiteMapNode" /> within the scope of the current provider.</returns>
    </member>
    <member name="M:System.Web.SiteMapNode.GetDataSourceView(System.Web.UI.WebControls.SiteMapDataSource,System.String)">
      <summary>Retrieves the <see cref="T:System.Web.UI.WebControls.SiteMapDataSourceView" /> object that is associated with the current node.</summary>
      <returns>A named <see cref="T:System.Web.UI.WebControls.SiteMapDataSourceView" /> for the current node.</returns>
      <param name="owner">A <see cref="T:System.Web.UI.WebControls.SiteMapDataSource" /> control that the view is associated with.</param>
      <param name="viewName">The name of the view.</param>
    </member>
    <member name="M:System.Web.SiteMapNode.GetExplicitResourceString(System.String,System.String,System.Boolean)">
      <summary>Retrieves a localized string based on a <see cref="T:System.Web.SiteMapNode" /> attribute to localize, a default string to return if no resource is found, and a Boolean value indicating whether to throw an exception if no resource is found. </summary>
      <returns>A string representing the localized attribute.</returns>
      <param name="attributeName">The <see cref="T:System.Web.SiteMapNode" /> attribute to localize. </param>
      <param name="defaultValue">The default value to return if a matching resource is not found.</param>
      <param name="throwIfNotFound">true to throw an <see cref="T:System.InvalidOperationException" />, if an explicit resource is defined for <paramref name="attributeName" />, <paramref name="defaultValue" /> is null, and a localized value is not found; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">A matching resource object was not found and <paramref name="throwIfNotFound" /> is true. </exception>
    </member>
    <member name="M:System.Web.SiteMapNode.GetHashCode">
      <summary>Returns the hash code of the <see cref="T:System.Web.SiteMapNode" /> object. </summary>
      <returns>A 32-bit signed integer representing the hash code.</returns>
    </member>
    <member name="M:System.Web.SiteMapNode.GetHierarchicalDataSourceView">
      <summary>Retrieves the <see cref="T:System.Web.UI.WebControls.SiteMapHierarchicalDataSourceView" /> object that is associated with the current node.</summary>
      <returns>A <see cref="T:System.Web.UI.WebControls.SiteMapHierarchicalDataSourceView" /> for the current node.</returns>
    </member>
    <member name="M:System.Web.SiteMapNode.GetImplicitResourceString(System.String)">
      <summary>Gets a localized string based on the attribute name and <see cref="P:System.Web.SiteMapProvider.ResourceKey" /> property that is specified by the <see cref="T:System.Web.SiteMapProvider" /> by which the <see cref="T:System.Web.SiteMapNode" /> is tracked.</summary>
      <returns>A string representing the localized attribute. The default is null.</returns>
      <param name="attributeName">The <see cref="T:System.Web.SiteMapNode" /> attribute to localize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeName" /> is null. </exception>
    </member>
    <member name="P:System.Web.SiteMapNode.HasChildNodes">
      <summary>Gets a value indicating whether the current <see cref="T:System.Web.SiteMapNode" /> has any child nodes.</summary>
      <returns>true if the node has children; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.SiteMapNode.IsAccessibleToUser(System.Web.HttpContext)">
      <summary>Gets a value indicating whether the specified site map node can be viewed by the user in the specified context.</summary>
      <returns>true if any one of the following conditions is met: the security trimming is enabled and the current user is a member of at least one of the roles allowing access to view the site map node; the current user is authorized specifically for the requested node's URL in the authorization element for the current application and the URL is located within the directory structure for the application; the current thread has an associated <see cref="T:System.Security.Principal.WindowsIdentity" /> that has file access to the requested node's URL and the URL is located within the directory structure for the application; or security trimming is not enabled and therefore any user is allowed to view the site map node; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.Web.HttpContext" /> that contains user information.</param>
      <exception cref="T:System.ArgumentNullException">The specified context is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.IsDescendantOf(System.Web.SiteMapNode)">
      <summary>Gets a value indicating whether the current site map node is a child or a direct descendant of the specified node.</summary>
      <returns>true if the current node is a child or descendant of the specified node; otherwise, false.</returns>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> to check if the current node is a child or descendant of.</param>
    </member>
    <member name="P:System.Web.SiteMapNode.Item(System.String)">
      <summary>Gets or sets a custom attribute from the <see cref="P:System.Web.SiteMapNode.Attributes" /> collection or a resource string based on the specified key.</summary>
      <returns>A custom attribute or resource string identified by <paramref name="key" />; otherwise, null.</returns>
      <param name="key">A string that identifies the attribute or resource string to retrieve.</param>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="P:System.Web.SiteMapNode.Key">
      <summary>Gets a string representing a lookup key for a site map node.</summary>
      <returns>A string representing a lookup key.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.NextSibling">
      <summary>Gets the next <see cref="T:System.Web.SiteMapNode" /> node on the same hierarchical level as the current one, relative to the <see cref="P:System.Web.SiteMapNode.ParentNode" /> property (if one exists).</summary>
      <returns>The next <see cref="T:System.Web.SiteMapNode" />, serially, after the current one, under the parent node; otherwise, null, if no parent exists, there is no node that follows this one, or security trimming is enabled and the user cannot view the parent or next sibling nodes.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.ParentNode">
      <summary>Gets or sets the <see cref="T:System.Web.SiteMapNode" /> object that is the parent of the current node.</summary>
      <returns>The parent <see cref="T:System.Web.SiteMapNode" />; otherwise, null, if security trimming is enabled and the user cannot view the parent node.</returns>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="P:System.Web.SiteMapNode.PreviousSibling">
      <summary>Gets the previous <see cref="T:System.Web.SiteMapNode" /> object on the same level as the current one, relative to the <see cref="P:System.Web.SiteMapNode.ParentNode" /> object (if one exists).</summary>
      <returns>The previous <see cref="T:System.Web.SiteMapNode" />, serially, before the current one, under the parent node; otherwise, null, if no parent exists, there is no node before this one, or security trimming is enabled and the user cannot view the parent or previous sibling nodes.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.Provider">
      <summary>Gets the <see cref="T:System.Web.SiteMapProvider" /> provider that the <see cref="T:System.Web.SiteMapNode" /> object is tracked by.</summary>
      <returns>The <see cref="T:System.Web.SiteMapProvider" /> that the <see cref="T:System.Web.SiteMapNode" /> is tracked by. </returns>
    </member>
    <member name="P:System.Web.SiteMapNode.ReadOnly">
      <summary>Gets or sets a value indicating whether the site map node can be modified.</summary>
      <returns>true if the site map node can be modified; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.ResourceKey">
      <summary>Gets or sets the resource key that is used to localize the <see cref="T:System.Web.SiteMapNode" />.</summary>
      <returns>A string containing the resource key name.</returns>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="P:System.Web.SiteMapNode.Roles">
      <summary>Gets or sets a collection of roles that are associated with the <see cref="T:System.Web.SiteMapNode" /> object, used during security trimming. </summary>
      <returns>An <see cref="T:System.Collections.IList" /> of roles.</returns>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="P:System.Web.SiteMapNode.RootNode">
      <summary>Gets the root node of the root provider in a site map provider hierarchy. If no provider hierarchy exists, the <see cref="P:System.Web.SiteMapNode.RootNode" /> property gets the root node of the current provider. </summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the root node of the site navigation structure.</returns>
      <exception cref="T:System.InvalidOperationException">The root node cannot be retrieved from the root provider.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.System#ICloneable#Clone">
      <summary>Creates a new node that is a copy of the current node. For a description of this member, see <see cref="M:System.ICloneable.Clone" />.</summary>
      <returns>A new node that is a copy of the current node.</returns>
    </member>
    <member name="M:System.Web.SiteMapNode.System#Web#UI#IHierarchyData#GetChildren">
      <summary>Retrieves the hierarchical children data items of the current item. For a description of this member, see <see cref="M:System.Web.UI.IHierarchyData.GetChildren" />.</summary>
      <returns>An <see cref="T:System.Web.UI.IHierarchicalEnumerable" /> that represents the immediate children of the current item in the hierarchy.</returns>
    </member>
    <member name="M:System.Web.SiteMapNode.System#Web#UI#IHierarchyData#GetParent">
      <summary>Retrieves the hierarchical parent of the current item. For a description of this member, see <see cref="M:System.Web.UI.IHierarchyData.GetParent" />.</summary>
      <returns>An <see cref="T:System.Web.UI.IHierarchicalEnumerable" /> that represents the parent of the current item in the hierarchy.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.System#Web#UI#IHierarchyData#HasChildren">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Web.SiteMapNode" /> object has any child nodes. For a description of this member, see <see cref="P:System.Web.UI.IHierarchyData.HasChildren" />.</summary>
      <returns>true if the node has child nodes; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.System#Web#UI#IHierarchyData#Item">
      <summary>Gets the hierarchical data item. For a description of this member, see <see cref="P:System.Web.UI.IHierarchyData.Item" />.</summary>
      <returns>An hierarchical data node object.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.System#Web#UI#IHierarchyData#Path">
      <summary>Gets the path of the hierarchical data item. For a description of this member, see <see cref="P:System.Web.UI.IHierarchyData.Path" />.</summary>
      <returns>The path of the data item.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.System#Web#UI#IHierarchyData#Type">
      <summary>Gets a string that represents the type name of the hierarchical data item. For a description of this member, see <see cref="P:System.Web.UI.IHierarchyData.Type" />.</summary>
      <returns>The string named "SiteMapNode".</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.System#Web#UI#INavigateUIData#Description">
      <summary>Gets the <see cref="P:System.Web.SiteMapNode.Description" /> property of the site map node. For a description of this member, see <see cref="P:System.Web.UI.INavigateUIData.Description" />. </summary>
      <returns>Text displayed in a ToolTip for a node of a navigation control; otherwise, <see cref="F:System.String.Empty" />, if no <see cref="P:System.Web.SiteMapNode.Description" /> is set.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.System#Web#UI#INavigateUIData#Name">
      <summary>Gets the <see cref="P:System.Web.SiteMapNode.Title" /> property of the site map node. For a description of this member, see <see cref="P:System.Web.UI.INavigateUIData.Name" />.</summary>
      <returns>Text that is displayed for a node of a navigation control; otherwise, <see cref="F:System.String.Empty" /> if no <see cref="P:System.Web.SiteMapNode.Title" /> is set for the node.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.System#Web#UI#INavigateUIData#NavigateUrl">
      <summary>Gets the <see cref="P:System.Web.SiteMapNode.Url" /> property of the site map node. For a description of this member, see <see cref="P:System.Web.UI.INavigateUIData.NavigateUrl" />.</summary>
      <returns>The URL to navigate to when the node is clicked; otherwise, <see cref="F:System.String.Empty" /> if no <see cref="P:System.Web.SiteMapNode.Url" /> is set for the node.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.System#Web#UI#INavigateUIData#Value">
      <summary>Gets the <see cref="P:System.Web.SiteMapNode.Title" /> property of the site map node. For a description of this member, see <see cref="P:System.Web.UI.INavigateUIData.Value" />.</summary>
      <returns>A value that is not displayed; otherwise, <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.Title">
      <summary>Gets or sets the title of the <see cref="T:System.Web.SiteMapNode" /> object. </summary>
      <returns>A string that represents the title of the node. The default is <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="M:System.Web.SiteMapNode.ToString">
      <summary>Converts the value of this instance of the <see cref="T:System.Web.SiteMapNode" /> class to its equivalent string representation.</summary>
      <returns>The string representation of the value of this <see cref="T:System.Web.SiteMapNode" />.</returns>
    </member>
    <member name="P:System.Web.SiteMapNode.Url">
      <summary>Gets or sets the URL of the page that the <see cref="T:System.Web.SiteMapNode" /> object represents.</summary>
      <returns>The URL of the page that the node represents. The default is <see cref="F:System.String.Empty" />. </returns>
      <exception cref="T:System.InvalidOperationException">The node is read-only.</exception>
    </member>
    <member name="T:System.Web.SiteMapNodeCollection">
      <summary>Provides a strongly typed collection for <see cref="T:System.Web.SiteMapNode" /> objects and implements the <see cref="T:System.Web.UI.IHierarchicalEnumerable" /> interface to support navigating through the collection. </summary>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNodeCollection" /> class, which is the default instance.</summary>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNodeCollection" /> class with the specified initial capacity.</summary>
      <param name="capacity">The initial capacity of the <see cref="T:System.Web.SiteMapNodeCollection" />.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.#ctor(System.Web.SiteMapNode)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNodeCollection" /> class and adds the <see cref="T:System.Web.SiteMapNode" /> object to the <see cref="P:System.Collections.CollectionBase.InnerList" /> property for the collection.</summary>
      <param name="value">A <see cref="T:System.Web.SiteMapNode" /> to add to the <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.#ctor(System.Web.SiteMapNode[])">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNodeCollection" /> class and adds the array of type <see cref="T:System.Web.SiteMapNode" /> to the <see cref="P:System.Collections.CollectionBase.InnerList" /> property for the collection.</summary>
      <param name="value">An array of type <see cref="T:System.Web.SiteMapNode" /> to add to the <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.#ctor(System.Web.SiteMapNodeCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapNodeCollection" /> class and adds all the list items of the specified <see cref="T:System.Web.SiteMapNodeCollection" /> collection to the <see cref="P:System.Collections.CollectionBase.InnerList" /> property for the collection.</summary>
      <param name="value">A <see cref="T:System.Web.SiteMapNodeCollection" /> that contains the <see cref="T:System.Web.SiteMapNode" /> to add to the current <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.Add(System.Web.SiteMapNode)">
      <summary>Adds a single <see cref="T:System.Web.SiteMapNode" /> object to the  collection.</summary>
      <returns>The index of the <see cref="P:System.Collections.CollectionBase.InnerList" /> where the <see cref="T:System.Web.SiteMapNode" /> was inserted.</returns>
      <param name="value">The <see cref="T:System.Web.SiteMapNode" /> to add to the <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only. </exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.AddRange(System.Web.SiteMapNode[])">
      <summary>Adds an array of type <see cref="T:System.Web.SiteMapNode" /> to the collection.</summary>
      <param name="value">An array of type <see cref="T:System.Web.SiteMapNode" /> to add to the current <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only. </exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.AddRange(System.Web.SiteMapNodeCollection)">
      <summary>Adds the nodes in the specified  <see cref="T:System.Web.SiteMapNodeCollection" /> to the current collection.</summary>
      <param name="value">A <see cref="T:System.Web.SiteMapNodeCollection" /> that contains the <see cref="T:System.Web.SiteMapNode" /> objects to add to the current <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only. </exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.Clear">
      <summary>Removes all items from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only.</exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.Contains(System.Web.SiteMapNode)">
      <summary>Determines whether the collection contains a specific <see cref="T:System.Web.SiteMapNode" /> object.</summary>
      <returns>true if the <see cref="T:System.Web.SiteMapNodeCollection" /> contains the specified <see cref="T:System.Web.SiteMapNode" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Web.SiteMapNode" /> to locate in the <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.CopyTo(System.Web.SiteMapNode[],System.Int32)">
      <summary>Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional array that must have zero-based indexing and is the destination of the elements copied from the <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of <see cref="T:System.Web.SiteMapNode" /> objects in the source <see cref="T:System.Web.SiteMapNodeCollection" /> is greater than the available space from <paramref name="index" /> to the end of <paramref name="array" />. </exception>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.Count">
      <summary>Gets the number of elements contained in the collection.</summary>
      <returns>The number of elements in the <see cref="T:System.Web.SiteMapNodeCollection" />.</returns>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.GetDataSourceView(System.Web.UI.WebControls.SiteMapDataSource,System.String)">
      <summary>Retrieves the <see cref="T:System.Web.UI.WebControls.SiteMapDataSourceView" /> object that is associated with the nodes in the current collection.</summary>
      <returns>A named <see cref="T:System.Web.UI.WebControls.SiteMapDataSourceView" /> for the <see cref="T:System.Web.SiteMapNode" /> objects in the current <see cref="T:System.Web.SiteMapNodeCollection" />.</returns>
      <param name="owner">A <see cref="T:System.Web.UI.WebControls.SiteMapDataSource" /> control that the view is associated with.</param>
      <param name="viewName">The name of the view.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.GetEnumerator">
      <summary>Retrieves a reference to an enumerator object, which is used to iterate over the collection. </summary>
      <returns>An object that implements the <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.GetHierarchicalDataSourceView">
      <summary>Retrieves the <see cref="T:System.Web.UI.WebControls.SiteMapHierarchicalDataSourceView" /> object that is associated with the nodes in the current collection.</summary>
      <returns>A <see cref="T:System.Web.UI.WebControls.SiteMapHierarchicalDataSourceView" /> for the <see cref="T:System.Web.SiteMapNode" /> objects in the current <see cref="T:System.Web.SiteMapNodeCollection" />.</returns>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.GetHierarchyData(System.Object)">
      <summary>Returns a hierarchical data item for the specified enumerated item.</summary>
      <returns>An <see cref="T:System.Web.UI.IHierarchyData" /> that represents the object passed to the <see cref="M:System.Web.SiteMapNodeCollection.GetHierarchyData(System.Object)" />.</returns>
      <param name="enumeratedItem">The object for which to return an <see cref="T:System.Web.UI.IHierarchyData" />.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.IndexOf(System.Web.SiteMapNode)">
      <summary>Searches for the specified <see cref="T:System.Web.SiteMapNode" /> object, and then returns the zero-based index of the first occurrence within the entire collection.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Web.SiteMapNodeCollection" />, if found; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Web.SiteMapNode" /> to locate in the <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.Insert(System.Int32,System.Web.SiteMapNode)">
      <summary>Inserts the specified <see cref="T:System.Web.SiteMapNode" /> object into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which the <see cref="T:System.Web.SiteMapNode" /> is inserted. </param>
      <param name="value">The <see cref="T:System.Web.SiteMapNode" /> to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than the <see cref="P:System.Collections.CollectionBase.Count" />. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only.-or- The <see cref="T:System.Web.SiteMapNodeCollection" /> has a fixed size. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.IsFixedSize">
      <summary>Gets a Boolean value indicating whether nodes can be added to or subtracted from the collection.</summary>
      <returns>true if you can add <see cref="T:System.Web.SiteMapNode" /> objects to or remove <see cref="T:System.Web.SiteMapNode" /> objects from the <see cref="T:System.Web.SiteMapNodeCollection" />; otherwise, false. </returns>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.IsReadOnly">
      <summary>Gets a Boolean value indicating whether the collection is read-only.</summary>
      <returns>true if you can modify the <see cref="T:System.Web.SiteMapNodeCollection" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.IsSynchronized">
      <summary>Gets a Boolean value indicating whether access to the collection is synchronized (thread safe).</summary>
      <returns>true if access is synchronized; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Web.SiteMapNode" /> object at the specified index in the collection.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents an element in the <see cref="T:System.Web.SiteMapNodeCollection" />.</returns>
      <param name="index">The index of the <see cref="T:System.Web.SiteMapNode" /> to find. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.- or -<paramref name="index" /> is great than the <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
      <exception cref="T:System.ArgumentNullException">The value supplied to the setter is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.OnValidate(System.Object)">
      <summary>Performs additional custom processes when validating a value.</summary>
      <param name="value">The <see cref="T:System.Web.SiteMapNode" /> to validate. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Web.SiteMapNode" />.</exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.ReadOnly(System.Web.SiteMapNodeCollection)">
      <summary>Returns a read-only collection that contains the nodes in the specified <see cref="T:System.Web.SiteMapNodeCollection" /> collection.</summary>
      <returns>A read-only <see cref="T:System.Web.SiteMapNodeCollection" /> with the same <see cref="T:System.Web.SiteMapNode" /> elements and structure as the original <see cref="T:System.Web.SiteMapNodeCollection" />.</returns>
      <param name="collection">The <see cref="T:System.Web.SiteMapNodeCollection" /> that contains the <see cref="T:System.Web.SiteMapNode" /> objects to add to the read-only <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.Remove(System.Web.SiteMapNode)">
      <summary>Removes the specified <see cref="T:System.Web.SiteMapNode" /> object from the collection.</summary>
      <param name="value">The <see cref="T:System.Web.SiteMapNode" /> to remove from the <see cref="T:System.Web.SiteMapNodeCollection" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> does not exist in the collection. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only.-or- The <see cref="T:System.Web.SiteMapNodeCollection" /> has a fixed size. </exception>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Web.SiteMapNode" /> object at the specified index of the  collection.</summary>
      <param name="index">The zero-based index of the element to remove. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.- or -<paramref name="index" /> is greater than the <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only.- or -The <see cref="T:System.Web.SiteMapNodeCollection" /> has a fixed sized.</exception>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the  collection. </summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Web.SiteMapNodeCollection" />.</returns>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> interface to an array, starting at a particular array index. This class cannot be inherited.</summary>
      <param name="array">A one-dimensional array that must have zero-based indexing and is the destination of the elements copied from the <see cref="T:System.Collections.CollectionBase" />. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of <see cref="T:System.Web.SiteMapNode" /> objects in the source <see cref="T:System.Web.SiteMapNodeCollection" /> is greater than the available space from <paramref name="index" /> to the end of <paramref name="array" />. </exception>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.System#Collections#ICollection#Count">
      <summary>Gets the number of elements that are contained in the <see cref="T:System.Collections.ICollection" /> interface. This class cannot be inherited.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a Boolean value indicating whether access to the <see cref="T:System.Collections.ICollection" /> interface is synchronized (thread safe). This class cannot be inherited.</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" /> interface. This class cannot be inherited.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection. For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the <see cref="T:System.Web.SiteMapNodeCollection" />.</returns>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the collection in the <see cref="T:System.Collections.IList" /> interface. For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The object to add to the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#IList#Clear">
      <summary>Removes all items from the collection in the <see cref="T:System.Collections.IList" /> interface. For a description of this member, see <see cref="M:System.Collections.IList.Clear" />.</summary>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection in the <see cref="T:System.Collections.IList" /> interface contains the specified Boolean value.</summary>
      <returns>true if the object is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of the specific item in the collection that is returned by the <see cref="T:System.Collections.IList" /> interface. For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of the value, in the list, if found; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item into the collection in the <see cref="T:System.Collections.IList" /> interface at the specified index. For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based <paramref name="index" /> at which to insert <paramref name="value" />.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a Boolean value indicating whether the collection has a fixed size. For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets a Boolean value indicating whether the collection is read-only. For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Web.SiteMapNodeCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.SiteMapNodeCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Collections.IList" /> element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specified object from the collection in the <see cref="T:System.Collections.IList" /> interface. For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index. For a description of this member, see <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Web.SiteMapNodeCollection.System#Web#UI#IHierarchicalEnumerable#GetHierarchyData(System.Object)">
      <summary>Returns a hierarchical data item for the specified enumerated item. For a description of this member, see <see cref="M:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData(System.Object)" />.</summary>
      <returns>An <see cref="T:System.Web.UI.IHierarchyData" /> that represents the object passed to the <see cref="M:System.Web.SiteMapNodeCollection.System.Web.UI.IHierarchicalEnumerable.GetHierarchyData(System.Object)" />.</returns>
      <param name="enumeratedItem">The object for which to return an <see cref="T:System.Web.UI.IHierarchyData" />. </param>
    </member>
    <member name="T:System.Web.SiteMapProvider">
      <summary>Provides a common base class for all site map data providers, and a way for developers to implement custom site map data providers that can be used with the ASP.NET site map infrastructure as persistent stores for <see cref="T:System.Web.SiteMap" /> objects. </summary>
    </member>
    <member name="M:System.Web.SiteMapProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.SiteMapProvider.AddNode(System.Web.SiteMapNode)">
      <summary>Adds a <see cref="T:System.Web.SiteMapNode" /> object to the node collection that is maintained by the site map provider.</summary>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> to add to the node collection maintained by the provider. </param>
    </member>
    <member name="M:System.Web.SiteMapProvider.AddNode(System.Web.SiteMapNode,System.Web.SiteMapNode)">
      <summary>Adds a <see cref="T:System.Web.SiteMapNode" /> object to the node collection that is maintained by the site map provider and specifies the parent <see cref="T:System.Web.SiteMapNode" /> object. </summary>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> to add to the node collection maintained by the provider.</param>
      <param name="parentNode">The <see cref="T:System.Web.SiteMapNode" /> that is the parent of <paramref name="node" />.</param>
      <exception cref="T:System.NotImplementedException">In all cases.</exception>
    </member>
    <member name="P:System.Web.SiteMapProvider.CurrentNode">
      <summary>Gets the <see cref="T:System.Web.SiteMapNode" /> object that represents the currently requested page.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the currently requested page; otherwise, null, if the <see cref="T:System.Web.SiteMapNode" /> is not found or cannot be returned for the current user.</returns>
    </member>
    <member name="P:System.Web.SiteMapProvider.EnableLocalization">
      <summary>Gets or sets a Boolean value indicating whether localized values of <see cref="T:System.Web.SiteMapNode" /> attributes are returned.</summary>
      <returns>true if a localized value of the <see cref="T:System.Web.SiteMapNode" /> attributes are returned; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Web.SiteMapProvider.FindSiteMapNode(System.String)">
      <summary>When overridden in a derived class, retrieves a <see cref="T:System.Web.SiteMapNode" /> object that represents the page at the specified URL.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the page identified by <paramref name="rawURL" />; otherwise, null, if no corresponding <see cref="T:System.Web.SiteMapNode" /> is found or if security trimming is enabled and the <see cref="T:System.Web.SiteMapNode" /> cannot be returned for the current user.</returns>
      <param name="rawUrl">A URL that identifies the page for which to retrieve a <see cref="T:System.Web.SiteMapNode" />. </param>
    </member>
    <member name="M:System.Web.SiteMapProvider.FindSiteMapNode(System.Web.HttpContext)">
      <summary>Retrieves a <see cref="T:System.Web.SiteMapNode" /> object that represents the currently requested page using the specified <see cref="T:System.Web.HttpContext" /> object.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the currently requested page; otherwise, null, if no corresponding <see cref="T:System.Web.SiteMapNode" /> can be found in the <see cref="T:System.Web.SiteMapNode" /> or if the page context is null. </returns>
      <param name="context">The <see cref="T:System.Web.HttpContext" /> used to match node information with the URL of the requested page.</param>
    </member>
    <member name="M:System.Web.SiteMapProvider.FindSiteMapNodeFromKey(System.String)">
      <summary>Retrieves a <see cref="T:System.Web.SiteMapNode" /> object based on a specified key.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the page identified by <paramref name="key" />; otherwise, null, if no corresponding <see cref="T:System.Web.SiteMapNode" /> is found or if security trimming is enabled and the <see cref="T:System.Web.SiteMapNode" /> cannot be returned for the current user. The default is null.</returns>
      <param name="key">A lookup key with which a <see cref="T:System.Web.SiteMapNode" /> is created.</param>
    </member>
    <member name="M:System.Web.SiteMapProvider.GetChildNodes(System.Web.SiteMapNode)">
      <summary>When overridden in a derived class, retrieves the child nodes of a specific <see cref="T:System.Web.SiteMapNode" />.</summary>
      <returns>A read-only <see cref="T:System.Web.SiteMapNodeCollection" /> that contains the immediate child nodes of the specified <see cref="T:System.Web.SiteMapNode" />; otherwise, null or an empty collection, if no child nodes exist.</returns>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> for which to retrieve all child nodes. </param>
    </member>
    <member name="M:System.Web.SiteMapProvider.GetCurrentNodeAndHintAncestorNodes(System.Int32)">
      <summary>Provides an optimized lookup method for site map providers when retrieving the node for the currently requested page and fetching the parent and ancestor site map nodes for the current page.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the currently requested page; otherwise, null, if the <see cref="T:System.Web.SiteMapNode" /> is not found or cannot be returned for the current user.</returns>
      <param name="upLevel">The number of ancestor site map node generations to get. A value of -1 indicates that all ancestors might be retrieved and cached by the provider.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="upLevel" /> is less than -1.</exception>
    </member>
    <member name="M:System.Web.SiteMapProvider.GetCurrentNodeAndHintNeighborhoodNodes(System.Int32,System.Int32)">
      <summary>Provides an optimized lookup method for site map providers when retrieving the node for the currently requested page and fetching the site map nodes in the proximity of the current node.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the currently requested page; otherwise, null, if the <see cref="T:System.Web.SiteMapNode" /> is not found or cannot be returned for the current user.</returns>
      <param name="upLevel">The number of ancestor <see cref="T:System.Web.SiteMapNode" /> generations to fetch. 0 indicates no ancestor nodes are retrieved and -1 indicates that all ancestors might be retrieved and cached by the provider.</param>
      <param name="downLevel">The number of child <see cref="T:System.Web.SiteMapNode" /> generations to fetch. 0 indicates no descendant nodes are retrieved and a -1 indicates that all descendant nodes might be retrieved and cached by the provider.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="upLevel" /> or <paramref name="downLevel" /> is less than -1.</exception>
    </member>
    <member name="M:System.Web.SiteMapProvider.GetParentNode(System.Web.SiteMapNode)">
      <summary>When overridden in a derived class, retrieves the parent node of a specific <see cref="T:System.Web.SiteMapNode" /> object.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the parent of <paramref name="node" />; otherwise, null, if the <see cref="T:System.Web.SiteMapNode" /> has no parent or security trimming is enabled and the parent node is not accessible to the current user.Note<see cref="M:System.Web.SiteMapProvider.GetParentNode(System.Web.SiteMapNode)" /> might also return null if the parent node belongs to a different provider. In this case, use the <see cref="P:System.Web.SiteMapNode.ParentNode" /> property of <paramref name="node" /> instead.</returns>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> for which to retrieve the parent node. </param>
    </member>
    <member name="M:System.Web.SiteMapProvider.GetParentNodeRelativeToCurrentNodeAndHintDownFromParent(System.Int32,System.Int32)">
      <summary>Provides an optimized lookup method for site map providers when retrieving an ancestor node for the currently requested page and fetching the descendant nodes for the ancestor.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents an ancestor <see cref="T:System.Web.SiteMapNode" /> of the currently requested page; otherwise, null, if the current or ancestor <see cref="T:System.Web.SiteMapNode" /> is not found or cannot be returned for the current user.</returns>
      <param name="walkupLevels">The number of ancestor node levels to traverse when retrieving the requested ancestor node. </param>
      <param name="relativeDepthFromWalkup">The number of descendant node levels to retrieve from the target ancestor node. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="walkupLevels" /> or <paramref name="relativeDepthFromWalkup" /> is less than 0.</exception>
    </member>
    <member name="M:System.Web.SiteMapProvider.GetParentNodeRelativeToNodeAndHintDownFromParent(System.Web.SiteMapNode,System.Int32,System.Int32)">
      <summary>Provides an optimized lookup method for site map providers when retrieving an ancestor node for the specified <see cref="T:System.Web.SiteMapNode" /> object and fetching its child nodes.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents an ancestor of <paramref name="node" />; otherwise, null, if the current or ancestor <see cref="T:System.Web.SiteMapNode" /> is not found or cannot be returned for the current user.</returns>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> that acts as a reference point for <paramref name="walkupLevels" /> and <paramref name="relativeDepthFromWalkup" />. </param>
      <param name="walkupLevels">The number of ancestor node levels to traverse when retrieving the requested ancestor node.</param>
      <param name="relativeDepthFromWalkup">The number of descendant node levels to retrieve from the target ancestor node.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified for <paramref name="walkupLevels" /> or <paramref name="relativeDepthFromWalkup" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapProvider.GetRootNodeCore">
      <summary>When overridden in a derived class, retrieves the root node of all the nodes that are currently managed by the current provider. </summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the root node of the set of nodes that the current provider manages. </returns>
    </member>
    <member name="M:System.Web.SiteMapProvider.GetRootNodeCoreFromProvider(System.Web.SiteMapProvider)">
      <summary>Retrieves the root node of all the nodes that are currently managed by the specified site map provider.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the root node of the set of nodes that is managed by <paramref name="provider" />.</returns>
      <param name="provider">The provider that calls the <see cref="M:System.Web.SiteMapProvider.GetRootNodeCore" />.</param>
    </member>
    <member name="M:System.Web.SiteMapProvider.HintAncestorNodes(System.Web.SiteMapNode,System.Int32)">
      <summary>Provides a method that site map providers can override to perform an optimized retrieval of one or more levels of parent and ancestor nodes, relative to the specified <see cref="T:System.Web.SiteMapNode" /> object. </summary>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> that acts as a reference point for <paramref name="upLevel" />.</param>
      <param name="upLevel">The number of ancestor <see cref="T:System.Web.SiteMapNode" /> generations to fetch. 0 indicates no ancestor nodes are retrieved and -1 indicates that all ancestors might be retrieved and cached.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="upLevel" /> is less than -1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapProvider.HintNeighborhoodNodes(System.Web.SiteMapNode,System.Int32,System.Int32)">
      <summary>Provides a method that site map providers can override to perform an optimized retrieval of nodes found in the proximity of the specified node. </summary>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> that acts as a reference point for <paramref name="upLevel" />.</param>
      <param name="upLevel">The number of ancestor <see cref="T:System.Web.SiteMapNode" /> generations to fetch. 0 indicates no ancestor nodes are retrieved and -1 indicates that all ancestors (and their descendant nodes to the level of <paramref name="node" />) might be retrieved and cached.</param>
      <param name="downLevel">The number of descendant <see cref="T:System.Web.SiteMapNode" /> generations to fetch. 0 indicates no descendant nodes are retrieved and -1 indicates that all descendant nodes might be retrieved and cached.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="upLevel" /> or <paramref name="downLevel" /> is less than -1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null.</exception>
    </member>
    <member name="M:System.Web.SiteMapProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes the <see cref="T:System.Web.SiteMapProvider" /> implementation, including any resources that are needed to load site map data from persistent storage.</summary>
      <param name="name">The <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> of the provider to initialize. </param>
      <param name="attributes">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that can contain additional attributes to help initialize the provider. These attributes are read from the site map provider configuration in the Web.config file. </param>
    </member>
    <member name="M:System.Web.SiteMapProvider.IsAccessibleToUser(System.Web.HttpContext,System.Web.SiteMapNode)">
      <summary>Retrieves a Boolean value indicating whether the specified <see cref="T:System.Web.SiteMapNode" /> object can be viewed by the user in the specified context.</summary>
      <returns>true if security trimming is enabled and <paramref name="node" /> can be viewed by the user or security trimming is not enabled; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.Web.HttpContext" /> that contains user information.</param>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> that is requested by the user.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.- or -<paramref name="node" /> is null.</exception>
    </member>
    <member name="P:System.Web.SiteMapProvider.ParentProvider">
      <summary>Gets or sets the parent <see cref="T:System.Web.SiteMapProvider" /> object of the current provider.</summary>
      <returns>The parent provider of the current <see cref="T:System.Web.SiteMapProvider" />.</returns>
    </member>
    <member name="M:System.Web.SiteMapProvider.RemoveNode(System.Web.SiteMapNode)">
      <summary>Removes the specified <see cref="T:System.Web.SiteMapNode" /> object from the node collection that is maintained by the site map provider.</summary>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> to remove from the node collection maintained by the provider.</param>
      <exception cref="T:System.NotImplementedException">In all cases.</exception>
    </member>
    <member name="M:System.Web.SiteMapProvider.ResolveSiteMapNode(System.Web.HttpContext)">
      <summary>Raises the <see cref="E:System.Web.SiteMapProvider.SiteMapResolve" /> event. </summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> provided by the event handler delegate that is registered to handle the event or, if more than one delegate is registered to handle the event, the return value of the last delegate in the delegate chain; otherwise, null. </returns>
      <param name="context">The <see cref="T:System.Web.HttpContext" /> for which the site map currently exists. </param>
    </member>
    <member name="P:System.Web.SiteMapProvider.ResourceKey">
      <summary>Get or sets the resource key that is used for localizing <see cref="T:System.Web.SiteMapNode" /> attributes. </summary>
      <returns>A string containing the resource key name.</returns>
    </member>
    <member name="P:System.Web.SiteMapProvider.RootNode">
      <summary>Gets the root <see cref="T:System.Web.SiteMapNode" /> object of the site map data that the current provider represents.</summary>
      <returns>The root <see cref="T:System.Web.SiteMapNode" /> of the current site map data provider. The default implementation performs security trimming on the returned node.</returns>
    </member>
    <member name="P:System.Web.SiteMapProvider.RootProvider">
      <summary>Gets the root <see cref="T:System.Web.SiteMapProvider" /> object in the current provider hierarchy.</summary>
      <returns>An <see cref="T:System.Web.SiteMapProvider" /> that is the top-level site map provider in the provider hierarchy that the current provider belongs to.</returns>
      <exception cref="T:System.Configuration.Provider.ProviderException">There is a circular reference to the current site map provider. </exception>
    </member>
    <member name="P:System.Web.SiteMapProvider.SecurityTrimmingEnabled">
      <summary>Gets a Boolean value indicating whether a site map provider filters site map nodes based on a user's role.</summary>
      <returns>true if the provider is configured to filter nodes based on role; otherwise, false.</returns>
    </member>
    <member name="E:System.Web.SiteMapProvider.SiteMapResolve">
      <summary>Occurs when the <see cref="P:System.Web.SiteMapProvider.CurrentNode" /> property is called. </summary>
    </member>
    <member name="T:System.Web.SiteMapProviderCollection">
      <summary>Used by the <see cref="T:System.Web.SiteMap" /> class to track the set of <see cref="T:System.Web.SiteMapProvider" /> objects that are available to the <see cref="T:System.Web.SiteMap" /> during site map initialization. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Web.SiteMapProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.SiteMapProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>Adds a <see cref="T:System.Web.SiteMapProvider" /> to the provider collection using the <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> property as the key.</summary>
      <param name="provider">The <see cref="T:System.Web.SiteMapProvider" /> to add. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> of the <see cref="T:System.Web.SiteMapProvider" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> is not an instance of the <see cref="T:System.Web.SiteMapProvider" /> class.- or -A <see cref="T:System.Web.SiteMapProvider" /> with the same name already exists in the <see cref="T:System.Web.SiteMapProviderCollection" />. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapProviderCollection" /> is read-only.</exception>
    </member>
    <member name="M:System.Web.SiteMapProviderCollection.Add(System.Web.SiteMapProvider)">
      <summary>Adds a <see cref="T:System.Web.SiteMapProvider" /> object to the provider collection using the <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> property as the key.</summary>
      <param name="provider">The <see cref="T:System.Web.SiteMapProvider" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapProviderCollection" /> is read-only.</exception>
      <exception cref="T:System.ArgumentException">A <see cref="T:System.Web.SiteMapProvider" /> with the same name already exists in the <see cref="T:System.Web.SiteMapProviderCollection" />.</exception>
    </member>
    <member name="M:System.Web.SiteMapProviderCollection.AddArray(System.Web.SiteMapProvider[])">
      <summary>Adds an array of <see cref="T:System.Web.SiteMapProvider" /> objects into the provider collection using the <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> properties as keys.</summary>
      <param name="providerArray">The array of <see cref="T:System.Web.SiteMapProvider" /> objects to add.</param>
      <exception cref="T:System.ArgumentException">A <see cref="T:System.Web.SiteMapProvider" /> with the same name already exists in the <see cref="T:System.Web.SiteMapProviderCollection" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerArray" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Web.SiteMapProviderCollection" /> is read-only.</exception>
    </member>
    <member name="P:System.Web.SiteMapProviderCollection.Item(System.String)">
      <summary>Gets a <see cref="T:System.Web.SiteMapProvider" /> object with a specific name from the provider collection.</summary>
      <returns>A <see cref="T:System.Web.SiteMapProvider" /> that represents a <see cref="T:System.Web.SiteMapProviderCollection" /> element.</returns>
      <param name="name">The name of the <see cref="T:System.Web.SiteMapProvider" /> to find. </param>
    </member>
    <member name="T:System.Web.SiteMapResolveEventArgs">
      <summary>Provides data for an event that is raised by calling the <see cref="P:System.Web.SiteMapProvider.CurrentNode" /> property of the <see cref="T:System.Web.SiteMapProvider" /> class. </summary>
    </member>
    <member name="M:System.Web.SiteMapResolveEventArgs.#ctor(System.Web.HttpContext,System.Web.SiteMapProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.SiteMapResolveEventArgs" /> class using the specified <see cref="T:System.Web.HttpContext" /> and <see cref="T:System.Web.SiteMapProvider" /> objects. </summary>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that represents the context of the current page request.</param>
      <param name="provider">The <see cref="T:System.Web.SiteMapProvider" /> that raised the <see cref="E:System.Web.SiteMapProvider.SiteMapResolve" /> event.</param>
    </member>
    <member name="P:System.Web.SiteMapResolveEventArgs.Context">
      <summary>Gets the context of the page request that the requested node represents.</summary>
      <returns>An <see cref="T:System.Web.HttpContext" />, if one is specified; otherwise, null.</returns>
    </member>
    <member name="P:System.Web.SiteMapResolveEventArgs.Provider">
      <summary>Gets the <see cref="T:System.Web.SiteMapProvider" /> object that raised the <see cref="E:System.Web.SiteMapProvider.SiteMapResolve" /> event. </summary>
      <returns>The <see cref="T:System.Web.SiteMapProvider" /> that raised the event; otherwise, null, if no provider is specified during the EventArgs object construction.</returns>
    </member>
    <member name="T:System.Web.SiteMapResolveEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Web.SiteMapProvider.SiteMapResolve" /> event of a specific instance of the <see cref="T:System.Web.SiteMapProvider" /> or static <see cref="T:System.Web.SiteMap" /> class.</summary>
      <returns>The <see cref="T:System.Web.SiteMapNode" /> that represents the result of the <see cref="T:System.Web.SiteMapResolveEventHandler" /> operation.</returns>
      <param name="sender">The source of the event, an instance of the <see cref="T:System.Web.SiteMapProvider" /> class.</param>
      <param name="e">A <see cref="T:System.Web.SiteMapResolveEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.StaticSiteMapProvider">
      <summary>Serves as a partial implementation of the abstract <see cref="T:System.Web.SiteMapProvider" /> class and serves as a base class for the <see cref="T:System.Web.XmlSiteMapProvider" /> class, which is the default site map provider in ASP.NET. </summary>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.StaticSiteMapProvider" /> class. </summary>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.AddNode(System.Web.SiteMapNode,System.Web.SiteMapNode)">
      <summary>Adds a <see cref="T:System.Web.SiteMapNode" /> to the collections that are maintained by the site map provider and establishes a parent/child relationship between the <see cref="T:System.Web.SiteMapNode" /> objects.</summary>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> to add to the site map provider. </param>
      <param name="parentNode">The <see cref="T:System.Web.SiteMapNode" /> under which to add <paramref name="node" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Web.SiteMapNode.Url" /> or <see cref="P:System.Web.SiteMapNode.Key" /> is already registered with the <see cref="T:System.Web.StaticSiteMapProvider" />. A site map node must be made up of pages with unique URLs or keys. </exception>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.BuildSiteMap">
      <summary>When overridden in a derived class, loads the site map information from persistent storage and builds it in memory.</summary>
      <returns>The root <see cref="T:System.Web.SiteMapNode" /> of the site map navigation structure.</returns>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.Clear">
      <summary>Removes all elements in the collections of child and parent site map nodes that the <see cref="T:System.Web.StaticSiteMapProvider" /> tracks as part of its state.</summary>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.FindSiteMapNode(System.String)">
      <summary>Retrieves a <see cref="T:System.Web.SiteMapNode" /> object that represents the page at the specified URL.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the page identified by <paramref name="rawURL" />; otherwise, null, if no corresponding site map node is found.</returns>
      <param name="rawUrl">A URL that identifies the page for which to retrieve a <see cref="T:System.Web.SiteMapNode" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawURL" /> is null. </exception>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.FindSiteMapNodeFromKey(System.String)">
      <summary>Retrieves a <see cref="T:System.Web.SiteMapNode" /> object based on a specified key.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the page identified by <paramref name="key" />; otherwise, null, if security trimming is enabled and the site map node cannot be shown to the current user or the site map node is not found in the site map node collection by <paramref name="key" />. </returns>
      <param name="key">A lookup key with which a <see cref="T:System.Web.SiteMapNode" /> is created.</param>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.GetChildNodes(System.Web.SiteMapNode)">
      <summary>Retrieves the child site map nodes of a specific <see cref="T:System.Web.SiteMapNode" /> object.</summary>
      <returns>A read-only <see cref="T:System.Web.SiteMapNodeCollection" /> that contains the child site map nodes of <paramref name="node" />. If security trimming is enabled, the collection contains only site map nodes that the user is permitted to see.</returns>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> for which to retrieve all child site map nodes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null. </exception>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.GetParentNode(System.Web.SiteMapNode)">
      <summary>Retrieves the parent site map node of a specific <see cref="T:System.Web.SiteMapNode" /> object.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the parent of the specified <see cref="T:System.Web.SiteMapNode" />; otherwise, null, if no parent site map node exists or the user is not permitted to see the parent site map node.</returns>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> for which to retrieve the parent site map node. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null. </exception>
    </member>
    <member name="M:System.Web.StaticSiteMapProvider.RemoveNode(System.Web.SiteMapNode)">
      <summary>Removes the specified <see cref="T:System.Web.SiteMapNode" /> object from all site map node collections that are tracked by the site map provider.</summary>
      <param name="node">The site map node to remove from the site map node collections. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null. </exception>
    </member>
    <member name="T:System.Web.TraceContext">
      <summary>Captures and presents execution details about a Web request. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.TraceContext.#ctor(System.Web.HttpContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.TraceContext" /> class.</summary>
      <param name="context">An <see cref="T:System.Web.HttpContext" /> that contains information about the current Web request. </param>
    </member>
    <member name="P:System.Web.TraceContext.IsEnabled">
      <summary>Gets or sets a value indicating whether tracing is enabled for the current Web request.</summary>
      <returns>true if tracing is enabled; otherwise, false. </returns>
    </member>
    <member name="E:System.Web.TraceContext.TraceFinished">
      <summary>Raised by the <see cref="T:System.Web.TraceContext" /> object to expose trace messages after all request information is gathered.</summary>
    </member>
    <member name="P:System.Web.TraceContext.TraceMode">
      <summary>Gets or sets the sorted order in which trace messages should be output to a requesting browser.</summary>
      <returns>One of the <see cref="T:System.Web.TraceMode" /> enumeration values. The default is the setting specified by the traceMode attribute in the trace section of a configuration file, whose default is SortByTime.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The selected value is not one of the <see cref="T:System.Web.TraceMode" /> enumeration values.</exception>
    </member>
    <member name="M:System.Web.TraceContext.Warn(System.String)">
      <summary>Writes a trace message to the trace log. All warnings appear in the log as red text.</summary>
      <param name="message">The trace message to write to the log. </param>
    </member>
    <member name="M:System.Web.TraceContext.Warn(System.String,System.String)">
      <summary>Writes trace information to the trace log, including any user-defined categories and trace messages. All warnings appear in the log as red text.</summary>
      <param name="category">The trace category that receives the message. </param>
      <param name="message">The trace message to write to the log. </param>
    </member>
    <member name="M:System.Web.TraceContext.Warn(System.String,System.String,System.Exception)">
      <summary>Writes trace information to the trace log, including any user-defined categories, trace messages, and error information. All warnings appear in the log as red text.</summary>
      <param name="category">The trace category that receives the message. </param>
      <param name="message">The trace message to write to the log. </param>
      <param name="errorInfo">An <see cref="T:System.Exception" /> that contains information about the error. </param>
    </member>
    <member name="M:System.Web.TraceContext.Write(System.String)">
      <summary>Writes a trace message to the trace log.</summary>
      <param name="message">The trace message to write to the log. </param>
    </member>
    <member name="M:System.Web.TraceContext.Write(System.String,System.String)">
      <summary>Writes trace information to the trace log, including a message and any user-defined categories.</summary>
      <param name="category">The trace category that receives the message. </param>
      <param name="message">The trace message to write to the log. </param>
    </member>
    <member name="M:System.Web.TraceContext.Write(System.String,System.String,System.Exception)">
      <summary>Writes trace information to the trace log, including any user-defined categories, trace messages, and error information.</summary>
      <param name="category">The trace category that receives the message. </param>
      <param name="message">The trace message to write to the log. </param>
      <param name="errorInfo">An <see cref="T:System.Exception" /> that contains information about the error. </param>
    </member>
    <member name="T:System.Web.TraceContextEventArgs">
      <summary>Provides a collection of trace records to any method that handles the <see cref="E:System.Web.TraceContext.TraceFinished" /> event. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.TraceContextEventArgs.#ctor(System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.TraceContextEventArgs" /> class, using the provided collection of trace records.</summary>
      <param name="records">A collection of <see cref="T:System.Web.TraceContextRecord" /> objects that represent all the trace records logged for the current request.</param>
    </member>
    <member name="P:System.Web.TraceContextEventArgs.TraceRecords">
      <summary>Gets a collection of <see cref="T:System.Web.TraceContextRecord" /> messages that are associated with the current request.</summary>
      <returns>A collection of trace records that are associated with the current request.</returns>
    </member>
    <member name="T:System.Web.TraceContextEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Web.TraceContext.TraceFinished" /> event of a <see cref="T:System.Web.TraceContext" /> object. </summary>
      <param name="sender">The event source (the <see cref="T:System.Web.TraceContext" />). </param>
      <param name="e">A <see cref="T:System.Web.TraceContextEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Web.TraceContextRecord">
      <summary>Represents an ASP.NET trace message and any associated data.</summary>
    </member>
    <member name="M:System.Web.TraceContextRecord.#ctor(System.String,System.String,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.TraceContextRecord" /> class. </summary>
      <param name="category">The trace category that receives the message.</param>
      <param name="msg">The trace message.</param>
      <param name="isWarning">true if the method associated with the <see cref="T:System.Web.TraceContextRecord" /> is the <see cref="Overload:System.Web.TraceContext.Warn" /> method; false if the tracing method is the <see cref="Overload:System.Web.TraceContext.Write" /> method.</param>
      <param name="errorInfo">A <see cref="T:System.Exception" /> object that contains additional error information. </param>
    </member>
    <member name="P:System.Web.TraceContextRecord.Category">
      <summary>Gets the user-defined category for the trace record.</summary>
      <returns>A string that represents a category for the trace record.</returns>
    </member>
    <member name="P:System.Web.TraceContextRecord.ErrorInfo">
      <summary>Gets the <see cref="T:System.Exception" /> associated with the trace record, if one is available.</summary>
      <returns>A <see cref="T:System.Exception" /> associated with the trace record, if one exists, or null.</returns>
    </member>
    <member name="P:System.Web.TraceContextRecord.IsWarning">
      <summary>Gets a value indicating whether the trace record is associated with a <see cref="Overload:System.Web.TraceContext.Warn" /> method call.</summary>
      <returns>true if the <see cref="T:System.Web.TraceContextRecord" /> is associated with the <see cref="Overload:System.Web.TraceContext.Warn" /> method call; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.TraceContextRecord.Message">
      <summary>Gets the user-defined trace message.</summary>
      <returns>A string that represents a message for the trace record.</returns>
    </member>
    <member name="T:System.Web.TraceMode">
      <summary>Specifies in what order trace messages are emitted into the HTML output of a page.</summary>
    </member>
    <member name="F:System.Web.TraceMode.SortByTime">
      <summary>Emit trace messages in the order they were processed.</summary>
    </member>
    <member name="F:System.Web.TraceMode.SortByCategory">
      <summary>Emit trace messages alphabetically by category.</summary>
    </member>
    <member name="F:System.Web.TraceMode.Default">
      <summary>Specifies the default value of the <see cref="P:System.Web.TraceContext.TraceMode" /> enumeration, which is <see cref="F:System.Web.TraceMode.SortByTime" />.</summary>
    </member>
    <member name="T:System.Web.VirtualPathUtility">
      <summary>Provides utility methods for common virtual path operations.  </summary>
    </member>
    <member name="M:System.Web.VirtualPathUtility.AppendTrailingSlash(System.String)">
      <summary>Appends the literal slash mark (/) to the end of the virtual path, if one does not already exist.</summary>
      <returns>The modified virtual path.</returns>
      <param name="virtualPath">The virtual path to append the slash mark to.</param>
    </member>
    <member name="M:System.Web.VirtualPathUtility.Combine(System.String,System.String)">
      <summary>Combines a base path and a relative path.</summary>
      <returns>The combined <paramref name="basePath" /> and <paramref name="relativePath" />.</returns>
      <param name="basePath">The base path.</param>
      <param name="relativePath">The relative path.</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="relativePath" /> is a physical path.-or-<paramref name="relativePath" /> includes one or more colons.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relativePath" /> is null or an empty string.-or-<paramref name="basePath" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.GetDirectory(System.String)">
      <summary>Returns the directory portion of a virtual path.</summary>
      <returns>The directory referenced in the virtual path. </returns>
      <param name="virtualPath">The virtual path.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="virtualPath" /> is not rooted. - or -<paramref name="virtualPath" /> is null or an empty string.</exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.GetExtension(System.String)">
      <summary>Retrieves the extension of the file that is referenced in the virtual path.</summary>
      <returns>The file name extension string literal, including the period (.), null, or an empty string ("").</returns>
      <param name="virtualPath">The virtual path.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="virtualPath" /> contains one or more characters that are not valid, as defined in <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.GetFileName(System.String)">
      <summary>Retrieves the file name of the file that is referenced in the virtual path.</summary>
      <returns>The file name literal after the last directory character in <paramref name="virtualPath" />; otherwise, an empty string (""), if the last character of <paramref name="virtualPath" /> is a directory or volume separator character.</returns>
      <param name="virtualPath">The virtual path. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="virtualPath" /> contains one or more characters that are not valid, as defined in <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.IsAbsolute(System.String)">
      <summary>Returns a Boolean value indicating whether the specified virtual path is absolute; that is, it starts with a literal slash mark (/).</summary>
      <returns>true if <paramref name="virtualPath" /> is an absolute path and is not null or an empty string (""); otherwise, false.</returns>
      <param name="virtualPath">The virtual path to check. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.IsAppRelative(System.String)">
      <summary>Returns a Boolean value indicating whether the specified virtual path is relative to the application.</summary>
      <returns>true if <paramref name="virtualPath" /> is relative to the application; otherwise, false.</returns>
      <param name="virtualPath">The virtual path to check. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.MakeRelative(System.String,System.String)">
      <summary>Returns the relative virtual path from one virtual path containing the root operator (the tilde [~]) to another.</summary>
      <returns>The relative virtual path from <paramref name="fromPath" /> to <paramref name="toPath" />.</returns>
      <param name="fromPath">The starting virtual path to return the relative virtual path from.</param>
      <param name="toPath">The ending virtual path to return the relative virtual path to.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromPath" /> is not rooted.- or -<paramref name="toPath" /> is not rooted.</exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.RemoveTrailingSlash(System.String)">
      <summary>Removes a trailing slash mark (/) from a virtual path.</summary>
      <returns>A virtual path without a trailing slash mark, if the virtual path is not already the root directory ("/"); otherwise, null.</returns>
      <param name="virtualPath">The virtual path to remove any trailing slash mark from. </param>
    </member>
    <member name="M:System.Web.VirtualPathUtility.ToAbsolute(System.String)">
      <summary>Converts a virtual path to an application absolute path.</summary>
      <returns>The absolute path representation of the specified virtual path. </returns>
      <param name="virtualPath">The virtual path to convert to an application-relative path. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="virtualPath" /> is not rooted. </exception>
      <exception cref="T:System.Web.HttpException">A leading double period (..) is used to exit above the top directory.</exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.ToAbsolute(System.String,System.String)">
      <summary>Converts a virtual path to an application absolute path using the specified application path.</summary>
      <returns>The absolute virtual path representation of <paramref name="virtualPath" />.</returns>
      <param name="virtualPath">The virtual path to convert to an application-relative path.</param>
      <param name="applicationPath">The application path to use to convert <paramref name="virtualPath" /> to a relative path.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="applicationPath" /> is not rooted.</exception>
      <exception cref="T:System.Web.HttpException">A leading double period (..) is used in the application path to exit above the top directory.</exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.ToAppRelative(System.String)">
      <summary>Converts a virtual path to an application-relative path using the application virtual path that is in the <see cref="P:System.Web.HttpRuntime.AppDomainAppVirtualPath" /> property. </summary>
      <returns>The application-relative path representation of <paramref name="virtualPath" />.</returns>
      <param name="virtualPath">The virtual path to convert to an application-relative path. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="virtualPath" /> is null. </exception>
    </member>
    <member name="M:System.Web.VirtualPathUtility.ToAppRelative(System.String,System.String)">
      <summary>Converts a virtual path to an application-relative path using a specified application path.</summary>
      <returns>The application-relative path representation of <paramref name="virtualPath" />.</returns>
      <param name="virtualPath">The virtual path to convert to an application-relative path. </param>
      <param name="applicationPath">The application path to use to convert <paramref name="virtualPath" /> to a relative path. </param>
    </member>
    <member name="T:System.Web.WebPageTraceListener">
      <summary>Provides a listener that directs <see cref="T:System.Diagnostics.Trace" /> messages to ASP.NET Web page outputs. </summary>
    </member>
    <member name="M:System.Web.WebPageTraceListener.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.WebPageTraceListener" /> class.</summary>
    </member>
    <member name="M:System.Web.WebPageTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>Writes an event message to a Web page or to the ASP.NET trace viewer using the specified system and event data.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process and  thread IDs and stack trace information.</param>
      <param name="source">A category name used to organize the output. </param>
      <param name="severity">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:System.Web.WebPageTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>Writes a localized event message to a Web page or to the ASP.NET trace viewer using the specified system and event data.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process and thread IDs and stack trace information.</param>
      <param name="source">A category name used to organize the output. </param>
      <param name="severity">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A format string that contains zero or more format items, which correspond to objects in <paramref name="args" />.</param>
      <param name="args">An array of zero or more objects to format.</param>
    </member>
    <member name="M:System.Web.WebPageTraceListener.Write(System.String)">
      <summary>Writes a message to a Web page or to the ASP.NET trace viewer.</summary>
      <param name="message">The message to write.</param>
    </member>
    <member name="M:System.Web.WebPageTraceListener.Write(System.String,System.String)">
      <summary>Writes a category name and a message to a Web page or to the ASP.NET trace viewer.</summary>
      <param name="message">The message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="M:System.Web.WebPageTraceListener.WriteLine(System.String)">
      <summary>Writes a message to a Web page or to the ASP.NET trace viewer.</summary>
      <param name="message">The message to write.</param>
    </member>
    <member name="M:System.Web.WebPageTraceListener.WriteLine(System.String,System.String)">
      <summary>Writes a category name and a message to a Web page or to the ASP.NET trace viewer.</summary>
      <param name="message">The message to write.</param>
      <param name="category">A category name used to organize the output.</param>
    </member>
    <member name="T:System.Web.XmlSiteMapProvider">
      <summary>The <see cref="T:System.Web.XmlSiteMapProvider" /> class is derived from the <see cref="T:System.Web.SiteMapProvider" /> class and is the default site map provider for ASP.NET. The <see cref="T:System.Web.XmlSiteMapProvider" /> class generates site map trees from XML files with the file name extension .sitemap.</summary>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.#ctor">
      <summary>Creates a new, unnamed, instance of the <see cref="T:System.Web.XmlSiteMapProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.AddNode(System.Web.SiteMapNode,System.Web.SiteMapNode)">
      <summary>Adds a <see cref="T:System.Web.SiteMapNode" /> object to the collections that are maintained by the current provider.</summary>
      <param name="node">The <see cref="T:System.Web.SiteMapNode" /> to add to the provider.</param>
      <param name="parentNode">The <see cref="T:System.Web.SiteMapNode" /> under which to add <paramref name="node" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> or <paramref name="parentNode" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Web.XmlSiteMapProvider" /> is not the provider associated with <paramref name="node" />.</exception>
      <exception cref="T:System.InvalidOperationException">A node with the same URL or key is already registered with the <see cref="T:System.Web.XmlSiteMapProvider" />. - or -A duplicate site map node has been encountered programmatically, such as when linking two site map providers.- or -<paramref name="node" /> is the root node of the <see cref="T:System.Web.XmlSiteMapProvider" />.</exception>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.AddProvider(System.String,System.Web.SiteMapNode)">
      <summary>Links a child site map provider to the current provider. </summary>
      <param name="providerName">The name of one of the <see cref="T:System.Web.SiteMapProvider" /> objects currently registered in the <see cref="P:System.Web.SiteMap.Providers" />.</param>
      <param name="parentNode">A site map node of the current site map provider under which the root node and all nodes of the child provider is added.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Web.SiteMapNode.Provider" /> property of the <paramref name="parentNode" /> does not reference the current provider. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentNode" /> is null.</exception>
      <exception cref="T:System.Configuration.Provider.ProviderException">
        <paramref name="providerName" /> cannot be resolved.</exception>
      <exception cref="T:System.InvalidOperationException">The site map file used by <paramref name="providerName" /> is already in use within the provider hierarchy. -or-The root node returned by <paramref name="providerName" /> is null.-or-The root node returned by <paramref name="providerName" /> has a URL or key that is already registered with the parent <see cref="T:System.Web.XmlSiteMapProvider" />.   </exception>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.BuildSiteMap">
      <summary>Loads the site map information from an XML file and builds it in memory.</summary>
      <returns>Returns the root <see cref="T:System.Web.SiteMapNode" /> of the site map navigation structure.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.XmlSiteMapProvider" /> was not initialized properly.- or -A siteMapFile is parsed for a &lt;siteMapNode&gt; that is not unique.- or -The file specified by the siteMapFile does not have the file name extension .sitemap.- or -The file specified by the siteMapFile does not exist.- or -A provider configured in the provider of a &lt;siteMapNode&gt; returns a null root node. </exception>
      <exception cref="T:System.ArgumentException">The siteMapFile is specified but the path lies outside the current directory structure for the application.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">There is an error loading the configuration file.- or -The top element of the configuration file is not named &lt;siteMap&gt;.- or - More than one top node exists in the configuration file.- or -A child of the &lt;siteMap&gt; has a name other than &lt;siteMapNode&gt;. - or -An unexpected attribute is parsed for the &lt;siteMapNode&gt;.- or -Sub-elements are nested beneath a &lt;siteMapNode&gt; where the provider is set.- or -The roles of the &lt;siteMapNode&gt; contain characters that are not valid.- or - A url is parsed for a &lt;siteMapNode&gt; that is not unique.- or - A <see cref="T:System.Web.SiteMapNode" /> was encountered with a duplicate value for <see cref="P:System.Web.SiteMapNode.Key" />. - or -The <see cref="P:System.Web.SiteMapNode.ResourceKey" /> or <see cref="P:System.Web.SiteMapNode.Title" /> was specified on a <see cref="T:System.Web.SiteMapNode" /> or a custom attribute defined for the node contained an explicit resource expression.- or -An explicit resource expression was applied either to the <see cref="P:System.Web.SiteMapNode.Title" /> or <see cref="P:System.Web.SiteMapNode.Description" /> or to a custom attribute of a <see cref="T:System.Web.SiteMapNode" /> but the explicit information was not valid.- or -An error occurred while parsing the <see cref="P:System.Web.SiteMapNode.Url" /> of a <see cref="T:System.Web.SiteMapNode" />.</exception>
      <exception cref="T:System.Configuration.Provider.ProviderException">A named provider cannot be found in the current site map providers collection. </exception>
      <exception cref="T:System.ArgumentNullException">A &lt;siteMapNode&gt; referencing a site map file contains an empty string for the siteMapFile.</exception>
      <exception cref="T:System.Web.HttpException">A siteMapFile of a &lt;siteMapNode&gt; uses a physical path.- or -An error occurred while attempting to parse the virtual path to the file specified in the siteMapFile.</exception>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.Clear">
      <summary>Removes all elements in the collections of child and parent site map nodes and site map providers that the <see cref="T:System.Web.XmlSiteMapProvider" /> object internally tracks as part of its state.</summary>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.Dispose">
      <summary>Notifies the file monitor of the Web.sitemap file that the <see cref="T:System.Web.XmlSiteMapProvider" /> object no longer requires the file to be monitored.</summary>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.Dispose(System.Boolean)">
      <summary>Notifies the file monitor of the Web.sitemap file that the <see cref="T:System.Web.XmlSiteMapProvider" /> object no longer requires the file to be monitored. The <see cref="M:System.Web.XmlSiteMapProvider.Dispose(System.Boolean)" /> method takes a Boolean parameter indicating whether the method is called by user code.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.FindSiteMapNode(System.String)">
      <summary>Retrieves a <see cref="T:System.Web.SiteMapNode" /> object that represents the page at the specified URL.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the page identified by <paramref name="rawURL" />.</returns>
      <param name="rawUrl">A URL that identifies the page for which to retrieve a <see cref="T:System.Web.SiteMapNode" />. </param>
      <exception cref="T:System.Configuration.Provider.ProviderException">A child provider linked to the current site map provider returned a node that is not valid.</exception>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.FindSiteMapNodeFromKey(System.String)">
      <summary>Retrieves a <see cref="T:System.Web.SiteMapNode" /> object based on a specified key.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the page identified by <paramref name="key" />; otherwise, null, if security trimming is enabled and the node cannot be shown to the current user or the node is not found by <paramref name="key" /> in the node collection.</returns>
      <param name="key">A lookup key with which to search for a <see cref="T:System.Web.SiteMapNode" />.</param>
      <exception cref="T:System.Configuration.Provider.ProviderException">A child provider linked to the current site map provider returned a node that is not valid.</exception>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.GetRootNodeCore">
      <summary>Retrieves the top-level node of the current site map data structure.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the top-level node in the current site map data structure.</returns>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes the <see cref="T:System.Web.XmlSiteMapProvider" /> object. The <see cref="M:System.Web.XmlSiteMapProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> method does not actually build a site map, it only prepares the state of the <see cref="T:System.Web.XmlSiteMapProvider" /> to do so.</summary>
      <param name="name">The <see cref="T:System.Web.XmlSiteMapProvider" /> to initialize. </param>
      <param name="attributes">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that can contain additional attributes to help initialize <paramref name="name" />. These attributes are read from the <see cref="T:System.Web.XmlSiteMapProvider" /> configuration in the Web.config file. </param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.XmlSiteMapProvider" /> is initialized more than once.</exception>
      <exception cref="T:System.Web.HttpException">A <see cref="T:System.Web.SiteMapNode" /> used a physical path to reference a site map file.- or -An error occurred while attempting to parse the virtual path supplied for the siteMapFile attribute.</exception>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.RemoveNode(System.Web.SiteMapNode)">
      <summary>Removes the specified <see cref="T:System.Web.SiteMapNode" /> object from all node collections that are tracked by the provider.</summary>
      <param name="node">The node to remove from the node collections.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is the root node of the site map provider that owns it.- or -<paramref name="node" /> is not managed by the provider or by a provider in the chain of parent providers for this provider.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> is null. </exception>
    </member>
    <member name="M:System.Web.XmlSiteMapProvider.RemoveProvider(System.String)">
      <summary>Removes a linked child site map provider from the hierarchy for the current provider.</summary>
      <param name="providerName">The name of one of the <see cref="T:System.Web.SiteMapProvider" /> objects currently registered in the <see cref="P:System.Web.SiteMap.Providers" />.</param>
      <exception cref="T:System.Configuration.Provider.ProviderException">
        <paramref name="providerName" /> cannot be resolved.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="providerName" /> is not a registered child provider of the current site map provider.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerName" /> is null.</exception>
    </member>
    <member name="P:System.Web.XmlSiteMapProvider.RootNode">
      <summary>Gets the root node of the site map.</summary>
      <returns>A <see cref="T:System.Web.SiteMapNode" /> that represents the root node of the site map; otherwise, null, if security trimming is enabled and the root node is not accessible to the current user.</returns>
    </member>
    <member name="T:System.Web.Caching.AggregateCacheDependency">
      <summary>Combines multiple dependencies between an item stored in an ASP.NET application's <see cref="T:System.Web.Caching.Cache" /> object and an array of <see cref="T:System.Web.Caching.CacheDependency" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Caching.AggregateCacheDependency.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.AggregateCacheDependency" /> class.</summary>
    </member>
    <member name="M:System.Web.Caching.AggregateCacheDependency.Add(System.Web.Caching.CacheDependency[])">
      <summary>Adds an array of <see cref="T:System.Web.Caching.CacheDependency" /> objects to the <see cref="T:System.Web.Caching.AggregateCacheDependency" /> object.</summary>
      <param name="dependencies">The array of <see cref="T:System.Web.Caching.CacheDependency" />  objects to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencies" /> is null.- or -A <see cref="T:System.Web.Caching.CacheDependency" /> object in <paramref name="dependencies" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Web.Caching.CacheDependency" /> object is referenced from more than one <see cref="T:System.Web.Caching.Cache" /> entry.</exception>
    </member>
    <member name="M:System.Web.Caching.AggregateCacheDependency.GetUniqueID">
      <summary>Retrieves a unique identifier for the <see cref="T:System.Web.Caching.AggregateCacheDependency" /> object.</summary>
      <returns>The unique identifier for the <see cref="T:System.Web.Caching.AggregateCacheDependency" /> object. If one of the associated dependency objects does not have a unique identifier, the <see cref="M:System.Web.Caching.AggregateCacheDependency.GetUniqueId" /> method returns null.</returns>
    </member>
    <member name="T:System.Web.Caching.Cache">
      <summary>Implements the cache for a Web application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Caching.Cache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.Cache" /> class.</summary>
    </member>
    <member name="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
      <summary>Adds the specified item to the <see cref="T:System.Web.Caching.Cache" /> object with dependencies, expiration and priority policies, and a delegate you can use to notify your application when the inserted item is removed from the Cache.</summary>
      <returns>An object that represents the item that was added if the item was previously stored in the cache; otherwise, null.</returns>
      <param name="key">The cache key used to reference the item. </param>
      <param name="value">The item to be added to the cache. </param>
      <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
      <param name="absoluteExpiration">The time at which the added object expires and is removed from the cache. If you are using sliding expiration, the <paramref name="absoluteExpiration" /> parameter must be <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
      <param name="slidingExpiration">The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed. If you are using absolute expiration, the <paramref name="slidingExpiration" /> parameter must be <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
      <param name="priority">The relative cost of the object, as expressed by the <see cref="T:System.Web.Caching.CacheItemPriority" /> enumeration. The cache uses this value when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost. </param>
      <param name="onRemoveCallback">A delegate that, if provided, is called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> or <paramref name="value" /> parameter is set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="slidingExpiration" /> parameter is set to less than TimeSpan.Zero or more than one year.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="absoluteExpiration" /> and <paramref name="slidingExpiration" /> parameters are both set for the item you are trying to add to the Cache.</exception>
    </member>
    <member name="P:System.Web.Caching.Cache.Count">
      <summary>Gets the number of items stored in the cache.</summary>
      <returns>The number of items stored in the cache.</returns>
    </member>
    <member name="P:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit">
      <summary>Gets the percentage of physical memory that can be consumed by an application before ASP.NET starts removing items from the cache.</summary>
      <returns>The percentage of physical memory available to the application.</returns>
    </member>
    <member name="P:System.Web.Caching.Cache.EffectivePrivateBytesLimit">
      <summary>Gets the number of bytes available for the cache.</summary>
      <returns>The number of bytes available for the cache.</returns>
    </member>
    <member name="M:System.Web.Caching.Cache.Get(System.String)">
      <summary>Retrieves the specified item from the <see cref="T:System.Web.Caching.Cache" /> object.</summary>
      <returns>The retrieved cache item, or null if the key is not found.</returns>
      <param name="key">The identifier for the cache item to retrieve.</param>
    </member>
    <member name="M:System.Web.Caching.Cache.GetEnumerator">
      <summary>Retrieves a dictionary enumerator used to iterate through the key settings and their values contained in the cache.</summary>
      <returns>An enumerator to iterate through the <see cref="T:System.Web.Caching.Cache" /> object.</returns>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object)">
      <summary>Inserts an item into the <see cref="T:System.Web.Caching.Cache" /> object with a cache key to reference its location, using default values provided by the <see cref="T:System.Web.Caching.CacheItemPriority" /> enumeration.</summary>
      <param name="key">The cache key used to reference the item. </param>
      <param name="value">The object to be inserted into the cache.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> or <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
      <summary>Inserts an object into the <see cref="T:System.Web.Caching.Cache" /> that has file or key dependencies.</summary>
      <param name="key">The cache key used to identify the item.</param>
      <param name="value">The object to be inserted in the cache.</param>
      <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> or <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
      <summary>Inserts an object into the <see cref="T:System.Web.Caching.Cache" /> with dependencies and expiration policies.</summary>
      <param name="key">The cache key used to reference the object. </param>
      <param name="value">The object to be inserted in the cache. </param>
      <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
      <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. To avoid possible issues with local time such as changes from standard time to daylight saving time, use <see cref="P:System.DateTime.UtcNow" /> rather than <see cref="P:System.DateTime.Now" /> for this parameter value. If you are using absolute expiration, the <paramref name="slidingExpiration" /> parameter must be <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
      <param name="slidingExpiration">The interval between the time the inserted object is last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the <paramref name="absoluteExpiration" /> parameter must be <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> or <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">You set the <paramref name="slidingExpiration" /> parameter to less than TimeSpan.Zero or the equivalent of more than one year.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="absoluteExpiration" /> and <paramref name="slidingExpiration" /> parameters are both set for the item you are trying to add to the Cache.</exception>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
      <summary>Inserts an object into the <see cref="T:System.Web.Caching.Cache" /> object with dependencies, expiration and priority policies, and a delegate you can use to notify your application when the inserted item is removed from the Cache.</summary>
      <param name="key">The cache key used to reference the object.</param>
      <param name="value">The object to be inserted in the cache.</param>
      <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
      <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. To avoid possible issues with local time such as changes from standard time to daylight saving time, use <see cref="P:System.DateTime.UtcNow" /> rather than <see cref="P:System.DateTime.Now" /> for this parameter value. If you are using absolute expiration, the <paramref name="slidingExpiration" /> parameter must be <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
      <param name="slidingExpiration">The interval between the time the inserted object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the <paramref name="absoluteExpiration" /> parameter must be <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
      <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the <see cref="T:System.Web.Caching.CacheItemPriority" /> enumeration. This value is used by the cache when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
      <param name="onRemoveCallback">A delegate that, if provided, will be called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> or <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">You set the <paramref name="slidingExpiration" /> parameter to less than TimeSpan.Zero or the equivalent of more than one year.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="absoluteExpiration" /> and <paramref name="slidingExpiration" /> parameters are both set for the item you are trying to add to the Cache.</exception>
    </member>
    <member name="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemUpdateCallback)">
      <summary>Inserts an object into the <see cref="T:System.Web.Caching.Cache" /> object together with dependencies, expiration policies, and a delegate that you can use to notify the application before the item is removed from the cache.</summary>
      <param name="key">The cache key that is used to reference the object.</param>
      <param name="value">The object to insert into the cache.</param>
      <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
      <param name="absoluteExpiration">The time at which the inserted object expires and is removed from the cache. To avoid possible issues with local time such as changes from standard time to daylight saving time, use <see cref="P:System.DateTime.UtcNow" /> instead of <see cref="P:System.DateTime.Now" /> for this parameter value. If you are using absolute expiration, the <paramref name="slidingExpiration" /> parameter must be set to <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
      <param name="slidingExpiration">The interval between the time that the cached object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object will expire and be removed from the cache 20 minutes after it was last accessed. If you are using sliding expiration, the <paramref name="absoluteExpiration" /> parameter must be set to <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
      <param name="onUpdateCallback">A delegate that will be called before the object is removed from the cache. You can use this to update the cached item and ensure that it is not removed from the cache.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" />, <paramref name="value" />, or <paramref name="onUpdateCallback" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">You set the <paramref name="slidingExpiration" /> parameter to less than TimeSpan.Zero or the equivalent of more than one year.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="absoluteExpiration" /> and <paramref name="slidingExpiration" /> parameters are both set for the item you are trying to add to the Cache.-or-The <paramref name="dependencies" /> parameter is null, and the <paramref name="absoluteExpiration" /> parameter is set to <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />, and the <paramref name="slidingExpiration" /> parameter is set to <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</exception>
    </member>
    <member name="P:System.Web.Caching.Cache.Item(System.String)">
      <summary>Gets or sets the cache item at the specified key.</summary>
      <returns>The specified cache item.</returns>
      <param name="key">A <see cref="T:System.String" /> object that represents the key for the cache item.</param>
    </member>
    <member name="F:System.Web.Caching.Cache.NoAbsoluteExpiration">
      <summary>Used in the <paramref name="absoluteExpiration" /> parameter in an <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> method call to indicate the item should never expire. This field is read-only.</summary>
    </member>
    <member name="F:System.Web.Caching.Cache.NoSlidingExpiration">
      <summary>Used as the <paramref name="slidingExpiration" /> parameter in an <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> or <see cref="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" /> method call to disable sliding expirations. This field is read-only.</summary>
    </member>
    <member name="M:System.Web.Caching.Cache.Remove(System.String)">
      <summary>Removes the specified item from the application's <see cref="T:System.Web.Caching.Cache" /> object.</summary>
      <returns>The item removed from the Cache. If the value in the key parameter is not found, returns null.</returns>
      <param name="key">A <see cref="T:System.String" /> identifier for the cache item to remove.</param>
    </member>
    <member name="M:System.Web.Caching.Cache.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Web.Caching.Cache" /> object collection.</summary>
      <returns>An enumerator that can iterate through the <see cref="T:System.Web.Caching.Cache" /> object collection.</returns>
    </member>
    <member name="T:System.Web.Caching.CacheDependency">
      <summary>Establishes a dependency relationship between an item stored in an ASP.NET application's <see cref="T:System.Web.Caching.Cache" /> object and a file, cache key, an array of either, or another <see cref="T:System.Web.Caching.CacheDependency" /> object. The <see cref="T:System.Web.Caching.CacheDependency" /> class monitors the dependency relationships so that when any of them changes, the cached item will be automatically removed.</summary>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class.</summary>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors a file or directory for changes.</summary>
      <param name="filename">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors a file or directory for changes.</summary>
      <param name="filename">The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache. </param>
      <param name="start">The time against which to check the last modified date of the directory or file. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories) for changes.</summary>
      <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories) for changes and specifies a time when change monitoring begins.</summary>
      <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache. </param>
      <param name="start">The time against which to check the last modified date of the objects in the array. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.</summary>
      <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache. </param>
      <param name="cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.</summary>
      <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache. </param>
      <param name="cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache. </param>
      <param name="start">The date and time against which to check the last modified date of the objects passed in the <paramref name="filenames" /> and <paramref name="cachekeys" /> arrays. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes. It also makes itself dependent upon a separate instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class.</summary>
      <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache. </param>
      <param name="cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache. </param>
      <param name="dependency">Another instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that this instance is dependent upon. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes. It also makes itself dependent upon another instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class and a time when the change monitoring begins.</summary>
      <param name="filenames">An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache. </param>
      <param name="cachekeys">An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache. </param>
      <param name="dependency">Another instance of the <see cref="T:System.Web.Caching.CacheDependency" /> class that this instance is dependent upon. </param>
      <param name="start">The time against which to check the last modified date of the objects in the arrays and the <see cref="T:System.Web.Caching.CacheDependency" /> object. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.DependencyDispose">
      <summary>Releases the resources used by the <see cref="T:System.Web.Caching.CacheDependency" /> class and any classes that derive from <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Web.Caching.CacheDependency" /> object.</summary>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.FinishInit">
      <summary>Completes initialization of the <see cref="T:System.Web.Caching.CacheDependency" /> object.</summary>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.GetUniqueID">
      <summary>Retrieves a unique identifier for a <see cref="T:System.Web.Caching.CacheDependency" /> object.</summary>
      <returns>The unique identifier for the <see cref="T:System.Web.Caching.CacheDependency" /> object.</returns>
    </member>
    <member name="P:System.Web.Caching.CacheDependency.HasChanged">
      <summary>Gets a value indicating whether the <see cref="T:System.Web.Caching.CacheDependency" /> object has changed.</summary>
      <returns>true if the <see cref="T:System.Web.Caching.CacheDependency" /> object has changed; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
      <summary>Notifies the base <see cref="T:System.Web.Caching.CacheDependency" /> object that the dependency represented by a derived <see cref="T:System.Web.Caching.CacheDependency" /> class has changed.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.EventArgs" /> object that contains the event data. </param>
    </member>
    <member name="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)">
      <summary>Marks the time when a dependency last changed.</summary>
      <param name="utcLastModified">The time when the dependency last changed. </param>
    </member>
    <member name="P:System.Web.Caching.CacheDependency.UtcLastModified">
      <summary>Gets the time when the dependency was last changed.</summary>
      <returns>The time when the dependency was last changed.</returns>
    </member>
    <member name="T:System.Web.Caching.CacheItemPriority">
      <summary>Specifies the relative priority of items stored in the <see cref="T:System.Web.Caching.Cache" /> object.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.Low">
      <summary>Cache items with this priority level are the most likely to be deleted from the cache as the server frees system memory.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.BelowNormal">
      <summary>Cache items with this priority level are more likely to be deleted from the cache as the server frees system memory than items assigned a <see cref="F:System.Web.Caching.CacheItemPriority.Normal" /> priority.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.Normal">
      <summary>Cache items with this priority level are likely to be deleted from the cache as the server frees system memory only after those items with <see cref="F:System.Web.Caching.CacheItemPriority.Low" /> or <see cref="F:System.Web.Caching.CacheItemPriority.BelowNormal" /> priority. This is the default.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.AboveNormal">
      <summary>Cache items with this priority level are less likely to be deleted as the server frees system memory than those assigned a <see cref="F:System.Web.Caching.CacheItemPriority.Normal" /> priority.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.High">
      <summary>Cache items with this priority level are the least likely to be deleted from the cache as the server frees system memory.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.NotRemovable">
      <summary>The cache items with this priority level will not be automatically deleted from the cache as the server frees system memory. However, items with this priority level are removed along with other items according to the item's absolute or sliding expiration time. </summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemPriority.Default">
      <summary>The default value for a cached item's priority is <see cref="F:System.Web.Caching.CacheItemPriority.Normal" />.</summary>
    </member>
    <member name="T:System.Web.Caching.CacheItemRemovedCallback">
      <summary>Defines a callback method for notifying applications when a cached item is removed from the <see cref="T:System.Web.Caching.Cache" />.</summary>
      <param name="key">The key that is removed from the cache. </param>
      <param name="value">The <see cref="T:System.Object" /> item associated with the key removed from the cache. </param>
      <param name="reason">The reason the item was removed from the cache, as specified by the <see cref="T:System.Web.Caching.CacheItemRemovedReason" /> enumeration. </param>
    </member>
    <member name="T:System.Web.Caching.CacheItemRemovedReason">
      <summary>Specifies the reason an item was removed from the <see cref="T:System.Web.Caching.Cache" />.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemRemovedReason.Removed">
      <summary>The item is removed from the cache by a <see cref="M:System.Web.Caching.Cache.Remove(System.String)" /> method call or by an <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> method call that specified the same key.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemRemovedReason.Expired">
      <summary>The item is removed from the cache because it expired.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemRemovedReason.Underused">
      <summary>The item is removed from the cache because the system removed it to free memory.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged">
      <summary>The item is removed from the cache because the cache dependency associated with it changed.</summary>
    </member>
    <member name="T:System.Web.Caching.CacheItemUpdateCallback">
      <summary>Defines a callback method for notifying applications before a cached item is removed from the cache.</summary>
      <param name="key">The identifier of the item that is being removed from the cache.</param>
      <param name="reason">The reason that the item is being removed from the cache.</param>
      <param name="expensiveObject">When this method returns, contains the cached item object that contains the updates.</param>
      <param name="dependency">When this method returns, contains the object that defines the dependency between the item object and a file, a cache key, an array of either, or another <see cref="T:System.Web.Caching.CacheDependency" /> object.</param>
      <param name="absoluteExpiration">When this method returns, contains the time at which the object expired.</param>
      <param name="slidingExpiration">When this method returns, contains the interval between the time that the object was last accessed and the time at which the object expired.</param>
    </member>
    <member name="T:System.Web.Caching.CacheItemUpdateReason">
      <summary>Specifies the reason that a cached item is being removed from the <see cref="T:System.Web.Caching.Cache" /> object.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemUpdateReason.Expired">
      <summary>Specifies that the item is being removed from the cache because the absolute or sliding expiration interval expired.</summary>
    </member>
    <member name="F:System.Web.Caching.CacheItemUpdateReason.DependencyChanged">
      <summary>Specifies that the item is being removed from the cache because the associated <see cref="T:System.Web.Caching.CacheDependency" /> object changed.</summary>
    </member>
    <member name="T:System.Web.Caching.DatabaseNotEnabledForNotificationException">
      <summary>The exception that is thrown when a SQL Server database is not enabled to support dependencies associated with the <see cref="T:System.Web.Caching.SqlCacheDependency" /> class. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Web.Caching.DatabaseNotEnabledForNotificationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException" /> class.</summary>
    </member>
    <member name="M:System.Web.Caching.DatabaseNotEnabledForNotificationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException" /> class.</summary>
      <param name="message">A string that describes the error. </param>
    </member>
    <member name="M:System.Web.Caching.DatabaseNotEnabledForNotificationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Web.Caching.FileResponseElement">
      <summary>Represents part of an output-cache entry, stored as a file.</summary>
    </member>
    <member name="M:System.Web.Caching.FileResponseElement.#ctor(System.String,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.FileResponseElement" /> class. </summary>
      <param name="path">The fully qualified path for the file.</param>
      <param name="offset">The position in the file where the string starts.</param>
      <param name="length">The length of the data, starting at the offset that represents the output-cache data in the file defined by <paramref name="path" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
    </member>
    <member name="P:System.Web.Caching.FileResponseElement.Length">
      <summary>Gets the size of the data, starting at the offset that contains the data for a <see cref="T:System.Web.Caching.FileResponseElement" /> instance.</summary>
      <returns>The size of the data.</returns>
    </member>
    <member name="P:System.Web.Caching.FileResponseElement.Offset">
      <summary>Gets the position in the file where the data from a <see cref="T:System.Web.Caching.FileResponseElement" /> instance starts. </summary>
      <returns>The starting point of the data in the file.</returns>
    </member>
    <member name="P:System.Web.Caching.FileResponseElement.Path">
      <summary>Gets the location of the file that contains data from a <see cref="T:System.Web.Caching.FileResponseElement" /> instance.</summary>
      <returns>The fully qualified path of the file.</returns>
    </member>
    <member name="T:System.Web.Caching.HeaderElement">
      <summary>Represents a single HTTP header that is included in a response from the output cache.</summary>
    </member>
    <member name="M:System.Web.Caching.HeaderElement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.HeaderElement" /> class. </summary>
      <param name="name">The name of the HTTP header.</param>
      <param name="value">The value of the HTTP header.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="P:System.Web.Caching.HeaderElement.Name">
      <summary>Gets the name of an HTTP header that is in the output cache.</summary>
      <returns>The name of the HTTP header. </returns>
    </member>
    <member name="P:System.Web.Caching.HeaderElement.Value">
      <summary>Gets the value of an HTTP header that is in the output cache.</summary>
      <returns>The value of the HTTP header.</returns>
    </member>
    <member name="T:System.Web.Caching.IOutputCacheEntry">
      <summary>Defines collections of HTTP header and response elements that together make up one kind of output-cached data that ASP.NET can pass to a provider. </summary>
    </member>
    <member name="P:System.Web.Caching.IOutputCacheEntry.HeaderElements">
      <summary>Gets the collection of HTTP header elements in an output-cache entry.</summary>
      <returns>A list of HTTP header elements.</returns>
    </member>
    <member name="P:System.Web.Caching.IOutputCacheEntry.ResponseElements">
      <summary>Gets the collection of HTTP response elements in an output-cache entry.</summary>
      <returns>A list of HTTP response elements.</returns>
    </member>
    <member name="T:System.Web.Caching.MemoryResponseElement">
      <summary>Represents part of an output-cache entry that is stored in memory.</summary>
    </member>
    <member name="M:System.Web.Caching.MemoryResponseElement.#ctor(System.Byte[],System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.MemoryResponseElement" /> class.</summary>
      <param name="buffer">An array of bytes that contains a part of an output-cache response. </param>
      <param name="length">The size of the array in <paramref name="buffer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero or greater than the size of <paramref name="buffer" />.</exception>
    </member>
    <member name="P:System.Web.Caching.MemoryResponseElement.Buffer">
      <summary>Gets an array that contains all or part of an output-cache response.</summary>
      <returns>An array of byte objects.</returns>
    </member>
    <member name="P:System.Web.Caching.MemoryResponseElement.Length">
      <summary>Gets the size of the array that is referenced by the <see cref="P:System.Web.Caching.MemoryResponseElement.Buffer" /> property.</summary>
      <returns>The size of the array.</returns>
    </member>
    <member name="T:System.Web.Caching.OutputCache">
      <summary>Provides programmatic access to the output-cache providers that are specified in the configuration file for a Web site. </summary>
    </member>
    <member name="P:System.Web.Caching.OutputCache.DefaultProviderName">
      <summary>Gets the name of the default provider that is configured for the output cache.</summary>
      <returns>The name of the default provider.</returns>
    </member>
    <member name="M:System.Web.Caching.OutputCache.Deserialize(System.IO.Stream)">
      <summary>Deserializes a binary object into output-cache data.</summary>
      <returns>An object that contains the deserialized data.</returns>
      <param name="stream">The data to deserialize.</param>
      <exception cref="T:System.ArgumentException">The deserialized object that is returned by the method is not a valid output-cache type. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
    </member>
    <member name="P:System.Web.Caching.OutputCache.Providers">
      <summary>Gets a collection of the output-cache providers that are specified in the configuration file for a Web site. </summary>
      <returns>The collection of configured providers.</returns>
    </member>
    <member name="M:System.Web.Caching.OutputCache.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes output-cache data into binary data.</summary>
      <param name="stream">The object to contain the serialized binary data.</param>
      <param name="data">The output-cache data to serialize.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> is not one of the specified output-cache types. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null or <paramref name="stream" /> is null. </exception>
    </member>
    <member name="T:System.Web.Caching.OutputCacheProvider">
      <summary>Servers as a base class that contains abstract methods for implementing an output-cache provider. </summary>
    </member>
    <member name="M:System.Web.Caching.OutputCacheProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.OutputCacheProvider" /> class. </summary>
    </member>
    <member name="M:System.Web.Caching.OutputCacheProvider.Add(System.String,System.Object,System.DateTime)">
      <summary>Inserts the specified entry into the output cache. </summary>
      <returns>A reference to the specified provider. </returns>
      <param name="key">A unique identifier for <paramref name="entry" />.</param>
      <param name="entry">The content to add to the output cache.</param>
      <param name="utcExpiry">The time and date on which the cached entry expires.</param>
    </member>
    <member name="M:System.Web.Caching.OutputCacheProvider.Get(System.String)">
      <summary>Returns a reference to the specified entry in the output cache.</summary>
      <returns>The <paramref name="key" /> value that identifies the specified entry in the cache, or null if the specified entry is not in the cache.</returns>
      <param name="key">A unique identifier for a cached entry in the output cache. </param>
    </member>
    <member name="M:System.Web.Caching.OutputCacheProvider.Remove(System.String)">
      <summary>Removes the specified entry from the output cache.</summary>
      <param name="key">The unique identifier for the entry to remove from the output cache. </param>
    </member>
    <member name="M:System.Web.Caching.OutputCacheProvider.Set(System.String,System.Object,System.DateTime)">
      <summary>Inserts the specified entry into the output cache, overwriting the entry if it is already cached.</summary>
      <param name="key">A unique identifier for <paramref name="entry" />.</param>
      <param name="entry">The content to add to the output cache.</param>
      <param name="utcExpiry">The time and date on which the cached <paramref name="entry" /> expires.</param>
    </member>
    <member name="T:System.Web.Caching.OutputCacheProviderCollection">
      <summary>Represents the collection of output-cache providers that are configured for a Web site.</summary>
    </member>
    <member name="M:System.Web.Caching.OutputCacheProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.OutputCacheProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Caching.OutputCacheProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>Inserts a provider into the collection of output-cache providers.</summary>
      <param name="provider">An output cache provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> is not of type <see cref="T:System.Web.Caching.OutputCacheProvider" />.</exception>
    </member>
    <member name="M:System.Web.Caching.OutputCacheProviderCollection.CopyTo(System.Web.Caching.OutputCacheProvider[],System.Int32)">
      <summary>Copies the output-cache providers to a compatible one-dimensional array at the specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection The array must have zero-based indexing.</param>
      <param name="index">The point in the array where the copying starts.</param>
    </member>
    <member name="P:System.Web.Caching.OutputCacheProviderCollection.Item(System.String)">
      <summary>Returns a reference to the named output-cache provider in the collection.</summary>
      <returns>A provider from the collection. </returns>
      <param name="name">The name of a provider in the collection.</param>
    </member>
    <member name="T:System.Web.Caching.ResponseElement">
      <summary>An abstract base class that represents an HTTP response in the output cache.</summary>
    </member>
    <member name="M:System.Web.Caching.ResponseElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.ResponseElement" /> class.</summary>
    </member>
    <member name="T:System.Web.Caching.SqlCacheDependency">
      <summary>Establishes a relationship between an item stored in an ASP.NET application's <see cref="T:System.Web.Caching.Cache" /> object and either a specific SQL Server database table or the results of a SQL Server 2005 query. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependency.#ctor(System.Data.SqlClient.SqlCommand)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.SqlCacheDependency" /> class, using the supplied <see cref="T:System.Data.SqlClient.SqlCommand" /> to create a cache-key dependency.</summary>
      <param name="sqlCmd">A <see cref="T:System.Data.SqlClient.SqlCommand" /> that is used to create a <see cref="T:System.Web.Caching.SqlCacheDependency" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="sqlCmd" /> parameter is null.</exception>
      <exception cref="T:System.Web.HttpException">The <see cref="T:System.Data.SqlClient.SqlCommand" /> instance has its <see cref="P:System.Data.SqlClient.SqlCommand.NotificationAutoEnlist" /> property set to true and there is an @ OutputCache directive on the page with the SqlDependency attribute set to CommandNotification.</exception>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependency.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.SqlCacheDependency" /> class, using the supplied parameters to create a cache-key dependency.</summary>
      <param name="databaseEntryName">The name of a database defined in the databases Element for sqlCacheDependency for caching (ASP.NET Settings Schema) element of the application's Web.config file. </param>
      <param name="tableName">The name of the database table that the <see cref="T:System.Web.Caching.SqlCacheDependency" /> is associated with. </param>
      <exception cref="T:System.Web.HttpException">The internal check for <see cref="T:System.Data.SqlClient.SqlClientPermission" /> failed.- or -The <paramref name="databaseEntryName" /> was not found in the list of databases configured for table-based notifications.- or -The <see cref="T:System.Web.Caching.SqlCacheDependency" /> object could not connect to the database during initialization.- or -The <see cref="T:System.Web.Caching.SqlCacheDependency" /> object encountered a permission-denied error either on the database or on the database stored procedures that support the <see cref="T:System.Web.Caching.SqlCacheDependency" /> object.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="tableName" /> parameter is <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Polling is not enabled for the <see cref="T:System.Web.Caching.SqlCacheDependency" />. - or -The polling interval is not correctly configured.- or -No connection string was specified in the application's configuration file.- or -The connection string specified in the application's configuration file could not be found.- or -The connection string specified in the application's configuration file is an empty string.</exception>
      <exception cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException">The database specified in the <paramref name="databaseEntryName" /> parameter is not enabled for change notifications. </exception>
      <exception cref="T:System.Web.Caching.TableNotEnabledForNotificationException">The database table specified in the <paramref name="tableName" /> parameter is not enabled for change notifications. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="databaseEntryName" /> is null.- or -<paramref name="tableName" /> is null.</exception>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependency.CreateOutputCacheDependency(System.String)">
      <summary>Creates a dependency relationship between an item that is stored in an ASP.NET application's <see cref="T:System.Web.Caching.OutputCache" /> object and a SQL Server database table.</summary>
      <returns>The new dependency object.</returns>
      <param name="dependency">The output-cache dependency directive.</param>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependency.GetUniqueID">
      <summary>Retrieves a unique identifier for a <see cref="T:System.Web.Caching.SqlCacheDependency" /> object.</summary>
      <returns>The unique identifier for the <see cref="T:System.Web.Caching.SqlCacheDependency" /> object, or null if no identifier can be generated.</returns>
    </member>
    <member name="T:System.Web.Caching.SqlCacheDependencyAdmin">
      <summary>Performs administrative tasks required on a SQL Server database to support the <see cref="T:System.Web.Caching.SqlCacheDependency" /> class when using polling-based dependencies. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependencyAdmin.DisableNotifications(System.String)">
      <summary>Disables <see cref="T:System.Web.Caching.SqlCacheDependency" /> change notifications for the specified database.</summary>
      <param name="connectionString">A connection string used to connect to the SQL Server database.  </param>
      <exception cref="T:System.Web.HttpException">A connection to the database could not be established.-or-The security context of the ASP.NET application does not have permission to connect to the database.-or-The security context of the ASP.NET application does not have permission to disable notifications for the database.</exception>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependencyAdmin.DisableTableForNotifications(System.String,System.String)">
      <summary>Disables <see cref="T:System.Web.Caching.SqlCacheDependency" /> change notifications on a SQL Server database table.</summary>
      <param name="connectionString">A connection string used to connect to the SQL Server database.</param>
      <param name="table">The database table on which to disable change notifications. </param>
      <exception cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException">The database is not enabled for change notifications. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="table" /> is an empty string ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">A connection to the database could not be established.-or-The security context of the ASP.NET application does not have permission to connect to the database.-or-The security context of the ASP.NET application does not have permission to disable notifications for the database.</exception>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependencyAdmin.DisableTableForNotifications(System.String,System.String[])">
      <summary>Disables <see cref="T:System.Web.Caching.SqlCacheDependency" /> change notifications on an array of SQL Server database tables.</summary>
      <param name="connectionString">A connection string used to connect to the SQL Server database.</param>
      <param name="tables">The array of SQL Server database tables on which to disable change notifications. </param>
      <exception cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException">The database is not enabled for change notifications.</exception>
      <exception cref="T:System.ArgumentException">One of the values in the <paramref name="tables" /> parameter is null.-or-One of the values in the <paramref name="tables" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tables" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">A connection to the database could not be established.-or-The security context of the ASP.NET application does not have permission to connect to the database.-or-The security context of the ASP.NET application does not have permission to disable notifications for the database.</exception>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependencyAdmin.EnableNotifications(System.String)">
      <summary>Enables <see cref="T:System.Web.Caching.SqlCacheDependency" /> change notifications on the specified database.</summary>
      <param name="connectionString">A connection string used to connect to the SQL Server database.</param>
      <exception cref="T:System.Web.HttpException">A connection to the database could not be established.-or-The security context of the ASP.NET application does not have permission to connect to the database.-or-The security context of the ASP.NET application does not have permission to disable notifications for the database.</exception>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependencyAdmin.EnableTableForNotifications(System.String,System.String)">
      <summary>Connects to the specified SQL Server database and enables the specified database table for <see cref="T:System.Web.Caching.SqlCacheDependency" /> change notifications.</summary>
      <param name="connectionString">A connection string used to connect to the SQL Server database.</param>
      <param name="table">The database table on which to enable change notifications.</param>
      <exception cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException">The database is not enabled for change notifications.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">A connection to the database could not be established.-or-The security context of the ASP.NET application does not have permission to connect to the database.-or-The security context of the ASP.NET application does not have permission to disable notifications for the database.</exception>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependencyAdmin.EnableTableForNotifications(System.String,System.String[])">
      <summary>Connects to the specified SQL Server database and enables the specified array of database tables for <see cref="T:System.Web.Caching.SqlCacheDependency" /> change notification.</summary>
      <param name="connectionString">A connection string used to connect to the SQL Server database.</param>
      <param name="tables">The array of SQL Server database tables on which to enable change notifications. </param>
      <exception cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException">The database is not enabled for change notifications.</exception>
      <exception cref="T:System.ArgumentException">One of the values in the <paramref name="tables" /> parameter is null.-or-One of the values in the <paramref name="tables" /> parameter is an empty string ("").</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tables" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">A connection to the database could not be established.-or-The security context of the ASP.NET application does not have permission to connect to the database.-or-The security context of the ASP.NET application does not have permission to disable notifications for the database.</exception>
    </member>
    <member name="M:System.Web.Caching.SqlCacheDependencyAdmin.GetTablesEnabledForNotifications(System.String)">
      <summary>Retrieves a string array containing the name of every table that is enabled for change notifications in a SQL Server database.</summary>
      <returns>A string array that contains the names of the SQL Server database tables.</returns>
      <param name="connectionString">A connection string used to connect to the SQL Server database.</param>
      <exception cref="T:System.Web.Caching.DatabaseNotEnabledForNotificationException">The database is not enabled for change notifications</exception>
      <exception cref="T:System.Web.HttpException">A connection to the database could not be established.-or-The security context of the ASP.NET application does not have permission to connect to the database.-or-The security context of the ASP.NET application does not have permission to disable notifications for the database.</exception>
    </member>
    <member name="T:System.Web.Caching.SubstitutionResponseElement">
      <summary>Represents a managed delegate that can be called to insert dynamically generated output into an output-cache response. </summary>
    </member>
    <member name="M:System.Web.Caching.SubstitutionResponseElement.#ctor(System.Web.HttpResponseSubstitutionCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.SubstitutionResponseElement" /> class.</summary>
      <param name="callback">The static substitution callback that was set as part of the response for an output-cached page.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null. </exception>
    </member>
    <member name="P:System.Web.Caching.SubstitutionResponseElement.Callback">
      <summary>Gets a reference to the substitution callback method.</summary>
      <returns>A callback method reference.</returns>
    </member>
    <member name="T:System.Web.Caching.TableNotEnabledForNotificationException">
      <summary>The exception that is thrown when a <see cref="T:System.Web.Caching.SqlCacheDependency" /> class is used against a database table that is not enabled for change notifications.</summary>
    </member>
    <member name="M:System.Web.Caching.TableNotEnabledForNotificationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.TableNotEnabledForNotificationException" /> class.</summary>
    </member>
    <member name="M:System.Web.Caching.TableNotEnabledForNotificationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.TableNotEnabledForNotificationException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.Web.Caching.TableNotEnabledForNotificationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Caching.TableNotEnabledForNotificationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="T:System.Web.Compilation.AppSettingsExpressionBuilder">
      <summary>Retrieves values, as specified in a declarative expression, from the &lt;appSettings&gt; section of the Web.config file.</summary>
    </member>
    <member name="M:System.Web.Compilation.AppSettingsExpressionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" /> class. </summary>
    </member>
    <member name="M:System.Web.Compilation.AppSettingsExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns a value from the &lt;appSettings&gt; section of the Web.config file.</summary>
      <returns>The <see cref="T:System.Object" /> associated with a key in the &lt;appSettings&gt; section of the Web.config file.</returns>
      <param name="target">The object that contains the property entry.</param>
      <param name="entry">The property to which the expression is bound..</param>
      <param name="parsedData">The object that represents parsed data as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="M:System.Web.Compilation.AppSettingsExpressionBuilder.GetAppSetting(System.String)">
      <summary>Returns a value from the &lt;appSettings&gt; section of the Web.config file.</summary>
      <returns>The <see cref="T:System.Object" /> associated with the key in the &lt;appSettings&gt; section of the Web.config file.</returns>
      <param name="key">The key for the value to be retrieved from the configuration file. </param>
      <exception cref="T:System.InvalidOperationException">The key is not found in Web.config.</exception>
    </member>
    <member name="M:System.Web.Compilation.AppSettingsExpressionBuilder.GetAppSetting(System.String,System.Type,System.String)">
      <summary>Returns a value from the &lt;appSettings&gt; section of the Web.config file with the value converted to a target type.</summary>
      <returns>The <see cref="T:System.Object" /> associated with the key in the &lt;appSettings&gt; section of the Web.config file.</returns>
      <param name="key">The key for a value to be retrieved from the configuration file.</param>
      <param name="targetType">The type of the object that contains the property entry.</param>
      <param name="propertyName">The name of the property to which the expression is bound.</param>
      <exception cref="T:System.InvalidOperationException">The key is not found in Web.config.- or -The return value could not be converted.</exception>
    </member>
    <member name="M:System.Web.Compilation.AppSettingsExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns a code expression that is used to perform the property assignment in the generated page class.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> that is used in the property assignment.</returns>
      <param name="entry">The property to which the expression is bound.</param>
      <param name="parsedData">The object that represents parsed data as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="P:System.Web.Compilation.AppSettingsExpressionBuilder.SupportsEvaluate">
      <summary>Returns a value indicating whether an expression can be evaluated in a page that is not compiled.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="T:System.Web.Compilation.AssemblyBuilder">
      <summary>Provides a container for building an assembly from one or more virtual paths within an ASP.NET project.</summary>
    </member>
    <member name="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)">
      <summary>Adds an assembly that is referenced by source code generated for a file.</summary>
      <param name="a">An assembly referenced by a code compile unit or source file included in the assembly compilation.</param>
    </member>
    <member name="M:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)">
      <summary>Adds source code for the assembly in the form of a CodeDOM graph.</summary>
      <param name="buildProvider">The build provider generating <paramref name="compileUnit" />.</param>
      <param name="compileUnit">The code compile unit to include in the assembly compilation.</param>
    </member>
    <member name="P:System.Web.Compilation.AssemblyBuilder.CodeDomProvider">
      <summary>Gets the compiler used to build source code into an assembly.</summary>
      <returns>A read-only <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation used for compiling source code contributed by each build provider into an assembly.</returns>
    </member>
    <member name="M:System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)">
      <summary>Allows a build provider to create a temporary source file, and include the source file in the assembly compilation.</summary>
      <returns>An open <see cref="T:System.IO.TextWriter" /> that can be used to write source code to a temporary file.</returns>
      <param name="buildProvider">The build provider generating the code source file.</param>
    </member>
    <member name="M:System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(System.Web.Compilation.BuildProvider,System.String)">
      <summary>Allows a build provider to create a resource file to include in the assembly compilation.</summary>
      <returns>An open <see cref="T:System.IO.Stream" /> that can be used to write resources, which are included in the assembly compilation.</returns>
      <param name="buildProvider">The build provider generating the resource.</param>
      <param name="name">The name of the resource file to be created.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid file name.</exception>
    </member>
    <member name="M:System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(System.String)">
      <summary>Inserts a fast object factory template for a type into the compiled assembly.</summary>
      <param name="typeName">The name of the type to generate.</param>
    </member>
    <member name="M:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(System.String)">
      <summary>Generates a temporary file path.</summary>
      <returns>A path to a temporary file, with the specified file extension.</returns>
      <param name="extension">The file extension to use for the temporary file.</param>
    </member>
    <member name="T:System.Web.Compilation.BuildDependencySet">
      <summary>Represents dependencies returned by the build manager.</summary>
    </member>
    <member name="P:System.Web.Compilation.BuildDependencySet.HashCode">
      <summary>Gets a string representing the hash code of the dependent virtual paths.</summary>
      <returns>A <see cref="T:System.String" /> representing the hash code of the dependent virtual paths.</returns>
    </member>
    <member name="P:System.Web.Compilation.BuildDependencySet.VirtualPaths">
      <summary>Gets a list of virtual path dependencies.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> containing the virtual path dependencies.</returns>
    </member>
    <member name="T:System.Web.Compilation.BuildManager">
      <summary>Provides a set of methods to help manage the compilation of an ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.AddReferencedAssembly(System.Reflection.Assembly)">
      <summary>Adds an assembly to the application's set of referenced assemblies.</summary>
      <param name="assembly">The assembly to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assembly" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The method was not called before the Application_Start event in the Global.asax file occurred.</exception>
    </member>
    <member name="P:System.Web.Compilation.BuildManager.BatchCompilationEnabled">
      <summary>Gets or sets a value that indicates whether batch compilation is enabled.</summary>
      <returns>true if batch compilation is always enabled, false if batch compilation is never enabled, or null if the compilation setting is determined from the configuration file. The default value is null.</returns>
      <exception cref="T:System.InvalidOperationException">The property was not set in the PreApplicationStart method.</exception>
    </member>
    <member name="P:System.Web.Compilation.BuildManager.CodeAssemblies">
      <summary>Gets a list of assemblies built from the App_Code directory.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> collection that contains the assemblies built from the App_Code directory.</returns>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.CreateCachedFile(System.String)">
      <summary>Creates a cached file.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> object for the new file.</returns>
      <param name="fileName">The name of the file to create.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(System.String,System.Type)">
      <summary>Processes a file, given its virtual path, and creates an instance of the result.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the instance of the processed file.</returns>
      <param name="virtualPath">The virtual path of the file to create an instance of.</param>
      <param name="requiredBaseType">The base type that defines the object to be created.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetCachedBuildDependencySet(System.Web.HttpContext,System.String)">
      <summary>Returns a build dependency set for a virtual path if the path is located in the ASP.NET cache.</summary>
      <returns>A <see cref="T:System.Web.Compilation.BuildDependencySet" /> object that is stored in the cache, or null if the <see cref="T:System.Web.Compilation.BuildDependencySet" /> object cannot be retrieved from the cache.</returns>
      <param name="context">The context of the request.</param>
      <param name="virtualPath">The virtual path from which to determine the build dependency set.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetCachedBuildDependencySet(System.Web.HttpContext,System.String,System.Boolean)">
      <summary>Returns a build dependency set for a virtual path if the path is located in the ASP.NET cache, even if the content is not current. </summary>
      <returns>A <see cref="T:System.Web.Compilation.BuildDependencySet" /> object that is stored in the cache, or null if the <see cref="T:System.Web.Compilation.BuildDependencySet" /> object cannot be retrieved from the cache.</returns>
      <param name="context">The context of the request.</param>
      <param name="virtualPath">The virtual path from which to determine the build dependency set.</param>
      <param name="ensureIsUpToDate">true to specify that only a current build dependency set should be returned, or false to indicate that any available build dependency set should be returned, even if it is not current. The default is true.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetCompiledAssembly(System.String)">
      <summary>Compiles a file into an assembly using the specified virtual path.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> object that is compiled from the specified virtual path, which is cached to either memory or to disk.</returns>
      <param name="virtualPath">The virtual path to build into an assembly.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetCompiledCustomString(System.String)">
      <summary>Compiles a file, given its virtual path, and returns a custom string that the build provider persists in cache.</summary>
      <returns>A string, as returned by the <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" /> method, that is cached to disk or memory.</returns>
      <param name="virtualPath">The virtual path of the file to build.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetCompiledType(System.String)">
      <summary>Compiles a file, given its virtual path, and returns the compiled type.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type generated from compiling the virtual path.</returns>
      <param name="virtualPath">The virtual path to build into a type.</param>
      <exception cref="T:System.Web.HttpException">An error occurred when compiling the virtual path.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetObjectFactory(System.String,System.Boolean)">
      <summary>Gets an object factory for the specified virtual path.</summary>
      <returns>The object factory.</returns>
      <param name="virtualPath">The virtual path.</param>
      <param name="throwIfNotFound">true to throw an error if the virtual path does not exist; otherwise, false. If the virtual path does not exist and <paramref name="throwIfNotFound" /> is false, this method returns null.</param>
      <exception cref="T:System.Web.HttpException">The virtual path does not exist.-or-A higher-level exception already existed when this method was called.-or-This method was called while the compilation process was building top-level files.-or-This is a precompiled application and the virtual path was not found in the cache.-or-A circular reference was detected.</exception>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetReferencedAssemblies">
      <summary>Returns a list of assembly references that all page compilations must reference.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> collection of assembly references.</returns>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetType(System.String,System.Boolean)">
      <summary>Finds a type in the top-level assemblies or in assemblies that are defined in configuration, and optionally throws an exception on failure.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the requested <paramref name="typeName" /> parameter.</returns>
      <param name="typeName">The name of the type.</param>
      <param name="throwOnError">true to throw an exception if a <see cref="T:System.Type" /> object cannot be generated for the type name; otherwise, false.</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="typeName" /> is invalid.- or -<paramref name="typeName" /> is ambiguous.- or -<paramref name="typeName" /> could not be found, and <paramref name="throwOnError" /> is true.</exception>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Finds a type in the top-level assemblies, or in assemblies that are defined in configuration, by using a case-insensitive search and optionally throwing an exception on failure.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the requested <paramref name="typeName" /> parameter.</returns>
      <param name="typeName">The name of the type.</param>
      <param name="throwOnError">true to throw an exception if a <see cref="T:System.Type" /> cannot be generated for the type name; otherwise, false.</param>
      <param name="ignoreCase">true if <paramref name="typeName" /> is case-sensitive; otherwise, false.</param>
      <exception cref="T:System.Web.HttpException">
        <paramref name="typeName" /> is invalid.- or -<paramref name="typeName" /> is ambiguous.- or -<paramref name="typeName" /> could not be found, and <paramref name="throwOnError" /> is true.</exception>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.GetVirtualPathDependencies(System.String)">
      <summary>Provides a collection of virtual-path dependencies for a specified virtual path.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> collection of files represented by virtual paths that are caching dependencies for the virtual path.</returns>
      <param name="virtualPath">The virtual path used to determine the dependencies.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildManager.ReadCachedFile(System.String)">
      <summary>Reads a cached file.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> object for the file, or null if the file does not exist.</returns>
      <param name="fileName">The name of the file to read.</param>
    </member>
    <member name="P:System.Web.Compilation.BuildManager.TargetFramework">
      <summary>Gets the target version of the .NET Framework for the current Web site.</summary>
      <returns>The target version of the .NET Framework for the current Web site.</returns>
    </member>
    <member name="T:System.Web.Compilation.BuildManagerHostUnloadEventArgs">
      <summary>Contains event data for the <see cref="E:System.Web.Compilation.ClientBuildManager.AppDomainShutdown" /> event and the <see cref="E:System.Web.Compilation.ClientBuildManager.AppDomainUnloaded" /> event. </summary>
    </member>
    <member name="M:System.Web.Compilation.BuildManagerHostUnloadEventArgs.#ctor(System.Web.ApplicationShutdownReason)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.BuildManagerHostUnloadEventArgs" /> class. </summary>
      <param name="reason">The reason for the hosted application domain shutdown.</param>
    </member>
    <member name="P:System.Web.Compilation.BuildManagerHostUnloadEventArgs.Reason">
      <summary>Gets the reason the hosted application domain was shut down.</summary>
      <returns>One of the <see cref="T:System.Web.ApplicationShutdownReason" /> enumerated values.</returns>
    </member>
    <member name="T:System.Web.Compilation.BuildManagerHostUnloadEventHandler">
      <summary>Represents the method that handles the <see cref="E:System.Web.Compilation.ClientBuildManager.AppDomainUnloaded" /> event and the <see cref="E:System.Web.Compilation.ClientBuildManager.AppDomainShutdown" /> event of a <see cref="T:System.Web.Compilation.ClientBuildManager" /> object.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Web.Compilation.BuildManagerHostUnloadEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Web.Compilation.BuildProvider">
      <summary>Defines a set of properties and methods for generating source code within the ASP.NET build environment. This class is abstract.</summary>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.BuildProvider" /> class. </summary>
    </member>
    <member name="P:System.Web.Compilation.BuildProvider.CodeCompilerType">
      <summary>Represents the compiler type used by a build provider to generate source code for a custom file type.</summary>
      <returns>A read-only <see cref="T:System.Web.Compilation.CompilerType" /> representing the code generator, code compiler, and compiler settings used to build source code for the virtual path. The base class returns null.</returns>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
      <summary>Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.</summary>
      <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.GetCodeCompileUnit(System.Collections.IDictionary@)">
      <summary>Represents the container for the generated CodeDOM graph.</summary>
      <returns>The container for the CodeDOM graph that is generated by the <see cref="T:System.Web.Compilation.BuildProvider" /> instance.</returns>
      <param name="linePragmasTable">When this method returns, contains a dictionary that contains all associated line numbers and line pragmas of the source code. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)">
      <summary>Generates a string to be persisted in the compiled assembly.</summary>
      <returns>A string to be persisted in the build environment, or null if the <see cref="T:System.Web.Compilation.BuildProvider" /> instance does not implement <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType">
      <summary>Returns the compiler settings for the default language in the application.</summary>
      <returns>A <see cref="T:System.Web.Compilation.CompilerType" /> that represents the compiler settings for the default language in the application. The base class returns the default compiler based on the application configuration file.</returns>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)">
      <summary>Returns the compiler settings for the build provider based on the specified language.</summary>
      <returns>A <see cref="T:System.Web.Compilation.CompilerType" /> that represents the compiler settings for the build provider based on the specified language. The base class returns the default compiler settings for the language based on the application configuration file.</returns>
      <param name="language">A code language name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> is null.</exception>
      <exception cref="T:System.Web.HttpException">
        <paramref name="language" /> does not match a configured compiler for the build provider.</exception>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a type generated by the build provider from the virtual path.</summary>
      <returns>The type that is generated by the build provider for the virtual path. The base class returns null.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a value indicating actions required when a virtual path is built.</summary>
      <returns>A <see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> value indicating actions required after the virtual path is built within the ASP.NET build environment.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.OpenReader">
      <summary>Opens a text reader for reading from the virtual path of the current build provider object.</summary>
      <returns>An open <see cref="T:System.IO.TextReader" /> that can be used to read the contents of the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />.</returns>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.OpenReader(System.String)">
      <summary>Opens a text reader for reading from a specified virtual path.</summary>
      <returns>An open <see cref="T:System.IO.TextReader" /> that can be used to read the contents of the specified virtual path.</returns>
      <param name="virtualPath">The virtual path to read.</param>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.OpenStream">
      <summary>Opens a stream for reading the virtual path of the current build provider object.</summary>
      <returns>An open <see cref="T:System.IO.Stream" /> that can be used to read the contents of the <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />.</returns>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.OpenStream(System.String)">
      <summary>Opens a stream for reading from a specified virtual path.</summary>
      <returns>An open <see cref="T:System.IO.Stream" /> that can be used to read the contents of the specified virtual path.</returns>
      <param name="virtualPath">The virtual path to read.</param>
    </member>
    <member name="P:System.Web.Compilation.BuildProvider.ReferencedAssemblies">
      <summary>Represents the assemblies to compile with the source generated by the build provider.</summary>
      <returns>A read-only collection of assemblies that can be referenced by the source code generated by the build provider.</returns>
    </member>
    <member name="M:System.Web.Compilation.BuildProvider.RegisterBuildProvider(System.String,System.Type)">
      <summary>Registers a build provider.</summary>
      <param name="extension">The file-name extension that the build provider is for.</param>
      <param name="providerType">The build provider class.</param>
    </member>
    <member name="P:System.Web.Compilation.BuildProvider.VirtualPath">
      <summary>Represents the file to be built by this build provider implementation.</summary>
      <returns>A read-only string that specifies the virtual path of a file to be compiled by this build provider.</returns>
    </member>
    <member name="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies">
      <summary>Represents a collection of virtual paths that must be built before the build provider generates code.</summary>
      <returns>A read-only collection of strings, representing the virtual paths that this instance of the build provider is dependent on.</returns>
    </member>
    <member name="T:System.Web.Compilation.BuildProviderAppliesTo">
      <summary>Specifies the locations where the <see cref="T:System.Web.Compilation.BuildProviderAppliesToAttribute" /> attribute is respected during code generation for a resource by a <see cref="T:System.Web.Compilation.BuildProvider" /> object.</summary>
    </member>
    <member name="F:System.Web.Compilation.BuildProviderAppliesTo.Web">
      <summary>Specifies that the build provider generates code for only those resources in Web content directories, which are directories other than the reserved ASP.NET directories \App_Code, \App_GlobalResources, and \App_LocalResources.</summary>
    </member>
    <member name="F:System.Web.Compilation.BuildProviderAppliesTo.Code">
      <summary>Specifies that the build provider generates code for only those resources in the \App_Code directory.</summary>
    </member>
    <member name="F:System.Web.Compilation.BuildProviderAppliesTo.Resources">
      <summary>Specifies that the build provider generates code for resources in the \App_GlobalResources and \App_LocalResources directories.</summary>
    </member>
    <member name="F:System.Web.Compilation.BuildProviderAppliesTo.All">
      <summary>Specifies that the build provider generates code for resources wherever the resources are found. This is the default value for the <see cref="T:System.Web.Compilation.BuildProviderAppliesToAttribute" /> attribute.</summary>
    </member>
    <member name="T:System.Web.Compilation.BuildProviderAppliesToAttribute">
      <summary>Defines an attribute that specifies the scope where a build provider will be applied when a resource is located. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Compilation.BuildProviderAppliesToAttribute.#ctor(System.Web.Compilation.BuildProviderAppliesTo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.BuildProviderAppliesToAttribute" /> class that applies to the specified resource location. </summary>
      <param name="appliesTo">One of the <see cref="T:System.Web.Compilation.BuildProviderAppliesTo" /> values.</param>
    </member>
    <member name="P:System.Web.Compilation.BuildProviderAppliesToAttribute.AppliesTo">
      <summary>Gets a value that indicates where the specified <see cref="T:System.Web.Compilation.BuildProvider" /> class will be applied when a resource with the appropriate extension is found.</summary>
      <returns>A <see cref="T:System.Web.Compilation.BuildProviderAppliesTo" /> value that indicates where the specified <see cref="T:System.Web.Compilation.BuildProvider" /> class will be applied when a resource with the appropriate extension is found.</returns>
    </member>
    <member name="T:System.Web.Compilation.BuildProviderResultFlags">
      <summary>Indicates the required behavior when a virtual path is built.</summary>
    </member>
    <member name="F:System.Web.Compilation.BuildProviderResultFlags.Default">
      <summary>The default value; no special action is required after compilation.</summary>
    </member>
    <member name="F:System.Web.Compilation.BuildProviderResultFlags.ShutdownAppDomainOnChange">
      <summary>The compilation of the virtual path requires the containing <see cref="T:System.AppDomain" /> to be unloaded and restarted. This is only used in advanced compilation scenarios; typically, you should use the <see cref="F:System.Web.Compilation.BuildProviderResultFlags.Default" /> value.</summary>
    </member>
    <member name="T:System.Web.Compilation.ClientBuildManager">
      <summary>Provides compilation services for ASP.NET applications.</summary>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ClientBuildManager" /> class without a specified target directory or precompilation flags. </summary>
      <param name="appVirtualDir">The virtual path to the application root.</param>
      <param name="appPhysicalSourceDir">The physical path to the application root.</param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ClientBuildManager" /> class with the specified target directory. </summary>
      <param name="appVirtualDir">The virtual path to the application root.</param>
      <param name="appPhysicalSourceDir">The physical path to the application root.</param>
      <param name="appPhysicalTargetDir">The target directory for precompilation.</param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.#ctor(System.String,System.String,System.String,System.Web.Compilation.ClientBuildManagerParameter)">
      <summary>??Initializes a new instance of the <see cref="T:System.Web.Compilation.ClientBuildManager" /> class with the specified target directory and compilation parameter.</summary>
      <param name="appVirtualDir">The virtual path to the application root.</param>
      <param name="appPhysicalSourceDir">The physical path to the application root.</param>
      <param name="appPhysicalTargetDir">The target directory for precompilation.</param>
      <param name="parameter">Values that determine the precompilation behavior.</param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.#ctor(System.String,System.String,System.String,System.Web.Compilation.ClientBuildManagerParameter,System.ComponentModel.TypeDescriptionProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ClientBuildManager" /> class by using the specified virtual directory, source directory, target directory, compilation parameter. and type-description provider.</summary>
      <param name="appVirtualDir">The virtual path of the application root.</param>
      <param name="appPhysicalSourceDir">The physical path of the application root.</param>
      <param name="appPhysicalTargetDir">The target directory for precompilation.</param>
      <param name="parameter">Values that determine the precompilation behavior.</param>
      <param name="typeDescriptionProvider">The type-description provider to use. This parameter is primarily used to support the multi-targeting infrastructure in Visual Studio, for retrieving metadata about types that is filtered for specific versions of the .NET Framework.</param>
    </member>
    <member name="E:System.Web.Compilation.ClientBuildManager.AppDomainShutdown">
      <summary>Occurs when an application domain is shut down. </summary>
    </member>
    <member name="E:System.Web.Compilation.ClientBuildManager.AppDomainStarted">
      <summary>Occurs when an application domain is started. </summary>
    </member>
    <member name="E:System.Web.Compilation.ClientBuildManager.AppDomainUnloaded">
      <summary>Occurs when an application domain is unloaded. </summary>
    </member>
    <member name="P:System.Web.Compilation.ClientBuildManager.CodeGenDir">
      <summary>Gets the physical path to the directory used for code generation.</summary>
      <returns>A <see cref="T:System.String" /> containing the directory path used for code generation.</returns>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.CompileApplicationDependencies">
      <summary>Compiles application-dependent files, such as files in the App_Code directory, the Global.asax file, resource files, and Web references.</summary>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.CompileFile(System.String)">
      <summary>Compiles the file represented by the virtual path.</summary>
      <param name="virtualPath">The path to the file to be compiled.</param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.CompileFile(System.String,System.Web.Compilation.ClientBuildManagerCallback)">
      <summary>Compiles the file represented by the virtual path and provides a callback class to receive status information about the build.</summary>
      <param name="virtualPath">The path to the file to be compiled.</param>
      <param name="callback">The object to receive status information from compilation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.CreateObject(System.Type,System.Boolean)">
      <summary>Creates an object in the application domain of the ASP.NET runtime.</summary>
      <returns>An <see cref="T:System.Web.Hosting.IRegisteredObject" />. </returns>
      <param name="type">The type of object to be created.</param>
      <param name="failIfExists">true to throw an exception if the object has already been created in the application domain of the ASP.NET runtime; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The object already exists in the application domain and <paramref name="failIfExists" /> is true.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GenerateCode(System.String,System.String,System.Collections.IDictionary@)">
      <summary>Generates code from the contents of a file.</summary>
      <returns>A <see cref="T:System.String" /> containing the generated code.</returns>
      <param name="virtualPath">The virtual path to the file.</param>
      <param name="virtualFileString">The contents of the file.</param>
      <param name="linePragmasTable">When this method returns, contains a dictionary of line pragmas.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GenerateCodeCompileUnit(System.String,System.String,System.Type@,System.CodeDom.Compiler.CompilerParameters@,System.Collections.IDictionary@)">
      <summary>Returns the contents, codeDOM tree, compiler type, and compiler parameters for a file represented by a virtual path.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> for the given file.</returns>
      <param name="virtualPath">The virtual path to the file.</param>
      <param name="virtualFileString">The contents of the file represented by the <paramref name="virtualPath" /> parameter.</param>
      <param name="codeDomProviderType">When this method returns, contains the codeDOM provider type used for code generation and compilation.</param>
      <param name="compilerParameters">When this method returns, contains the properties that define how the file represented by the <paramref name="virtualPath" /> parameter will be compiled.</param>
      <param name="linePragmasTable">When this method returns, contains a dictionary of line pragmas.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GenerateCodeCompileUnit(System.String,System.Type@,System.CodeDom.Compiler.CompilerParameters@,System.Collections.IDictionary@)">
      <summary>Returns the codeDOM tree, compiler type, and compiler parameters for a file represented by a virtual path.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> for the given file.</returns>
      <param name="virtualPath">The virtual path to the file.</param>
      <param name="codeDomProviderType">When this method returns, contains the codeDOM provider type used for code generation and compilation.</param>
      <param name="compilerParameters">When this method returns, contains the properties that define how the file will be compiled.</param>
      <param name="linePragmasTable">When this method returns, contains a dictionary of line pragmas.</param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetAppDomainShutdownDirectories">
      <summary>Gets the directories with files that, when changed, cause the application domain to shut down.</summary>
      <returns>A <see cref="T:System.String" /> array containing the top-level directory names.</returns>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetBrowserDefinitions">
      <summary>Gets a collection of browser elements.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> containing browser elements.</returns>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetCodeDirectoryInformation(System.String,System.Type@,System.CodeDom.Compiler.CompilerParameters@,System.String@)">
      <summary>Gets information about the compiler type, compiler parameters, and the directory in which to store code files generated from non-code files such as .wsdl files.</summary>
      <param name="virtualCodeDir">The directory about which to retrieve information.</param>
      <param name="codeDomProviderType">When this method returns, contains the provider type used for code generation and compilation.</param>
      <param name="compilerParameters">When this method returns, contains the properties that define how the file will be compiled.</param>
      <param name="generatedFilesDir">When this method returns, contains the directory for files generated from non-code files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualCodeDir" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetCompiledType(System.String)">
      <summary>Compiles the file represented by the virtual path and returns its compiled type.</summary>
      <returns>The <see cref="T:System.Type" /> of the compiled file.</returns>
      <param name="virtualPath">The virtual path of the file to compile. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetCompilerParameters(System.String,System.Type@,System.CodeDom.Compiler.CompilerParameters@)">
      <summary>Returns the compiler type and parameters that are used to build a file represented by a virtual path.</summary>
      <param name="virtualPath">The virtual path to the file.</param>
      <param name="codeDomProviderType">When this method returns, contains the provider type used for code generation and compilation.</param>
      <param name="compilerParameters">When this method returns, contains the properties that define how the file will be compiled.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetGeneratedFileVirtualPath(System.String)">
      <summary>Returns the virtual path of a generated file.</summary>
      <returns>A <see cref="T:System.String" /> containing the virtual path for <paramref name="filePath" />.</returns>
      <param name="filePath">The full physical path to a generated file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetGeneratedSourceFile(System.String)">
      <summary>Gets the physical path to the generated file for a virtual path. </summary>
      <returns>A <see cref="T:System.String" /> that contains the physical path to the generated file.</returns>
      <param name="virtualPath">The virtual path of the file to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetTopLevelAssemblyReferences(System.String)">
      <summary>Returns an array of the assemblies defined in the Bin directory and the &lt;assembly&gt; section of the Web configuration file.</summary>
      <returns>A <see cref="T:System.String" /> array containing paths to code bases in the Bin directory and the &lt;assembly&gt; section of the Web configuration file. </returns>
      <param name="virtualPath">The configuration name and path.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.GetVirtualCodeDirectories">
      <summary>Returns the virtual paths to the App_Code directory and its subdirectories in an ASP.NET application.</summary>
      <returns>A <see cref="T:System.String" /> array containing all the virtual paths to code directories in an application.</returns>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.InitializeLifetimeService">
      <summary>Gives the application domain an infinite lifetime by preventing a lease from being created.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.IsCodeAssembly(System.String)">
      <summary>Indicates whether an assembly is a code assembly.</summary>
      <returns>true if the <paramref name="assemblyName" /> parameter matches one of the generated code assemblies; otherwise, false.</returns>
      <param name="assemblyName">The name of the assembly to be identified as a code assembly.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> is null.</exception>
    </member>
    <member name="P:System.Web.Compilation.ClientBuildManager.IsHostCreated">
      <summary>Gets a value that indicates whether an application domain for compiling ASP.NET Web applications has been created.</summary>
      <returns>true if the application domain for compiling ASP.NET Web applications has been created; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.PrecompileApplication">
      <summary>Precompiles an ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.PrecompileApplication(System.Web.Compilation.ClientBuildManagerCallback)">
      <summary>Precompiles an ASP.NET application and provides a callback method to receive status information about the build.</summary>
      <param name="callback">A <see cref="T:System.Web.Compilation.ClientBuildManagerCallback" /> containing the method to call when reporting the result of compilation.</param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.PrecompileApplication(System.Web.Compilation.ClientBuildManagerCallback,System.Boolean)">
      <summary>Precompiles an ASP.NET application, provides a callback method to receive status information about the build, and indicates whether to create a clean build.</summary>
      <param name="callback">A <see cref="T:System.Web.Compilation.ClientBuildManagerCallback" /> containing the method to call when reporting the result of compilation.</param>
      <param name="forceCleanBuild">true to perform a clean build, which will first delete all object and intermediate files; false to rebuild only those files that have changed. Set to true if there is a chance that a dependency might not be picked up by the build environment.</param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.System#IDisposable#Dispose">
      <summary>Terminates the current ASP.NET application.</summary>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManager.Unload">
      <summary>Unloads the application domain for compiling ASP.NET Web applications.</summary>
      <returns>true if the application domain is unloaded; otherwise, false.</returns>
    </member>
    <member name="T:System.Web.Compilation.ClientBuildManagerCallback">
      <summary>Receives status information about a build from the <see cref="T:System.Web.Compilation.ClientBuildManager" /> object.</summary>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManagerCallback.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ClientBuildManagerCallback" /> class. </summary>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManagerCallback.InitializeLifetimeService">
      <summary>Returns a lifetime service object that can be used to control the lifetime policy for this instance.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManagerCallback.ReportCompilerError(System.CodeDom.Compiler.CompilerError)">
      <summary>Reports compilation errors and warnings that occur during an application build.</summary>
      <param name="error">The error or warning encountered during compilation. </param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManagerCallback.ReportParseError(System.Web.ParserError)">
      <summary>Reports parsing errors and warnings that occur during an application build.</summary>
      <param name="error">The error or warning encountered during parsing.</param>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManagerCallback.ReportProgress(System.String)">
      <summary>Reports the progress of an application build.</summary>
      <param name="message">A <see cref="T:System.String" /> containing the current status of the build.</param>
    </member>
    <member name="T:System.Web.Compilation.ClientBuildManagerParameter">
      <summary>Contains values passed to the ASP.NET compiler during precompilation.</summary>
    </member>
    <member name="M:System.Web.Compilation.ClientBuildManagerParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ClientBuildManagerParameter" /> class. </summary>
    </member>
    <member name="P:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags">
      <summary>Gets or sets the flags that determine precompilation behavior.</summary>
      <returns>The <see cref="T:System.Web.Compilation.PrecompilationFlags" /> for a client build.</returns>
    </member>
    <member name="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer">
      <summary>Gets or sets the key container used during compilation.</summary>
      <returns>A <see cref="T:System.String" /> of the value for the key container.</returns>
    </member>
    <member name="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile">
      <summary>Gets or sets the key file used during compilation.</summary>
      <returns>A <see cref="T:System.String" /> of the value for the key file.</returns>
    </member>
    <member name="T:System.Web.Compilation.CompilerType">
      <summary>Represents the compiler settings used within the ASP.NET build environment to generate and compile source code from a virtual path. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Web.Compilation.CompilerType.CodeDomProviderType">
      <summary>Gets a <see cref="T:System.Type" /> for the configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation.</summary>
      <returns>A read-only <see cref="T:System.Type" /> that represents the configured code provider type.</returns>
    </member>
    <member name="P:System.Web.Compilation.CompilerType.CompilerParameters">
      <summary>Gets the settings and options used to compile source code into an assembly.</summary>
      <returns>A read-only <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that represents the settings and options of the code compiler.</returns>
    </member>
    <member name="M:System.Web.Compilation.CompilerType.Equals(System.Object)">
      <summary>Determines whether the specified object represents the same code provider and compiler settings as the current instance of <see cref="T:System.Web.Compilation.CompilerType" />.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Web.Compilation.CompilerType" /> object and its value is the same as this instance; otherwise, false.</returns>
      <param name="o">The object to compare with the current instance of <see cref="T:System.Web.Compilation.CompilerType" />.</param>
    </member>
    <member name="M:System.Web.Compilation.CompilerType.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code for the current instance of <see cref="T:System.Web.Compilation.CompilerType" />, suitable for use in hashing algorithms and data structures, such as a hash table.</returns>
    </member>
    <member name="T:System.Web.Compilation.ConnectionStringsExpressionBuilder">
      <summary>Retrieves, or generates code to retrieve, values from the &lt;connectionStrings&gt; section of the Web.config file.</summary>
    </member>
    <member name="M:System.Web.Compilation.ConnectionStringsExpressionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" /> class. </summary>
    </member>
    <member name="M:System.Web.Compilation.ConnectionStringsExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns a value from the &lt;connectionStrings&gt; section of the Web.config file.</summary>
      <returns>The <see cref="T:System.Object" /> associated with a key in the &lt;connectionStrings&gt; section of the Web.config file.</returns>
      <param name="target">The object that contains the expression.</param>
      <param name="entry">The property to which the expression is bound.</param>
      <param name="parsedData">The object that represents parsed data as returned by <see cref="M:System.Web.Compilation.ConnectionStringsExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
      <param name="context">Properties for the control or page.</param>
      <exception cref="T:System.InvalidOperationException">The connection string name could not be found in the Web.config file.</exception>
    </member>
    <member name="M:System.Web.Compilation.ConnectionStringsExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns a code expression to evaluate during page parsing.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> that invokes a method.</returns>
      <param name="entry">An object that represents information about the property bound to by the expression.</param>
      <param name="parsedData">The object that represents parsed data as returned by <see cref="M:System.Web.Compilation.ConnectionStringsExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="M:System.Web.Compilation.ConnectionStringsExpressionBuilder.GetConnectionString(System.String)">
      <summary>Returns a connection string from the &lt;connectionStrings&gt; section of the Web.config file.</summary>
      <returns>The connection string as a <see cref="T:System.String" /> for this connection string name.</returns>
      <param name="connectionStringName">The name of the connection string.</param>
      <exception cref="T:System.InvalidOperationException">The connection string name could not be found in the Web.config file.</exception>
    </member>
    <member name="M:System.Web.Compilation.ConnectionStringsExpressionBuilder.GetConnectionStringProviderName(System.String)">
      <summary>Returns the connection string provider from the &lt;connectionStrings&gt; section of the Web.config file.</summary>
      <returns>The provider as a <see cref="T:System.String" /> for this connection string name.</returns>
      <param name="connectionStringName">The name of the connection string.</param>
      <exception cref="T:System.InvalidOperationException">The connection string name could not be found in the Web.config file.</exception>
    </member>
    <member name="M:System.Web.Compilation.ConnectionStringsExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns an object that represents the parsed expression.</summary>
      <returns>An <see cref="T:System.Object" /> containing the parsed representation of the expression.</returns>
      <param name="expression">The value of the declarative expression.</param>
      <param name="propertyType">The targeted type for the expression.</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="P:System.Web.Compilation.ConnectionStringsExpressionBuilder.SupportsEvaluate">
      <summary>Returns a value indicating whether an expression can be evaluated in a page that is not compiled.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="T:System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute">
      <summary>Specifies the type of resource provider factory for design time. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute" /> class with the attribute set to the specified factory type name. </summary>
      <param name="factoryTypeName">The name of the resource provider factory type.</param>
    </member>
    <member name="M:System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute" /> class with the attribute set to the qualified name of the specified factory type. </summary>
      <param name="factoryType">The type of the resource provider factory.</param>
    </member>
    <member name="P:System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute.FactoryTypeName">
      <summary>Gets the value of the factory type name.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of the factory type.</returns>
    </member>
    <member name="M:System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute.IsDefaultAttribute">
      <summary>Determines whether the default provider is used.</summary>
      <returns>true if <see cref="P:System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute.FactoryTypeName" /> equals null; otherwise, false.</returns>
    </member>
    <member name="T:System.Web.Compilation.ExpressionBuilder">
      <summary>Evaluates expressions during page parsing.</summary>
    </member>
    <member name="M:System.Web.Compilation.ExpressionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ExpressionBuilder" /> class.</summary>
    </member>
    <member name="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>When overridden in a derived class, returns an object that represents an evaluated expression.</summary>
      <returns>An object that represents the evaluated expression; otherwise, null if the inheritor does not implement <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />.</returns>
      <param name="target">The object containing the expression.</param>
      <param name="entry">The object that represents information about the property bound to by the expression.</param>
      <param name="parsedData">The object containing parsed data as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
      <param name="context">Contextual information for the evaluation of the expression.</param>
    </member>
    <member name="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>When overridden in a derived class, returns code that is used during page execution to obtain the evaluated expression.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> that is used for property assignment.</returns>
      <param name="entry">The object that represents information about the property bound to by the expression.</param>
      <param name="parsedData">The object containing parsed data as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />. </param>
      <param name="context">Contextual information for the evaluation of the expression.</param>
    </member>
    <member name="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>When overridden in a derived class, returns an object that represents the parsed expression.</summary>
      <returns>An <see cref="T:System.Object" /> containing the parsed representation of the expression; otherwise, null if <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> is not implemented.</returns>
      <param name="expression">The value of the declarative expression.</param>
      <param name="propertyType">The type of the property bound to by the expression.</param>
      <param name="context">Contextual information for the evaluation of the expression.</param>
    </member>
    <member name="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate">
      <summary>When overridden in a derived class, returns a value indicating whether the current <see cref="T:System.Web.Compilation.ExpressionBuilder" /> object supports no-compile pages. </summary>
      <returns>true if the <see cref="T:System.Web.Compilation.ExpressionBuilder" /> supports expression evaluation; otherwise, false.</returns>
    </member>
    <member name="T:System.Web.Compilation.ExpressionBuilderContext">
      <summary>Provides the context for an <see cref="T:System.Web.Compilation.ExpressionBuilder" /> object.</summary>
    </member>
    <member name="M:System.Web.Compilation.ExpressionBuilderContext.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ExpressionBuilderContext" /> class using the specified virtual path.</summary>
      <param name="virtualPath">The virtual path of the file associated with the specified <see cref="T:System.Web.Compilation.ExpressionBuilder" />.</param>
    </member>
    <member name="M:System.Web.Compilation.ExpressionBuilderContext.#ctor(System.Web.UI.TemplateControl)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ExpressionBuilderContext" /> class using the specified template control.</summary>
      <param name="templateControl">The <see cref="T:System.Web.UI.TemplateControl" /> to use with the specified <see cref="T:System.Web.Compilation.ExpressionBuilder" />.</param>
    </member>
    <member name="P:System.Web.Compilation.ExpressionBuilderContext.TemplateControl">
      <summary>Provides an <see cref="T:System.Web.Compilation.ExpressionBuilder" /> object with a reference to a <see cref="T:System.Web.UI.TemplateControl" /> object.</summary>
      <returns>The <see cref="T:System.Web.UI.TemplateControl" /> that contains this expression.</returns>
    </member>
    <member name="P:System.Web.Compilation.ExpressionBuilderContext.VirtualPath">
      <summary>Returns a virtual path to the file associated with the <see cref="T:System.Web.Compilation.ExpressionBuilderContext" /> object.</summary>
      <returns>The virtual path of the file associated with the <see cref="T:System.Web.Compilation.ExpressionBuilderContext" />.</returns>
    </member>
    <member name="T:System.Web.Compilation.ExpressionEditorAttribute">
      <summary>Specifies the design-time editor of the expression builder. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Compilation.ExpressionEditorAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> class using the specified type name.</summary>
      <param name="typeName">The name of the type to associate with the <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Web.Compilation.ExpressionEditorAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> class using the specified type object.</summary>
      <param name="type">The type reference to associate with the <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</param>
    </member>
    <member name="P:System.Web.Compilation.ExpressionEditorAttribute.EditorTypeName">
      <summary>Used by an expression editor to retrieve the editor type name.</summary>
      <returns>The name of the editor type.</returns>
    </member>
    <member name="M:System.Web.Compilation.ExpressionEditorAttribute.Equals(System.Object)">
      <summary>Indicates whether this instance of the <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> class and a specified object are equal.</summary>
      <returns>true if value is not null and <see cref="P:System.Web.Compilation.ExpressionEditorAttribute.EditorTypeName" /> is equal; otherwise, false.</returns>
      <param name="obj">An instance of the <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> class or a class that derives from it.</param>
    </member>
    <member name="M:System.Web.Compilation.ExpressionEditorAttribute.GetHashCode">
      <summary>Retrieves the hash code for the value of this <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> attribute.</summary>
      <returns>The hash code of the value of this <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" />.</returns>
    </member>
    <member name="T:System.Web.Compilation.ExpressionPrefixAttribute">
      <summary>Specifies the prefix attribute to use for the expression builder. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Web.Compilation.ExpressionPrefixAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" /> class.</summary>
      <param name="expressionPrefix">The prefix of the current <see cref="T:System.Web.Compilation.ExpressionBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expressionPrefix" /> is null or an empty string ("").</exception>
    </member>
    <member name="P:System.Web.Compilation.ExpressionPrefixAttribute.ExpressionPrefix">
      <summary>Gets the prefix value for the current <see cref="T:System.Web.Compilation.ExpressionBuilder" /> object.</summary>
      <returns>The expression prefix for the configured <see cref="T:System.Web.Compilation.ExpressionBuilder" />.</returns>
    </member>
    <member name="T:System.Web.Compilation.FolderLevelBuildProviderAppliesTo">
      <summary>Represents an enumeration that specifies the target directory that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object applies to.</summary>
    </member>
    <member name="F:System.Web.Compilation.FolderLevelBuildProviderAppliesTo.None">
      <summary>Specifies that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object does not apply to any directory.</summary>
    </member>
    <member name="F:System.Web.Compilation.FolderLevelBuildProviderAppliesTo.Code">
      <summary>Specifies that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object applies to a folder that contains code.</summary>
    </member>
    <member name="F:System.Web.Compilation.FolderLevelBuildProviderAppliesTo.WebReferences">
      <summary>Specifies that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object applies to the Web content directory.</summary>
    </member>
    <member name="F:System.Web.Compilation.FolderLevelBuildProviderAppliesTo.LocalResources">
      <summary>Specifies that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object applies to the local resources directory.</summary>
    </member>
    <member name="F:System.Web.Compilation.FolderLevelBuildProviderAppliesTo.GlobalResources">
      <summary>Specifies that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object applies to the global resources directory.</summary>
    </member>
    <member name="T:System.Web.Compilation.FolderLevelBuildProviderAppliesToAttribute">
      <summary>Defines an attribute that specifies the scope where a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object should be applied when a resource is located. </summary>
    </member>
    <member name="M:System.Web.Compilation.FolderLevelBuildProviderAppliesToAttribute.#ctor(System.Web.Compilation.FolderLevelBuildProviderAppliesTo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.FolderLevelBuildProviderAppliesToAttribute" /> class.</summary>
      <param name="appliesTo">The target directory that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object applies to.</param>
    </member>
    <member name="P:System.Web.Compilation.FolderLevelBuildProviderAppliesToAttribute.AppliesTo">
      <summary>Gets or sets the target directory that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object applies to.</summary>
      <returns>The directory that a <see cref="T:System.Web.Configuration.FolderLevelBuildProvider" /> object applies to.</returns>
    </member>
    <member name="T:System.Web.Compilation.IAssemblyPostProcessor">
      <summary>Defines the method a class implements to process an assembly after the assembly has been built.</summary>
    </member>
    <member name="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)">
      <summary>Called before the assembly is loaded to allow the implementing class to modify the assembly.</summary>
      <param name="path">The path to the assembly.</param>
    </member>
    <member name="T:System.Web.Compilation.IImplicitResourceProvider">
      <summary>Defines methods a class implements to act as an implicit resource provider.</summary>
    </member>
    <member name="M:System.Web.Compilation.IImplicitResourceProvider.GetImplicitResourceKeys(System.String)">
      <summary>Gets a collection of implicit resource keys as specified by the prefix.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> of implicit resource keys.</returns>
      <param name="keyPrefix">The prefix of the implicit resource keys to be collected.</param>
    </member>
    <member name="M:System.Web.Compilation.IImplicitResourceProvider.GetObject(System.Web.Compilation.ImplicitResourceKey,System.Globalization.CultureInfo)">
      <summary>Gets an object representing the value of the specified resource key.</summary>
      <returns>An <see cref="T:System.Object" /> representing the localized value of an implicit resource key.</returns>
      <param name="key">The resource key containing the prefix, filter, and property.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> that represents the culture for which the resource is localized.</param>
    </member>
    <member name="T:System.Web.Compilation.ImplicitResourceKey">
      <summary>Contains fields that identify an implicit resource key.</summary>
    </member>
    <member name="M:System.Web.Compilation.ImplicitResourceKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ImplicitResourceKey" /> class. </summary>
    </member>
    <member name="M:System.Web.Compilation.ImplicitResourceKey.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ImplicitResourceKey" /> class with the specified values for the <see cref="P:System.Web.Compilation.ImplicitResourceKey.Filter" />, <see cref="P:System.Web.Compilation.ImplicitResourceKey.KeyPrefix" /> and <see cref="P:System.Web.Compilation.ImplicitResourceKey.Property" /> properties.</summary>
      <param name="filter">The filter value of an implicit resource key.</param>
      <param name="keyPrefix">The prefix for identifying a group of properties.</param>
      <param name="property">A property and subproperty, if provided, for an implicit resource key.</param>
    </member>
    <member name="P:System.Web.Compilation.ImplicitResourceKey.Filter">
      <summary>Gets or sets the filter value of an implicit resource key.</summary>
      <returns>A <see cref="T:System.String" /> containing the filter value for the implicit resource expression.</returns>
    </member>
    <member name="P:System.Web.Compilation.ImplicitResourceKey.KeyPrefix">
      <summary>Gets or sets the prefix for identifying a group of properties.</summary>
      <returns>A <see cref="T:System.String" /> containing the prefix for an implicit resource expression.</returns>
    </member>
    <member name="P:System.Web.Compilation.ImplicitResourceKey.Property">
      <summary>Gets or sets a property and subproperty, if provided, for an implicit resource key.</summary>
      <returns>A <see cref="T:System.String" /> containing the property and subproperty for an implicit resource expression.</returns>
    </member>
    <member name="T:System.Web.Compilation.IResourceProvider">
      <summary>Defines the interface a class must implement to act as a resource provider.</summary>
    </member>
    <member name="M:System.Web.Compilation.IResourceProvider.GetObject(System.String,System.Globalization.CultureInfo)">
      <summary>Returns a resource object for the key and culture.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the resource value for the <paramref name="resourceKey" /> and <paramref name="culture" />.</returns>
      <param name="resourceKey">The key identifying a particular resource.</param>
      <param name="culture">The culture identifying a localized value for the resource.</param>
    </member>
    <member name="P:System.Web.Compilation.IResourceProvider.ResourceReader">
      <summary>Gets an object to read resource values from a source.</summary>
      <returns>The <see cref="T:System.Resources.IResourceReader" /> associated with the current resource provider.</returns>
    </member>
    <member name="T:System.Web.Compilation.LinePragmaCodeInfo">
      <summary>Contains properties for a script block being parsed.</summary>
    </member>
    <member name="M:System.Web.Compilation.LinePragmaCodeInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.LinePragmaCodeInfo" /> class. </summary>
    </member>
    <member name="M:System.Web.Compilation.LinePragmaCodeInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.LinePragmaCodeInfo" /> class with parameters for initializing the <see cref="P:System.Web.Compilation.LinePragmaCodeInfo.StartLine" />, <see cref="P:System.Web.Compilation.LinePragmaCodeInfo.StartColumn" />, <see cref="P:System.Web.Compilation.LinePragmaCodeInfo.StartGeneratedColumn" />, <see cref="P:System.Web.Compilation.LinePragmaCodeInfo.CodeLength" />, and <see cref="P:System.Web.Compilation.LinePragmaCodeInfo.IsCodeNugget" /> properties.</summary>
      <param name="startLine">The starting line of a script block in an .aspx file.</param>
      <param name="startColumn">The starting column of a script block in an .aspx file.</param>
      <param name="startGeneratedColumn">The starting column of a script block in the generated source file.</param>
      <param name="codeLength">The length of the script block.</param>
      <param name="isCodeNugget">A value indicating whether the script block is located inside &lt;% %&gt; tags.</param>
    </member>
    <member name="P:System.Web.Compilation.LinePragmaCodeInfo.CodeLength">
      <summary>Gets the length of the script block.</summary>
      <returns>The length of the script block.</returns>
    </member>
    <member name="P:System.Web.Compilation.LinePragmaCodeInfo.IsCodeNugget">
      <summary>Gets a value indicating whether the script block is located inside &lt;% %&gt; tags.</summary>
      <returns>true if the script block is contained inside &lt;% %&gt; tags; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Compilation.LinePragmaCodeInfo.StartColumn">
      <summary>Gets the starting column of a script block in an .aspx file.</summary>
      <returns>The starting column of a script block in an .aspx file.</returns>
    </member>
    <member name="P:System.Web.Compilation.LinePragmaCodeInfo.StartGeneratedColumn">
      <summary>Gets the starting column of a script block in the generated source file.</summary>
      <returns>The starting column of a script block in the generated source file.</returns>
    </member>
    <member name="P:System.Web.Compilation.LinePragmaCodeInfo.StartLine">
      <summary>Gets the starting line of a script block in an .aspx file.</summary>
      <returns>The starting line of a script block in an .aspx file.</returns>
    </member>
    <member name="T:System.Web.Compilation.PrecompilationFlags">
      <summary>Provides flags that determine precompilation behavior.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.Default">
      <summary>The default value; no special behavior specified for precompilation.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.Updatable">
      <summary>The deployed application will be updatable. This field corresponds to the -u switch on Aspnet_compiler.exe.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.OverwriteTarget">
      <summary>The target directory can be overwritten. This field corresponds to the -f switch on Aspnet_compiler.exe for a previously precompiled target.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.ForceDebug">
      <summary>The compiler will emit debug information. This field corresponds to the -d switch on Aspnet_compiler.exe.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.Clean">
      <summary>The application will be built "clean": Any previously compiled components will be recompiled. This field corresponds to the -c switch on Aspnet_compiler.exe.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.CodeAnalysis">
      <summary>The /define:CodeAnalysis flag will be added as a compilation symbol.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.AllowPartiallyTrustedCallers">
      <summary>An <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> attribute is generated for the assemblies, which means the assemblies can be called by partially trusted code. The /aptca flag will be added as a compilation symbol.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.DelaySign">
      <summary>The assembly is not fully signed when created. The assembly can be signed later by a signing tool such as Sn.exe. The /delaysign flag will be added as a compilation symbol.</summary>
    </member>
    <member name="F:System.Web.Compilation.PrecompilationFlags.FixedNames">
      <summary>The assembly is generated with fixed names for the Web pages. The files are not batched during compilation and instead are compiled individually to produce the fixed names. </summary>
    </member>
    <member name="T:System.Web.Compilation.ResourceExpressionBuilder">
      <summary>Provides code to the page parser for assigning property values on a control.</summary>
    </member>
    <member name="M:System.Web.Compilation.ResourceExpressionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" /> class.</summary>
    </member>
    <member name="M:System.Web.Compilation.ResourceExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns a value from a resource file.</summary>
      <returns>An <see cref="T:System.Object" /> associated with the parsed expression. The parsed expression contains the class name and resource key.</returns>
      <param name="target">The object containing the expression.</param>
      <param name="entry">The object that represents information about the property bound to by the expression.</param>
      <param name="parsedData">The object containing parsed data as returned by the <see cref="Overload:System.Web.Compilation.ResourceExpressionBuilder.ParseExpression" /> method.</param>
      <param name="context">Contextual information for the evaluation of the expression.</param>
    </member>
    <member name="M:System.Web.Compilation.ResourceExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns a code expression to evaluate during page execution.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> that invokes a method.</returns>
      <param name="entry">The property name of the object.</param>
      <param name="parsedData">The parsed value of the expression.</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="M:System.Web.Compilation.ResourceExpressionBuilder.ParseExpression(System.String)">
      <summary>Returns an object that represents the parsed expression.</summary>
      <returns>The <see cref="T:System.Web.Compilation.ResourceExpressionFields" /> for the expression.</returns>
      <param name="expression">The expression value to be parsed.</param>
    </member>
    <member name="M:System.Web.Compilation.ResourceExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns an object that represents the parsed expression.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the parsed expression.</returns>
      <param name="expression">The value of the declarative expression.</param>
      <param name="propertyType">The type of the property bound to by the expression.</param>
      <param name="context">Contextual information for the evaluation of the expression.</param>
      <exception cref="T:System.Web.HttpException">The resource expression cannot be found or is invalid.</exception>
    </member>
    <member name="P:System.Web.Compilation.ResourceExpressionBuilder.SupportsEvaluate">
      <summary>Returns a value indicating whether an expression can be evaluated in a page that uses the no-compile feature.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="T:System.Web.Compilation.ResourceExpressionFields">
      <summary>Contains the fields from a parsed resource expression.</summary>
    </member>
    <member name="P:System.Web.Compilation.ResourceExpressionFields.ClassKey">
      <summary>Gets the class key for a parsed resource expression.</summary>
      <returns>A <see cref="T:System.String" /> containing the class key, or <see cref="F:System.String.Empty" /> if the class key has not been set.</returns>
    </member>
    <member name="P:System.Web.Compilation.ResourceExpressionFields.ResourceKey">
      <summary>Gets the resource key for a parsed resource expression.</summary>
      <returns>A <see cref="T:System.String" /> containing the resource key, or <see cref="F:System.String.Empty" /> if the resource key has not been set.</returns>
    </member>
    <member name="T:System.Web.Compilation.ResourceProviderFactory">
      <summary>Serves as the base class for classes that create resource providers.</summary>
    </member>
    <member name="M:System.Web.Compilation.ResourceProviderFactory.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the derived class. </summary>
    </member>
    <member name="M:System.Web.Compilation.ResourceProviderFactory.CreateGlobalResourceProvider(System.String)">
      <summary>When overridden in a derived class, creates a global resource provider. </summary>
      <returns>An <see cref="T:System.Web.Compilation.IResourceProvider" />.</returns>
      <param name="classKey">The name of the resource class.</param>
    </member>
    <member name="M:System.Web.Compilation.ResourceProviderFactory.CreateLocalResourceProvider(System.String)">
      <summary>When overridden in a derived class, creates a local resource provider. </summary>
      <returns>An <see cref="T:System.Web.Compilation.IResourceProvider" />.</returns>
      <param name="virtualPath">The path to a resource file.</param>
    </member>
    <member name="T:System.Web.Compilation.RouteUrlExpressionBuilder">
      <summary>Creates a URL that corresponds to specified URL parameter values.</summary>
    </member>
    <member name="M:System.Web.Compilation.RouteUrlExpressionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.RouteUrlExpressionBuilder" /> class.</summary>
    </member>
    <member name="M:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Creates a URL that corresponds to specified URL parameter values and to a route URL format.</summary>
      <returns>The URL that corresponds to the specified URL parameter values and to the selected route. The route is selected by matching route URL patterns to the specified list of parameters. In case more than one route matches a specified list of parameters, a route name can also be specified to indicate which route to select.</returns>
      <param name="target">Not used in this implementation.</param>
      <param name="entry">The property that the expression is bound to.</param>
      <param name="parsedData">Not used in this implementation.</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="M:System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns a code expression that is used to perform the property assignment in the generated page class.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> instance that is used in the property assignment.</returns>
      <param name="entry">The property that the expression is bound to.</param>
      <param name="parsedData">The object that represents parsed data as returned by <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />.</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="M:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(System.Web.UI.Control,System.String)">
      <summary>Creates a URL that corresponds to specified route keys for a route URL format.</summary>
      <returns>The URL that corresponds to the route URL format of the current <see cref="T:System.Web.Routing.Route" /> object.</returns>
      <param name="control">The control that the expression is bound to.</param>
      <param name="expression">The expression as specified in markup.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="control" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The method was unable to parse the expression that was specified in markup. For more information, see <see cref="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)" />.</exception>
    </member>
    <member name="P:System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate">
      <summary>Gets a value that indicates whether an expression can be evaluated in a page that is not compiled.</summary>
      <returns>Always true.</returns>
    </member>
    <member name="M:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)">
      <summary>Parses an expression into a collection of route keys and values, and optionally into a route name.</summary>
      <returns>true if parsing was successful; otherwise, false.</returns>
      <param name="expression">The expression as specified in markup.</param>
      <param name="routeValues">The collection of route keys and their associated values.</param>
      <param name="routeName">When this method returns, contains a string that represents the name of the route, if <paramref name="expression" /> contains a route key named RouteName. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Web.Compilation.RouteValueExpressionBuilder">
      <summary>Retrieves the value that corresponds to a specified URL parameter in a routed page. </summary>
    </member>
    <member name="M:System.Web.Compilation.RouteValueExpressionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Compilation.RouteValueExpressionBuilder" /> class.</summary>
    </member>
    <member name="M:System.Web.Compilation.RouteValueExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Retrieves the value that corresponds to a specified route key.</summary>
      <returns>The value that corresponds to the URL parameter that is specified for the current page. The method returns null if <paramref name="target" /> is null or if it does not derive from <see cref="T:System.Web.UI.Control" />.</returns>
      <param name="target">The control that the expression is bound to.</param>
      <param name="entry">The property that the expression is bound to.</param>
      <param name="parsedData">(This parameter is not used in this implementation.)</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="M:System.Web.Compilation.RouteValueExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
      <summary>Returns a code expression that is used to perform the property assignment in the generated page class.</summary>
      <returns>An expression.</returns>
      <param name="entry">The property that the expression is bound to.</param>
      <param name="parsedData">The object that represents parsed data, as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
      <param name="context">Properties for the control or page.</param>
    </member>
    <member name="M:System.Web.Compilation.RouteValueExpressionBuilder.GetRouteValue(System.Web.UI.Page,System.String,System.Type,System.String)">
      <summary>Retrieves the value that corresponds to the specified URL parameter.</summary>
      <returns>The value that corresponds to the specified URL parameter for the current page. If <paramref name="page" /> is null, if the <see cref="P:System.Web.UI.Page.RouteData" /> property of <paramref name="page" /> is null, or if <paramref name="key" /> is empty or null, the method returns null.</returns>
      <param name="page">The current page.</param>
      <param name="key">The URL parameter.</param>
      <param name="controlType">The type of the control that the expression is bound to.</param>
      <param name="propertyName">The name of the property that is being set by the expression.</param>
    </member>
    <member name="P:System.Web.Compilation.RouteValueExpressionBuilder.SupportsEvaluate">
      <summary>Gets a value that indicates whether an expression can be evaluated in a page that is not compiled.</summary>
      <returns>Always true.</returns>
    </member>
    <member name="T:System.Web.Configuration.AdapterDictionary">
      <summary>Used internally at run time by the configuration system to contain the names of the available adapters used to render server controls on different browsers. </summary>
    </member>
    <member name="M:System.Web.Configuration.AdapterDictionary.#ctor">
      <summary>Used internally at run time by the configuration system to create a new instance of this class.</summary>
    </member>
    <member name="P:System.Web.Configuration.AdapterDictionary.Item(System.String)">
      <summary>Used internally at run time by the configuration system to get or set a specified adapter name.</summary>
      <returns>The name of the specified adapter.</returns>
      <param name="key">Key of the specified adapter.</param>
    </member>
    <member name="T:System.Web.Configuration.AnonymousIdentificationSection">
      <summary>Configures anonymous identification for users that are not authenticated. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Configuration.AnonymousIdentificationSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.AnonymousIdentificationSection" /> class.</summary>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.Cookieless">
      <summary>Gets or sets a value indicating whether to use cookies.</summary>
      <returns>One of the <see cref="T:System.Web.HttpCookieMode" /> values. The default value is <see cref="F:System.Web.HttpCookieMode.UseDeviceProfile" />. </returns>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.CookieName">
      <summary>Gets or sets the cookie name.</summary>
      <returns>The name of the cookie. The default value is ".ASPXANONYMOUS".</returns>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.CookiePath">
      <summary>Gets or sets the path where the cookie is stored.</summary>
      <returns>The path of the HTTP cookie to use for the user's anonymous identification. The default value is a slash (/), which represents the Web application root.</returns>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.CookieProtection">
      <summary>Gets or sets the encryption type used to encrypt the cookie.</summary>
      <returns>One of the <see cref="T:System.Web.Security.CookieProtection" /> values. The default value is <see cref="F:System.Web.Security.CookieProtection.All" />.</returns>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.CookieRequireSSL">
      <summary>Gets or sets a value indicating whether a Secure Sockets Layer (SSL) connection is required when transmitting authentication information.</summary>
      <returns>true if an SSL connection is required; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.CookieSlidingExpiration">
      <summary>Gets or sets whether the cookie time-out value is reset on each request.</summary>
      <returns>true if the sliding expiration is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.CookieTimeout">
      <summary>Gets or sets the amount of time, in minutes, after which the authentication expires.</summary>
      <returns>The amount of time, in minutes, after which the authentication expires. The default value is 100000.</returns>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.Domain">
      <summary>Gets or sets the cookie domain.</summary>
      <returns>The name of the cookie domain. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.Web.Configuration.AnonymousIdentificationSection.Enabled">
      <summary>Gets or sets a value indicating whether anonymous identification is enabled. </summary>
      <returns>true if anonymous identification is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Web.Configuration.AssemblyCollection">
      <summary>Represents a collection of <see cref="T:System.Web.Configuration.AssemblyInfo" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Configuration.AssemblyCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.AssemblyCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Configuration.AssemblyCollection.Add(System.Web.Configuration.AssemblyInfo)">
      <summary>Adds an <see cref="T:System.Web.Configuration.AssemblyInfo" /> object to the <see cref="T:System.Web.Configuration.AssemblyCollection" /> collection.</summary>
      <param name="assemblyInformation">A string value specifying the assembly reference.</param>
    </member>
    <member name="M:System.Web.Configuration.AssemblyCollection.Clear">
      <summary>Clears all the <see cref="T:System.Web.Configuration.AssemblyInfo" /> objects from the <see cref="T:System.Web.Configuration.AssemblyCollection" /> collection.</summary>
    </member>
    <member name="P:System.Web.Configuration.AssemblyCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Web.Configuration.AssemblyInfo" /> at the specified index in the <see cref="T:System.Web.Configuration.AssemblyCollection" />.</summary>
      <returns>A <see cref="T:System.Web.Configuration.AssemblyInfo" /> object.</returns>
      <param name="index">An integer value specifying a specific <see cref="T:System.Web.Configuration.AssemblyInfo" /> object within the <see cref="T:System.Web.Configuration.AssemblyCollection" /> collection.</param>
    </member>
    <member name="P:System.Web.Configuration.AssemblyCollection.Item(System.String)">
      <summary>Gets the item identified by the specified assembly name.</summary>
      <returns>The item identified by the specified assembly name.</returns>
      <param name="assemblyName">The name identifying the assembly to retrieve.</param>
    </member>
    <member name="M:System.Web.Configuration.AssemblyCollection.Remove(System.String)">
      <summary>Removes a <see cref="T:System.Web.Configuration.AssemblyInfo" /> object from the <see cref="T:System.Web.Configuration.AssemblyCollection" /> collection.</summary>
      <param name="key">A string value specifying the assembly reference.</param>
    </member>
    <member name="M:System.Web.Configuration.AssemblyCollection.RemoveAt(System.Int32)">
      <summary>Removes an <see cref="T:System.Web.Configuration.AssemblyInfo" /> object from the <see cref="T:System.Web.Configuration.AssemblyCollection" /> collection.</summary>
      <param name="index">An integer value specifying an <see cref="T:System.Web.Configuration.AssemblyInfo" /> object within the <see cref="T:System.Web.Configuration.AssemblyCollection" /> collection.</param>
    </member>
    <member name="T:System.Web.Configuration.AssemblyInfo">
      <summary>References an assembly to be linked to during compilation of a dynamic resource. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Configuration.AssemblyInfo.#ctor(System.String)">
      <summary>Creates an instance of an <see cref="T:System.Web.Configuration.AssemblyInfo" /> class.</summary>
      <param name="assemblyName">Specifies a comma-separated assembly name combination consisting of version, culture, and public-key tokens.</param>
    </member>
    <member name="P:System.Web.Configuration.AssemblyInfo.Assembly">
      <summary>Gets or sets an assembly reference to use during compilation of a dynamic resource.</summary>
      <returns>A comma-separated string value specifying the version, culture, and public-key tokens of an assembly.</returns>
    </member>
    <member name="T:System.Web.Configuration.AuthenticationMode">
      <summary>Specifies the authentication mode to use in a Web application.</summary>
    </member>
    <member name="F:System.Web.Configuration.AuthenticationMode.None">
      <summary>Specifies no authentication.</summary>
    </member>
    <member name="F:System.Web.Configuration.AuthenticationMode.Windows">
      <summary>Specifies Windows as the authentication mode. This mode applies when using the Internet Information Services (IIS) authentication methods Basic, Digest, Integrated Windows (NTLM/Kerberos), or certificates.</summary>
    </member>
    <member name="F:System.Web.Configuration.AuthenticationMode.Passport">
      <summary>Specifies Microsoft Passport as the authentication mode.</summary>
    </member>
    <member name="F:System.Web.Configuration.AuthenticationMode.Forms">
      <summary>Specifies ASP.NET Forms-based authentication as the authentication mode.</summary>
    </member>
    <member name="T:System.Web.Configuration.AuthenticationSection">
      <summary>Configures the authentication for a Web application. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Configuration.AuthenticationSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.AuthenticationSection" /> class.</summary>
    </member>
    <member name="P:System.Web.Configuration.AuthenticationSection.Forms">
      <summary>Gets the <see cref="P:System.Web.Configuration.AuthenticationSection.Forms" /> element property.</summary>
      <returns>A <see cref="P:System.Web.Configuration.AuthenticationSection.Forms" /> element property that contains information used during forms-based authentication.</returns>
    </member>
    <member name="P:System.Web.Configuration.AuthenticationSection.Mode">
      <summary>Gets or sets the authentication modality.</summary>
      <returns>One of the <see cref="T:System.Web.Configuration.AuthenticationMode" /> values.</returns>
    </member>
    <member name="P:System.Web.Configuration.AuthenticationSection.Passport">
      <summary>Gets the <see cref="P:System.Web.Configuration.AuthenticationSection.Passport" /> element property.</summary>
      <returns>A <see cref="P:System.Web.Configuration.AuthenticationSection.Passport" /> element property that contains information used during passport-based authentication.</returns>
    </member>
    <member name="T:System.Web.Configuration.AuthorizationRule">
      <summary>The <see cref="T:System.Web.Configuration.AuthorizationRule" /> class allows you to programmatically access and modify the authorization section of a configuration file. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRule.#ctor(System.Web.Configuration.AuthorizationRuleAction)">
      <summary>Creates a new instance of the <see cref="T:System.Web.Configuration.AuthorizationRule" /> class using the passed object. </summary>
      <param name="action">The <see cref="T:System.Web.Configuration.AuthorizationRule" /> object to use to initialize the new instance.</param>
    </member>
    <member name="P:System.Web.Configuration.AuthorizationRule.Action">
      <summary>Gets or sets the <see cref="T:System.Web.Configuration.AuthorizationRule" /> action.</summary>
      <returns>One of the <see cref="T:System.Web.Configuration.AuthorizationRuleAction" /> values.</returns>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRule.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The object to compare with the current object.</param>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRule.GetHashCode">
      <summary>Serves as a hash function for this object.</summary>
      <returns>An integer representing the hash code for the current object.</returns>
    </member>
    <member name="P:System.Web.Configuration.AuthorizationRule.Roles">
      <summary>Gets the roles associated with the resource.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> collection containing the roles whose authorization must be verified.</returns>
    </member>
    <member name="P:System.Web.Configuration.AuthorizationRule.Users">
      <summary>Gets the users associated with the resource.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> collection containing the users whose authorization must be verified.</returns>
    </member>
    <member name="P:System.Web.Configuration.AuthorizationRule.Verbs">
      <summary>Gets the verbs associated with the resource.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> collection containing the verbs whose authorization must be verified. </returns>
    </member>
    <member name="T:System.Web.Configuration.AuthorizationRuleAction">
      <summary>Specifies the type of authorization to apply when accessing a resource.</summary>
    </member>
    <member name="F:System.Web.Configuration.AuthorizationRuleAction.Deny">
      <summary>The authorization type denies access to the resource.</summary>
    </member>
    <member name="F:System.Web.Configuration.AuthorizationRuleAction.Allow">
      <summary>The authorization type allows access to the resource.</summary>
    </member>
    <member name="T:System.Web.Configuration.AuthorizationRuleCollection">
      <summary>Represents a collection of <see cref="T:System.Web.Configuration.AuthorizationRule" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRuleCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.AuthorizationRuleCollection" /> class. </summary>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRuleCollection.Add(System.Web.Configuration.AuthorizationRule)">
      <summary>Adds a <see cref="T:System.Web.Configuration.AuthorizationRule" /> object to the collection.</summary>
      <param name="rule">The <see cref="T:System.Web.Configuration.AuthorizationRule" /> object to add to the collection. </param>
      <exception cref="T:System.Configuration.ConfigurationException">The <see cref="T:System.Web.Configuration.AuthorizationRule" /> object already exists in the collection, or the collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRuleCollection.Clear">
      <summary>Removes all <see cref="T:System.Web.Configuration.AuthorizationRule" /> objects from the collection.</summary>
    </member>
    <member name="P:System.Web.Configuration.AuthorizationRuleCollection.CollectionType">
      <summary>Gets the type of this <see cref="T:System.Web.Configuration.AuthorizationRuleCollection" />.</summary>
      <returns>A value from the <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> enumeration representing the type of this collection.</returns>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRuleCollection.Get(System.Int32)">
      <summary>Gets the <see cref="T:System.Web.Configuration.AuthorizationRule" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Web.Configuration.AuthorizationRule" /> at the specified index.</returns>
      <param name="index">The <see cref="T:System.Web.Configuration.AuthorizationRule" /> index. </param>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRuleCollection.IndexOf(System.Web.Configuration.AuthorizationRule)">
      <summary>Gets the collection index of the specified <see cref="T:System.Web.Configuration.AuthorizationRule" /> object.</summary>
      <returns>The index of the specified <see cref="T:System.Web.Configuration.AuthorizationRule" /> object.</returns>
      <param name="rule">The <see cref="T:System.Web.Configuration.AuthorizationRule" /> object whose index is returned.</param>
    </member>
    <member name="P:System.Web.Configuration.AuthorizationRuleCollection.Item(System.Int32)">
      <summary>Gets or sets an item in this collection.</summary>
      <returns>The <see cref="T:System.Web.Configuration.AuthorizationRule" /> at the specified index.</returns>
      <param name="index">
        <see cref="T:System.Web.Configuration.AuthorizationRule" /> collection index</param>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRuleCollection.Remove(System.Web.Configuration.AuthorizationRule)">
      <summary>Removes a <see cref="T:System.Web.Configuration.AuthorizationRule" /> object from the collection.</summary>
      <param name="rule">The <see cref="T:System.Web.Configuration.AuthorizationRule" />  object to remove.</param>
      <exception cref="T:System.Configuration.ConfigurationException">The passed <see cref="T:System.Web.Configuration.AuthorizationRule" /> object does not exist in the collection, the element has already been removed, or the collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRuleCollection.RemoveAt(System.Int32)">
      <summary>Removes a <see cref="T:System.Web.Configuration.AuthorizationRule" /> object from the collection at the specified index.</summary>
      <param name="index">The index location of the <see cref="T:System.Web.Configuration.AuthorizationRule" /> to remove.</param>
      <exception cref="T:System.Configuration.ConfigurationException">There is no <see cref="T:System.Web.Configuration.AuthorizationRule" /> object with the specified index in the collection, the element has already been removed, or the collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationRuleCollection.Set(System.Int32,System.Web.Configuration.AuthorizationRule)">
      <summary>Adds the specified <see cref="T:System.Web.Configuration.AuthorizationRule" /> object to the collection at the specified index.</summary>
      <param name="index">The index location at which to add the specified <see cref="T:System.Web.Configuration.AuthorizationRuleCollection" /> object. </param>
      <param name="rule">The <see cref="T:System.Web.Configuration.AuthorizationRule" /> object to be added.</param>
    </member>
    <member name="T:System.Web.Configuration.AuthorizationSection">
      <summary>Configures a Web application authorization. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Web.Configuration.AuthorizationSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.AuthorizationSection" /> class using default settings.</summary>
    </member>
    <member name="P:System.Web.Configuration.AuthorizationSection.Rules">
      <summary>Gets the <see cref="T:System.Web.Configuration.AuthorizationRuleCollection" /> of <see cref="T:System.Web.Configuration.AuthorizationRule" /> rules.</summary>
      <returns>Gets the <see cref="T:System.Web.Configuration.AuthorizationRuleCollection" /> of <see cref="T:System.Web.Configuration.AuthorizationRule" /> rules defined by the <see cref="T:System.Web.Configuration.AuthorizationSection" />.</returns>
    </member>
    <member name="T:System.Web.Configuration.BrowserCapabilitiesCodeGenerator">
      <summary>The <see cref="T:System.Web.Configuration.BrowserCapabilitiesCodeGenerator" /> class is used internally by the aspnet_regbrowsers tool to parse .browser browser definition files and add browsers to the run-time collection of known browsers contained in the <see cref="T:System.Web.Configuration.BrowserCapabilitiesFactory" /> object.</summary>
    </member>
    <member name="M:System.Web.Configuration.BrowserCapabilitiesCodeGenerator.#ctor">
      <summary>Used internally to create a new instance of <see cref="T:System.Web.Configuration.BrowserCapabilitiesCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Web.Configuration.BrowserCapabilitiesCodeGenerator.Create">
      <summary>Used internally to coordinate the behavior of this class.</summary>
    </member>
    <member name="M:System.Web.Configuration.BrowserCapabilitiesCodeGenerator.ProcessBrowserFiles(System.Boolean,System.String)">
      <summary>Loads and parses the XML contained in a collection of browser-definition files and inserts the information contained therein into an internal collection of browsers.</summary>
      <param name="useVirtualPath">true to use a virtual path; otherwise, false. The default is false.</param>
      <param name="virtualDir">The path to the virtual directory that contains the browser-definition files. The default is <see cref="F:System.String.Empty" />.</param>
      <exception cref="T:System.Web.HttpParseException">One of the browser-definition files does not have a root element named "browsers".- or -One of the browser-definition files fails to load.</exception>
    </member>
    <member name="M:System.Web.Configuration.BrowserCapabilitiesCodeGenerator.Uninstall">
      <summary>Removes the browser capabilities factory from the global assembly cache and deletes its strong name public key token file.</summary>
      <returns>true if the browser capabilities factory was uninstalled from the global assembly cache; otherwise, false.</returns>
    </member>
    <member name="T:System.Web.Configuration.BrowserCapabilitiesFactory">
      <summary>Used internally by the configuration system to produce request-specific instances of the <see cref="T:System.Web.HttpBrowserCapabilities" /> class that are publicly accessed through the ASP.NET-intrinsic Request.Browser property.</summary>
    </member>
    <member name="M:System.Web.Configuration.BrowserCapabilitiesFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Configuration.BrowserCapabilitiesFactory" /> class. </summary>
    </member>
    <member name="M:System.Web.Configuration.BrowserCapabilitiesFactory.BlackberryProcessBrowsers(System.Boolean,System.Collections.Specialized.NameValueCollection,System.Web.HttpBrowserCapabilities)">
      <summary>Initializes an <see cref="T:System.Web.HttpBrowserCapabilities" /> object that represents the capabilities of the Blackberry browser handling the current request.</summary>
      <param name="ignoreApplicationBrowsers">true to ignore definitions for the Blackberry browser in application-level browser definition files; otherwise, false.</param>
      <param name="headers">The collection of headers included in the current request.</param>
      <param name="browserCaps">The <see cref="T:System.Web.HttpBrowserCapabilities" /> object to initialize.</param>
    </member>
    <member name="M:System.Web.Configuration.BrowserCapabilitiesFactory.BlackberryProcessGateways(System.Collections.Specialized.NameValueCollection,System.Web.HttpBrowserCapabilities)">
      <summary>Initializes an <see cref="T:System.Web.HttpBrowserCapabilities" /> object that represents the capabilities of the Blackberry gateway handling the current request.</summary>
      <param name="headers">The collection of headers included in the current request.</param>
      <param name="browserCaps">The <see cref="T:System.Web.HttpBrowserCapabilities" /> object to initialize.</param>
    </member>
    <member nam