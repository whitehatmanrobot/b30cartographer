ource class.
            </summary>
            <param name="propertyName">The name of the property associated with this error.</param>
            <param name="control">The control associated with this error.</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummaryItemSource.Equals(System.Object)">
            <summary>
            Implements the equality check against the PropertyName and Control.
            </summary>
            <param name="obj">The ValidationSummaryItem being compared.</param>
            <returns>A value indicating whether the two references are equal in value.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationSummaryItemSource.GetHashCode">
            <summary>
            Returns a HashCode based on the PropertyName and Control Name
            </summary>
            <returns>The hash value of the ValidationSummaryItemSource.</returns>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummaryItemSource.PropertyName">
            <summary>
            Gets the PropertyName.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationSummaryItemSource.Control">
            <summary>
            Gets the Control.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidationSummaryItemType">
            <summary>
            The source of the error, for error management
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummaryItemType.ObjectError">
            <summary>
            The error came from object level validation
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationSummaryItemType.PropertyError">
            <summary>
            The error came from the binding engine, which exposes only a single error at a time
            </summary>
        </member>
        <member name="T:System.Windows.Controls.FocusingInvalidControlEventArgs">
            <summary>
            Provides data for the ErrorClicked event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.FocusingInvalidControlEventArgs.#ctor(System.Windows.Controls.ValidationSummaryItem,System.Windows.Controls.ValidationSummaryItemSource)">
            <summary>
            Initializes a new instance of the ValidationSummaryItemEventArgs class.
            </summary>
            <param name="item">The selected ValidationSummaryItem</param>
            <param name="target">The target is the ValidationSummaryItemSource that will be focused.</param>
        </member>
        <member name="P:System.Windows.Controls.FocusingInvalidControlEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the focusing was handled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.FocusingInvalidControlEventArgs.Item">
            <summary>
            Gets the error message string
            </summary>
        </member>
        <member name="P:System.Windows.Controls.FocusingInvalidControlEventArgs.Target">
            <summary>
            Gets or sets the target ValidationSummaryItemSource.  If this value is changed, it will be the new current source 
            and will be focused.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Label">
            <summary>
            Displays a caption, required field indicator, and validation error indicator for a control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Label.#ctor">
            <summary>
            Initializes a new instance of the Label class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Label.ContentInternalProperty">
            <summary>
            Identifies the ContentInternal dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Label.DataContextProperty">
            <summary>
            Identifies the DataContext dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Label.IsRequiredProperty">
            <summary>
            Identifies the IsRequired dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Label.OnIsRequiredPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the IsRequired field property change event.
            </summary>
            <param name="depObj">The Label that had its IsRequired value changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="F:System.Windows.Controls.Label.IsValidProperty">
            <summary>
            Identifies the IsValid dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Label.PropertyPathProperty">
            <summary>
            Identifies the PropertyPath dependency property
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Label.TargetProperty">
            <summary>
            Identifies the Target dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Label.OnApplyTemplate">
            <summary>
            When the template is applied, this loads all the template parts
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Label.Refresh">
            <summary>
            Reload the metadata from the source target or DataContext
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Label.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the System.Windows.Controls.Label.Content property changes.
            </summary>
            <param name="oldContent">The old value of the System.Windows.Controls.Label.Content property.</param>
            <param name="newContent">The new value of the System.Windows.Controls.Label.Content property.</param>
        </member>
        <member name="M:System.Windows.Controls.Label.Label_IsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsEnabled property change handler
            </summary>
            <param name="sender">The Label that had its IsEnabled value changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.Label.Label_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Perform initialization code
            </summary>
            <param name="sender">The Label that has loaded.</param>
            <param name="e">The RoutedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.Label.LoadMetadata(System.Boolean)">
            <summary>
            Load meta data and update the UI. 
            </summary>
            <param name="forceUpdate">If true, metadata will not be loaded from cache.</param>
        </member>
        <member name="M:System.Windows.Controls.Label.ParseTargetValidState">
            <summary>
            Parse the target error state and update the IsValid property
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Label.Target_BindingValidationError(System.Object,System.Windows.Controls.ValidationErrorEventArgs)">
            <summary>
            Event handler for target control's BindingValidationError event.
            </summary>
            <param name="sender">The target that had a BindingValidationError event.</param>
            <param name="e">The ValidationErrorEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.Label.UpdateCommonState">
            <summary>
            Update the Common VSM state
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Label.UpdateRequiredState">
            <summary>
            Update the required field VSM state based on the IsRequired property.  
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Label.UpdateValidationState">
            <summary>
            Update the validation VSM state
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Label.ContentInternal">
            <summary>
            Gets or sets the ContentInternal property of the Label.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Label.IsRequired">
            <summary>
              Gets or sets a value that indicates whether 
              the <see cref="P:System.Windows.Controls.Label.Target" /> field is required. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Label.IsValid">
            <summary>
              Gets a value that indicates whether 
              the <see cref="P:System.Windows.Controls.Label.Target" /> field data is valid. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Label.PropertyPath">
            <summary>
              Gets or sets the path to the dependency property on the 
              <see cref="P:System.Windows.FrameworkElement.DataContext" /> of the 
              <see cref="P:System.Windows.Controls.Label.Target" /> control that this 
              <see cref="T:System.Windows.Controls.Label" /> is associated with. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Label.Target">
            <summary>
              Gets or sets the control that this <see cref="T:System.Windows.Controls.Label" /> is associated with. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Label.ValidationMetadata">
            <summary>
            Internally get or set the ValidationMetadata.  
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Label.Initialized">
            <summary>
            Gets a value indicating whether the control has been initialized.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidationItemCollection">
            <summary>
            Represents all of the validation items associated with a given input control
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationItemCollection.ClearErrors(System.Windows.Controls.ValidationSummaryItemType)">
            <summary>
            Clears errors of the given source type
            </summary>
            <param name="errorType">The type of the error (Entity or Property)</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationItemCollection.ClearItems">
            <summary>
            Clears all the ValidationSummaryItemTypes from the collection.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidationHelper.ValidationMetadataProperty">
            <summary>
            Gets or sets the ValidationMetadata, which represents all of the metadata associated with the binding path of the input control.  This includes
            IsFieldRequired, RequiredFieldMessage, Caption, and Description.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationHelper.GetValidationMetadata(System.Windows.DependencyObject)">
            <summary>
            Gets the ValidationMetadata property for the input control
            </summary>
            <param name="inputControl">The input control to get the ValidationMetadata property from.</param>
            <returns>The ValidationMetadata associated with the input control.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationHelper.SetValidationMetadata(System.Windows.DependencyObject,System.Windows.Controls.ValidationMetadata)">
            <summary>
            Sets the ValidationMetadata property for the input control
            </summary>
            <param name="inputControl">The input control to set the ValidationMetadata property on.</param>
            <param name="value">The ValidationMetadata to associate with the input control.</param>
        </member>
        <member name="M:System.Windows.Controls.ValidationHelper.ParseMetadata(System.Windows.FrameworkElement,System.Boolean,System.Object@,System.Windows.Data.BindingExpression@)">
            <summary>
            Parse metadata from a target FrameworkElement.  This will cache the metadata on the element as an attached property.
            </summary>
            <param name="element">The target FrameworkElement to pull metadata from.</param>
            <param name="forceUpdate">If set, will not pull metadata from cache.</param>
            <param name="entity">The entity used.</param>
            <param name="bindingExpression">The bindingExpression used.</param>
            <returns>Returns the metadata associated with the element.  Will be null if no metadata was found.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationHelper.ParseMetadata(System.String,System.Object)">
            <summary>
            Parse metadata given a binding path and entity object.
            </summary>
            <param name="bindingPath">The bindingPath is the name of the property on the entity from which to pull metadata from.  This supports dot notation.</param>
            <param name="entity">The entity object from which to pull metadata from.</param>
            <returns>The validation metadata associated with the entity and binding path.  This will return null if none exists.</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationHelper.GetProperty(System.Type,System.String)">
            <summary>
            Get the PropertyInfo for a given entity type.  Supports dot notation to represent nested objects.
            </summary>
            <param name="entityType">The type of the object.</param>
            <param name="propertyPath">The property path, supporting dot notation.</param>
            <returns>The PropertyInfo corresponding to the final property.</returns>
        </member>
        <member name="T:System.Windows.Controls.ValidationMetadata">
            <summary>
            Encapsulates metadata info for a given property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationMetadata.IsRequired">
            <summary>
            Gets or sets a value indicating whether the field is required
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationMetadata.Description">
            <summary>
            Gets or sets the property description
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ValidationMetadata.Caption">
            <summary>
            Gets or sets the caption
            </summary>
        </member>
        <member name="E:System.Windows.Controls.ValidationMetadata.PropertyChanged">
            <summary>
            This event is raised when any of the properties on the object change
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            VSM Group for validation, containing focus details.  These details are not orthogonal and thus were combined.   See TextBox validation for precedence.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            VSM State for Valid
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalid">
            <summary>
            VSM STate for Invalid
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValidFocused">
            <summary>
            VSM State for Valid and Focused (DescriptionViewer specific)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValidUnfocused">
            <summary>
            VSM State for Valid and Unfocused (DescriptionViewer specific)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            VSM State for Invalid and Focused (DescriptionViewer specific)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            VSM State for Invalid and Focused (DescriptionViewer specific)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEmpty">
            <summary>
            VSM State for no errors (ValidationSummary specific)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasErrors">
            <summary>
            VSM State for containing errors (ValidationSummary specific)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            VSM Group for common states, such as Normal or Disabled
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            VSM state for Normal (enabled)
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            VSM state for Disabled
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupRequired">
            <summary>
            VSM group for required states
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNotRequired">
            <summary>
            VSM state for not required
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateRequired">
            <summary>
            VSM state for required
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDescription">
            <summary>
            VSM group for description states
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoDescription">
            <summary>
            VSM state for no description defined
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasDescription">
            <summary>
            VSM state for having a description defined
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\Binaries\System.Windows.Controls.Data.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Data</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Automation.Peers.DataGridAutomationPeer">
            <summary>
            Exposes <see cref="T:System.Windows.Controls.DataGrid" /> types to UI Automation.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.#ctor(System.Windows.Controls.DataGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" /> class.
            </summary>
            <param name="owner">
            The <see cref="T:System.Windows.Controls.DataGrid" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of elements that are represented in the UI Automation tree as immediate
            child elements of the automation peer.
            </summary>
            <returns>The children elements.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetNameCore">
            <summary>
            Called by GetName.
            </summary>
            <returns>
            Returns the first of these that is not null or empty:
            - Value returned by the base implementation
            - Name of the owning DataGrid
            - DataGrid class name
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with the specified System.Windows.Automation.Peers.PatternInterface.
            </summary>
            <param name="patternInterface">A value from the System.Windows.Automation.Peers.PatternInterface enumeration.</param>
            <returns>The object that supports the specified pattern, or null if unsupported.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer">
            <summary>
            AutomationPeer for DataGridCell
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.#ctor(System.Windows.Controls.DataGridCell)">
            <summary>
            AutomationPeer for DataGridCell
            </summary>
            <param name="owner">DataGridCell</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetNameCore">
            <summary>
            Gets the name of the element.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with the specified System.Windows.Automation.Peers.PatternInterface.
            </summary>
            <param name="patternInterface">A value from the System.Windows.Automation.Peers.PatternInterface enumeration.</param>
            <returns>The object that supports the specified pattern, or null if unsupported.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.IsKeyboardFocusableCore">
            <summary>
            Gets a value that indicates whether the element can accept keyboard focus.
            </summary>
            <returns>true if the element can accept keyboard focus; otherwise, false</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer">
            <summary>
            AutomationPeer for DataGridColumnHeader
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridColumnHeader)">
            <summary>
            AutomationPeer for DataGridColumnHeader
            </summary>
            <param name="owner">DataGridColumnHeader</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetHelpTextCore">
            <summary>
            Gets the string that describes the functionality of the control that is associated with the automation peer. 
            </summary>
            <returns>The string that contains the help text.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetNameCore">
            <summary>
            Gets the name of the element.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with the specified System.Windows.Automation.Peers.PatternInterface.
            </summary>
            <param name="patternInterface">A value from the System.Windows.Automation.Peers.PatternInterface enumeration.</param>
            <returns>The object that supports the specified pattern, or null if unsupported.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.IsContentElementCore">
            <summary>
            Gets a value that specifies whether the element is a content element.
            </summary>
            <returns>true if the element is a content element; otherwise false</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer">
            <summary>
            AutomationPeer for DataGridColumnHeadersPresenter
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter)">
            <summary>
            AutomationPeer for DataGridColumnHeadersPresenter
            </summary>
            <param name="owner">DataGridColumnHeadersPresenter</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.IsContentElementCore">
            <summary>
            Gets a value that specifies whether the element is a content element.
            </summary>
            <returns>true if the element is a content element; otherwise false</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer">
            <summary>
            AutomationPeer for DataGridDetailsPresenter
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridDetailsPresenter)">
            <summary>
            AutomationPeer for DataGridDetailsPresenter
            </summary>
            <param name="owner">DataGridDetailsPresenter</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.GetAutomationControlTypeCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.GetClassNameCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.IsControlElementCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.IsContentElementCore">
            
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer">
            <summary>
            AutomationPeer for a group of items in a DataGrid
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.#ctor(System.Windows.Data.CollectionViewGroup,System.Windows.Controls.DataGrid)">
            <summary>
            AutomationPeer for a group of items in a DataGrid
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetAcceleratorKeyCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetAccessKeyCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetAutomationControlTypeCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetAutomationIdCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetBoundingRectangleCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetChildrenCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetClassNameCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetClickablePointCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetHelpTextCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetItemStatusCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetItemTypeCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetLabeledByCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetLocalizedControlTypeCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetNameCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetOrientationCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.HasKeyboardFocusCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsContentElementCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsControlElementCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsEnabledCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsKeyboardFocusableCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsOffscreenCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsPasswordCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.IsRequiredForFormCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.SetFocusCore">
            
        </member>
        <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.OwningDataGrid">
            <summary>
            The owning DataGrid
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.OwningDataGridPeer">
            <summary>
            The owning DataGrid's Automation Peer
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.OwningRowGroupHeader">
            <summary>
            The owning DataGridRowGroupHeader
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataGridGroupItemAutomationPeer.OwningRowGroupHeaderPeer">
            <summary>
            The owning DataGridRowGroupHeader's Automation Peer
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer">
            <summary>
            AutomationPeer for an item in a DataGrid
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.#ctor(System.Object,System.Windows.Controls.DataGrid)">
            <summary>
            AutomationPeer for an item in a DataGrid
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAcceleratorKeyCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAccessKeyCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAutomationControlTypeCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetAutomationIdCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetBoundingRectangleCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetChildrenCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetClassNameCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetClickablePointCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetHelpTextCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetItemStatusCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetItemTypeCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetLabeledByCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetLocalizedControlTypeCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetNameCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetOrientationCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.HasKeyboardFocusCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsContentElementCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsControlElementCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsEnabledCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsKeyboardFocusableCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsOffscreenCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsPasswordCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.IsRequiredForFormCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.SetFocusCore">
            
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer">
            <summary>
            AutomationPeer for DataGridRow
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowAutomationPeer.#ctor(System.Windows.Controls.DataGridRow)">
            <summary>
            AutomationPeer for DataGridRow
            </summary>
            <param name="owner">DataGridRow</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer">
            <summary>
            AutomationPeer for DataGridRowGroupHeader
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer.#ctor(System.Windows.Controls.DataGridRowGroupHeader)">
            <summary>
            AutomationPeer for DataGridRowGroupHeader
            </summary>
            <param name="owner">DataGridRowGroupHeader</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowGroupHeaderAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer">
            <summary>
            AutomationPeer for DataGridRowHeader
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridRowHeader)">
            <summary>
            AutomationPeer for DataGridRowHeader
            </summary>
            <param name="owner">DataGridRowHeader</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.GetNameCore">
            <summary>
            Gets the name of the element.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.IsContentElementCore">
            <summary>
            Gets a value that specifies whether the element is a content element.
            </summary>
            <returns>true if the element is a content element; otherwise false</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer">
            <summary>
            AutomationPeer for DataGridRowsPresenter
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridRowsPresenter)">
            <summary>
            AutomationPeer for DataGridColumnHeadersPresenter
            </summary>
            <param name="owner">DataGridColumnHeadersPresenter</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.GetChildrenCore">
            
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.IsContentElementCore">
            <summary>
            Gets a value that specifies whether the element is a content element.
            </summary>
            <returns>true if the element is a content element; otherwise false</returns>
        </member>
        <member name="T:System.Windows.Controls.DataGridBeginningEditEventArgs">
            <summary>
            Provides data for the <see cref="E:System.Windows.Controls.DataGrid.BeginningEdit" /> event.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridBeginningEditEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.RoutedEventArgs)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Controls.DataGridBeginningEditEventArgs" /> class.
            </summary>
            <param name="column">
            The column that contains the cell to be edited.
            </param>
            <param name="row">
            The row that contains the cell to be edited.
            </param>
            <param name="editingEventArgs">
            Information about the user gesture that caused the cell to enter edit mode.
            </param>
        </member>
        <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.Column">
            <summary>
            Gets the column that contains the cell to be edited.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.EditingEventArgs">
            <summary>
            Gets information about the user gesture that caused the cell to enter edit mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.Row">
            <summary>
            Gets the row that contains the cell to be edited.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridCellEditEndedEventArgs">
            <summary>
            Provides information just after a cell has exited editing mode.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridCellEditEndedEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.Controls.DataGridEditAction)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="column">The column of the cell that has just exited edit mode.</param>
            <param name="row">The row container of the cell container that has just exited edit mode.</param>
            <param name="editAction">The editing action that has been taken.</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridCellEditEndedEventArgs.Column">
            <summary>
            The column of the cell that has just exited edit mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridCellEditEndedEventArgs.EditAction">
            <summary>
            The edit action taken when leaving edit mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridCellEditEndedEventArgs.Row">
            <summary>
            The row container of the cell container that has just exited edit mode.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridCellEditEndingEventArgs">
            <summary>
            Provides information just before a cell exits editing mode.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridCellEditEndingEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.FrameworkElement,System.Windows.Controls.DataGridEditAction)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="column">The column of the cell that is about to exit edit mode.</param>
            <param name="row">The row container of the cell container that is about to exit edit mode.</param>
            <param name="editingElement">The editing element within the cell.</param>
            <param name="editAction">The editing action that will be taken.</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridCellEditEndingEventArgs.Column">
            <summary>
            The column of the cell that is about to exit edit mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridCellEditEndingEventArgs.EditAction">
            <summary>
            The edit action to take when leaving edit mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridCellEditEndingEventArgs.EditingElement">
            <summary>
            The editing element within the cell. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridCellEditEndingEventArgs.Row">
            <summary>
            The row container of the cell container that is about to exit edit mode.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.DataGridFrozenGrid">
            <summary>
            Represents a non-scrollable grid that contains <see cref="T:System.Windows.Controls.DataGrid" /> row headers.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozenProperty">
            <summary>
            A dependency property that indicates whether the grid is frozen.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridFrozenGrid.GetIsFrozen(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates whether the grid is frozen.
            </summary>
            <param name="element">
            The object to get the <see cref="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> value from.
            </param>
            <returns>true if the grid is frozen; otherwise, false. The default is true.</returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridFrozenGrid.SetIsFrozen(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value that indicates whether the grid is frozen.
            </summary>
            <param name="element">The object to set the <see cref="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> value on.</param>
            <param name="value">true if <paramref name="element" /> is frozen; otherwise, false.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element" /> is null.</exception>
        </member>
        <member name="T:System.Windows.Controls.DataGridRowEditEndedEventArgs">
            <summary>
            Provides information just after a row has exited edit mode.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridRowEditEndedEventArgs.#ctor(System.Windows.Controls.DataGridRow,System.Windows.Controls.DataGridEditAction)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="row">The row container of the cell container that has just exited edit mode.</param>
            <param name="editAction">The editing action that has been taken.</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowEditEndedEventArgs.EditAction">
            <summary>
            The editing action that has been taken.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowEditEndedEventArgs.Row">
            <summary>
            The row container of the cell container that has just exited edit mode.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridRowEditEndingEventArgs">
            <summary>
            Provides information just before a row exits editing mode.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridRowEditEndingEventArgs.#ctor(System.Windows.Controls.DataGridRow,System.Windows.Controls.DataGridEditAction)">
            <summary>
            Instantiates a new instance of this class.
            </summary>
            <param name="row">The row container of the cell container that is about to exit edit mode.</param>
            <param name="editAction">The editing action that will be taken.</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowEditEndingEventArgs.EditAction">
            <summary>
            The editing action that will be taken.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowEditEndingEventArgs.Row">
            <summary>
            The row container of the cell container that is about to exit edit mode.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridRowEventArgs">
            <summary>
            Provides data for <see cref="T:System.Windows.Controls.DataGrid" /> row-related events.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridRowEventArgs.#ctor(System.Windows.Controls.DataGridRow)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRowEventArgs" /> class.
            </summary>
            <param name="dataGridRow">The row that the event occurs for.</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowEventArgs.Row">
            <summary>
            Gets the row that the event occurs for.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridRowGroupHeader">
            <summary>
            Represents the header of a <see cref="T:System.Windows.Controls.DataGrid" /> row group. 
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridRowGroupHeader.#ctor">
            <summary>
            Constructs a DataGridRowGroupHeader
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridRowGroupHeader.HeaderStyleProperty">
            <summary>
            Dependency Property for HeaderStyle
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridRowGroupHeader.ItemCountVisibilityProperty">
            <summary>
            DependencyProperty for ItemCountVisibility
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridRowGroupHeader.PropertyNameProperty">
            <summary>
            DependencyProperty for PropertyName
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridRowGroupHeader.PropertyNameVisibilityProperty">
            <summary>
            DependencyProperty for PropertyNameVisibility
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridRowGroupHeader.SublevelIndentProperty">
            <summary>
            SublevelIndent Dependency property
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridRowGroupHeader.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowGroupHeader.HeaderStyle">
            <summary>
            The style applied to the header cell of a <see cref="T:System.Windows.Controls.DataGridRowGroupHeader" />. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowGroupHeader.ItemCountVisibility">
            <summary>
            Gets or sets a value that indicates whether the item count is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowGroupHeader.PropertyName">
            <summary>
            Gets or sets the name of the property that this <see cref="T:System.Windows.Controls.DataGrid" /> row is bound to. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowGroupHeader.PropertyNameVisibility">
            <summary>
            Gets or sets a value that indicates whether the property name is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowGroupHeader.SublevelIndent">
            <summary>
            Gets or sets a value that indicates the amount that the 
            children of the <see cref="T:System.Windows.Controls.RowGroupHeader" /> are indented. 
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridRowGroupHeaderEventArgs">
            <summary>
            EventArgs used for the DataGrid's LoadingRowGroup and UnloadingRowGroup events
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridRowGroupHeaderEventArgs.#ctor(System.Windows.Controls.DataGridRowGroupHeader)">
            <summary>
            Constructs a DataGridRowGroupHeaderEventArgs instance
            </summary>
            <param name="rowGroupHeader"></param>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowGroupHeaderEventArgs.RowGroupHeader">
            <summary>
            DataGridRowGroupHeader associated with this instance
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridCell">
            <summary>
            Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> cell.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataGridCell.IsValidProperty">
            <summary>
            Identifies the IsValid dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridCell.OnIsValidPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsValidProperty property changed handler.
            </summary>
            <param name="d">DataGridCell that changed its IsValid.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.DataGridCell.OnApplyTemplate">
            <summary>
            Builds the visual tree for the cell control when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridCell.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridCell.EnsureStyle(System.Windows.Style)">
            <summary>
            Ensures that the correct Style is applied to this object.
            </summary>
            <param name="previousStyle">Caller's previous associated Style</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridCell.IsValid">
            <summary>
            Gets a value that indicates whether the data in a cell is valid. 
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridCell.InternalTestHook">
            <summary>
            Test hook class that exposes internal and private members of the DataGridCell
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.DataGridColumnHeader">
            <summary>
            Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> column header.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> class. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrushProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush" /> dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibilityProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility" /> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnApplyTemplate">
            <summary>
            Builds the visual tree for the column header when a new template is applied. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
            <exception cref="T:System.NotSupportedException">
            <paramref name="newContent" /> is not a UIElement.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.EnsureStyle(System.Windows.Style)">
            <summary>
            Ensures that the correct Style is applied to this object.
            </summary>
            <param name="previousStyle">Caller's previous associated Style</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.GetReorderingTargetColumn(System.Windows.Point,System.Boolean,System.Boolean)">
            <summary>
            Returns the column against whose top-left the reordering caret should be positioned
            </summary>
            <param name="mousePosition"></param>
            <param name="ignoreVertical"></param>
            <param name="clipToVisible"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.GetReorderingTargetDisplayIndex(System.Windows.Point,System.Boolean,System.Boolean)">
            <summary>
            Returns the display index to set the column to
            </summary>
            <param name="mousePosition"></param>
            <param name="ignoreVertical"></param>
            <param name="clipToVisible"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.IsReorderTargeted(System.Windows.Point,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Returns true if the mouse is 
            - to the left of the element, or within the left half of the element
            and
            - within the vertical range of the element, or ignoreVertical == true
            </summary>
            <param name="mousePosition"></param>
            <param name="element"></param>
            <param name="ignoreVertical"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnLostMouseCapture">
            <summary>
            Resets the static DataGridColumnHeader properties when a header loses mouse capture
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnMouseEnter(System.Windows.Point)">
            <summary>
            Sets up the DataGridColumnHeader for the MouseEnter event
            </summary>
            <param name="mousePosition">mouse position relative to the DataGridColumnHeader</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnMouseLeave">
            <summary>
            Sets up the DataGridColumnHeader for the MouseLeave event
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.DataGridColumnHeader.TestHook">
            <summary>
            Internal property to expose the TestHook object
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint the column header separator lines. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility">
            <summary>
            Gets or sets a value indicating whether the column header separator lines are visible.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.DataGridColumnHeader.InternalTestHook">
            <summary>
            Test hook class that exposes internal and private members of the DataGridColumnHeader
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.InternalTestHook.#ctor(System.Windows.Controls.Primitives.DataGridColumnHeader)">
            <summary>
            Creates a TestHook for the given DataGridColumnHeader
            </summary>
            <param name="columnHeader">DataGridColumnHeader</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.InternalTestHook.OnLostMouseCapture">
            <summary>
            Exposes the private OnLostMouseCapture method through the TestHook
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.InternalTestHook.OnMouseEnter(System.Windows.Point)">
            <summary>
            Exposes the private OnMouseEnter method through the TestHook
            </summary>
            <param name="mousePosition">mouse position relative to the DataGridColumnHeader</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.InternalTestHook.OnMouseLeave">
            <summary>
            Exposes the private OnMouseLeave method through the TestHook
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGrid">
            <summary>
            Displays data in a customizable grid.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.DATAGRID_defaultColumnDisplayOrder">
            <summary>
            The default order to use for columns when there is no <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order"/>
            value available for the property.
            </summary>
            <remarks>
            The value of 10,000 comes from the DataAnnotations spec, allowing
            some properties to be ordered at the beginning and some at the end.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGrid" /> class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.AlternatingRowBackgroundProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGrid.AlternatingRowBackground" /> 
            dependency property.
            </summary>
            <returns>
            The identifier for the <see cref="P:System.Windows.Controls.DataGrid.AlternatingRowBackground" /> 
            dependency property.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.AreRowDetailsFrozenProperty">
            <summary>
            Identifies the AreRowDetailsFrozen dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.AreRowGroupHeadersFrozenProperty">
            <summary>
            Identifies the AreRowDetailsFrozen dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.AutoGenerateColumnsProperty">
            <summary>
            Identifies the AutoGenerateColumns dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.CanUserReorderColumnsProperty">
            <summary>
            Identifies the CanUserReorderColumns dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.CanUserResizeColumnsProperty">
            <summary>
            Identifies the CanUserResizeColumns dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.CanUserSortColumnsProperty">
            <summary>
            Identifies the CanUserSortColumns dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.CellStyleProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGrid.CellStyle" /> dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.ColumnHeaderHeightProperty">
            <summary>
            Identifies the ColumnHeaderHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnColumnHeaderHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ColumnHeaderHeightProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its ColumnHeaderHeight.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.ColumnHeaderStyleProperty">
            <summary>
            Identifies the ColumnHeaderStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.ColumnWidthProperty">
            <summary>
            Identifies the ColumnWidth dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnColumnWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ColumnWidthProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its ColumnWidth.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.DragIndicatorStyleProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGrid.DragIndicatorStyle" /> 
            dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.DropLocationIndicatorStyleProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle" /> 
            dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.FrozenColumnCountProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGrid.FrozenColumnCount" /> 
            dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.GridLinesVisibilityProperty">
            <summary>
            Identifies the GridLines dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnGridLinesVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            GridLinesProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its GridLines.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.HeadersVisibilityProperty">
            <summary>
            Identifies the HeadersVisibility dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnHeadersVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeadersVisibilityProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its HeadersVisibility.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.HorizontalGridLinesBrushProperty">
            <summary>
            Identifies the HorizontalGridLinesBrush dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnHorizontalGridLinesBrushPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HorizontalGridLinesBrushProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its HorizontalGridLinesBrush.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the HorizontalScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnHorizontalScrollBarVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HorizontalScrollBarVisibilityProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its HorizontalScrollBarVisibility.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnIsReadOnlyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its IsReadOnly.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.IsValidProperty">
            <summary>
            Identifies the IsValid dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnIsValidPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsValidProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its IsValid.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its ItemsSource.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.MaxColumnWidthProperty">
            <summary>
            Identifies the MaxColumnWidth dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnMaxColumnWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaxColumnWidthProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its ColumnWidth.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.MinColumnWidthProperty">
            <summary>
            Identifies the MinColumnWidth dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnMinColumnWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinColumnWidthProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its ColumnWidth.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.RowBackgroundProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowBackground" /> dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.RowDetailsTemplateProperty">
            <summary>
            Identifies the RowDetailsTemplate dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.RowDetailsVisibilityModeProperty">
            <summary>
            Identifies the RowDetailsVisibilityMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnRowDetailsVisibilityModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RowDetailsVisibilityModeProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its RowDetailsVisibilityMode.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.RowHeightProperty">
            <summary>
            Identifies the RowHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnRowHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RowHeightProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its RowHeight.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.RowHeaderWidthProperty">
            <summary>
            Identifies the RowHeaderWidth dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnRowHeaderWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RowHeaderWidthProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its RowHeaderWidth.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.RowHeaderStyleProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderStyle" /> dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.RowStyleProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowStyle" /> dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its SelectionMode.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnSelectedIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedIndexProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its SelectedIndex.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItemProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its SelectedItem.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.VerticalGridLinesBrushProperty">
            <summary>
            Identifies the VerticalGridLinesBrush dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnVerticalGridLinesBrushPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            VerticalGridLinesBrushProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its VerticalGridLinesBrush.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGrid.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the VerticalScrollBarVisibility dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnVerticalScrollBarVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            VerticalScrollBarVisibilityProperty property changed handler.
            </summary>
            <param name="d">DataGrid that changed its VerticalScrollBarVisibility.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.BeginEdit">
            <summary>
            Enters editing mode for the current cell and current row (if they're not already in editing mode).
            </summary>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.BeginEdit(System.Windows.RoutedEventArgs)">
            <summary>
            Enters editing mode for the current cell and current row (if they're not already in editing mode).
            </summary>
            <param name="editingEventArgs">Provides information about the user gesture that caused the call to BeginEdit. Can be null.</param>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CancelEdit">
            <summary>
            Cancels editing mode and restores the original value.
            </summary>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CancelEdit(System.Windows.Controls.DataGridEditingUnit)">
            <summary>
            Cancels editing mode for the specified DataGridEditingUnit and restores its original value.
            </summary>
            <param name="editingUnit">Specifies whether to cancel edit for a Cell or Row.</param>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CommitEdit">
            <summary>
            Commits editing mode and pushes changes to the backend.
            </summary>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CommitEdit(System.Windows.Controls.DataGridEditingUnit,System.Boolean)">
            <summary>
            Commits editing mode for the specified DataGridEditingUnit and pushes changes to the backend.
            </summary>
            <param name="editingUnit">Specifies whether to commit edit for a Cell or Row.</param>
            <param name="exitEditingMode">Editing mode is left if True.</param>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GetGroupFromItem(System.Object,System.Int32)">
            <summary>
            Returns the Group at the indicated level or null if the item is not in the ItemsSource
            </summary>
            <param name="item">item</param>
            <param name="groupLevel">groupLevel</param>
            <returns>The group the given item falls under or null if the item is not in the ItemsSource</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ScrollIntoView(System.Object,System.Windows.Controls.DataGridColumn)">
            <summary>
            Scrolls the specified item or RowGroupHeader and/or column into view.
            If item is not null: scrolls the row representing the item into view;
            If column is not null: scrolls the column into view;
            If both item and column are null, the method returns without scrolling.
            </summary>
            <param name="item">an item from the DataGrid's items source or a CollectionViewGroup from the PagedCollectionView</param>
            <param name="column">a column from the DataGrid's columns collection</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of the <see cref="T:System.Windows.Controls.DataGridRow" />.
            </summary>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
            <returns>
            The actual size used by the <see cref="T:System.Windows.Controls.DataGridRow" />.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a <see cref="T:System.Windows.Controls.DataGridRow" /> to prepare for 
            arranging them during the 
            <see cref="M:System.Windows.Controls.DataGridRow.ArrangeOverride(System.Windows.Size)" /> pass. 
            </summary>
            <returns>
            The size that the <see cref="T:System.Windows.Controls.DataGridRow" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that 
            child elements should not exceed.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnApplyTemplate">
            <summary>
            Builds the visual tree for the column header when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnAutoGeneratingColumn(System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs)">
            <summary>
            Raises the AutoGeneratingColumn event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnBeginningEdit(System.Windows.Controls.DataGridBeginningEditEventArgs)">
            <summary>
            Raises the BeginningEdit event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnCellEditEnded(System.Windows.Controls.DataGridCellEditEndedEventArgs)">
            <summary>
            Raises the CellEditEnded event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnCellEditEnding(System.Windows.Controls.DataGridCellEditEndingEventArgs)">
            <summary>
            Raises the CellEditEnding event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnCurrentCellChanged(System.EventArgs)">
            <summary>
            Raises the CurrentCellChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnLoadingRow(System.Windows.Controls.DataGridRowEventArgs)">
            <summary>
            Raises the LoadingRow event for row preparation.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnLoadingRowGroup(System.Windows.Controls.DataGridRowGroupHeaderEventArgs)">
            <summary>
            Raises the LoadingRowGroup event
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnLoadingRowDetails(System.Windows.Controls.DataGridRowDetailsEventArgs)">
            <summary>
            Raises the LoadingRowDetails for row details preparation
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnPreparingCellForEdit(System.Windows.Controls.DataGridPreparingCellForEditEventArgs)">
            <summary>
            Raises the PreparingCellForEdit event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnRowEditEnded(System.Windows.Controls.DataGridRowEditEndedEventArgs)">
            <summary>
            Raises the RowEditEnded event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnRowEditEnding(System.Windows.Controls.DataGridRowEditEndingEventArgs)">
            <summary>
            Raises the RowEditEnding event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the SelectionChanged event and clears the _selectionChanged.
            This event won't get raised again until after _selectionChanged is set back to true.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnUnloadingRow(System.Windows.Controls.DataGridRowEventArgs)">
            <summary>
            Raises the UnloadingRow event for row recycling.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnUnloadingRowDetails(System.Windows.Controls.DataGridRowDetailsEventArgs)">
            <summary>
            Raises the UnloadingRowDetails event
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnUnloadingRowGroup(System.Windows.Controls.DataGridRowGroupHeaderEventArgs)">
            <summary>
            Raises the UnLoadingRowGroup event
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CancelEdit(System.Windows.Controls.DataGridEditingUnit,System.Boolean)">
            <summary>
            Cancels editing mode for the specified DataGridEditingUnit and restores its original value.
            </summary>
            <param name="editingUnit">Specifies whether to cancel edit for a Cell or Row.</param>
            <param name="raiseEvents">Specifies whether or not to raise editing events</param>
            <returns>True if operation was successful. False otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CoerceSelectedItem">
            <summary>
            call when: selection changes or SelectedItems object changes
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ProcessSelectionAndCurrency(System.Int32,System.Object,System.Int32,System.Windows.Controls.DataGridSelectionAction,System.Boolean)">
            <summary>
            Selects items and updates currency based on parameters
            </summary>
            <param name="columnIndex">column index to make current</param>
            <param name="item">data item or CollectionViewGroup to make current</param>
            <param name="backupSlot">slot to use in case the item is no longer valid</param>
            <param name="action">selection action to perform</param>
            <param name="scrollIntoView">whether or not the new current item should be scrolled into view</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CreateValidationSummaryItem(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Create an ValidationSummaryItem for a given ValidationResult, by finding all cells related to the
            validation error and adding them as separate ValidationSummaryItemSources.
            </summary>
            <param name="validationResult">ValidationResult</param>
            <returns>ValidationSummaryItem</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ValidationSummary_FocusingInvalidControl(System.Object,System.Windows.Controls.FocusingInvalidControlEventArgs)">
            <summary>
            Handles the ValidationSummary's FocusingInvalidControl event and begins edit on the cells
            that are associated with the selected error.
            </summary>
            <param name="sender">ValidationSummary</param>
            <param name="e">FocusingInvalidControlEventArgs</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ValidationSummary_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the ValidationSummary's SelectionChanged event and changes which cells are displayed as invalid.
            </summary>
            <param name="sender">ValidationSummary</param>
            <param name="e">SelectionChangedEventArgs</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.FindValidationSummaryItem(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Searches through the DataGrid's ValidationSummary for any errors that use the given
            ValidationResult as the ValidationSummaryItem's Context value.
            </summary>
            <param name="context">ValidationResult</param>
            <returns>ValidationSummaryItem or null if not found</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ExitEdit(System.Boolean)">
            <summary>
            Exits editing mode without trying to commit or revert the editing, and 
            without repopulating the edited row's cell.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.RefreshColumnElements(System.Windows.Controls.DataGridColumn,System.String)">
            <summary>
            Called when a column property changes, and its cells need to 
            adjust that that column change.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GetColumnXFromIndex(System.Int32)">
            <devdoc>
                 Returns the absolute coordinate of the left edge of the given column (including
                 the potential gridline - that is the left edge of the gridline is returned). Note that
                 the column does not need to be in the display area.
            </devdoc>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CollapseRowGroup(System.Windows.Data.CollectionViewGroup,System.Boolean)">
            <summary>
            Collapses the DataGridRowGroupHeader that represents a given CollectionViewGroup
            </summary>
            <param name="collectionViewGroup">CollectionViewGroup</param>
            <param name="collapseAllSubgroups">Set to true to collapse all Subgroups</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ExpandRowGroup(System.Windows.Data.CollectionViewGroup,System.Boolean)">
            <summary>
            Expands the DataGridRowGroupHeader that represents a given CollectionViewGroup
            </summary>
            <param name="collectionViewGroup">CollectionViewGroup</param>
            <param name="expandAllSubgroups">Set to true to expand all Subgroups</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.OnRowDetailsVisibilityChanged(System.Windows.Controls.DataGridRowDetailsEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged" /> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ClearRowSelection(System.Boolean)">
            <summary>
            Clears the entire selection. Displayed rows are deselected explicitly to visualize
            potential transition effects
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.ClearRowSelection(System.Int32,System.Boolean)">
            <summary>
            Clears the entire selection except the indicated row. Displayed rows are deselected explicitly to 
            visualize potential transition effects. The row indicated is selected if it is not already.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GetRowFromItem(System.Object)">
            <summary>
            Returns the row associated to the provided backend data item.
            </summary>
            <param name="dataItem">backend data item</param>
            <returns>null if the DataSource is null, the provided item in not in the source, or the item is not displayed; otherwise, the associated Row</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CorrectSlotsAfterDeletion(System.Int32,System.Boolean)">
            <summary>
            Adjusts the index of all displayed, loaded and edited rows after a row was deleted.
            Removes the deleted row from the list of loaded rows if present.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.CorrectSlotsAfterInsertion(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adjusts the index of all displayed, loaded and edited rows after rows were deleted.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GenerateRow(System.Int32,System.Int32)">
            <summary>
            Returns a row for the provided index. The row gets first loaded through the LoadingRow event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GenerateRow(System.Int32,System.Int32,System.Object)">
            <summary>
            Returns a row for the provided index. The row gets first loaded through the LoadingRow event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GetExactSlotElementHeight(System.Int32)">
            <summary>
            Returns the exact row height, whether it is currently displayed or not.
            The row is generated and added to the displayed rows in case it is not already displayed.
            The horizontal gridlines thickness are added.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GetSlotElementHeight(System.Int32)">
            <summary>
            If the provided slot is displayed, returns the exact height.
            If the slot is not displayed, returns a default height.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GetSlotElementsHeight(System.Int32,System.Int32)">
            <summary>
            Cumulates the approximate height of the rows from fromRowIndex to toRowIndex included.
            Including the potential gridline thickness.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.GetGeneratedRow(System.Object)">
            <summary>
            Checks if the row for the provided dataContext has been generated and is present
            in either the loaded rows, pre-fetched rows, or editing row. 
            The displayed rows are *not* searched. Returns null if the row does not belong to those 3 categories.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGrid.SlotIsDisplayed(System.Int32)">
            <summary>
            Determines whether the row at the provided index must be displayed or not.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn">
            <summary>
            Occurs one time for each public, non-static property in the bound data type when the 
            <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> property is changed and the 
            <see cref="P:System.Windows.Controls.DataGrid.AutoGenerateColumns" /> property is true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.BeginningEdit">
            <summary>
            Occurs before a cell or row enters editing mode. 
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.CellEditEnded">
            <summary>
            Occurs after cell editing has ended.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.CellEditEnding">
            <summary>
            Occurs immediately before cell editing has ended.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged">
            <summary>
            Occurs when the <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> 
            property of a column changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragCompleted">
            <summary>
            Occurs when the user drops a column header that was being dragged using the mouse.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragDelta">
            <summary>
            Occurs one or more times while the user drags a column header using the mouse. 
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragStarted">
            <summary>
            Occurs when the user begins dragging a column header using the mouse. 
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.ColumnReordered">
            <summary>
            Raised when column reordering ends, to allow subscribers to clean up.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.ColumnReordering">
            <summary>
            Raised when starting a column reordering action.  Subscribers to this event can
            set tooltip and caret UIElements, constrain tooltip position, indicate that
            a preview should be shown, or cancel reordering.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.CurrentCellChanged">
            <summary>
            Occurs when a different cell becomes the current cell.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.LoadingRow">
            <summary>
            Occurs after a <see cref="T:System.Windows.Controls.DataGridRow" /> 
            is instantiated, so that you can customize it before it is used.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.LoadingRowDetails">
            <summary>
            Occurs when a new row details template is applied to a row, so that you can customize 
            the details section before it is used.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.LoadingRowGroup">
            <summary>
            Occurs before a DataGridRowGroupHeader header is used.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.PreparingCellForEdit">
            <summary>
            Occurs when a cell in a <see cref="T:System.Windows.Controls.DataGridTemplateColumn" /> enters editing mode.
            
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged">
            <summary>
            Occurs when the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode" /> 
            property value changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.RowEditEnded">
            <summary>
            Occurs when the row has been successfully committed or cancelled.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.RowEditEnding">
            <summary>
            Occurs immediately before the row has been successfully committed or cancelled.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.SelectionChanged">
            <summary>
            Occurs when the <see cref="P:System.Windows.Controls.DataGrid.SelectedItem" /> or 
            <see cref="P:System.Windows.Controls.DataGrid.SelectedItems" /> property value changes.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.UnloadingRow">
            <summary>
            Occurs when a <see cref="T:System.Windows.Controls.DataGridRow" /> 
            object becomes available for reuse.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.UnloadingRowGroup">
            <summary>
            Occurs when the DataGridRowGroupHeader is available for reuse.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataGrid.UnloadingRowDetails">
            <summary>
            Occurs when a row details element becomes available for reuse.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.AlternatingRowBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint the background of odd-numbered rows.
            </summary>
            <returns>
            The brush that is used to paint the background of odd-numbered rows. The default is a 
            <see cref="T:System.Windows.Media.SolidColorBrush" /> with a 
            <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of white (ARGB value #00FFFFFF).
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.AreRowDetailsFrozen">
            <summary>
            Gets or sets a value that indicates whether the row details sections remain 
            fixed at the width of the display area or can scroll horizontally.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.AreRowGroupHeadersFrozen">
            <summary>
            Gets or sets a value that indicates whether the row group header sections
            remain fixed at the width of the display area or can scroll horizontally.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.AutoGenerateColumns">
            <summary>
            Gets or sets a value that indicates whether columns are created 
            automatically when the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.CanUserReorderColumns">
            <summary>
            Gets or sets a value that indicates whether the user can change 
            the column display order by dragging column headers with the mouse.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.CanUserResizeColumns">
            <summary>
            Gets or sets a value that indicates whether the user can adjust column widths using the mouse.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.CanUserSortColumns">
            <summary>
            Gets or sets a value that indicates whether the user can sort columns by clicking the column header.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.CellStyle">
            <summary>
            Gets or sets the style that is used when rendering the data grid cells.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.ColumnHeaderHeight">
            <summary>
            Gets or sets the height of the column headers row.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle">
            <summary>
            Gets or sets the style that is used when rendering the column headers.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.ColumnWidth">
            <summary>
            Gets or sets the standard width or automatic sizing mode of columns in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.DragIndicatorStyle">
            <summary>
            Gets or sets the style that is used when rendering the drag indicator
            that is displayed while dragging column headers.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle">
            <summary>
            Gets or sets the style that is used when rendering the column headers.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.FrozenColumnCount">
            <summary>
            Gets or sets the number of columns that the user cannot scroll horizontally.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.GridLinesVisibility">
            <summary>
            Gets or sets a value that indicates which grid lines separating inner cells are shown.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.HeadersVisibility">
            <summary>
            Gets or sets a value that indicates the visibility of row and column headers.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating rows.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates how the horizontal scroll bar is displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.IsReadOnly">
            <summary>
            Gets or sets a value that indicates whether the user can edit the values in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.IsValid">
            <summary>
            Gets a value that indicates whether data in the grid is valid. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.ItemsSource">
            <summary>
            Gets or sets a collection that is used to generate the content of the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.MaxColumnWidth">
            <summary>
            Gets or sets the maximum width of columns in the <see cref="T:System.Windows.Controls.DataGrid" /> . 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.MinColumnWidth">
            <summary>
            Gets or sets the minimum width of columns in the <see cref="T:System.Windows.Controls.DataGrid" />. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.RowBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint row backgrounds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.RowDetailsTemplate">
            <summary>
            Gets or sets the template that is used to display the content of the details section of rows.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode">
            <summary>
            Gets or sets a value that indicates when the details sections of rows are displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.RowHeight">
            <summary>
            Gets or sets the standard height of rows in the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.RowHeaderWidth">
            <summary>
            Gets or sets the width of the row header column.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.RowHeaderStyle">
            <summary>
            Gets or sets the style that is used when rendering the row headers. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.RowStyle">
            <summary>
            Gets or sets the style that is used when rendering the rows.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.SelectionMode">
            <summary>
            Gets or sets the selection behavior of the data grid.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.SelectedIndex">
            <summary>
            Gets or sets the index of the current selection.
            </summary>
            <returns>
            The index of the current selection, or -1 if the selection is empty.
            </returns> 
        </member>
        <member name="P:System.Windows.Controls.DataGrid.SelectedItem">
            <summary>
            Gets or sets the data item corresponding to the selected row.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.VerticalGridLinesBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating columns. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.VerticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates how the vertical scroll bar is displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.Columns">
            <summary>
            Gets a collection that contains all the columns in the control.
            </summary>      
        </member>
        <member name="P:System.Windows.Controls.DataGrid.CurrentColumn">
            <summary>
            Gets or sets the column that contains the current cell.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.RowGroupHeaderStyles">
            <summary>
            Gets or sets the style that is used when rendering the row group header.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.SelectedItems">
            <summary>
            Gets a list that contains the data items corresponding to the selected rows.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGrid.CurrentItem">
            <summary>
            Gets the data item bound to the row that contains the current cell.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGrid.InternalTestHook">
            <summary>
            Test hook class that exposes internal and private members of the DataGrid
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridLength">
            <summary>
            Represents the lengths of elements within the <see cref="T:System.Windows.Controls.DataGrid" /> control.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridLength.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridLength" /> class. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:System.Windows.Controls.DataGridLength.op_Equality(System.Windows.Controls.DataGridLength,System.Windows.Controls.DataGridLength)">
            <summary>
            Overloaded operator, compares 2 GridLength's.
            </summary>
            <param name="gl1">first DataGridLength to compare.</param>
            <param name="gl2">second DataGridLength to compare.</param>
            <returns>true if specified DataGridLength have same value 
            and unit type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridLength.op_Inequality(System.Windows.Controls.DataGridLength,System.Windows.Controls.DataGridLength)">
            <summary>
            Overloaded operator, compares 2 GridLength's.
            </summary>
            <param name="gl1">first DataGridLength to compare.</param>
            <param name="gl2">second DataGridLength to compare.</param>
            <returns>true if specified DataGridLength have either different value or 
            unit type.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridLength.Equals(System.Windows.Controls.DataGridLength)">
            <summary>
            Compares this instance of DataGridLength with another instance.
            </summary>
            <param name="other">DataGridLength length instance to compare.</param>
            <returns><c>true</c> if this DataGridLength instance has the same value 
            and unit type as gridLength.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridLength.Equals(System.Object)">
            <summary>
            Compares this instance of GridLength with another object.
            </summary>
            <param name="obj">Reference to an object for comparison.</param>
            <returns><c>true</c> if this DataGridLength instance has the same value 
            and unit type as oCompare.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridLength.GetHashCode">
            <summary>
            Returns a unique hash code for this DataGridLength
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridLength.Auto">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the standard automatic sizing mode.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the standard automatic sizing mode.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridLength.IsAbsolute">
            <summary>
                Returns <c>true</c> if this DataGridLength instance holds 
                an absolute (pixel) value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridLength.IsAuto">
            <summary>
                Returns <c>true</c> if this DataGridLength instance is 
                automatic (not specified).
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridLength.IsSizeToCells">
            <summary>
                Returns <c>true</c> if this instance is to size to the cells of a column or row.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridLength.IsSizeToHeader">
            <summary>
                Returns <c>true</c> if this instance is to size to the header of a column or row.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridLength.SizeToCells">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the cell-based automatic sizing mode.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the cell-based automatic sizing mode.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridLength.SizeToHeader">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the header-based automatic sizing mode.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the header-based automatic sizing mode.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridLength.Value">
            <summary>
            Gets the absolute value of the <see cref="T:System.Windows.Controls.DataGridLength" /> in pixels.
            </summary>
            <returns>
            The absolute value of the <see cref="T:System.Windows.Controls.DataGridLength" /> in pixels.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.DataGridLengthConverter">
            <summary>
            DataGridLengthConverter - Converter class for converting instances of other types to and from DataGridLength instances.
            </summary> 
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridLengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Checks whether or not this class can convert from a given type.
            </summary>
            <param name="context">
            An ITypeDescriptorContext that provides a format context. 
            </param>
            <param name="sourceType">The Type being queried for support.</param>
            <returns>
            <c>true</c> if this converter can convert from the provided type, 
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridLengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Checks whether or not this class can convert to a given type.
            </summary>
            <param name="context">
            An ITypeDescriptorContext that provides a format context. 
            </param>
            <param name="destinationType">The Type being queried for support.</param>
            <returns>
            <c>true</c> if this converter can convert to the provided type, 
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridLengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Attempts to convert to a DataGridLength from the given object.
            </summary>
            <param name="context">
            An ITypeDescriptorContext that provides a format context. 
            </param>
            <param name="culture">
            The CultureInfo to use for the conversion. 
            </param>
            <param name="value">The object to convert to a GridLength.</param>
            <returns>
            The GridLength instance which was constructed.
            </returns>
            <exception cref="T:System.NotSupportedException">
            A NotSupportedException is thrown if the example object is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DataGridLengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
             <summary>
             Attempts to convert a DataGridLength instance to the given type.
             </summary>
             <param name="context">
             An ITypeDescriptorContext that provides a format context. 
             </param>
             <param name="culture">
             The CultureInfo to use for the conversion. 
             </param>
             <param name="value">The DataGridLength to convert.</param>
             <param name="destinationType">The type to which to convert the DataGridLength instance.</param>
             <returns>
             The object which was constructed.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             An ArgumentNullException is thrown if the example object is null.
             </exception>
             <exception cref="T:System.NotSupportedException">
             A NotSupportedException is thrown if the object is not null and is not a DataGridLength,
             or if the destinationType isn't one of the valid destination types.
             </exception>
            <SecurityNote>
                 Critical: calls InstanceDescriptor ctor which LinkDemands
                 PublicOK: can only make an InstanceDescriptor for DataGridLength, not an arbitrary class
            </SecurityNote> 
        </member>
        <member name="T:System.Windows.Controls.DataGridColumnReorderingEventArgs">
            <summary>
            Provides data for the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordering" /> event.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumnReorderingEventArgs.#ctor(System.Windows.Controls.DataGridColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumnReorderingEventArgs" /> class.
            </summary>
            <param name="dataGridColumn"></param>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.Column">
            <summary>
            The column being moved.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.DragIndicator">
            <summary>
            The popup indicator displayed while dragging.  If null and Handled = true, then do not display a tooltip.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.DropLocationIndicator">
            <summary>
            UIElement to display at the insertion position.  If null and Handled = true, then do not display an insertion indicator.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.DataGridCellsPresenter">
            <summary>
            Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" />
            to specify the location in the control's visual tree where the cells are to be added. 
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridCellsPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of the <see cref="T:System.Windows.Controls.Primitives.DataGridCellsPresenter" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:System.Windows.Controls.Primitives.DataGridCellsPresenter" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridCellsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a <see cref="T:System.Windows.Controls.Primitives.DataGridCellsPresenter" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:System.Windows.Controls.Primitives.DataGridCellsPresenter" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.DataGridCheckBoxColumn">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts 
            <see cref="T:System.Windows.Controls.CheckBox" /> controls in its cells.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataGridBoundColumn">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that can 
            bind to a property in the grid's data source.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataGridColumn">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumn" /> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.GetColumnContainingElement(System.Windows.FrameworkElement)">
            <summary>
            Returns the column which contains the given element
            </summary>
            <param name="element">element contained in a column</param>
            <returns>Column that contains the element, or null if not found
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
            When overridden in a derived class, causes the column cell being edited to revert to the unedited value.
            </summary>
            <param name="editingElement">
            The element that the column displays for a cell in editing mode.
            </param>
            <param name="uneditedValue">
            The previous, unedited value in the cell being edited.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            When overridden in a derived class, gets an editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">
            The cell that will contain the generated element.
            </param>
            <param name="dataItem">
            The data item represented by the row that contains the intended cell.
            </param>
            <returns>
            A new editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            When overridden in a derived class, gets a read-only element that is bound to the column's 
            <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">
            The cell that will contain the generated element.
            </param>
            <param name="dataItem">
            The data item represented by the row that contains the intended cell.
            </param>
            <returns>
            A new, read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.NotifyPropertyChanged(System.String)">
            <summary>
            Called by a specific column type when one of its properties changed, 
            and its current cells need to be updated.
            </summary>
            <param name="propertyName">Indicates which property changed and caused this call</param>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
            When overridden in a derived class, called when a cell in the column enters editing mode.
            </summary>
            <param name="editingElement">
            The element that the column displays for a cell in editing mode.
            </param>
            <param name="editingEventArgs">
            Information about the user gesture that is causing a cell to enter editing mode.
            </param>
            <returns>
            The unedited value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
            <summary>
            Called by the DataGrid control when a column asked for its
            elements to be refreshed, typically because one of its properties changed.
            </summary>
            <param name="element">Indicates the element that needs to be refreshed</param>
            <param name="propertyName">Indicates which property changed and caused this call</param>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumn.GetSortDescription">
            <summary>
            We get the sort description from the data source.  We don't worry whether we can modify sort -- perhaps the sort description
            describes an unchangeable sort that exists on the data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumn.ActualWidth">
            <summary>
            Actual visible width after Width, MinWidth, and MaxWidth setting at the Column level and DataGrid level
            have been taken into account
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumn.CellStyle">
            <summary>
            Gets or sets the style that is used when rendering cells in the column.
            </summary>
            <returns>
            The style that is used when rendering cells in the column. The default is null.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumn.CanUserReorder">
            <summary>
            Gets or sets a value that indicates whether the user can change the column display position by 
            dragging the column header.
            </summary>
            <returns>
            true if the user can drag the column header to a new position; otherwise, false. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserReorderColumns" /> property value.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumn.CanUserResize">
            <summary>
            Gets or sets a value that indicates whether the user can adjust the column width using the mouse.
            </summary>
            <returns>
            true if the user can resize the column; false if the user cannot resize the column. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserResizeColumns" /> property value.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumn.CanUserSort">
            <summary>
            Gets or sets a value that indicates whether the user can sort the column by clicking the column header.
            </summary>
            <returns>
            true if the user can sort the column; false if the user cannot sort the column. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserSortColumns" /> property value.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumn.DisplayIndex">
            <summary>
            Gets or sets the display position of the column relative to the other columns in the <see cref="T:System.Windows.Controls.DataGrid" />.
            </summary>
            <returns>
            The zero-based position of the column as it is displayed in the associated <see cref="T:System.Windows.Controls.DataGrid" />. The default is the index of the corresponding <see cref="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)" /> in the <see cref="P:System.Windows.Controls.DataGrid.Columns" /> collection.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            When setting this property, the specified value is less than -1 or equal to <see cref="F:System.Int32.MaxValue" />.
            
            -or-
            
            When setting this property on a column in a <see cref="T:System.Windows.Controls.DataGrid" />, the specified value is less than zero or greater than or equal to the number of columns in the <see cref="T:System.Windows.Controls.DataGrid" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            When setting this property, the <see cref="T:System.Windows.Controls.DataGrid" /> is already making <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> adjustments. For example, this exception is thrown when you attempt to set <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> in a <see cref="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged" /> event handler.
            
            -or-
            
            When setting this property, the specified value would result in a frozen column being displayed in the range of unfrozen columns, or an unfrozen column being displayed in the range of frozen columns.
            </exception>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumn.SortMemberPath">
            <summary>
            Holds the name of the member to use for sorting, if not using the default.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridBoundColumn.Binding">
            <summary>
            Gets or sets the binding that associates the column with a property in the data source.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle">
            <summary>
            Gets or sets the style that is used when rendering the element that the column displays for a cell in editing mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridBoundColumn.ElementStyle">
            <summary>
            Gets or sets the style that is used when rendering the element that the column displays for a cell 
            that is not in editing mode.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridCheckBoxColumn" /> class. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Causes the column cell being edited to revert to the specified value.
            </summary>
            <param name="editingElement">
            The element that the column displays for a cell in editing mode.
            </param>
            <param name="uneditedValue">
            The previous, unedited value in the cell being edited.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
             <summary>
             Gets a <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
             </summary>
             <param name="cell">
             The cell that will contain the generated element.
             </param>
             <param name="dataItem">
             The data item represented by the row that contains the intended cell.
            </param>
             <returns>
             A new <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
             </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>                
            Gets a read-only <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">
            The cell that will contain the generated element.
            </param>
            <param name="dataItem">
            The data item represented by the row that contains the intended cell.
            </param>
            <returns>
            A new, read-only <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a cell in the column enters editing mode.
            </summary>
            <param name="editingElement">
            The element that the column displays for a cell in editing mode.
            </param>
            <param name="editingEventArgs">
            Information about the user gesture that is causing a cell to enter editing mode.
            </param>
            <returns>
            The unedited value. 
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
            <summary>
            Called by the DataGrid control when this column asks for its elements to be
            updated, because its CheckBoxContent or IsThreeState property changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridCheckBoxColumn.IsThreeState">
            <summary>
            Gets or sets a value that indicates whether the hosted <see cref="T:System.Windows.Controls.CheckBox" /> controls allow three states or two. 
            </summary>
            <returns>
            true if the hosted controls support three states; false if they support two states. The default is false. 
            </returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter">
            <summary>
            Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the 
            location in the control's visual tree where the column headers are to be added.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridRowDetailsEventArgs">
            <summary>
            Provides data for the <see cref="E:System.Windows.Controls.DataGrid.LoadingRowDetails" />, <see cref="E:System.Windows.Controls.DataGrid.UnloadingRowDetails" />, 
            and <see cref="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged" /> events.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridRowDetailsEventArgs.#ctor(System.Windows.Controls.DataGridRow,System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRowDetailsEventArgs" /> class. 
            </summary>
            <param name="row">The row that the event occurs for.</param>
            <param name="detailsElement">The row details section as a framework element.</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowDetailsEventArgs.DetailsElement">
            <summary>
            Gets the row details section as a framework element.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRowDetailsEventArgs.Row">
            <summary>
            Gets the row that the event occurs for.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridRow">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.DataGrid" /> row.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRow" /> class. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridRow.DetailsTemplateProperty">
            <summary>
            Identifies the DetailsTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.OnDetailsTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DetailsTemplateProperty property changed handler.
            </summary>
            <param name="d">DataGridRow that changed its DetailsTemplate.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGridRow.DetailsVisibilityProperty">
            <summary>
            Identifies the DetailsTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.OnDetailsVisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DetailsVisibilityProperty property changed handler.
            </summary>
            <param name="d">DataGridRow that changed its DetailsTemplate.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGridRow.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.OnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderProperty property changed handler.
            </summary>
            <param name="d">DataGridRow that changed its Header.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="F:System.Windows.Controls.DataGridRow.HeaderStyleProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.DataGridRow.HeaderStyle" /> dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridRow.IsValidProperty">
            <summary>
            Identifies the IsValid dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.OnIsValidPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsValidProperty property changed handler.
            </summary>
            <param name="d">DataGridRow that changed its IsValid.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.GetIndex">
            <summary>
            Returns the index of the current row.
            </summary>
            <returns>
            The index of the current row.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.GetRowContainingElement(System.Windows.FrameworkElement)">
            <summary>
            Returns the row which contains the given element
            </summary>
            <param name="element">element contained in a row</param>
            <returns>Row that contains the element, or null if not found
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of the <see cref="T:System.Windows.Controls.DataGridRow" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:System.Windows.Controls.DataGridRow" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a <see cref="T:System.Windows.Controls.DataGridRow" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:System.Windows.Controls.Primitives.DataGridRow" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.OnApplyTemplate">
            <summary>
            Builds the visual tree for the column header when a new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridRow.ApplyState(System.Boolean)">
            <summary>
            Updates the background brush of the row, using a storyboard if available.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRow.DetailsTemplate">
            <summary>
            Gets or sets the template that is used to display the details section of the row.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRow.DetailsVisibility">
            <summary>
            Gets or sets a value that indicates when the details section of the row is displayed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRow.Header">
            <summary>
            Gets or sets the row header.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRow.HeaderStyle">
            <summary>
            Gets or sets the style that is used when rendering the row header.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRow.IsValid">
            <summary>
            Gets a value that indicates whether the data in a row is valid. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRow.Index">
            <summary>
            Index of the row
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridRow.IsLayoutDelayed">
            <summary>
            Layout when template is applied
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridRow.InternalTestHook">
            <summary>
            Test hook class that exposes internal and private members of the DataGridRow
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.DataGridRowsPresenter">
            <summary>
            Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the 
            location in the control's visual tree where the rows are to be added.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridRowsPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridRowsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridRowsPresenter.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.DataGridRowHeader">
            <summary>
            Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> row header. 
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> class. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrushProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush" /> dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibilityProperty">
            <summary>
            Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility" /> dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.OnApplyTemplate">
            <summary>
            Builds the visual tree for the row header when a new template is applied. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> to prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.EnsureStyle(System.Windows.Style)">
            <summary>
            Ensures that the correct Style is applied to this object.
            </summary>
            <param name="previousStyle">Caller's previous associated Style</param>
        </member>
        <member name="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint the row header separator lines. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility">
            <summary>
            Gets or sets a value indicating whether the row header separator lines are visible.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs">
            <summary>
            Provides data for the <see cref="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn" /> event. 
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.#ctor(System.String,System.Type,System.Windows.Controls.DataGridColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs" /> class.
            </summary>
            <param name="propertyName">
            The name of the property bound to the generated column.
            </param>
            <param name="propertyType">
            The <see cref="T:System.Type" /> of the property bound to the generated column.
            </param>
            <param name="column">
            The generated column.
            </param>
        </member>
        <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.Column">
            <summary>
            Gets the generated column.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyName">
            <summary>
            Gets the name of the property bound to the generated column.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the property bound to the generated column.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridColumnEventArgs">
            <summary>
            Provides data for <see cref="T:System.Windows.Controls.DataGrid" /> column-related events.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridColumnEventArgs.#ctor(System.Windows.Controls.DataGridColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumnEventArgs" /> class.
            </summary>
            <param name="column">The column that the event occurs for.</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridColumnEventArgs.Column">
            <summary>
            Gets the column that the event occurs for.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridDataConnection.BeginEdit(System.Object)">
            <summary>
            Puts the entity into editing mode if possible
            </summary>
            <param name="dataItem">The entity to edit</param>
            <returns>True if editing was started</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridDataConnection.CancelEdit(System.Object)">
            <summary>
            Cancels the current entity editing and exits the editing mode.
            </summary>
            <param name="dataItem">The entity being edited</param>
            <returns>True if a cancellation operation was invoked.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridDataConnection.EndEdit(System.Object)">
            <summary>
            Commits the current entity editing and exits the editing mode.
            </summary>
            <param name="dataItem">The entity being edited</param>
            <returns>True if a commit operation was invoked.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridDataConnection.AllowSort">
            <summary>
            True if the collection view says it can sort.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter">
            <summary>
            Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree 
            where the row details are to be added.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeightProperty">
            <summary>
            Identifies the ContentHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridDetailsPresenter.OnContentHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentHeightProperty property changed handler.
            </summary>
            <param name="d">DataGridDetailsPresenter.</param>
            <param name="e">DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of the <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" />.
            </summary>
            <returns>
            The actual size used by the <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" />.
            </returns>
            <param name="finalSize">
            The final area within the parent that this element should use to arrange itself and its children.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridDetailsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" /> to 
            prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
            </param>
            <returns>
            The size that the <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" /> determines it needs during layout, based on its calculations of child object allocated sizes.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Primitives.DataGridDetailsPresenter.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeight">
            <summary>
            Gets or sets the height of the content.
            </summary>
            <returns>
            The height of the content.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.DataGridEditAction">
            <summary>
            Used to specify action to take out of edit mode.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataGridEditAction.Cancel">
            <summary>
            Cancel the changes.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridEditAction.Commit">
            <summary>
            Commit edited value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridGridLinesVisibility">
            <summary>
            Determines whether the inner cells' vertical/horizontal gridlines are shown or not.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataGridEditingUnit">
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataGridHeadersVisibility">
            <summary>
            Determines whether the row/column headers are shown or not.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataGridHeadersVisibility.All">
            <summary>
            Show Row, Column, and Corner Headers
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridHeadersVisibility.Column">
            <summary>
            Show only Column Headers with top-right corner Header
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridHeadersVisibility.Row">
            <summary>
            Show only Row Headers with bottom-left corner
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridHeadersVisibility.None">
            <summary>
            Don’t show any Headers
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridRowDetailsVisibilityMode">
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataGridSelectionAction">
            <summary>
            Determines the type of action to take when selecting items
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridSelectionMode">
            <summary>
            Determines the selection model
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.DataGridPreparingCellForEditEventArgs">
            <summary>
            Provides data for the <see cref="E:System.Windows.Controls.DataGrid.PreparingCellForEdit" /> event.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.RoutedEventArgs,System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridPreparingCellForEditEventArgs" /> class.
            </summary>
            <param name="column">The column that contains the cell to be edited.</param>
            <param name="row">The row that contains the cell to be edited.</param>
            <param name="editingEventArgs">Information about the user gesture that caused the cell to enter edit mode.</param>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
        </member>
        <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.Column">
            <summary>
            Gets the column that contains the cell to be edited.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.EditingElement">
            <summary>
            Gets the element that the column displays for a cell in editing mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.EditingEventArgs">
            <summary>
            Gets information about the user gesture that caused the cell to enter edit mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.Row">
            <summary>
            Gets the row that contains the cell to be edited.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridTemplateColumn">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts template-specified 
            content in its cells.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridTemplateColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridTemplateColumn" /> class. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridTemplateColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Gets an element defined by the <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate" /> that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <returns>A new editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
            <param name="cell">The cell that will contain the generated element.</param>
            <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
            <exception cref="T:System.TypeInitializationException">
            The <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DataGridTemplateColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Gets an element defined by the <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate" /> that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <returns>A new, read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
            <param name="cell">The cell that will contain the generated element.</param>
            <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
            <exception cref="T:System.TypeInitializationException">
            The <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate" /> is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.DataGridTemplateColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a cell in the column enters editing mode.
            </summary>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
            <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
            <returns>null in all cases.</returns>
        </member>
        <member name="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate">
            <summary>
            Gets or sets the template that is used to display the contents of a cell that is in editing mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate">
            <summary>
            Gets or sets the template that is used to display the contents of a cell that is not in editing mode. 
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataGridTextColumn">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts textual content in its cells.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.DataGridTextColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridTextColumn" /> class.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataGridTextColumn.FontFamilyProperty">
            <summary>
            Identifies the FontFamily dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataGridTextColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Causes the column cell being edited to revert to the specified value.
            </summary>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
            <param name="uneditedValue">The previous, unedited value in the cell being edited.</param>
        </member>
        <member name="M:System.Windows.Controls.DataGridTextColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Gets a <see cref="T:System.Windows.Controls.TextBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">The cell that will contain the generated element.</param>
            <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
            <returns>A new <see cref="T:System.Windows.Controls.TextBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridTextColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
            <summary>
            Gets a read-only <see cref="T:System.Windows.Controls.TextBlock" /> element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
            </summary>
            <param name="cell">The cell that will contain the generated element.</param>
            <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
            <returns>A new, read-only <see cref="T:System.Windows.Controls.TextBlock" /> element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridTextColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the cell in the column enters editing mode.
            </summary>
            <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
            <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
            <returns>The unedited value. </returns>
        </member>
        <member name="M:System.Windows.Controls.DataGridTextColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
            <summary>
            Called by the DataGrid control when this column asks for its elements to be
            updated, because a property changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridTextColumn.FontFamily">
            <summary>
            Gets or sets the font name.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridTextColumn.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridTextColumn.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridTextColumn.FontWeight">
            <summary>
            Gets or sets the font weight or thickness.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataGridTextColumn.Foreground">
            <summary>
            Gets or sets a brush that describes the foreground of the column cells.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.AddValue(System.Int32,`0)">
            <summary>
            Add a value with an associated index to the table
            </summary>
            <param name="index">Index where the value is to be added or updated</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.AddValues(System.Int32,System.Int32,`0)">
            <summary>
            Add multiples values with an associated start index to the table 
            </summary>
            <param name="startIndex">index where first value is added</param>
            <param name="count">Total number of values to add (must be greater than 0)</param>
            <param name="value">Value to add</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.Clear">
            <summary>
            Clears the index table
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.Contains(System.Int32)">
            <summary>
            Returns true if the given index is contained in the table
            </summary>
            <param name="index">index to search for</param>
            <returns>True if the index is contained in the table</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.ContainsAll(System.Int32,System.Int32)">
            <summary>
            Returns true if the entire given index range is contained in the table
            </summary>
            <param name="startIndex">beginning of the range</param>
            <param name="endIndex">end of the range</param>
            <returns>True if the entire index range is present in the table</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.ContainsIndexAndValue(System.Int32,`0)">
            <summary>
            Returns true if the given index is contained in the table with the the given value
            </summary>
            <param name="index">index to search for</param>
            <param name="value">value expected</param>
            <returns>true if the given index is contained in the table with the the given value</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.Copy">
            <summary>
            Returns a copy of this IndexToValueTable
            </summary>
            <returns>copy of this IndexToValueTable</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.GetIndexCount(System.Int32,System.Int32,`0)">
            <summary>
            Returns the inclusive index count between lowerBound and upperBound of all indexes with the given value
            </summary>
            <param name="lowerBound">lowerBound criteria</param>
            <param name="upperBound">upperBound criteria</param>
            <param name="value">value to look for</param>
            <returns>Number of indexes contained in the table between lowerBound and upperBound (inclusive)</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.GetIndexCount(System.Int32,System.Int32)">
            <summary>
            Returns the inclusive index count between lowerBound and upperBound
            </summary>
            <param name="lowerBound">lowerBound criteria</param>
            <param name="upperBound">upperBound criteria</param>
            <returns>Number of indexes contained in the table between lowerBound and upperBound (inclusive)</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.GetIndexCountBeforeGap(System.Int32,System.Int32)">
            <summary>
            Returns the number indexes in this table after a given startingIndex but before
            reaching a gap of indexes of a given size
            </summary>
            <param name="startingIndex">Index to start at</param>
            <param name="gapSize">Size of index gap</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.GetIndexes">
            <summary>
            Returns an enumerator that goes through the indexes present in the table
            </summary>
            <returns>an enumerator that enumerates the indexes present in the table</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.GetIndexes(System.Int32)">
            <summary>
            Returns all the indexes on or after a starting index
            </summary>
            <param name="startIndex">start index</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.GetNthIndex(System.Int32)">
            <summary>
            Return the index of the Nth element in the table.
            </summary>
            <param name="n">n</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.GetValueAt(System.Int32)">
            <summary>
            Returns the value at a given index or the default value if the index is not in the table
            </summary>
            <param name="index">index to search for</param>
            <returns>the value at the given index or the default value if index is not in the table</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.GetValueAt(System.Int32,System.Boolean@)">
            <summary>
            Returns the value at a given index or the default value if the index is not in the table
            </summary>
            <param name="index">index to search for</param>
            <param name="found">set to true by the method if the index was found; otherwise, false</param>
            <returns>the value at the given index or the default value if index is not in the table</returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.IndexOf(System.Int32)">
            <summary>
            Returns an index's index within this table
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.InsertIndex(System.Int32)">
            <summary>
            Inserts an index at the given location.  This does not alter values in the table
            </summary>
            <param name="index">index location to insert an index</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.InsertIndexAndValue(System.Int32,`0)">
            <summary>
            Inserts an index into the table with the given value 
            </summary>
            <param name="index">index to insert</param>
            <param name="value">value for the index</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.InsertIndexes(System.Int32,System.Int32)">
            <summary>
            Inserts multiple indexes into the table.  This does not alter Values in the table
            </summary>
            <param name="startIndex">first index to insert</param>
            <param name="count">total number of indexes to insert</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.InsertIndexesAndValues(System.Int32,System.Int32,`0)">
            <summary>
            Inserts multiple indexes into the table with the given value 
            </summary>
            <param name="startIndex">Index to insert first value</param>
            <param name="count">Total number of values to insert (must be greater than 0)</param>
            <param name="value">Value to insert</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.RemoveIndex(System.Int32)">
            <summary>
            Removes an index from the table.  This does not alter Values in the table
            </summary>
            <param name="index">index to remove</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.RemoveIndexAndValue(System.Int32)">
            <summary>
            Removes a value and its index from the table
            </summary>
            <param name="index">index to remove</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.RemoveIndexes(System.Int32,System.Int32)">
            <summary>
            Removes multiple indexes from the table.  This does not alter Values in the table
            </summary>
            <param name="startIndex">first index to remove</param>
            <param name="count">total number of indexes to remove</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.RemoveIndexesAndValues(System.Int32,System.Int32)">
            <summary>
            Removes multiple values and their indexes from the table
            </summary>
            <param name="startIndex">first index to remove</param>
            <param name="count">total number of indexes to remove</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.RemoveValue(System.Int32)">
            <summary>
            Removes a value from the table at the given index.  This does not alter other indexes in the table.
            </summary>
            <param name="index">index where value should be removed</param>
        </member>
        <member name="M:System.Windows.Controls.IndexToValueTable`1.RemoveValues(System.Int32,System.Int32)">
            <summary>
            Removes multiple values from the table.  This does not alter other indexes in the table.
            </summary>
            <param name="startIndex">first index where values should be removed </param>
            <param name="count">total number of values to remove</param>
        </member>
        <member name="P:System.Windows.Controls.IndexToValueTable`1.IndexCount">
            <summary>
            Total number of indices represented in the table
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IndexToValueTable`1.IsEmpty">
            <summary>
            Returns true if the table is empty
            </summary>
        </member>
        <member name="P:System.Windows.Controls.IndexToValueTable`1.RangeCount">
            <summary>
            Returns the number of index ranges in the table
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeHelper.GetDisplayName(System.Type,System.String)">
            <summary>
            Finds the PropertyInfo for the specified property path within this Type, and returns
            the value of GetShortName on its DisplayAttribute, if one exists. GetShortName will return
            the value of Name if there is no ShortName specified.
            </summary>
            <param name="type">Type to search</param>
            <param name="propertyPath">property path</param>
            <returns>DisplayAttribute.ShortName if it exists, null otherwise</returns>
        </member>
        <member name="T:System.Windows.Controls.DataPager">
            <summary>
            Handles paging for an <see cref="T:System.ComponentModel.IPagedCollectionView" />. 
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DataPager.AutoEllipsisProperty">
            <summary>
            Identifies the AutoEllipsis dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.CanChangePageProperty">
            <summary>
            Identifies the CanChangePage dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.CanMoveToFirstPageProperty">
            <summary>
            Identifies the CanMoveToFirstPage dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.CanMoveToLastPageProperty">
            <summary>
            Identifies the CanMoveToLastPage dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.CanMoveToNextPageProperty">
            <summary>
            Identifies the CanMoveToNextPage dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.CanMoveToPreviousPageProperty">
            <summary>
            Identifies the CanMoveToPreviousPage dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.DisplayModeProperty">
            <summary>
            Identifies the DisplayMode dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.IsTotalItemCountFixedProperty">
            <summary>
            Identifies the IsTotalItemCountFixed dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.ItemCountProperty">
            <summary>
            Identifies the ItemCount dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.NumericButtonCountProperty">
            <summary>
            Identifies the NumericButtonCount dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.NumericButtonStyleProperty">
            <summary>
            Identifies the NumericButtonStyle dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.PageCountProperty">
            <summary>
            Identifies the PageCount dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.PageIndexProperty">
            <summary>
            Identifies the PageIndex dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.PageSizeProperty">
            <summary>
            Identifies the PageSize dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.PrivateForegroundProperty">
            <summary>
            Identifies the PrivateForeground dependency property. This dependency property is bound to 
            DataPager.Foreground to be aware of its changes. It is used to update the foreground of the
            numeric toggle buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager.SourceProperty">
            <summary>
            Identifies the Source dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._currentPagePrefixTextBlock">
            <summary>
            Private accessor for the text block appearing before the current page text box.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._currentPageSuffixTextBlock">
            <summary>
            Private accessor for the text block appearing after the current page text box.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._currentPageTextBox">
            <summary>
            Private accessor for the current page text box.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._firstPageButtonBase">
            <summary>
            Private accessor for the first page ButtonBase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._focusedToggleButtonIndex">
            <summary>
            Page index corresponding to the ToggleButton that has keyboard focus
            -1 if no ToggleButton has focus.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._ignoreToggleButtonCheckedNotification">
            <summary>
            Set to True when the ToggleButton_Checked notification needs to be ignored.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._ignoreToggleButtonFocusNotification">
            <summary>
            Set to True when the ToggleButton_GotFocus and ToggleButton_LostFocus 
            notifications need to be ignored.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._ignoreToggleButtonUncheckedNotification">
            <summary>
            Set to True when a ToggleButton_Unchecked notification needs to be ignored.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._lastPageButtonBase">
            <summary>
            Private accessor for the last page ButtonBase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._needPageChangingNotification">
            <summary>
            Set to True when a PageChanging notification is expected to be raised
            before the next PagedChanged notification.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._nextPageButtonBase">
            <summary>
            Private accessor for the next page ButtonBase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._numericButtonPanel">
            <summary>
            Private accessor for the panel hosting the buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._previousPageButtonBase">
            <summary>
            Private accessor for the previous page ButtonBase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._requestedPageIndex">
            <summary>
            The new index of the current page, used to change the
            current page when a user enters something into the
            current page text box.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DataPager._weakEventListenerPropertyChanged">
            <summary>
            Holds the weak event listener for the INotifyPropertyChanged.PropertyChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.#ctor">
            <summary>
            Initializes a new instance of the DataPager class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnApplyTemplate">
            <summary>
            Applies the control's template, retrieves the elements
            within it, and sets up events.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnCreateAutomationPeer">
            <summary>
            Creates an AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>)
            </summary>
            <returns>Automation Peer for this <see cref="T:System.Windows.Controls.DataPager"/> control</returns>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnAutoEllipsisPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            AutoEllipsis property changed handler.
            </summary>
            <param name="d">NumericButton that changed its AutoEllipsis.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnDisplayModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayMode property changed handler.
            </summary>
            <param name="d">DataPager that changed its DisplayMode.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnIsTotalItemCountFixedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsTotalItemCountFixed property changed handler.
            </summary>
            <param name="d">DataPager that changed IsTotalItemCountFixed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnNumericButtonCountPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            NumericButtonCount property changed handler.
            </summary>
            <param name="d">DataPager that changed its NumericButtonCount.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnNumericButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            NumericButtonStyle property changed handler.
            </summary>
            <param name="d">DataPager that changed its NumericButtonStyle.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnPageIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PageIndex property changed handler.
            </summary>
            <param name="d">DataPager that changed its PageIndex.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnPageSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PageSize property changed handler.
            </summary>
            <param name="d">DataPager that changed its PageSize.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnPrivateForegroundPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PrivateForeground property changed handler.
            </summary>
            <param name="d">DataPager that changed its Foreground property</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnReadOnlyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a Read-Only dependency property is changed
            </summary>
            <param name="d">DataPager that changed its read-only property.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SourceProperty property changed handler.
            </summary>
            <param name="d">DataPager that changed its Source.</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.GetButtonStartIndex">
            <summary>
            Gets the starting index that our buttons should be labeled with.
            </summary>
            <returns>Starting index for our buttons</returns>
        </member>
        <member name="M:System.Windows.Controls.DataPager.MoveCurrentPageToTextboxValue">
            <summary>
            Attempts to move the current page index to the value
            in the current page textbox.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.MoveToRequestedPage">
            <summary>
            Given the new value of _requestedPageIndex, this method will attempt a page move 
            and set the _currentPageIndex variable accordingly.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnCurrentPageTextBoxKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the KeyDown event on the current page text box.
            </summary>
            <param name="sender">The object firing this event.</param>
            <param name="e">The event args for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnCurrentPageTextBoxLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the loss of focus for the current page text box.
            </summary>
            <param name="sender">The object firing this event.</param>
            <param name="e">The event args for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnDataPagerIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the notifications for the DataPager.IsEnabled changes
            </summary>
            <param name="sender">DataPager that changed its IsEnabled property</param>
            <param name="e">The DependencyPropertyChangedEventArgs for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnFirstPageButtonBaseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the first page ButtonBase.
            </summary>
            <param name="sender">The object firing this event.</param>
            <param name="e">The event args for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnLastPageButtonBaseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the last page ButtonBase.
            </summary>
            <param name="sender">The object firing this event.</param>
            <param name="e">The event args for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnNextPageButtonBaseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the next page ButtonBase.
            </summary>
            <param name="sender">The object firing this event.</param>
            <param name="e">The event args for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnPreviousPageButtonBaseClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click of the previous page ButtonBase.
            </summary>
            <param name="sender">The object firing this event.</param>
            <param name="e">The event args for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.PageMoveHandler(System.Int32,System.Int32,System.Windows.Controls.DataPager.PageMoveOperationDelegate)">
            <summary>
            This helper method will take care of calling the specified page move
            operation on the source collection, or MoveToPage if left null, while 
            also firing the PageIndexChanging and PageIndexChanged events.
            </summary>
            <param name="oldPageIndex">The oldPageIndex value before we change pages</param>
            <param name="newPageIndex">The page index to use with MoveToPage. This argument is ignored otherwise</param>
            <param name="pageMoveOperation">The delegate to call, or null when MoveToPage must be called</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.OnSourcePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles a property change within the Source.
            </summary>
            <param name="sender">The object firing this event.</param>
            <param name="e">The event args for this event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.RaisePageIndexChangeEvents(System.Boolean)">
            <summary>
            Raises a non-cancellable PageIndexChanging and optional PageIndexChanged events.
            </summary>
            <param name="raisePageChanged">True when the PageChanged event needs to be raised</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.RaisePageIndexChanged">
            <summary>
            Raises the PageIndexChanged event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.RaisePageIndexChanging(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the PageIndexChanging event.
            </summary>
            <param name="e">The event args to use for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.SetCannotChangePage(System.Boolean)">
            <summary>
            Update DataPager UI for paging enabled.
            </summary>
            <param name="needPage">Boolean that specifies if a page is needed</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.SetCanChangePage">
            <summary>
            Update DataPager UI for paging disabled.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.ToggleButton_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Notification raised when a numeric toggle button gets checked
            </summary>
            <param name="sender">The numeric toggle button</param>
            <param name="e">Routed event for the notification</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.ToggleButton_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Notification raised when a numeric toggle button gets focus
            </summary>
            <param name="sender">The numeric toggle button</param>
            <param name="e">Routed event for the notification</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.ToggleButton_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Notification raised when a numeric toggle button loses focus
            </summary>
            <param name="sender">The numeric toggle button</param>
            <param name="e">Routed event for the notification</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.ToggleButton_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Notification raised when a numeric toggle button gets unchecked
            </summary>
            <param name="sender">The numeric toggle button</param>
            <param name="e">Routed event for the notification</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.TryParseTextBoxPage">
            <summary>
            Attempts to put the integer value of the string in _currentPageTextBox into _requestedPageIndex.
            </summary>
            <returns>Whether or not the parsing of the string succeeded.</returns>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdateButtonCount">
            <summary>
            Updates the visual display of the number of buttons that we display.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdateButtonDisplay">
            <summary>
            Updates the visual content and style of the buttons that we display.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdateCommonState">
            <summary>
            Updates the state related to the IsEnabled property
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdateControl">
            <summary>
            Updates the current page, the total pages, and the
            state of the control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdateCanPageFirstAndPrevious">
            <summary>
            Updates the states of whether the pager can page to the first
            and to the previous page.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdateCanPageNextAndLast">
            <summary>
            Updates the states of whether the pager can page to the next
            and to the last page.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdateCurrentPagePrefixAndSuffix(System.Boolean)">
            <summary>
            Goes into the TotalPageCountKnown or TotalPageCountUnknown state according to Source.TotalItemCount
            and updates the captions of the text blocks surrounding the current page text box.
            </summary>
            <param name="needPage">True when a Source is set and PageSize > 0</param>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdateNumericButtonsForeground">
            <summary>
            Pushes this DataPager's Foreground into the numeric buttons when that property isn't set
            in their style.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdatePageModeDisplay">
            <summary>
            Updates the visual display to show the current page mode
            we have selected.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DataPager.UpdatePageCount">
            <summary>
            Updates the page count based on the number of items and the page size.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataPager.PageIndexChanging">
            <summary>
            EventHandler for when PageIndex is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.DataPager.PageIndexChanged">
            <summary>
            EventHandler for when PageIndex has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.AutoEllipsis">
            <summary>
            Gets or sets a value that indicates whether or not to use an ellipsis as the last button.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.CanChangePage">
            <summary>
            Gets a value that indicates whether or not the user is allowed to move to another page
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.CanMoveToFirstPage">
            <summary>
            Gets a value that indicates whether or not the <see cref="T:System.Windows.Controls.DataPager" /> will 
            allow the user to attempt to move to the first page if <see cref="P:System.Windows.Controls.DataPager.CanChangePage" /> is true. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.CanMoveToLastPage">
            <summary>
            Gets a value that indicates whether or not the <see cref="T:System.Windows.Controls.DataPager" /> 
            will allow the user to attempt to move to the last page if <see cref="P:System.Windows.Controls.DataPager.CanChangePage" /> is true. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.CanMoveToNextPage">
            <summary>
            Gets a value that indicates whether or not the <see cref="T:System.Windows.Controls.DataPager" /> 
            will allow the user to attempt to move to the next page if<see cref="P:System.Windows.Controls.DataPager.CanChangePage" /> is true. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.CanMoveToPreviousPage">
            <summary>
            Gets a value that indicates whether or not the <see cref="T:System.Windows.Controls.DataPager" /> 
            will allow the user to attempt to move to the previous page if <see cref="P:System.Windows.Controls.DataPager.CanChangePage" /> is true.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.DisplayMode">
            <summary>
            Gets or sets a value that indicates how the 
            <see cref="T:System.Windows.Controls.DataPager" /> user interface is displayed
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.IsTotalItemCountFixed">
            <summary>
            Gets or sets a value that indicates whether or not the total number of items in the collection is fixed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.ItemCount">
            <summary>
            Gets the current number of known items in the <see cref="T:System.ComponentModel.IPagedCollectionView" /> . 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.Source">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.IPagedCollectionView" /> . 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.NumericButtonCount">
            <summary>
            Gets or sets a value that indicates the number of page buttons shown 
            on the <see cref="T:System.Windows.Controls.DataPager" /> user interface. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.NumericButtonStyle">
            <summary>
            Gets or sets the style that will be used for the numeric buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.PageCount">
            <summary>
            Gets the current number of known pages in the <see cref="T:System.ComponentModel.IPagedCollectionView" /> . 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.PageIndex">
            <summary>
            Gets or sets the current <see cref="P:System.ComponentModel.IPagedCollectionView.PageIndex" /> 
            in the <see cref="T:System.ComponentModel.IPagedCollectionView" /> . 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.PageSize">
            <summary>
            Gets or sets the current <see cref="P:System.ComponentModel.IPagedCollectionView.PageSize" /> in the <see cref="T:System.ComponentModel.IPagedCollectionView" /> .
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.CurrentPageTextBox">
            <summary>
            Gets the TextBox holding the current PageIndex value, if any.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.PagedSource">
            <summary>
            Gets the Source as an IPagedCollectionView
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DataPager.PrivateForeground">
            <summary>
            Gets or sets the items to page through.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DataPager.PageMoveOperationDelegate">
            <summary>
            Delegate for calling page move operations
            </summary>
            <returns>Boolean value for whether the operation succeeded</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.DataPagerAutomationPeer">
            <summary>
            Automation peer for the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.#ctor(System.Windows.Controls.DataPager)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" /> class.
            </summary>
            <param name="owner">
            The <see cref="T:System.Windows.Controls.DataPager" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataPagerAutomationPeer" />.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the element that is associated with the UI Automation peer.
            </summary>
            <returns>The control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetClassNameCore">
            <summary>
            Called by GetClassName that gets a human readable name that, in addition to AutomationControlType, 
            differentiates the control represented by this AutomationPeer.
            </summary>
            <returns>The string that contains the name.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetNameCore">
            <summary>
            Gets text that describes the DataPager that is associated with this automation peer.
            Called by System.Windows.Automation.Peers.AutomationPeer.GetName().
            </summary>
            <returns>
            When the control is not paging data:
            - Value returned by the base implementation if it's not empty
            - Name of the owning DataPager control if it's not empty
            - Name returned by the LabeledBy automation peer if it's not empty
            - DataPager class name if none of the above is valid
            When the control is paging data:
            - "Page N" when the total page count is unknown
            - "Page N of M" when the count is known
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern that is associated with the specified System.Windows.Automation.Peers.PatternInterface.
            </summary>
            <param name="patternInterface">A value from the System.Windows.Automation.Peers.PatternInterface enumeration.</param>
            <returns>The object that supports the specified pattern, or null if unsupported.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetClickablePointCore">
            <summary>
            Returns a System.Windows.Point that represents the clickable space that is
            on the System.Windows.UIElement that is associated with this System.Windows.Automation.Peers.FrameworkElementAutomationPeer.
            This method is called by System.Windows.Automation.Peers.AutomationPeer.GetClickablePoint().
            </summary>
            <returns>The System.Windows.Point on the element that allows a click.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <summary>
            Sets the page number of the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
            <param name="value">Value used for setting the PageIndex property of the <see cref="T:System.Windows.Controls.DataPager" /> control</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetIsReadOnlyCore">
            <summary>
            Computes the value for IRangeValueProvider's IsReadOnly property 
            </summary>
            <returns>True when no page move is allowed</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetLargeChangeCore">
            <summary>
            Computes the value for IRangeValueProvider's LargeChange property 
            </summary>
            <returns>Large change value to use</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetMaximumCore">
            <summary>
            Computes the value for IRangeValueProvider's Maximum property 
            </summary>
            <returns>Maximum value to use</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.GetMinimumCore">
            <summary>
            Computes the value for IRangeValueProvider's Minimum property 
            </summary>
            <returns>Minimum value to use</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.InitializeProperties">
            <summary>
            Initializes all the variable IRangeValueProvider properties
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.RefreshPageIndex(System.Int32)">
            <summary>
            Method called by the owning DataPager when its page index has changed.
            </summary>
            <param name="oldPageIndex">Previous value of the PageIndex property</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DataPagerAutomationPeer.RefreshProperties">
            <summary>
            Method called by the owning DataPager when the IRangeValueProvider properties need to be recomputed.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.IsReadOnlyPrivate">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.Windows.Controls.DataPager" /> control allows page changes.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.LargeChangePrivate">
            <summary>
            Gets or sets the value to be added or subtracted from the page number of the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.MaximumPrivate">
            <summary>
            Gets or sets the maximum page number value for the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.MinimumPrivate">
            <summary>
            Gets or sets the minimum page number value for the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.OwningDataPager">
            <summary>
            Gets the owner as a DataPager
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Windows.Controls.DataPager" /> control allows page changes.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
            <summary>
            Gets the value to be added or subtracted from the page number of the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
            <summary>
            Gets the maximum page number value for the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
            <summary>
            Gets the minimum page number value for the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
            <summary>
            Gets the value to be added or subtracted from the page number of the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.DataPagerAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
            <summary>
            Gets the page number of the <see cref="T:System.Windows.Controls.DataPager" /> control.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PagerDisplayMode">
            <summary>
            PagerDisplayMode Enum
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.PagerDisplayMode.FirstLastNumeric">
            <summary>
            Shows the First and Last buttons + the numeric display
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagerDisplayMode.FirstLastPreviousNext">
            <summary>
            Shows the First, Last, Previous, Next buttons
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagerDisplayMode.FirstLastPreviousNextNumeric">
            <summary>
            Shows the First, Last, Previous, Next buttons + the numeric display
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagerDisplayMode.Numeric">
            <summary>
            Shows the numeric display
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagerDisplayMode.PreviousNext">
            <summary>
            Shows the Previous and Next buttons
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PagerDisplayMode.PreviousNextNumeric">
            <summary>
            Shows the Previous and Next buttons + the numeric display
            </summary>
        </member>
        <member name="T:System.Windows.Controls.PagerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.AutoEllipsisString">
            <summary>
              Looks up a localized string similar to ....
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.AutomationPeerName_TotalPageCountKnown">
            <summary>
              Looks up a localized string similar to Page {0} of {1}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.AutomationPeerName_TotalPageCountUnknown">
            <summary>
              Looks up a localized string similar to Page {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.CurrentPagePrefix_TotalPageCountKnown">
            <summary>
              Looks up a localized string similar to Page.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.CurrentPagePrefix_TotalPageCountUnknown">
            <summary>
              Looks up a localized string similar to Page.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.CurrentPageSuffix_TotalPageCountKnown">
            <summary>
              Looks up a localized string similar to of {0}.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.CurrentPageSuffix_TotalPageCountUnknown">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.InvalidButtonPanelContent">
            <summary>
              Looks up a localized string similar to The NumericButtonPanel contains invalid children..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.InvalidTimeSpan">
            <summary>
              Looks up a localized string similar to The {0} time span must be strictly positive..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.PageIndexMustBeNegativeOne">
            <summary>
              Looks up a localized string similar to The PageIndex property can only be set to -1 when the Source property is null or the PageSize property is 0..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.UnderlyingPropertyIsReadOnly">
            <summary>
              Looks up a localized string similar to {0} cannot be set because the underlying property is read only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.PagerResources.ValueMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            AreClose - Returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.  Note that this epsilon is proportional
            to the numbers themselves to that AreClose survives scalar multiplication.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the AreClose comparison.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:System.Windows.Controls.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan - Returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.  Note that this epsilon is proportional to the numbers themselves
            to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the GreaterThan comparison.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:System.Windows.Controls.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            GreaterThanOrClose - Returns whether or not the first double is greater than or close to
            the second double.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.  Note that this epsilon is proportional to the numbers 
            themselves to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the GreaterThanOrClose comparison.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:System.Windows.Controls.DoubleUtil.IsZero(System.Double)">
            <summary>
            IsZero - Returns whether or not the double is "close" to 0.  Same as AreClose(double, 0),
            but this is faster.
            </summary>
            <returns>
            bool - the result of the IsZero comparison.
            </returns>
            <param name="value"> The double to compare to 0. </param>
        </member>
        <member name="M:System.Windows.Controls.DoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
            LessThan - Returns whether or not the first double is less than the second double.
            That is, whether or not the first is strictly less than *and* not within epsilon of
            the other number.  Note that this epsilon is proportional to the numbers themselves
            to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the LessThan comparison.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:System.Windows.Controls.DoubleUtil.LessThanOrClose(System.Double,System.Double)">
            <summary>
            LessThanOrClose - Returns whether or not the first double is less than or close to
            the second double.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.  Note that this epsilon is proportional to the numbers 
            themselves to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the LessThanOrClose comparison.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:System.Windows.Controls.Extensions.GetIsReadOnly(System.Reflection.MemberInfo)">
            <summary>
            Checks a MemberInfo object (e.g. a Type or PropertyInfo) for the ReadOnly attribute
            and returns the value of IsReadOnly if it exists.
            </summary>
            <param name="memberInfo">MemberInfo to check</param>
            <returns>true if MemberInfo is read-only, false otherwise</returns>
        </member>
        <member name="T:System.ComponentModel.InvalidEnumArgumentException">
            <summary>
            The exception thrown when using invalid arguments that are enumerators. 
            </summary>
        </member>
        <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
            <summary>
            Initializes a new instance of the InvalidEnumArgumentException class without a message.
            </summary>
        </member>
        <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidEnumArgumentException class with the specified message. 
            </summary>
            <param name="message">The message to display with this exception.</param>
        </member>
        <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidEnumArgumentException class with the specified detailed description and the specified exception.
            </summary>
            <param name="message">A detailed description of the error.</param>
            <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the InvalidEnumArgumentException class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A Type that represents the enumeration class with the valid values.</param>
        </member>
        <member name="T:System.Windows.Controls.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_CannotChangeColumnCollectionWhileAdjustingDisplayIndexes">
            <summary>
              Looks up a localized string similar to Column collection cannot be changed while adjusting display indexes..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_CannotChangeItemsWhenLoadingRows">
            <summary>
              Looks up a localized string similar to Items cannot be added, removed or reset while rows are loading or unloading..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ColumnCannotBeCollapsed">
            <summary>
              Looks up a localized string similar to Column cannot be collapsed..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ColumnCannotBeReassignedToDifferentDataGrid">
            <summary>
              Looks up a localized string similar to Column already belongs to a DataGrid instance and cannot be reassigned..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ColumnNotInThisDataGrid">
            <summary>
              Looks up a localized string similar to Provided column does not belong to this DataGrid..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ItemIsNotContainedInTheItemsSource">
            <summary>
              Looks up a localized string similar to The item is not contained in the ItemsSource..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_NoCurrentRow">
            <summary>
              Looks up a localized string similar to There is no current row.  Operation cannot be completed..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_NoOwningGrid">
            <summary>
              Looks up a localized string similar to There is no instance of DataGrid assigned to this {0}.  Operation cannot be completed..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_UnderlyingPropertyIsReadOnly">
            <summary>
              Looks up a localized string similar to {0} cannot be set because the underlying property is read only..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueCannotBeSetToInfinity">
            <summary>
              Looks up a localized string similar to {0} cannot be set to infinity..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueCannotBeSetToNAN">
            <summary>
              Looks up a localized string similar to {0} cannot be set to double.NAN..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueCannotBeSetToNull">
            <summary>
              Looks up a localized string similar to {0} cannot be set to a null value..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueIsNotAnInstanceOf">
            <summary>
              Looks up a localized string similar to The value is not an instance of {0}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueIsNotAnInstanceOfEitherOr">
            <summary>
              Looks up a localized string similar to The value is not an instance of {0} or {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueMustBeGTandLT">
            <summary>
              Looks up a localized string similar to {0} must be greater than {1} and less than {2}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueMustBeGTandLTE">
            <summary>
              Looks up a localized string similar to {0} must be greater than {1} and less than or equal to {2}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueMustBeGTEandLT">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1} and less than {2}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueMustBeGTEandLTE">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1} and less than or equal to {2}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueMustBeLessThan">
            <summary>
              Looks up a localized string similar to {0} must be less than {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGrid_ValueMustBeLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to {0} must be less than or equal to {1}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridAutomationPeer_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform the operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridColumnHeader_ContentDoesNotSupportUIElements">
            <summary>
              Looks up a localized string similar to Content does not support UIElement; use ContentTemplate instead..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridColumnHeaderAutomationPeer_Ascending">
            <summary>
              Looks up a localized string similar to ascending.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridColumnHeaderAutomationPeer_Descending">
            <summary>
              Looks up a localized string similar to descending.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridLength_InvalidUnitType">
            <summary>
              Looks up a localized string similar to {0} is not a valid DataGridLengthUnitType..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridLengthConverter_CannotConvertFrom">
            <summary>
              Looks up a localized string similar to DataGridLengthConverter cannot convert from {0}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridLengthConverter_CannotConvertTo">
            <summary>
              Looks up a localized string similar to Cannot convert from DataGridLength to {0}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridLengthConverter_InvalidDataGridLength">
            <summary>
              Looks up a localized string similar to Invalid DataGridLength..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridRow_InvalidRowIndexCannotCompleteOperation">
            <summary>
              Looks up a localized string similar to Invalid row index. Operation cannot be completed..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridRowGroupHeader_ItemCountPlural">
            <summary>
              Looks up a localized string similar to ({0} items).
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridRowGroupHeader_ItemCountSingular">
            <summary>
              Looks up a localized string similar to ({0} item).
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridRowGroupHeader_PropertyName">
            <summary>
              Looks up a localized string similar to {0}:.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridSelectedItemsCollection_CannotChangeSelectedItemsCollectionInSingleMode">
            <summary>
              Looks up a localized string similar to Can only change SelectedItems collection in Extended selection mode.  Use SelectedItem property in Single selection mode..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.DataGridTemplateColumn_MissingTemplateForType">
            <summary>
              Looks up a localized string similar to Missing template.  Cannot initialize {0}..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Resource.InvalidEnumArgumentException_InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidationUtil">
            <summary>
            Static class with methods to help with validation.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.CloneBinding(System.Windows.Data.Binding)">
            <summary>
            Creates a new Binding that is a shallow copy of the source Binding.
            </summary>
            <param name="source">The Binding to clone</param>
            <returns>The cloned Binding</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.ContainsEqualValidationResult(System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Determines whether the collection contains an equivalent ValidationResult
            </summary>
            <param name="collection">ValidationResults to search through</param>
            <param name="target">ValidationResult to search for</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.GetBindingInfo(System.Windows.FrameworkElement,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Type[])">
            <summary>
            Searches through all Bindings on the specified element and returns a list of BindingInfo objects
            for each Binding that matches the specified criteria.
            </summary>
            <param name="element">FrameworkElement to search</param>
            <param name="dataItem">Only return Bindings with a context element equal to this object</param>
            <param name="twoWayOnly">If true, only returns TwoWay Bindings</param>
            <param name="useBlockList">If true, ignores elements not typically used for input</param>
            <param name="searchChildren">If true, only returns TwoWay Bindings</param>
            <param name="excludedTypes">The Binding search will skip all of these Types</param>
            <returns>List of BindingInfo for every Binding found</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.GetDependencyProperties(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Gets a list of the specified FrameworkElement's DependencyProperties. This method will return all
            DependencyProperties of the element unless 'useBlockList' is true, in which case all bindings on elements
            that are typically not used as input controls will be ignored.
            </summary>
            <param name="element">FrameworkElement of interest</param>
            <param name="useBlockList">If true, ignores elements not typically used for input</param>
            <returns>List of DependencyProperties</returns>
        </member>
        <member name="M:System.Windows.Controls.ValidationUtil.GetBindingInfoOfSingleElement(System.Windows.FrameworkElement,System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of active bindings on the specified FrameworkElement.  Bindings are gathered
            according to the same conditions BindingGroup uses to find bindings of descendent elements
            within the visual tree.
            </summary>
            <param name="element">Root FrameworkElement to search under</param>
            <param name="inheritedDataContext">DomainContext of the element's parent</param>
            <param name="dataItem">Target DomainContext</param>
            <param name="twoWayOnly">If true, only returns TwoWay Bindings</param>
            <param name="useBlockList">If true, ignores elements not typically used for input</param>
            <returns></returns>
        </member>
        <member name="T:System.Windows.Controls.BindingInfo">
            <summary>
            Stores information about a Binding, including the BindingExpression, BindingTarget and associated Element.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingInfo.#ctor">
            <summary>
            Creates a new BindingInfo.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingInfo.#ctor(System.Windows.Data.BindingExpression,System.Windows.DependencyProperty,System.Windows.FrameworkElement)">
            <summary>
            Creates a new BindingInfo with the specified BindingExpression, BindingTarget and Element.
            </summary>
            <param name="bindingExpression">BindingExpression</param>
            <param name="bindingTarget">BindingTarget</param>
            <param name="element">Element</param>
        </member>
        <member name="P:System.Windows.Controls.BindingInfo.BindingExpression">
            <summary>
            Gets or sets the BindingExpression.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingInfo.BindingTarget">
            <summary>
            Gets or sets the BindingTarget.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingInfo.Element">
            <summary>
            Gets or sets the Element.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEmpty">
            <summary>
            Empty state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateRegular">
            <summary>
            Regular state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCurrent">
            <summary>
            Current state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCurrent">
            <summary>
            Current state group
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEditing">
            <summary>
            Editing state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteraction">
            <summary>
            Interaction state group
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateRegularRow">
            <summary>
            Regular Row state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateAlternatingRow">
            <summary>
            Alternating Row state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupAlternatingRow">
            <summary>
            Alternating Row state group
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnsorted">
            <summary>
            Unsorted state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSortAscending">
            <summary>
            Sort Ascending state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSortDescending">
            <summary>
            Sort Descending state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSort">
            <summary>
            Sort state group
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalid">
            <summary>
            Invalid state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateRowInvalid">
            <summary>
            RowInvalid state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateRowValid">
            <summary>
            RowValid state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            Valid state
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            Validation state group
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            true to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\Toolkit\Aug09\Binaries\System.Windows.Controls.Input.Toolkit.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Input.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_CurrentIndex_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid index value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DomainUpDown_InvalidInputAction_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid InvalidInputAction value &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.InvalidAttemptToChangeReadOnlyProperty">
            <summary>
              Looks up a localized string similar to Invalid attempt to change read-only property &quot;{0}.&quot;.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ListTimePickerPopup_TimeItemsSelection_ReadOnly">
            <summary>
              Looks up a localized string similar to Cannot set read-only property TimeItemsSelection..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidDoubleValue_InvalidDoubleValue">
            <summary>
              Looks up a localized string similar to Invalid double value &apos;{0}&apos;: valid value is of double type and within decimal range..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_EnsureValidIncrementValue_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Increment value &apos;{0}&apos;: valid value is of double type, within decimal range, and positive.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.NumericUpDown_OnDecimalPlacesPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid DecimalPlaces value &apos;{0}&apos;: valid value is of int type and within 0 and 15 inclusive..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ObservableObjectCollection_ReadOnly">
            <summary>
              Looks up a localized string similar to The collection is currently ReadOnly and should not be modified..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_OnMaxDropDownHeightPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid maximum drop down height value &apos;{0}&apos;. The value must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Picker_PopupButtonModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupButtonMode value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Rating_SetItemCount_ItemCountMustBeLargerThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to Value must be larger than or equal to 0..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingAutomationPeer_GetLocalizedControlTypeCore">
            <summary>
              Looks up a localized string similar to Rating.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingAutomationPeer_SetValue">
            <summary>
              Looks up a localized string similar to Value must be null or a number between 0 and 1..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RatingItemAutomationPeer_GetLocalizedControlTypeCore">
            <summary>
              Looks up a localized string similar to Star.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Spinner_SpinNotValid">
            <summary>
              Looks up a localized string similar to Spin action is not valid at this moment..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeInput_PopupMinutesInterval_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid PopupMinutesInterval &apos;{0}&apos;. The interval can be set to 0 (no interval) to and including 59..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeInput_PopupSecondsInterval_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid PopupSecondsInterval &apos;{0}&apos;.The interval can be set to 0 (no interval) to and including 59..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupSetInStyle">
            <summary>
              Looks up a localized string similar to Cannot set the PopupProperty in a style. Please use PopupTemplate..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimePicker_PopupTimeSelectionModeNotValid">
            <summary>
              Looks up a localized string similar to Invalid PopupTimeSelectionMode for this popup, value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TimeUpDown_OnTimeHintContentChanged">
            <summary>
              Looks up a localized string similar to Cannot set read-only property TimeHintContent..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.UpDown_ParseException">
            <summary>
              Looks up a localized string similar to Cannot parse text &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Extensions">
            <summary>
            This set of internal extension methods provide general solutions and 
            utilities in a small enough number to not warrant a dedicated extension
            methods class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="M:System.Windows.Controls.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a 
            string comparison. The traditional .NET string Contains member uses 
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="T:System.Windows.Controls.BindingSourceEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node. Uses the BindingSource to do the evaluation.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
            <remarks>Mimicks the class BindingEvaluator that uses DataContext
            to do evaluation.</remarks>
        </member>
        <member name="F:System.Windows.Controls.BindingSourceEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingSourceEvaluator class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingSourceEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Evaluates the specified source.
            </summary>
            <param name="source">The object used as a source for the
            evaluation.</param>
            <returns>The evaluated binding.</returns>
            <remarks>Only uses Path, Converter, ConverterCulture and
            ConverterParameter.</remarks>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.Value">
            <summary>
            Gets the data item string value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingSourceEvaluator`1.ValueBinding">
            <summary>
            Gets the value binding that is used as a template
            for the actual evaluation.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsReadOnlyChanged(System.Boolean)">
            <summary>
            Handles changes to the control's IsReadOnly property.
            </summary>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsReadOnly">
            <summary>
            Gets a value indicating whether the read-only property is set.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemsControlHelper">
            <summary>
            The ItemContainerGenerator provides useful utilities for ItemsControls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ItemsControlHelper._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemsControlHelper.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemsControlHelper.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateReadOnly">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupValidation">
            <summary>
            ValidationStates state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateValid">
            <summary>
            The valid state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidFocused">
            <summary>
            Invalid, focused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInvalidUnfocused">
            <summary>
            Invalid, unfocused state for the ValidationStates group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DomainUpDown">
            <summary>
            Represents a control that enables single value selection from a 
            domain of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase`1">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.UpDownBase">
            <summary>
            Base class for all controls that provide value manipulation with a 
            Spinner and a text box.
            </summary>
            <remarks>
            This non generic base class is used to specify default template,
            and simulate covariance among sub classes of UpDownBase&lt;T&gt;.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementTextName">
            <summary>
            Name constant for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.ElementSpinnerName">
            <summary>
            Name constant for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleName">
            <summary>
            Name constant for SpinnerStyle property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for SpinnerStyleProperty.
            </summary>
            <param name="d">UpDownBase whose SpinnerStyleProperty changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.OnSpinnerStyleChanged(System.Windows.Style,System.Windows.Style)">
            <summary>
            Called when SpinnerStyle property value has changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.GetValue">
            <summary>
            GetValue method for returning UpDownBase&lt;T&gt;.Value as object.
            </summary>
            <returns>Value as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.SetValue(System.Object)">
            <summary>
            SetValue method for setting UpDownBase&lt;T&gt;.Value through object type parameter.
            </summary>
            <param name="value">New value in object type.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._textBox">
            <summary>
            Private field for Text template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._text">
            <summary>
            Private field to hold previous value of TextBox.Text.
            </summary>
            <remarks>
            Because TextBox.TextChanged seems to fire randomly, 
            so we compensatethat by handling LostFocus,
            and comparing TextBox.Text with cached previous value.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._spinner">
            <summary>
            Private field for Spinner template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.UpDownBase`1.IsEditableProperty">
            <summary>
            Identifies the IsEditable dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsEditableProperty property changed handler.
            </summary>
            <param name="d">UpDownBase that changed its IsEditable.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.#ctor">
            <summary>
            Initializes a new instance of the UpDownBase(of T) class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.GetValue">
            <summary>
            GetValue override to return Value property as object type.
            </summary>
            <returns>The Value property as object type.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetValue(System.Object)">
            <summary>
            SetValue override to set value to Value property.
            </summary>
            <param name="value">New value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnApplyTemplate">
            <summary>
            Builds the visual tree for the UpDownBase(of T) control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous 
            value to decide whether user has typed in a new value. 
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ProcessUserInput">
            <summary>
            Called OnLostFocus and OnKeyDown(Key.Enter) to process user input.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnTextGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's GotFocus event.
            This event handler selects the whole text on GotFocus when nothing is selected.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SetTextBoxText">
            <summary>
            Display current value in Text template part.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpinnerSpin(System.Object,System.Windows.Controls.SpinEventArgs)">
            <summary>
            Event handler for Spinner template part's Spin event.
            </summary>
            <param name="sender">The Spinner template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParseError(System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raises the ParserError event when there is an error in parsing user input.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnParsing(System.Windows.Controls.UpDownParsingEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Parsing"/> event, to allow easily hooking
            into the parse logic.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Occurs when the spinner spins.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{`0})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{`0})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIsEditableChanged(System.Boolean,System.Boolean)">
            <summary>
            Called when IsEditable property value changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.UpDownBase`1.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Text">
            <summary>
            Gets the Text template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Spinner">
            <summary>
            Gets the Spinner template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownBase`1.IsEditable">
            <summary>
            Gets or sets a value indicating whether the value can be manually 
            edited by the end-user.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.UpDownBase`1.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.GroupDomain">
            <summary>
            Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateInvalid">
            <summary>
            InvalidDomain of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.StateValid">
            <summary>
            Valid of the Domain state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._items">
            <summary>
            Backing store for the Items collection, when ItemsSource is null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueDuringInitialization">
            <summary>
            The value as set during initialization. Since no items have been added
            at that point, the value will be reset. However, during 
            initialization, the value will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to new object().</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isNotAllowedToEditByFocus">
            <summary>
            Indicates whether the control should not move to EditMode when
            it is gains Focus.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._weakEventListener">
            <summary>
            WeakEventListener used to handle INotifyCollectionChanged events.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isEditing">
            <summary>
            BackingField for IsEditing, indicating whether the control is in EditMode.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._isInvalidInput">
            <summary>
            Backing field for InvalidInput, indicating whether the last parsed input was invalid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.CurrentIndexProperty">
            <summary>
            Identifies the CurrentIndex dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CurrentIndexProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its CurrentIndex.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.IsValidCurrentIndex(System.Int32)">
            <summary>
            SelectedIndexProperty validation handler.
            </summary>
            <param name="value">New value of SelectedIndexProperty.</param>
            <returns>
            Returns true if value is valid for SelectedIndexProperty, false otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.CoerceSelectedIndex(System.Int32)">
            <summary>
            CurrentIndexProperty coercion handler.
            </summary>
            <param name="index">The index.</param>
            <returns>
            Coerced effective value of CurrentIndexProperty from input parameter value.
            </returns>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._initialCurrentIndex">
            <summary>
            Cached previous value of SelectedIndexProperty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexDuringInitialization">
            <summary>
            The index as set during initialization. Since no items have been added
            at that point, an Exception should be thrown. However, during 
            initialization, the index will be cached in this field and used
            when items are actually added. 
            </summary>
            <remarks>After this index has been used, it will be set to -1.</remarks>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._currentIndexNestLevel">
            <summary>
            Nest level for selected index.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown._valueBindingEvaluator">
            <summary>
            Gets or sets the BindingEvaluator, a framework element that can
            provide updated string values from a single binding.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.InvalidInputActionProperty">
            <summary>
            Identifies the InvalidInputAction dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnInvalidInputActionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            InvalidInputAction property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed the InvalidInputAction.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.FallbackItemProperty">
            <summary>
            Identifies the FallbackItem dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemsSourceProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown that changed its ItemsSource.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.DomainUpDown.ItemTemplateProperty">
            <summary>
            Identifies the ItemTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.DomainUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the DomainUpDown control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a DomainUpDownAutomationPeer for use by the 
            Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetActualItems">
            <summary>
            Gets the correct items collection that we are using, abstracting away ItemsSource and Items logic.
            </summary>
            <returns>Returns either Items or ItemsSource.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items collection is changed. This can either be Items or ItemsSource.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            <remarks>If ItemsSource does not implement INotifyCollectionChanged, this method will not be called on
            changes in the ItemsSource.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when ItemsSource has changed.
            Handles setting the selected item.
            </summary>
            <param name="oldItemsSource">The old items source.</param>
            <param name="itemsSource">The items source.</param>
            <remarks>When switching ItemsSource, the selectedIndex will be used (if possible) 
            to select an item in the new collection.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Object})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Cancels the event when the value is not part of the domain.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
            <remarks>Will set CurrentIndex.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnCurrentIndexChanged(System.Int32,System.Int32)">
            <summary>
            Processes changes to the CurrentIndex property.
            </summary>
            <param name="oldValue">The old value of CurrentIndex.</param>
            <param name="newValue">The new value of CurrentIndex.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ApplyValue(System.String)">
            <summary>
            Processes user input when the TextBox.TextChanged event occurs.
            </summary>
            <param name="text">User input.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a value in the domain.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
            <remarks>An empty string will return the currently selected value.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not increment when the selected item is the last item.</remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease. 
            </summary>
            <remarks>If the IsCyclic property is set to true the DomainUpDown 
            control will not decrement when the selected item is the first item. </remarks>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current index, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.TryEnterEditMode">
            <summary>
            Tries the enter edit mode.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.DomainUpDown.GetIndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Gets the index of a sequence.
            </summary>
            <param name="sequence">The sequence that contains the item of interest.</param>
            <param name="item">The item that contained within the sequence.</param>
            <returns>The index of the item in the sequence. -1 if the item was not found.</returns>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.Items">
            <summary>
            Gets a collection of items which represent the domain 
            in the DomainUpDown control.
            </summary>
            <remarks>When ItemsSource is set, will return a copy of the items in ItemsSource.
            When ItemsSource property is not set (set to null) this collection 
            will return an empty writeable colection.</remarks>
            <value>The items.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsEditing">
            <summary>
            Gets a value indicating whether the control is in EditMode.
            </summary>
            <value><c>True</c> if currently in edit mode; otherwise, <c>False</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsInvalidInput">
            <summary>
            Gets or sets a value indicating whether the last parsed input was invalid.
            </summary>
            <value><c>True</c> if input is currently Invalid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.CurrentIndex">
            <summary>
            Gets or sets the index of the current selected item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the DomainUpDown control 
            will cycle through values when trying to spin the first and last item. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ValueMemberBinding">
            <summary>
            Gets or sets the Binding object used for object to string 
            conversions.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ValueMemberPath">
            <summary>
            Gets or sets the Binding Path to use for identifying the value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.InvalidInputAction">
            <summary>
            Gets or sets a value determining the DomainUpDown behavior when a 
            user sets a value not included in the domain.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.FallbackItem">
            <summary>
            Gets or sets the item that is used when a user attempts to 
            set a value not included in the domain.
            </summary>
            <remarks>FallbackItem will only be used if it is contained within 
            the Items collection.</remarks>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemsSource">
            <summary>
            Gets or sets a collection of items which represent the 
            domain in the DomainUpDown control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.DomainUpDown.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display an item from the 
            Domain when the item is selected.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.DomainUpDownAutomationPeer">
            <summary>
            Exposes DomainUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1">
            <summary>
            Exposes UpDownBase types to UI Automation.
            </summary>
            <typeparam name="T">Type of the items.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.#ctor(System.Windows.Controls.UpDownBase{`0})">
            <summary>
            Initializes a new instance of the UpDownBaseAutomationPeer class.
            </summary>
            <param name="owner">
            The UpDownBase that is associated with this UpDownBaseAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Group AutomationControlType.</returns>
            <remarks>Return AutomationControlType.Spinner per MSDN article.</remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetClassNameCore">
            <summary>
            Gets the name of the UpDownBase that is associated with this
            UpDownBaseAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name UpDownBase.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the UpDownBase that is associated
            with this UpDownBaseAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.OwnerUpDown">
            <summary>
            Gets the UpDownBase that owns this UpDownBaseAutomationPeer.
            </summary>
            <value>The domain up down.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.UpDownBaseAutomationPeer`1.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.#ctor(System.Windows.Controls.DomainUpDown)">
            <summary>
            Initializes a new instance of the DomainUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The DomainUpDown that is associated with this DomainUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.DomainUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the DomainUpDown that is associated with this
            DomainUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name DomainUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.InvalidInputAction">
            <summary>
            Determines the behavior of a DomainUpDown control when a user sets a 
            value not included in the domain.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.UseFallbackItem">
            <summary>
            Once a user sets a value not included in the domain, the DomainUpDown 
            control will use the FallbackItem property as the selected item. If 
            FallbackItem is not specified the first item in the DomainUpDown Items 
            collection will be used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InvalidInputAction.TextBoxCannotLoseFocus">
            <summary>
            Once a user sets a value not included in the domain, the 
            DomainUpDown control cannot lose focus.
            </summary>
            <remarks>There are situations that the control can not regain focus.</remarks>
        </member>
        <member name="T:System.Windows.Controls.ObservableObjectCollection">
            <summary>
            Implements a collection of objects.
            </summary>
            <remarks>
            ObservableObjectCollection is intended to simplify the task of populating an
            ItemsSource property in XAML and allows for readonly collections.
            </remarks>
            <example>
            <code language="XAML">
            <![CDATA[
            <ItemsControl.ItemsSource>
                <controls:ObservableObjectCollection>
                    <TextBlock Text="Object 1" />
                    <TextBlock Text="Object 2" />
                </controls:ObservableObjectCollection>
            </ItemsControl.ItemsSource>
            ]]>
            </code>
            </example>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ObservableObjectCollection"/> class.
            </summary>
            <param name="collection">The collection whose items will be copied.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.InsertItem(System.Int32,System.Object)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.SetItem(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="M:System.Windows.Controls.ObservableObjectCollection.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only.
            </summary>
            <value><c>True</c> if read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.ObservableObjectCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericUpDown">
            <summary>
            Represents a control that enables single value selection from a numeric
            range of values through a Spinner and TextBox.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Minimum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Maximum.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.IncrementProperty">
            <summary>
            Identifies the Increment dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IncrementProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its Increment property.</param>
            <param name="e">DependencyPropertyChangedEventArgs for Increment property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrementChanged(System.Double,System.Double)">
            <summary>
            Called when the Increment property value has changed.
            </summary>
            <param name="oldValue">Old value of the Increment property.</param>
            <param name="newValue">New value of the Increment property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.DecimalPlacesProperty">
            <summary>
            Identifies the DecimalPlaces dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DecimalPlacesProperty property changed handler.
            </summary>
            <param name="d">NumericUpDown that changed its DecimalPlaces.</param>
            <param name="e">DependencyPropertyChangedEventArgs for DecimalPlaces property.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecimalPlacesChanged(System.Int32,System.Int32)">
            <summary>
            Called when the DecimalPlaces property value has changed.
            </summary>
            <param name="oldValue">Old value of the DecimalPlaces property.</param>
            <param name="newValue">New value of the DecimalPlaces property.</param>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown.formatString">
            <summary>
            Format string used to display Value property.
            </summary>
            <seealso cref="P:System.Windows.Controls.NumericUpDown.DecimalPlaces"/>
            <seealso cref="M:System.Windows.Controls.NumericUpDown.FormatValue"/>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.#ctor">
            <summary>
            Initializes a new instance of the NumericUpDown class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on current value, minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the NumericUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnCreateAutomationPeer">
            <summary>
            Returns a NumericUpDownAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A NumericUpDownAutomationPeer object for the NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanging to do validation and coercion.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Override UpDownBase&lt;T&gt;.OnValueChanged to raise value changed automation event and 
            determine if a maximum or minimum has been reached.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input as a decimal number.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.FormatValue">
            <summary>
            Provides decimal specific value formatting for the value property.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._levelsFromRootCall">
            <summary>
            Levels from root call.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialInc">
            <summary>
            Initial Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMin">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialMax">
            <summary>
            Initial Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._initialVal">
            <summary>
            Initial Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedInc">
            <summary>
            Requested Increment value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMin">
            <summary>
            Requested Minimum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedMax">
            <summary>
            Requested Maximum value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericUpDown._requestedVal">
            <summary>
            Requested Value value.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceMaximum">
            <summary>
            Ensure the Maximum is greater than or equal to the Minimum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.CoerceValue">
            <summary>
            Ensure the value falls between the Minimum and Maximum values.
            This function assumes that (Maximum >= Minimum).
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.IsValidDoubleValue(System.Object,System.Double@)">
            <summary>
            Check if an object value is a valid double value.
            </summary>
            <param name="value">The value to be checked.</param>
            <param name="number">The double value to be returned.</param>
            <returns>true if a valid double; false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <remarks>
            EnsureValidDoubleValue(DependencyObject d, DependencyPropertyChangedEventArgs e) is simply a wrapper for 
            EnsureValidDoubleValue(DependencyObject d, DependencyProperty property, object oldValue, object newValue).
            </remarks>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDoubleValue(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,System.Object)">
            <summary>
            Ensure the new value of a dependency property change is a valid double value, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="property">The DependencyProperty that changed.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidIncrementValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of Increment dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.EnsureValidDecimalPlacesValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Ensure the new value of DecimalPlaces dependency property change is valid, 
            or revert the change and throw an exception.
            </summary>
            <param name="d">The DependencyObject whose DecimalPlaces DependencyProperty is changed.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.NumericUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">A value indicating whether to automatically generate transitions to the new state, or instantly transition to the new state.</param>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Minimum">
            <summary>
            Gets or sets the Minimum possible Value.
            </summary>
            <remarks>
            The default value is zero.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Maximum">
            <summary>
            Gets or sets the Maximum possible Value.
            </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.Increment">
            <summary>
            Gets or sets a value added or subtracted from the value property.
             </summary>
            <remarks>
            The default values is one.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.NumericUpDown.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places that are displayed in the 
            NumericUpDown. 
            </summary>
            <remarks>
            The default value is zero.
            
            DecimalPlaces decides output format of Value property.
            It is implemented via formatString field and FormatValue override.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.NumericUpDownAutomationPeer">
            <summary>
            Exposes NumericUpDown types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.#ctor(System.Windows.Controls.NumericUpDown)">
            <summary>
            Initializes a new instance of the NumericUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The NumericUpDown that is associated with this NumericUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the NumericUpDown that is associated with this
            NumericUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name NumericUpDown.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the NumericUpDown that is associated
            with this NumericUpDownAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SetValue(System.Double)">
            <summary>
            Sets the value of the NumericUpDown.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value of the NumericUpDown is read-only.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#LargeChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Maximum">
            <summary>
            Gets the maximum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Minimum">
            <summary>
            Gets minimum value supported by the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#SmallChange">
            <summary>
            Gets the value to be added or subtracted from the Value property of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.NumericUpDownAutomationPeer.System#Windows#Automation#Provider#IRangeValueProvider#Value">
            <summary>
            Gets the value of the NumericUpDown.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.EnumerableExtensions">
            <summary>
            Extension methods for Enumerable.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a sequence from an integer, to an integer, skipping 
            a defined amount of integers.
            </summary>
            <param name="from">The value of the first integer in the sequence.</param>
            <param name="to">The inclusive end of the sequence.</param>
            <param name="by">The amount of integers to skip.</param>
            <returns>A sequence of integers.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies an action to each element in an IEnumerable.
            </summary>
            <typeparam name="T">The Type of the elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="action">The action applied to all the elements.</param>
            <remarks>See a discussion about the merits on this function here:
            http://blogs.msdn.com/ericlippert/archive/2009/05/18/foreach-vs-foreach.aspx.</remarks>
        </member>
        <member name="T:System.Windows.Controls.Primitives.Clipper">
            <summary>
            Clips a ratio of its content.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.Clipper.RatioVisibleProperty">
            <summary>
            Identifies the RatioVisible dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.OnRatioVisibleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            RatioVisibleProperty property changed handler.
            </summary>
            <param name="d">PartialView that changed its RatioVisible.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.OnRatioVisibleChanged(System.Double,System.Double)">
            <summary>
            RatioVisibleProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.#ctor">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.Clipper.ClipContent">
            <summary>
            Updates the clip geometry.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.Clipper.RatioVisible">
            <summary>
            Gets or sets the percentage of the item visible.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.EnumerableFunctions">
            <summary>
            This class contains general purpose functions to manipulate the generic
            IEnumerable type.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.Scan``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1,``0,``1},``1)">
            <summary>
            Applies a function to an accumulated value and an item in the 
            sequence and yields the result as the accumulated value.
            </summary>
            <typeparam name="T">The type of the input sequence.</typeparam>
            <typeparam name="R">The type of the initial value.</typeparam>
            <param name="that">The sequence to scan.</param>
            <param name="func">The function applied to the accumulator and the
            current item.</param>
            <param name="initialValue">The initial value in the output sequence.
            </param>
            <returns>A sequence of computed values.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Accepts two sequences and applies a function to the corresponding 
            values in the two sequences.
            </summary>
            <typeparam name="T0">The type of the first sequence.</typeparam>
            <typeparam name="T1">The type of the second sequence.</typeparam>
            <typeparam name="R">The return type of the function.</typeparam>
            <param name="enumerable0">The first sequence.</param>
            <param name="enumerable1">The second sequence.</param>
            <param name="func">The function to apply to the corresponding values
            from the two sequences.</param>
            <returns>A sequence of transformed values from both sequences.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the index of an item in a sequence.
            </summary>
            <typeparam name="T">The type of the sequence.</typeparam>
            <param name="that">The sequence.</param>
            <param name="item">The item in the sequence.</param>
            <returns>The index of an item in a sequence.</returns>
        </member>
        <member name="M:System.Windows.Controls.EnumerableFunctions.GetWeightedValues(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Returns a stream of weighted values based on a percentage.
            </summary>
            <param name="values">A sequence of values.</param>
            <param name="percent">The percentage of values.</param>
            <returns>A sequence of percentages.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.LinearClipper">
            <summary>
            Clips the content of the control in a given direction.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.LinearClipper.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.OnExpandDirectionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="d">ExpandDirectionView that changed its ExpandDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.OnExpandDirectionChanged(System.Windows.Controls.ExpandDirection,System.Windows.Controls.ExpandDirection)">
            <summary>
            ExpandDirectionProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Primitives.LinearClipper.ClipContent">
            <summary>
            Updates the clip geometry.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.LinearClipper.ExpandDirection">
            <summary>
            Gets or sets the clipped edge.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.NullableConverter`1">
            <summary>
            Converts a string or base value to a <see cref="T:System.Nullable"/> value.
            </summary>
            <typeparam name="T">The type should be value type.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the 
            specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="destinationType">The type you want to convert to.
            </param>
            <returns>
            Returns true if this converter can perform the conversion; 
            otherwise, false.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts from the specified value to the a specified type from the
            type of this converter.
            </summary>
            <param name="context">An object that provides a format context.
            </param>
            <param name="culture">The 
            <see cref="T:System.Globalization.CultureInfo"/> to use as the 
            current culture.</param>
            <param name="value">The value to convert to the type of this 
            converter.</param>
            <param name="destinationType">The type of convert the value to
            .</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:System.Windows.Controls.Rating">
            <summary>
            A control that has a rating.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Rating.DisplayValueProperty">
            <summary>
            Identifies the DisplayValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnDisplayValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
            <param name="dependencyObject">Rating that changed its DisplayValue.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnDisplayValueChanged">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Rating.ItemCountProperty">
            <summary>
            Identifies the ItemCount dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemCountProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its ItemCount.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemCountChanged(System.Int32)">
            <summary>
            This method is invoked when the items count property is changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.Rating.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnIsReadOnlyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its IsReadOnly.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnIsReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemContainerStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its ItemContainerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemContainerStyleChanged(System.Windows.Style)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnSelectionModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its SelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnSelectionModeChanged(System.Windows.Controls.RatingSelectionMode,System.Windows.Controls.RatingSelectionMode)">
            <summary>
            SelectionModeProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.Rating.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">Rating that changed its Value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnValueChanged(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="M:System.Windows.Controls.Rating.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the control when the items change.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.#ctor">
            <summary>
            Initializes a new instance of the Rating control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnApplyTemplate">
            <summary>
            Applies control template to the items control.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse enters the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse leaves the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the Rating's MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the Rating's MouseLeftButtonUp event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateValues">
            <summary>
            Updates the values of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateDisplayValues">
            <summary>
            Updates the value and actual value of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.UpdateHoverStates">
            <summary>
            Updates the hover states of the rating items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetContainerForItemOverride">
            <summary>
            This method returns a container for the item.
            </summary>
            <returns>A container for the item.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Gets a value indicating whether the item is its own container.
            </summary>
            <param name="item">The item which may be a container.</param>
            <returns>A value indicating whether the item is its own container.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            This method prepares a container to host an item.
            </summary>
            <param name="element">The container.</param>
            <param name="item">The item hosted in the container.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            This method clears a container used to host an item.
            </summary>
            <param name="element">The container that hosts the item.</param>
            <param name="item">The item hosted in the container.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when a rating item's mouse enter event is
            invoked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when a rating item's mouse leave event is
            invoked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetRatingItems">
            <summary>
            Returns a sequence of rating items.
            </summary>
            <returns>A sequence of rating items.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.SelectRatingItem(System.Windows.Controls.RatingItem)">
            <summary>
            Selects a rating item.
            </summary>
            <param name="selectedRatingItem">The selected rating item.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.RatingItemClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This method is raised when a rating item value is selected.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetSelectedRatingItem">
            <summary>
            Returns the selected rating item.
            </summary>
            <returns>The selected rating item.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnRatingItemValueSelected(System.Windows.Controls.RatingItem,System.Double)">
            <summary>
            This method is invoked when the rating item value is changed.
            </summary>
            <param name="ratingItem">The rating item that has changed.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnCreateAutomationPeer">
            <summary>
            Returns a RatingItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A RatingItemAutomationPeer object for the RatingItem.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.KeyDown" /> event when a key
            is pressed while the control has focus.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains
            the event data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="e " />is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.Rating.GetRatingItemAtOffsetFrom(System.Windows.Controls.RatingItem,System.Int32)">
            <summary>
            Gets a rating item at a certain index offset from another 
            rating item.
            </summary>
            <param name="ratingItem">The rating item.</param>
            <param name="offset">The rating item at an offset from the 
            index of the rating item.</param>
            <returns>The rating item at the offset.</returns>
        </member>
        <member name="M:System.Windows.Controls.Rating.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Updates the visual state.
            </summary>
            <param name="useTransitions">A value indicating whether to use transitions.</param>
        </member>
        <member name="P:System.Windows.Controls.Rating.DisplayValue">
            <summary>
            Gets or sets the actual value of the Rating control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.HoveredRatingItem">
            <summary>
            Gets or sets the rating item hovered over.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.Interaction">
            <summary>
            Gets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemsControlHelper">
            <summary>
            Gets or sets the items control helper class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemCount">
            <summary>
            Gets or sets the number of rating items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the Rating is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.ItemContainerStyle">
            <summary>
            Gets or sets the item container style.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Rating.Value">
            <summary>
            Gets or sets the rating value.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Rating.ValueChanged">
            <summary>
            This event is raised when the value of the rating is changed.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.RatingAutomationPeer">
            <summary>
            Exposes Rating types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.#ctor(System.Windows.Controls.Rating)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RatingAutomationPeer"/> class.
            </summary>
            <param name="owner">The Rating that is associated with this
            RatingAutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetNameCore">
            <summary>
            Returns a name if no name is set.
            </summary>
            <returns>A name if no name is set.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetLocalizedControlTypeCore">
            <summary>
            Returns the localized control type.
            </summary>
            <returns>The localized control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Rating that is associated
            with this RatingAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>List AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the Rating that is associated
            with this RatingAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of 
            the <see cref="T:System.Windows.Controls.ItemsControl"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.ItemsControlAutomationPeer"/>.
            </summary>
            <returns>
            A collection of RatingItemAutomationPeer elements, or null if the
            Rating that is associated with this RatingAutomationPeer is
            empty.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingAutomationPeer.SetValue(System.String)">
            <summary>
            Sets a rating value.
            </summary>
            <param name="value">The value of the rating.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.OwnerRating">
            <summary>
            Gets the Rating that owns this RatingAutomationPeer.
            </summary>
            <value>The Rating.</value>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>true if multiple selection is allowed; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>true if selection is required; otherwise, false.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.IsReadOnly">
            <summary>
            Gets a value indicating whether the Rating is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingAutomationPeer.Value">
            <summary>
            Gets the rating value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.RatingItem">
            <summary>
            An item used in a rating control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StateFilled">
            <summary>
            The state in which the item is filled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StateEmpty">
            <summary>
            The state in which the item is empty.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.GroupFill">
            <summary>
            The group that contains fill states.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.StatePartial">
            <summary>
            The state in which the item is partially filled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._interactionHelper">
            <summary>
            The interaction helper used to get the common states working.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._settingDisplayValue">
            <summary>
            A value indicating whether the actual value is being set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.DisplayValueProperty">
            <summary>
            Identifies the DisplayValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnDisplayValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary>
            <param name="d">RatingItem that changed its DisplayValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnDisplayValueChanged(System.Double,System.Double)">
            <summary>
            DisplayValueProperty property changed handler.
            </summary> 
            <param name="oldValue">The old value.</param> 
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.RatingItem._settingIsReadOnly">
            <summary>
            A value indicating whether the read only value is being set.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingItem.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnIsReadOnlyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="d">RatingItem that changed its IsReadOnly.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnIsReadOnlyChanged(System.Boolean,System.Boolean)">
            <summary>
            IsReadOnlyProperty property changed handler.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>        
        </member>
        <member name="F:System.Windows.Controls.RatingItem.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.SelectValue">
            <summary>
            Selects a value and raises the value selected event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.#ctor">
            <summary>
            Initializes a new instance of the RatingItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the RatingItem's MouseLeftButtonDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the RatingItem's MouseLeftButtonUp event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse enters the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            This method is invoked when the mouse leaves the rating item.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnClick">
            <summary>
            Sets the value to 1.0 when clicked.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Updates the visual state.
            </summary>
            <param name="useTransitions">A value indicating whether to use 
            transitions.</param>
        </member>
        <member name="M:System.Windows.Controls.RatingItem.OnCreateAutomationPeer">
            <summary>
            Returns a AccordionItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A AccordionItemAutomationPeer object for the AccordionItem.</returns>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.DisplayValue">
            <summary>
            Gets the actual value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.IsReadOnly">
            <summary>
            Gets a value indicating whether the control is read-only.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.ParentRating">
            <summary>
            Gets or sets the parent rating of this rating item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RatingItem.Value">
            <summary>
            Gets or sets the value property.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.RatingItemAutomationPeer">
            <summary>
            Exposes RatingItem types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.#ctor(System.Windows.Controls.RatingItem)">
            <summary>
            Initializes a new instance of the RatingAutomationPeer class.
            </summary>
            <param name="owner">
            The Rating that is associated with this
            RatingAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetLocalizedControlTypeCore">
            <summary>
            Returns the localized control type.
            </summary>
            <returns>The localized control type.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the RatingItem that is associated
            with this RatingItemAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Custom AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the RatingItem that is associated with this
            RatingItemAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name RatingItem.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the RatingItem that is associated
            with this RatingItemAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.GetNameCore">
            <summary>
            Returns the name of the rating item.  Uses the index of the rating
            item in the list.
            </summary>
            <returns>The name of the rating item.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the RatingItem to the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current Rating from the collection of selected
            items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears selection from currently selected items and then proceeds to
            select the current Rating.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.OwnerRatingItem">
            <summary>
            Gets the RatingItem that owns this RatingItemAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether the Rating is selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.RatingItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements ISelectionProvider
            and acts as the container for the calling object.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.RatingSelectionMode">
            <summary>
            This type is used to determine the state of the item selected and the
            previous items.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RatingSelectionMode.Continuous">
            <summary>
            All items before the selected ones are selected.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RatingSelectionMode.Individual">
            <summary>
            Only the item selected is visually distinguished.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Tuple`2">
            <summary>
            A structure that groups two values.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
        </member>
        <member name="M:System.Windows.Controls.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Tuple structure.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="P:System.Windows.Controls.Tuple`2.First">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Tuple`2.Second">
            <summary>
            Gets the second value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Tuple">
            <summary>
            A set of tuple functions.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Tuple.Create``2(``0,``1)">
            <summary>
            A method to create tuples.
            </summary>
            <typeparam name="T0">The type of the first item.</typeparam>
            <typeparam name="T1">The type of the second item.</typeparam>
            <param name="arg0">The type of the first argument.</param>
            <param name="arg1">The type of the second argument.</param>
            <returns>The tuple to return.</returns>
        </member>
        <member name="T:System.Windows.Controls.ButtonSpinner">
            <summary>
            Represents a spinner control that includes two Buttons.
            </summary>
            <remarks>
            ButtonSpinner inherits from Spinner. 
            It adds two button template parts and a content property.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.Spinner">
            <summary>
            Base class for controls that represents controls that can spin.
            </summary>
            <remarks>
            Spinner abstract class defines and implements common and focused visual state groups.
            Spinner abstract class defines and implements Spin event and OnSpin method.
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Spinner.ValidSpinDirectionProperty">
            <summary>
            Identifies the ValidSpinDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValidSpinDirectionProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its ValidSpinDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.#ctor">
            <summary>
            Initializes a new instance of the Spinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnSpin(System.Windows.Controls.SpinEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">Spin event args.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Spinner.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">A value indicating whether to automatically generate transitions to the new state, or instantly transition to the new state.</param>
        </member>
        <member name="P:System.Windows.Controls.Spinner.ValidSpinDirection">
            <summary>
            Gets or sets the spin direction that is currently valid.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Spinner.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Spinner.Spin">
            <summary>
            Occurs when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementIncreaseButtonName">
            <summary>
            Name constant of the IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ElementDecreaseButtonName">
            <summary>
            Name constant of the DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._increaseButton">
            <summary>
            Private field for IncreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner._decreaseButton">
            <summary>
            Private field for DecreaseButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ButtonSpinner.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its Content.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.#ctor">
            <summary>
            Initializes a new instance of the ButtonSpinner class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ButtonSpinner control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnContentChanged(System.Object,System.Object)">
            <summary>
            Occurs when the Content property value changed.
            </summary>
            <param name="oldValue">The old value of the Content property.</param>
            <param name="newValue">The new value of the Content property.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle click event of IncreaseButton and DecreaseButton template parts,
            translating Click to appropriate Spin event.
            </summary>
            <param name="sender">Event sender, should be either IncreaseButton or DecreaseButton template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Cancel LeftMouseButtonUp events originating from a button that has
            been changed to disabled.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
            event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that
            contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.OnValidSpinDirectionChanged(System.Windows.Controls.ValidSpinDirections,System.Windows.Controls.ValidSpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ButtonSpinner.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ButtonSpinner.Content">
            <summary>
            Gets or sets the content that is contained within the button spinner.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.SpinDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.SpinEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.SpinEventArgs.#ctor(System.Windows.Controls.SpinDirection)">
            <summary>
            Initializes a new instance of the SpinEventArgs class.
            </summary>
            <param name="direction">Spin direction.</param>
        </member>
        <member name="P:System.Windows.Controls.SpinEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the 
            end-user.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ValidSpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ValidSpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopupAutomationPeer">
            <summary>
            Exposes ListTimePickerPopup types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer">
            <summary>
            Exposes TimePickerPopup types to UI Automation.
            </summary>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The TimePickerPopup that is associated to this 
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.SetValue(System.String)">
            <summary>
            Sets the value of a control from a string.
            </summary>
            <param name="value">The value to set.</param>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.RaiseValueAutomationEvent(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Raises the Value automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the TimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The TimePicker that owns this AutomationPeer.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerPopupAutomationPeer.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>
            The value of the control as a string.
            </returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.ListTimePickerPopup)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the type of the automation control.
            </summary>
            <returns>The Calendar AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/>
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>
            Returns an AutomationPeer that can handle the the pattern,
            or null.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>The string ListTimePickerPopup.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is 
            selected.
            </summary>
            <returns>An array of UI Automation providers.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopupAutomationPeer.GetChildrenCore">
            <summary>
            Returns the collection of child elements of the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildren"/>.
            </summary>
            <returns>
            A list of child <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> elements.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the ListTimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The ListTimePickerPopup that owns this AutomationPeer.</returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.OwnerListTimePickerPopup">
            <summary>
            Gets the ListTimePickerPopup that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            allows more than one child element to be selected concurrently.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopupAutomationPeer.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider 
            requires at least one child element to be selected.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.PickerAutomationPeer">
            <summary>
            Exposes Picker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.#ctor(System.Windows.Controls.Picker)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Automation.Peers.PickerAutomationPeer"/> class.
            </summary>
            <param name="owner">The Picker that is associated to this 
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Picker that is associated
            with this PickerAutomationPeer. This method is called by
            GetAutomationControlType.
            </summary>
            <returns>ComboBox AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the Picker that is associated with this
            PickerAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name Picker.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> 
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.Expand">
            <summary>
            Blocking method that returns after the element has been expanded.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.Collapse">
            <summary>
            Blocking method that returns after the element has been collapsed.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.PickerAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raises the ExpandCollapse automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.PickerAutomationPeer.OwnerPicker">
            <summary>
            Gets the Picker that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.PickerAutomationPeer.ExpandCollapseState">
            <summary>
            Gets an element's current Collapsed or Expanded state.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer">
            <summary>
            Exposes RangeTimePicker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.#ctor(System.Windows.Controls.RangeTimePickerPopup)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner of this AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> that is 
            associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. 
            This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>The string RangeTimePickerPopupAutomationPeer.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the type of the automation control.
            </summary>
            <returns>The Calendar control type.</returns>
        </member>
        <member name="P:System.Windows.Automation.Peers.RangeTimePickerPopupAutomationPeer.TimePickerPopupOwner">
            <summary>
            Gets the RangeTimePickerPopup that owns this AutomationPeer.
            </summary>
            <returns>The RangeTimePickerPopup that owns this AutomationPeer.</returns>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimePickerAutomationPeer">
            <summary>
            Exposes TimePicker types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.#ctor(System.Windows.Controls.TimePicker)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TimePickerAutomationPeer"/> class.
            </summary>
            <param name="owner">The TimePicker that is associated to this
            AutomationPeer.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TimePicker that is associated with this
            PickerAutomationPeer. This method is called by
            GetClassName.
            </summary>
            <returns>The name Picker.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/>
            that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>Returns an AutomationPeer that can handle the the pattern,
            or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
            <summary>
            Sets the control's text value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimePickerAutomationPeer.RaiseValueAutomationEvent(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Raises the Value automation event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.OwnerTimePicker">
            <summary>
            Gets the TimePicker that owns this AutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
            <summary>
            Gets a value indicating whether the value is read only.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TimePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
            <summary>
            Gets a string representation of the current text value.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.TimeUpDownAutomationPeer">
            <summary>
            Exposes TimeUpDown types to UI Automation.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimeUpDownAutomationPeer.#ctor(System.Windows.Controls.TimeUpDown)">
            <summary>
            Initializes a new instance of the TimeUpDownAutomationPeer class.
            </summary>
            <param name="owner">
            The TimeUpDown that is associated with this TimeUpDownAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TimeUpDownAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TimeUpDown that is associated with this
            TimeUpDownAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name TimeUpDown.</returns>
        </member>
        <member name="T:System.Windows.Controls.Primitives.ItemSelectionHelper`1">
            <summary>
            Exposes an ObservableCollection of T and 
            a SelectedItem property for binding purposes.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItemName">
            <summary>
            Name used for the SelectedItem property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1.ItemsName">
            <summary>
            Name used for the Items property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._selectedItem">
            <summary>
            BackingField for the selected item.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Primitives.ItemSelectionHelper`1._items">
            <summary>
            BackingField for Items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:System.Windows.Controls.Primitives.ItemSelectionHelper`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="E:System.Windows.Controls.Primitives.ItemSelectionHelper`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ListTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time from a ListBox.
            </summary>
            <remarks>Can also be used independently.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopup">
            <summary>
            Base class for a control that can be used as the popup portion in a TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.ITimeInput">
            <summary>
            Interface describing the common value, maximum and minimum properties
            that a TimeInput control is expected to have.
            </summary>
            <remarks>Used for internal coercion of these properties.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Value">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>The current time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.ITimeInput.Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedStateName">
            <summary>
            The name of the visual state that represents a Popup that is 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.NotContainedStateName">
            <summary>
            The name of the visual state that represent a Popup that is not 
            contained by a picker.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ContainedByPickerGroupName">
            <summary>
            The name of the ContainedByPicker state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupModeGroupName">
            <summary>
            The name of the PopupMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsAndDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowTimeDesignatorsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            TimeDesignators, Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.AllowSecondsSelectionStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours, Minutes and Seconds can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.HoursAndMinutesOnlyStateName">
            <summary>
            The name of the visual state that represents a PopupMode where
            Hours and Minutes can be picked.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._timePickerParent">
            <summary>
            BackingField of TimePickerParent.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnTimeGlobalizationInfoChanged(System.Windows.Controls.TimeGlobalizationInfo,System.Windows.Controls.TimeGlobalizationInfo)">
            <summary>
            Called when the time globalization info changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when display format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePickerPopup that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCancel">
            <summary>
            Raises the Cancel event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.DoCommit">
            <summary>
            Raises the Commit event.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual states.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>An array of PopupTimeSelectionModes that are supported by
            the Popup.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.OnCreateAutomationPeer">
            <summary>
            Returns an AutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>An AutomationPeer for the Popup object.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>An AutomationPeer for this instance.</returns>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimePickerParent">
            <summary>
            Gets or sets the container for this Popup.
            </summary>
            <value>The TimePicker that contains this Popup.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Minimum">
            <summary>
            Gets or sets the Minimum time considered valid by the control.
            </summary>
            <remarks>Setting the Minimum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Maximum">
            <summary>
            Gets or sets the Maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property will be used to prevent users 
            from choosing values out of range in the TimePickerPopup.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            time formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalizationInfo used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time 
            in the TimePickerPopup. If no format is specified, ShortTimeFormat 
            is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupSecondsInterval">
            <summary>
            Gets or sets the interval of seconds that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupMinutesInterval">
            <summary>
            Gets or sets the interval of minutes that can be
            picked in a popup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Commit">
            <summary>
            Occurs when a selected item is committed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePickerPopup.Cancel">
            <summary>
            Occurs when a selection has been canceled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePickerPopup.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxPartName">
            <summary>
            The name of the ListBox TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._listBoxPart">
            <summary>
            BackingField for ListBoxPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._isValueChangeCausedBySelection">
            <summary>
            Determines whether the value changed because SelectedItem in the
            ListBox was changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxStyleProperty">
            <summary>
            Identifies the ListBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyleProperty">
            <summary>
            Identifies the ListBoxItemStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnListBoxItemStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ListBoxItemStyleProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its ListBoxItemStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup._allowWritingTimeItemsSelection">
            <summary>
            Indicates whether it is allowed to set the TimeItemsSelection property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionProperty">
            <summary>
            Identifies the TimeItemsSelection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnTimeItemsSelectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeItemsSelectionProperty property changed handler.
            </summary>
            <param name="d">ListTimePickerPopup that changed its TimeItemsSelection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.ListTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ListTimePickerPopup control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnCultureChanged(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Called when the culture changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnFormatChanged(System.Windows.Controls.ITimeFormat,System.Windows.Controls.ITimeFormat)">
            <summary>
            Called when format changed.
            </summary>
            <param name="oldValue">The old format.</param>
            <param name="newValue">The new format.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupMinutesIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup minutes interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupSecondsIntervalChanged(System.Int32,System.Int32)">
            <summary>
            Called when the popup seconds interval changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnPopupTimeSelectionModeChanged(System.Windows.Controls.PopupTimeSelectionMode,System.Windows.Controls.PopupTimeSelectionMode)">
            <summary>
            Called when the time selection mode is changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RegenerateTimeItems">
            <summary>
            Regenerates the time items.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.SelectValue">
            <summary>
            Select a value based on the current value. This will 'snap' the 
            Value to the closest possible Time based on the interval.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ScrollToSelectedValue">
            <summary>
            Scrolls to a value in the list, or closest.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelectionPropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Called when the TimeItems object is set.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.TimeItemsPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called by any property change on the TimeItems object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnOpened">
            <summary>
            Called when TimePicker opened the popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.ItemSelectedByMouse(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonUp event of the ListBoxPart control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>
            An array of PopupTimeSelectionModes that are supported by
            the Popup.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>The ListTimePickerPopupAutomationPeer for this instance.</returns>
        </member>
        <member name="M:System.Windows.Controls.ListTimePickerPopup.RaiseAutomationPeerSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the automation peer selection changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxPart">
            <summary>
            Gets the ListBox part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxStyle">
            <summary>
            Gets or sets the Style applied to the ListBox portion the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.ListBoxItemStyle">
            <summary>
            Gets or sets the Style applied to the ListBoxItems in the 
            ListTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ListTimePickerPopup.TimeItemsSelection">
            <summary>
            Gets the collection of times used in the ListBox portion of the 
            ListTimePickerPopup control.
            </summary>
            <value>The time items selection.</value>
        </member>
        <member name="T:System.Windows.Controls.RangeTimePickerPopup">
            <summary>
            Represents a time picker popup that allows choosing time through 3 
            sliders: Hours, Minutes and seconds.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursSliderPartName">
            <summary>
            The HoursSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesSliderPartName">
            <summary>
            The MinutesSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsSliderPartName">
            <summary>
            The SecondsSliderPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.HoursContainerPartName">
            <summary>
            The HoursLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.MinutesContainerPartName">
            <summary>
            The MinutesLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SecondsContainerPartName">
            <summary>
            The SecondsLabelsPartName.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPartName">
            <summary>
            The name of the CommitButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPartName">
            <summary>
            The name of the CancelButton TemplatePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._secondsSlider">
            <summary>
            BackingField for the SecondsSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._minutesSlider">
            <summary>
            BackingField for the MinutesSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._hoursSlider">
            <summary>
            BackingField for the HoursSlider.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._cancelButtonPart">
            <summary>
            BackingField for CancelButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._commitButtonPart">
            <summary>
            BackingField for CommitButtonPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._isOpenedByContainer">
            <summary>
            Is set when opened or closed by a container.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup._ignoreSliderChange">
            <summary>
            Determines whether the control should ignore the changes in its 
            sliders.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.SliderStyleProperty">
            <summary>
            Identifies the SliderStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnSliderStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SliderStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its SliderStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.RangeTimePickerPopup.TimeButtonStyleProperty">
            <summary>
            Identifies the TimeButtonStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnTimeButtonStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeButtonStyleProperty property changed handler.
            </summary>
            <param name="d">RangeTimePickerPopup that changed its TimeButtonStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.RangeTimePickerPopup"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnApplyTemplate">
            <summary>
            Builds the visual tree for the RangeTimePickerPopup control when a 
            new template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SliderSizeChange(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when a slider changes size.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SecondsChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Seconds Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.MinutesChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Minutes Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>        
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.HoursChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Reacts to a change in the Hours Slider.
            </summary>
            <param name="sender">The Slider that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnOpened">
            <summary>
            Called when the TimePicker control has opened this popup.
            </summary>
            <remarks>Called before the TimePicker reacts to value changes.
            This is done so that the Popup can 'snap' to a specific value without
            changing the selected value in the TimePicker.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnClosed">
            <summary>
            Called when the TimePicker control has closed this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCommit(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the commit button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnCancel(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called by the cancel button.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValueFromSliders">
            <summary>
            Calculates the value based on the sliders.
            </summary>
            <returns>The DateTime as represented by the current values in the 
            Sliders.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetSlidersToValue(System.DateTime)">
            <summary>
            Sets the sliders to value.
            </summary>
            <param name="value">The DateTime that needs to be reflected by
            the three sliders.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GenerateLabels">
            <summary>
            Generates the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.SetEnabledStatusOnLabels">
            <summary>
            Sets the enabled status on the labels.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.LayoutLabels">
            <summary>
            Arranges the time labels on the RangeTimePickerPopup control.
            </summary>
            <remarks>Uses a canvas to layout labels vertically.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.OnLabelClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a label is clicked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetCoercedValue(System.DateTime)">
            <summary>
            Gets the value after Minimum and Maximum coercion.
            </summary>
            <param name="time">The input.</param>
            <returns>Time between Minimum and Maximum.</returns>
            <remarks>Done to avoid coercion in containing controls.</remarks>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetSnappedValue(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the coerced value, using interval and a minimum and maximum.
            </summary>
            <param name="value">The value that will be snapped.</param>
            <param name="minimum">The minimum the value may be.</param>
            <param name="maximum">The maximum the value may be.</param>
            <param name="interval">The interval to which the value gets snapped.</param>
            <returns>A value that is within range and snapped to an interval.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateLabelElement(System.String,System.TimeSpan)">
            <summary>
            Creates the element for a label.
            </summary>
            <param name="text">The text that is set as content.</param>
            <param name="timespan">The TimeSpan that is represented by the Button.</param>
            <returns>A Button representing the label.</returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.GetValidPopupTimeSelectionModes">
            <summary>
            Gets the valid popup time selection modes.
            </summary>
            <returns>
            An array of PopupTimeSelectionModes that are supported by
            the Popup.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.RangeTimePickerPopup.CreateAutomationPeer">
            <summary>
            Creates the automation peer.
            </summary>
            <returns>The RangeTimePickerPopupAutomationPeer for this instance.</returns>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsSlider">
            <summary>
            Gets or sets the seconds slider Part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesSlider">
            <summary>
            Gets or sets the minutes slider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursSlider">
            <summary>
            Gets or sets the HoursSlider.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.HoursContainer">
            <summary>
            Gets or sets the hours labels.
            </summary>
            <value>The hours labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.MinutesContainer">
            <summary>
            Gets or sets the minute labels.
            </summary>
            <value>The minute labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SecondsContainer">
            <summary>
            Gets or sets the second labels.
            </summary>
            <value>The second labels.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CancelButtonPart">
            <summary>
            Gets or sets the cancel button part.
            </summary>
            <value>The cancel button part.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.CommitButtonPart">
            <summary>
            Gets or sets the commit button part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.IsCurrentlyOpen">
            <summary>
            Gets a value indicating whether this instance is currently open.
            </summary>
            <value><c>True</c> if this instance is currently open; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.SliderStyle">
            <summary>
            Gets or sets the Style applied to the sliders in the 
            RangeTimePickerPopup control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RangeTimePickerPopup.TimeButtonStyle">
            <summary>
            Gets or sets the Style applied to the buttons that represent
            hours, minutes and seconds.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimePickerPopupTemplate">
            <summary>
            Describes the template used to instantiate a Popup for TimePicker.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.PopupTimeSelectionMode">
            <summary>
            Determines the granularity of time selection
            by a popup. Hours and minutes are always used.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.AllowSecondsSelection">
            <summary>
            Hours, Minutes and Seconds.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.PopupTimeSelectionMode.HoursAndMinutesOnly">
            <summary>
            Hours and Minutes.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.CustomTimeFormat">
            <summary>
            Represents a single time format used for parsing and formatting.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ITimeFormat">
            <summary>
            Defines time formats used for formatting and parsing DateTime values.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>A format to use during display of a DateTime.</returns>
        </member>
        <member name="M:System.Windows.Controls.ITimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>An array of formats to be used during parsing.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
            <param name="format">The format that is used to parse or display
            a String or DateTime.</param>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.CustomTimeFormat"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Equality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.op_Inequality(System.Windows.Controls.CustomTimeFormat,System.Windows.Controls.CustomTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.CustomTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.CustomTimeFormat.Format">
            <summary>
            Gets or sets the custom format that is used to parse or display
            a String or DateTime.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.LongTimeFormat">
            <summary>
            Represents the long time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Equality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.op_Inequality(System.Windows.Controls.LongTimeFormat,System.Windows.Controls.LongTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.LongTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.ShortTimeFormat">
            <summary>
            Represents the short time format used for parsing and formatting.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeDisplayFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the format to use to display a DateTime as a time value.
            </summary>
            <param name="culture">The culture.</param>
            <returns>
            A format to use during display of a DateTime.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetTimeParseFormats(System.Globalization.CultureInfo)">
            <summary>
            Gets the formats to use to parse a string to a DateTime.
            </summary>
            <param name="culture">Culture used to determine formats.</param>
            <returns>
            An array of formats to be used during parsing.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is 
            equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare 
            with the current <see cref="T:System.Object"/>.</param>
            <returns>
            True if the specified <see cref="T:System.Object"/> is equal 
            to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Equality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.op_Inequality(System.Windows.Controls.ShortTimeFormat,System.Windows.Controls.ShortTimeFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Windows.Controls.ShortTimeFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeFormatConverter">
            <summary>
            Converts from a string value to an ITimeFormat instance. Converts "Short" 
            to ShortTimeFormat, "Long" to LongTimeFormat and any other strings to 
            CustomTimeFormat. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified 
            type descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified type 
            descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of type string to an instance of type ITimeFormat.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="source">
            The string that is converted.
            </param>
            <returns>
            An instance of ITimeFormat that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an known instance of type ITimeFormat to a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeGlobalizationInfo">
            <summary>
            Strategy object that determines how controls interact with DateTime and 
            CultureInfo.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeGlobalizationInfo.TimeChars">
            <summary>
            The characters that are allowed inside a format.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTransformedFormat(System.String)">
            <summary>
            Transforms a format to a format that only allows the characters
            h, m, s, t, H and the defined TimeSeparators (: and .).
            Also takes into account the rule that a single TimeCharacter should
            be followed by a space.
            </summary>
            <param name="format">The format that needs to be transformed.</param>
            <returns>A format containing only the expected characters.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapDigitToCharacter(System.Int32)">
            <summary>
            Returns the global representation of each integer formatted 
            by the TimeGlobalizationInfo.
            </summary>
            <param name="input">Character that will be mapped to a different
            character.</param>
            <returns>The global version of a character that represents the input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.MapCharacterToDigit(System.Char)">
            <summary>
            Returns the European number character of each global representation 
            parsed by the TimeGlobalizationInfo.
            </summary>
            <param name="input">The global version of the character that needs 
            to be mapped to a regular character.</param>
            <returns>The character that represents the global version of a character.</returns>
            <remarks>All characters pass through this method (whitespaces and
            TimeDesignators). Return the input character if no logical mapping
            could be made.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetActualTimeParsers(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Gets the actual TimeParsers that will be used for parsing.
            </summary>
            <param name="parsers">The parsers that are currently used by parent.</param>
            <returns>A new collection of parsers that represent the parsers
            this strategy object will use.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.FormatTime(System.Nullable{System.DateTime},System.Windows.Controls.ITimeFormat,System.Char[])">
            <summary>
            Formats the specified DateTime to a time string representation.
            </summary>
            <param name="value">The DateTime that should be formatted.</param>
            <param name="timeFormat">The time format used to describe how value
            should be formatted.</param>
            <param name="timeCharacters">The allowed characters in the format. 
            Leave empty to indicate that all characters are allowed. See remarks.</param>
            <returns>
            A string that represents the time part of a DateTime.
            </returns>
            <remarks>The TimeFormat will contain TimeCharacters in a certain 
            order, like hh:mm:ss. By passing specific TimeCharacters, these
            will get filtered and the method only returns part of the formatted
            string. Example: pass 'h', 't', 'H' to get back 4 AM, if the culture
            was set to en-US.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.ParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <returns>
            A DateTime with a correctly set time part.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.TryParseTime(System.String,System.Windows.Controls.ITimeFormat,System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser},System.Nullable{System.DateTime}@)">
            <summary>
            Parses a string into a DateTime using the specified ITimeFormat instance 
            and TimeParsers and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="mappedText">The text that was entered by the user.</param>
            <param name="timeFormat">The TimeFormat instance used to supply
            formats.</param>
            <param name="timeParsers">The time parsers.</param>
            <param name="result">A DateTime with a correctly set time part.</param>
            <returns>
            True, if the time was parsed correctly, false if the time was not 
            parsed.
            </returns>
            <remarks>The date part of the DateTime is irrelevant and will be
            overwritten by the current date.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTimeUnitAtTextPosition(System.String,System.Int32,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the time unit that is represented by a text position.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="textPosition">The location in the text.</param>
            <param name="timeFormat">The time format describe how the text 
            can be parsed to a DateTime.</param>
            <returns>
            The TimeSpan that is represented by the character at a
            specific caret position.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetTextPositionForTimeUnit(System.String,System.TimeSpan,System.Windows.Controls.ITimeFormat)">
            <summary>
            Gets the position for a time unit in a string that can be parsed by 
            the specified ITimeFormat.
            </summary>
            <param name="text">The text that represents a DateTime.</param>
            <param name="timeSpan">The time span that is searched for.</param>
            <param name="timeFormat">The time format that describes how this text can be
            parsed to a DateTime.</param>
            <returns>
            The position in the text that corresponds to the TimeSpan or
            -1 if none was found.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnIncrement(System.DateTime,System.TimeSpan)">
            <summary>
            Performs addition of a date time and a time span in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after incrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.OnDecrement(System.DateTime,System.TimeSpan)">
            <summary>
            Subtracts a time span from a date time in a global context.
            </summary>
            <param name="value">The value.</param>
            <param name="timeSpan">The time span.</param>
            <returns>The DateTime after decrementing by TimeSpan.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionStart(System.String)">
            <summary>
            Gets the caret position at the start of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <returns>Caret position for the end of the designator,
            or -1 if none found.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeGlobalizationInfo.GetDesignatorTextPositionEnd(System.String,System.Int32)">
            <summary>
            Gets the caret position at the end of the designator.
            </summary>
            <param name="text">The text that might include a designator.</param>
            <param name="designatorStartIndex">Start index of the designator.</param>
            <returns>
            Caret position for the end of the designator,
            or -1 if none found.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.Culture">
            <summary>
            Gets or sets the culture used by the owning TimeInput control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.ActualCulture">
            <summary>
            Gets the actual culture used by the TimeGlobalizationInfo for formatting 
            and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.TimeSeparators">
            <summary>
            Gets the characters that may be used to separate components of time,
            that is, hours, minutes and seconds.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.AMDesignator">
            <summary>
            Gets the string designator for hours that are "ante meridiem" 
            (before noon).
            </summary>
            <value>The AM designator.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeGlobalizationInfo.PMDesignator">
            <summary>
            Gets the string designator for hours that are "post meridiem" 
            (after noon).
            </summary>
            <value>The PM designator.</value>
        </member>
        <member name="T:System.Windows.Controls.Picker">
            <summary>
            Base class for all controls that have popup functionality.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementPopupName">
            <summary>
            Name constant for Popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.ElementDropDownToggleName">
            <summary>
            Name constant for DropDownToggle.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownPopup">
            <summary>
            BackingField for PopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._dropDownToggleButton">
            <summary>
            BackingField for DropDownTogglePart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker.IsDropDownOpenProperty">
            <summary>
            Identifies the IsDropDownOpen dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnIsDropDownOpenPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsDropDownOpenProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its IsDropDownOpen.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.PopupButtonModeProperty">
            <summary>
            Identifies the PopupButtonMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupButtonModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupButtonModeProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its PopupButtonMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker.MaxDropDownHeightProperty">
            <summary>
            Identifies the MaxDropDownHeight dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaxDropDownHeightProperty property changed handler.
            </summary>
            <param name="d">Picker that changed its MaxDropDownHeight.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChild">
            <summary>
            BackingField for PopupChild.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._outsidePopupCanvas">
            <summary>
            Gets or sets the expansive area outside of the popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupChildCanvas">
            <summary>
            Gets or sets the canvas for the popup child.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._ignorePropertyChange">
            <summary>
            Gets or sets a value indicating whether to ignore calling a pending 
            change handlers. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupClosedVisualState">
            <summary>
            Gets or sets a value indicating whether a visual popup state is 
            being used in the current template for the Closed state. Setting 
            this value to true will delay the actual setting of Popup.IsOpen 
            to false until after the visual state's transition for Closed is 
            complete.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Picker._popupHasOpened">
            <summary>
            A value indicating whether the popup has been opened at least once.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.Picker"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Picker control when a new template is 
            applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.GetSelectedValue">
            <summary>
            Gets the selected value represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.ArrangePopup">
            <summary>
            Arrange the drop down popup.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Picker.OpenDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly opens the popup, checks the expander 
            button, and then fires the Opened event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.CloseDropDown(System.Boolean,System.Boolean)">
            <summary>
            Private method that directly closes the popup, flips the Checked 
            value, and then fires the Closed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ToggleButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Opens or closes the popup if reacting to button press.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnPopupClosedStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Actually closes the popup after the VSM state animation completes.
            </summary>
            <param name="sender">Event source.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OutsidePopupMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The mouse has clicked outside of the popup.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.ControlIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the change of the IsEnabled property.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMaxDropDownHeightChanged(System.Double)">
            <summary>
            Handles MaxDropDownHeightChanged by re-arranging and updating the 
            popup arrangement.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has received focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The popup child has lost focus.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The popup child has had the mouse enter its bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The mouse has left the popup child's bounds.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.PopupChildSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The size of the popup child has changed.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpening(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpening event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation and 
            halt opening the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownOpened event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosing(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosing event.
            </summary>
            <param name="e">
            Provides any observers the opportunity to cancel the operation 
            and halt closing the drop down.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises the DropDownClosed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.FocusChanged(System.Boolean)">
            <summary>
            Handles the FocusChanged event.
            </summary>
            <param name="hasFocus">A value indicating whether the control 
            currently has the focus.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.HasFocus">
            <summary>
            Checks to see if the control has focus currently.
            </summary>
            <returns>Returns a value indicating whether the control or its popup
            have focus.</returns>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.Picker.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Picker.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownPopup">
            <summary>
            Gets or sets the popup part.
            </summary>
            <value>The popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.DropDownToggleButton">
            <summary>
            Gets or sets the drop down toggle part.
            </summary>
            <value>The drop down toggle part.</value>
        </member>
        <member name="P:System.Windows.Controls.Picker.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the drop-down portion 
            of the control is open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupButtonMode">
            <summary>
            Gets or sets the button event that causes the popup portion of the 
            Picker control to open.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down portion of the 
            Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.PopupChild">
            <summary>
            Gets the element shown in the drop down portion of the Picker control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Picker.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality. Making it internal for subclass access.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is changing from 
            false to true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed from 
            false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to false.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Picker.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from true to false 
            and the drop-down is open.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TimeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeCoercionHelper._timeInputControl">
            <summary>
            The TimeInput control that needs to be coerced.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.#ctor(System.Windows.Controls.ITimeInput)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeCoercionHelper"/> class.
            </summary>
            <param name="timeInput">The time input that this helper will coerce.</param>
            <remarks>Lifetime of this helper class is determined by lifetime
            of control it is coercing.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMinimumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the minimum value being set.
            </summary>
            <param name="newMinimum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.ProcessMaximumChange(System.Nullable{System.DateTime})">
            <summary>
            Processes the maximum value being set.
            </summary>
            <param name="newMaximum">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValue(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>
            True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeCoercionHelper.CoerceValueOnRangeMove(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Coerces the value.
            </summary>
            <param name="newMinimum">The new minimum.</param>
            <param name="newMaximum">The new maximum.</param>
            <returns>True if no coercion was needed and the value will not be
            modified, false if the coercion logic will set a different value.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParser">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Converts the specified string representation of a time to its DateTime 
            equivalent and returns a value that indicates whether the conversion 
            succeeded.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.TimeParserCollection">
            <summary>
            Represents a collection of TimeParser objects.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Controls.TimeParser})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeParserCollection"/> class.
            </summary>
            <param name="parsers">A sequence of TimeParser objects that will
            be copied into this collection.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeParserCollection.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>True if the parse was successful, false if it was not.</returns>
        </member>
        <member name="T:System.Windows.Controls.CatchallTimeParser">
            <summary>
            TimeParser that will allow very loose time to be entered. It will try
            to parse the first two numbers as hours and the second two numbers as 
            minutes, and will not care about other characters, such as designators,
            separators or non-time related characters.
            If the first character is bigger than 2, it will parse only the first 
            character as an hour and will use the second two characters for minutes.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.CatchallTimeParser.exp">
            <summary>
            Expression used to parse.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.CatchallTimeParser.TryParse(System.String,System.Globalization.CultureInfo,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to parse a string to a DateTime.
            </summary>
            <param name="text">The text that should be parsed.</param>
            <param name="culture">The culture being used.</param>
            <param name="result">The parsed DateTime.</param>
            <returns>
            True if the parse was successful, false if it was not.
            </returns>
            <remarks>The parsing is culture insensitive. A user can type 8p to
            indicate 20:00:00, or 20.</remarks>
        </member>
        <member name="T:System.Windows.Controls.TimePicker">
            <summary>
            Represents a control that allows the user to select a time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementTimeUpDownName">
            <summary>
            The name for the TimeUpDown element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleName">
            <summary>
            The name for the TimeUpDownStyle element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ElementPopupPlaceHolderPartName">
            <summary>
            The name for the PopupPlaceHolder element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeUpDownPart">
            <summary>
            BackingField for TimeUpDownPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupPlaceHolderPart">
            <summary>
            BackingField for PopupPlaceHolderPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._popupSessionValueCache">
            <summary>
            Cache of the value before we open a popup.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isInitialized">
            <summary>
            Indicates that the control has finished initialization.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValueProperty property changed handler.
            </summary>
            <param name="d">UpDownBase whose Value changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeUpDownStyleProperty">
            <summary>
            Identifies the TimeUpDownStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeUpDownStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeUpDownStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its TimeUpDownStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.SpinnerStyleProperty">
            <summary>
            Identifies the SpinnerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnSpinnerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SpinnerStyleProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its SpinnerStyle.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupProperty">
            <summary>
            Identifies the Popup dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Popup.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTemplateProperty">
            <summary>
            Identifies the PopupTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTemplateProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTemplate.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._instantiatedPopupFromTemplate">
            <summary>
            BackingField for InstantiatedPopupFromTemplate.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupSecondsIntervalProperty">
            <summary>
            Identifies the PopupSecondsInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupSecondsIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupSecondsIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupSecondsInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupSecondsInitialized">
            <summary>
            Determines whether PopupSeconds has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupMinutesIntervalProperty">
            <summary>
            Identifies the PopupMinutesInterval dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupMinutesIntervalPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupMinutesIntervalProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupMinutesInterval.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimePicker._isPopupMinutesInitialized">
            <summary>
            Determines whether PopupMinutes has been changed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimePicker.PopupTimeSelectionModeProperty">
            <summary>
            Identifies the PopupTimeSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnPopupTimeSelectionModePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            PopupTimeSelectionModeProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its PopupTimeSelectionMode.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimePicker"/> 
            class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimePicker control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.GetSelectedValue">
            <summary>
            Gets the selected time  represented in the control.
            </summary>
            <returns>The value that is picked.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanging event when Value property is changing.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a change in value in TimeUpDown.
            </summary>
            <param name="sender">The TimeUpDown that changed its value.</param>
            <param name="e">The instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParseError(System.Object,System.Windows.Controls.UpDownParseErrorEventArgs)">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.TimeUpDownParsing(System.Object,System.Windows.Controls.UpDownParsingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raised when TimeUpDown raises this event.
            </summary>
            <param name="sender">The TimeUpDown instance raising this event.</param>
            <param name="e">The instance containing the event data.</param>
            <remarks>Here to make it easier to access
            these events.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownOpened(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownOpened event when the IsDropDownOpen property
            changed from false to true.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnDropDownClosed(System.Windows.RoutedPropertyChangedEventArgs{System.Boolean})">
            <summary>
            Raises an DropDownClosed event when the IsDropDownOpen property
            changed from true to false.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Reacts to a Value change in a popup.
            </summary>
            <param name="sender">The Popup that raised a ValueChange.</param>
            <param name="e">The  instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCommitted(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been committed. Will close the popup.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PopupCanceled(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The Popup has been canceled. Will close the popup,
            and set the value back to its initial value.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.RegisterPopup(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Called when a new Popup is set.
            </summary>
            <param name="popup">The new value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.UnregisterPopup(System.Windows.Controls.TimePickerPopup)">
            <summary>
            Unregisters the popup.
            </summary>
            <param name="popup">The old value.</param>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.InstantiatePopupFromTemplate">
            <summary>
            Instantiates the template.
            </summary>
            <remarks>Will only use template if Popup is not set.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.PropagateNewValue">
            <summary>
            Propagates the new value to components that are part of
            our template.
            </summary>
            <remarks>Workaround for SL2 inability to do twoway 
            templatebinding. Should remove in SL3.</remarks>
        </member>
        <member name="M:System.Windows.Controls.TimePicker.OnCreateAutomationPeer">
            <summary>
            Returns a PickerAutomationPeer for use by the Silverlight 
            automation infrastructure.
            </summary>
            <returns>A PickerAutomationPeer for the Picker object.</returns>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownPart">
            <summary>
            Gets or sets the time up down part.
            </summary>
            <value>The time up down part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupPlaceHolderPart">
            <summary>
            Gets or sets the popup place holder part.
            </summary>
            <remarks>This is the ContentControl that is used to display
            Popups.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value from 
            the textbox, spinning a new value and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Selecting a value through a popup, Parsing a new value 
            from the textbox, spinning a new value and programmatically specifying 
            a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeUpDownStyle">
            <summary>
            Gets or sets the Style applied to the TimeUpDown portion of the TimePicker 
            control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.SpinnerStyle">
            <summary>
            Gets or sets the Style that is applied to the spinner.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Format">
            <summary>
            Gets or sets the Format used by the control. From XAML Use either 
            "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time in the 
            TimePicker. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.ActualTimePickerPopup">
            <summary>
            Gets the TimePickerPopup that is used by the TimePicker. This
            can be either a popup created from the PopupTemplate, or a popup
            set directly to the Popup property. When both are set, the Popup
            property will win.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.Popup">
            <summary>
            Gets or sets the TimePickerPopup that will be shown to the user by the 
            TimePicker control. This property may not be styled. To style a 
            TimePicker with a Popup, please use the PopupTemplate property.
            When both PopupTemplate and Popup are set, Popup will be used.
            </summary>
            <remark>This property might be null, since a template can be used.</remark>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTemplate">
            <summary>
            Gets or sets the template used as Popup. A Popup can also be set
            directly on the Popup property. When both PopupTemplate and Popup
            are set, Popup will be used. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupSecondsInterval">
            <summary>
            Gets or sets the seconds interval between time values allowed by 
            the TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupMinutesInterval">
            <summary>
            Gets or sets the minutes interval between time values allowed by the 
            TimePickerPopup.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.PopupTimeSelectionMode">
            <summary>
            Gets or sets the whether the TimePickerPopup supports selecting 
            designators and/or seconds.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanging">
            <summary>
            Occurs when Value property is changing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ValueChanged">
            <summary>
            Occurs when Value property has changed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.Parsing">
            <summary>
            Occurs when a value is being parsed and allows custom parsing.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TimePicker.ParseError">
            <summary>
            Occurs when there is an error in parsing user input and allows adding parsing logic.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimePicker.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.TimeTypeConverter">
            <summary>
            Allows time to be set from xaml.
            </summary>
            <QualityBand>Preview</QualityBand>
            <remarks>This converter is used by xaml and thus uses the 
            English formats.</remarks>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._timeFormats">
            <summary>
            BackingField for the TimeFormats being used.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeTypeConverter._dateFormats">
            <summary>
            BackingField for the DateFormats being used.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert from 
            the specified type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="sourceType">Type of the source.</param>
            <returns>
            	<c>True</c> if this instance can convert from the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance can convert to the specified 
            type descriptor context.
            </summary>
            <param name="typeDescriptorContext">The type descriptor context.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>
            	<c>True</c> if this instance can convert to the specified type 
            descriptor context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of other data types into instances of DateTime that
            represent a time.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert. This culture
            is not used during conversion, but a specific set of formats is used.</param>
            <param name="source">
            The string being converted to the DateTime.
            </param>
            <returns>
            A DateTime that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a DateTime into a string.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.TimeUpDown">
            <summary>
            Represents a control that uses a spinner and textbox to allow a user to 
            input time.
            </summary>
            <remarks>TimeInput supports only the following formatting characters:
            'h', 'm', 's', 'H', 't'. All other characters are filtered out:
            'd', 'f', 'F', 'g', 'K', 'M', 'y', 'z'.</remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintFormat">
            <summary>
            StringFormat used in the TimeHint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ElementTimeHintPopupName">
            <summary>
            The name for the TimeHint element.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeHint">
            <summary>
            The group name "TimeHintStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.GroupTimeParsingStates">
            <summary>
            The group name "ParsingStates".
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintOpenedUpStateName">
            <summary>
            The state name "TimeHintOpenedUp" indicates that the hint is being
            shown on the top of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintOpenedDownStateName">
            <summary>
            The state name "TimeHintOpenedDown" indicates that the hint is
            being shown at the bottom of the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintClosedStateName">
            <summary>
            The state name "TimeHintClosed" indicates that no hint is being 
            shown.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.ValidTimeStateName">
            <summary>
            The state name "ValidTime" that indicates that currently the textbox
            text parses to a valid Time.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.InvalidTimeStateName">
            <summary>
            The state name "InvalidTime" that indicates that currently the textbox 
            text does not allow parsing.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.EmptyTimeStateName">
            <summary>
            The state name "EmptyTime" that indicates that currently the textbox
            text would parse to a Null.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintPopupPart">
            <summary>
            BackingField for TimeHintPopupPart.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeCoercionHelper">
            <summary>
            Helper class that centralizes the coercion logic across all 
            TimeInput controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._lastParsedText">
            <summary>
            The text that was last parsed. Used in comparisons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintExpandDirection">
            <summary>
            The direction in which the TimeHint will expand.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isShowTimeHint">
            <summary>
            BackingField for IsShowTimeHint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._ignoreValueChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MinimumProperty">
            <summary>
            Identifies the Minimum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MinimumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Minimum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMinimumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Minimum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Minimum property.</param>
            <param name="newValue">New value of the Minimum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.MaximumProperty">
            <summary>
            Identifies the Maximum dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            MaximumProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Maximum.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMaximumChanged(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Called when the Maximum property value has changed.
            </summary>
            <param name="oldValue">Old value of the Maximum property.</param>
            <param name="newValue">New value of the Maximum property.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeParsersProperty">
            <summary>
            Identifies the TimeParsers dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeParsersPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeParsersProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeParsers.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.FormatProperty">
            <summary>
            Identifies the Format dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnFormatPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FormatProperty property changed handler.
            </summary>
            <param name="d">TimePicker that changed its Format.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualFormat">
            <summary>
            BackingField for ActualFormat.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.CultureProperty">
            <summary>
            Identifies the Culture dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCulturePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            CultureProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its Culture.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfoProperty">
            <summary>
            Identifies the TimeGlobalizationInfo dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeGlobalizationInfoPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeGlobalizationInfoProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeGlobalizationInfo.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._actualTimeGlobalizationInfo">
            <summary>
            BackingField for ActualTimeGlobalizationInfo.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.IsCyclicProperty">
            <summary>
            Identifies the IsCyclic dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIsCyclicPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsCyclicProperty property changed handler.
            </summary>
            <param name="d">DomainUpDown instance that changed its IsCyclic value.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown.TimeHintContentProperty">
            <summary>
            Identifies the TimeHintContent dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeHintContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            TimeHintContentProperty property changed handler.
            </summary>
            <param name="d">TimeUpDown that changed its TimeHintContent.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._timeHintDate">
            <summary>
            Represents the formatted DateTime that is used in the TimeHint hint.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._isIgnoreSelectionOfAllText">
            <summary>
            Indicates whether the control should not proceed with selecting all
            text.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TimeUpDown._allowHintContentChange">
            <summary>
            BackingField for AllowHintContentChange.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TimeUpDown"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TimeUpDown control when a new
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanging(System.Windows.Controls.RoutedPropertyChangingEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Provides handling for the ValueChanging event.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Nullable{System.DateTime}})">
            <summary>
            Raises the ValueChanged event when Value property has changed.
            </summary>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.ParseValue(System.String)">
            <summary>
            Called by ApplyValue to parse user input.
            </summary>
            <param name="text">User input.</param>
            <returns>Value parsed from user input.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.FormatValue">
            <summary>
            Renders the value property into the textbox text.
            </summary>
            <returns>Formatted Value.</returns>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnIncrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnDecrement">
            <summary>
            Called by OnSpin when the spin direction is SpinDirection.Increase.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SetValidSpinDirection">
            <summary>
            Sets the valid spin direction based on the position of the caret,
            the value and the minimum and maximum.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectionChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the SelectionChanged event from TextBox.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.InputChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the TextChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.DetermineHint">
            <summary>
            Determines the value of the hint property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTimeHintMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the Left Mouse Button Down event of the TimeHint.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> 
            instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
            <remarks>
            Only support up and down arrow keys.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonUp event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnTextLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for Text template part's LostFocus event.
            We use this event to compare current TextBox.Text with cached previous
            value to decide whether user has typed in a new value.
            </summary>
            <param name="sender">The Text template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.UpdateVisualState(System.Boolean)">
            <summary>
            Update current visual state.
            </summary>
            <param name="useTransitions">True to use transitions when updating the visual state, false to
            snap directly to the new visual state.</param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TimeUpDown.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific 
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations 
            for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> 
            subclass to return.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeHintPopupPart">
            <summary>
            Gets or sets the time hint popup part.
            </summary>
            <value>The time hint popup part.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsShowTimeHint">
            <summary>
            Gets or sets a value indicating whether this instance is showing a
            TimeHint visual.
            </summary>
            <value><c>True</c> if this instance is showing the TimeHint; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMinimum">
            <summary>
            Gets the actual minimum. If a Minimum is set, use that, otherwise
            use the start of the day.
            </summary>        
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualMaximum">
            <summary>
            Gets the actual maximum. If a Maximum is set, use that, otherwise
            use the end of the day.
            </summary>
            <value>The actual maximum.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Value">
            <summary>
            Gets or sets the currently selected time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Minimum">
            <summary>
            Gets or sets the minimum time considered valid by the control.
            </summary>
            <remarks>Setting the minimum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Maximum">
            <summary>
            Gets or sets the maximum time considered valid by the control.
            </summary>
            <remarks>Setting the Maximum property is applicable for the following 
            features: Parsing a new value from the textbox, spinning a new value 
            and programmatically specifying a value. </remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeParsers">
            <summary>
            Gets or sets a collection of TimeParsers that are used when parsing 
            text to time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeParsers">
            <summary>
            Gets the actual TimeParsers that will be used for parsing by the control.
            </summary>
            <remarks>Includes the TimeParsers introduced in the TimeGlobalizationInfo.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Format">
            <summary>
            Gets or sets the Format used by the control. 
            From XAML Use either "Short", "Long" or a custom format. 
            Custom formats can only contain "H", "h", "m", "s" or "t". 
            For example: use 'hh:mm:ss' is used to format time as "13:45:30".
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualFormat">
            <summary>
            Gets the actual format that will be used to display Time  in the 
            TimeUpDown. If no format is specified, ShortTimeFormat is used.
            </summary>
            <value>The actual display format.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.Culture">
            <summary>
            Gets or sets the culture that will be used by the control for 
            parsing and formatting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualCulture">
            <summary>
            Gets the actual culture used by the control for formatting and parsing.
            </summary>
            <value>The actual culture.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeGlobalizationInfo">
            <summary>
            Gets or sets the strategy object that determines how the control 
            interacts with DateTime and CultureInfo.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.ActualTimeGlobalizationInfo">
            <summary>
            Gets the actual TimeGlobalization info used by the control.
            </summary>
            <remarks>If TimeGlobalizationInfo is not set, will return 
            default TimeGlobalizationInfo instance.</remarks>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.IsCyclic">
            <summary>
            Gets or sets a value indicating whether the TimeUpDown control will 
            cycle through values when trying to spin the first and last item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.TimeHintContent">
            <summary>
            Gets the text used to guide the user when entering time.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Value">
            <summary>
            Gets or sets the Value property.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Minimum">
            <summary>
            Gets or sets the minimum time.
            </summary>
            <value>The minimum time.</value>
        </member>
        <member name="P:System.Windows.Controls.TimeUpDown.System#Windows#Controls#ITimeInput#Maximum">
            <summary>
            Gets or sets the maximum time.
            </summary>
            <value>The maximum time.</value>
        </member>
        <member name="T:System.Windows.Controls.UpDownParseErrorEventArgs">
            <summary>
            Provides data for the UpDownBase.ParseError event.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParseErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the UpDownParseErrorEventArgs class.
            </summary>
            <param name="text">The text that caused the parsing error.</param>
            <param name="error">The exception thrown by ParseValue method.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Text">
            <summary>
            Gets the original string value that failed to parse.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Error">
            <summary>
            Gets the exception that was raised during the initial parsing 
            attempt.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParseErrorEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event is handled.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.UpDownParsingEventArgs`1">
            <summary>
            Provides data for the UpDownBase.Parsing event.
            </summary>
            <typeparam name="T">Type of Value property.</typeparam>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.UpDownParsingEventArgs`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> class.
            </summary>
            <param name="text">The text that will be parsed.</param>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Text">
            <summary>
            Gets the original string value that will be parsed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Value">
            <summary>
            Gets or sets the value to be used.
            </summary>
            <value>The parsed value.</value>
        </member>
        <member name="P:System.Windows.Controls.UpDownParsingEventArgs`1.Handled">
            <summary>
            Gets or sets a value indicating whether 
            this <see cref="T:System.Windows.Controls.UpDownParsingEventArgs`1"/> is handled.
            </summary>
            <value><c>True</c> if handled; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\3.0\ReferenceAssemblies\mscorlib.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] Provides a base class for Win32 critical handle implementations in which the value of -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid" /> class.</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] Gets a value that indicates whether the handle is invalid.</summary>
      <returns>true if the handle is not valid; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] Provides a base class for Win32 safe handle implementations in which the value of -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid" /> class, specifying whether the handle is to be reliably released. </summary>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] Gets a value that indicates whether the handle is invalid.</summary>
      <returns>true if the handle is not valid; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
      <summary>[SECURITY CRITICAL] Provides a base class for Win32 safe handle implementations in which the value of either 0 or -1 indicates an invalid handle.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" /> class, specifying whether the handle is to be reliably released. </summary>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>[SECURITY CRITICAL] Gets a value that indicates whether the handle is invalid.</summary>
      <returns>true if the handle is not valid; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
      <summary>[SECURITY CRITICAL] Represents a wrapper class for a wait handle. </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> class. </summary>
      <param name="existingHandle">An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use.</param>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="T:System.AccessViolationException">
      <summary>The exception that is thrown when there is an attempt to read or write protected memory.</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Action`1">
      <summary>Encapsulates a method that takes a single parameter and does not return a value.</summary>
      <param name="obj">The parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
    </member>
    <member name="T:System.Activator">
      <summary>Contains methods to create types of objects locally. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>Creates an instance of the type designated by the specified generic type parameter.</summary>
      <returns>A reference to the newly created object.</returns>
      <typeparam name="T">The type to create.</typeparam>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>Creates an instance of the specified type by using that type's default constructor.</summary>
      <returns>A reference to the newly created object.</returns>
      <param name="type">The type of object to create. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a RuntimeType. -or-<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or- Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor. </exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type. </exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>Creates an instance of the specified type by using the constructor that best matches the specified parameters.</summary>
      <returns>A reference to the newly created object.</returns>
      <param name="type">The type of object to create. </param>
      <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args" /> is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a RuntimeType. -or-<paramref name="type" /> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> is a <see cref="T:System.Reflection.Emit.TypeBuilder" />.-or- Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported. -or-The constructor that best matches <paramref name="args" /> has varargs arguments.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor. </exception>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <exception cref="T:System.MissingMethodException">No matching public constructor was found. </exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> is not a valid type. </exception>
    </member>
    <member name="T:System.AppDomain">
      <summary>Represents an application domain, which is an isolated environment where applications execute. This class cannot be inherited.</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>[SECURITY CRITICAL] Occurs when the resolution of an assembly fails.</summary>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>Gets the current application domain for the current <see cref="T:System.Threading.Thread" />.</summary>
      <returns>The current application domain.</returns>
    </member>
    <member name="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>Defines a dynamic assembly with the specified name and access mode.</summary>
      <returns>The dynamic assembly created.</returns>
      <param name="name">The unique identity of the dynamic assembly. </param>
      <param name="access">The access mode for the dynamic assembly. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The Name property of <paramref name="name" /> is null.-or- The Name property of <paramref name="name" /> begins with white space, or contains a forward or backward slash. </exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain. </exception>
    </member>
    <member name="P:System.AppDomain.DomainManager">
      <summary>[SECURITY CRITICAL] Gets the domain manager that was provided by the host when the application domain was initialized.</summary>
      <returns>An <see cref="T:System.AppDomainManager" /> object that represents the domain manager provided by the host when the application domain was initialized, or null if no domain manager was provided.</returns>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>[SECURITY CRITICAL] Executes an assembly given its display name.</summary>
      <returns>The value returned by the entry point of the assembly.</returns>
      <param name="assemblyName">The display name of the assembly. See <see cref="P:System.Reflection.Assembly.FullName" />.</param>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>Gets the friendly name of this application domain.</summary>
      <returns>The friendly name of this application domain.</returns>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain. </exception>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>[SECURITY CRITICAL] Gets the value stored in the current application domain for the specified name.</summary>
      <returns>The value of the <paramref name="name" /> property.</returns>
      <param name="name">The name of a predefined application domain property, or the name of an application domain property you have defined. </param>
    </member>
    <member name="M:System.AppDomain.GetType">
      <summary>Gets the type of the current instance.</summary>
      <returns>A <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>[SECURITY CRITICAL] Assigns the specified value to the specified application domain property.</summary>
      <param name="name">The name of a user-defined application domain property to create or change. </param>
      <param name="data">The value of the property. </param>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>Obtains a string representation that includes the friendly name of the application domain and any context policies.</summary>
      <returns>A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies." </returns>
      <exception cref="T:System.AppDomainUnloadedException">The application domain represented by the current <see cref="T:System.AppDomain" /> has been unloaded.</exception>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>[SECURITY CRITICAL] Occurs when an exception is not caught.</summary>
    </member>
    <member name="T:System.AppDomainManager">
      <summary>[SECURITY CRITICAL] Provides a managed equivalent of an unmanaged host.</summary>
    </member>
    <member name="M:System.AppDomainManager.#ctor">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.AppDomainManager" /> class. </summary>
    </member>
    <member name="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
      <summary>[SECURITY CRITICAL] Returns a <see cref="T:System.Boolean" /> indicating whether the specified operation is allowed in the application domain.</summary>
      <returns>true if the host allows the operation specified by <paramref name="state" /> to be performed in the application domain; otherwise false.</returns>
      <param name="state">A subclass of <see cref="T:System.Security.SecurityState" /> that identifies the operation whose security status is requested. </param>
    </member>
    <member name="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
      <summary>[SECURITY CRITICAL] Initializes the new application domain.</summary>
      <param name="appDomainInfo">An <see cref="T:System.AppDomainSetup" /> object that contains application domain initialization information.</param>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>Represents assembly binding information that can be added to an instance of <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="M:System.AppDomainSetup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainSetup" /> class.</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>[SECURITY CRITICAL] Gets or sets the name of the directory containing the application.</summary>
      <returns>A <see cref="T:System.String" /> containing the name of the application base directory.</returns>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationName">
      <summary>Gets or sets the name of the application.</summary>
      <returns>A <see cref="T:System.String" /> that is the name of the application.</returns>
    </member>
    <member name="P:System.AppDomainSetup.LoaderOptimization">
      <summary>Gets the optimization policy used to load an executable.</summary>
      <returns>The optimization policy for the application domain.</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>The exception that is thrown when an attempt is made to access an unloaded application domain. </summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.AppDomainUnloadedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ArgumentException">
      <summary>The exception that is thrown when one of the arguments provided to a method is not valid.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="paramName">The name of the parameter that caused the current exception. </param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>Gets the error message and the parameter name, or only the error message if no parameter name is set.</summary>
      <returns>A text string describing the details of the exception. The value of this property takes one of two forms: Condition Value The <paramref name="paramName" /> is a null reference (Nothing in Visual Basic) or of zero length. The <paramref name="message" /> string passed to the constructor. The <paramref name="paramName" /> is not a null reference (Nothing in Visual Basic) and it has a length greater than zero. The <paramref name="message" /> string appended with the name of the invalid parameter. </returns>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument. </summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception. </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for this exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.ArgumentNullException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception. </param>
      <param name="message">A message that describes the error. </param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class.</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that causes this exception. </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and the exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for this exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class with a specified error message and the name of the parameter that causes this exception.</summary>
      <param name="paramName">The name of the parameter that caused the exception. </param>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>Gets the error message and the string representation of the invalid argument value, or only the error message if the argument value is null.</summary>
      <returns>The text message for this exception. The value of this property takes one of two forms, as follows.Condition Value The <paramref name="actualValue" /> is null. The <paramref name="message" /> string passed to the constructor. The <paramref name="actualValue" /> is not null. The <paramref name="message" /> string appended with the string representation of the invalid argument value. </returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>The exception that is thrown for errors in an arithmetic, casting, or conversion operation.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class.</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArithmeticException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Array">
      <summary>Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime. </summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <summary>Returns a read-only wrapper for the specified array.</summary>
      <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.</returns>
      <param name="array">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />  wrapper. </param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the specified <see cref="T:System.Collections.IComparer" /> interface.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using the <see cref="T:System.IComparable" /> interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable" /> interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
      <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.  </param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>Sets a range of elements in the <see cref="T:System.Array" /> to zero, to false, or to null, depending on the element type.</summary>
      <param name="array">The <see cref="T:System.Array" /> whose elements need to be cleared.</param>
      <param name="index">The starting index of the range of elements to clear.</param>
      <param name="length">The number of elements to clear.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.-or-The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of the <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Array" />.</summary>
      <returns>A shallow copy of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 32-bit integer.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</summary>
      <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
      <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
      <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
      <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
      <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the current one-dimensional <see cref="T:System.Array" /> to the specified one-dimensional <see cref="T:System.Array" /> starting at the specified destination <see cref="T:System.Array" /> index. The index is specified as a 32-bit integer.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the current <see cref="T:System.Array" />.</param>
      <param name="index">A 32-bit integer that represents the index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Array" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:System.Array" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">The source <see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidCastException">At least one element in the source <see cref="T:System.Array" /> cannot be cast to the type of destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>Creates a one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and length, with zero-based indexing.</summary>
      <returns>A new one-dimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length, using zero-based indexing.</returns>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="length">The size of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported.-or-<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>Creates a multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</summary>
      <returns>A new multidimensional <see cref="T:System.Array" /> of the specified <see cref="T:System.Type" /> with the specified length for each dimension, using zero-based indexing.</returns>
      <param name="elementType">The <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to create.</param>
      <param name="lengths">An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> is null.-or-<paramref name="lengths" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> is not a valid <see cref="T:System.Type" />.-or-The <paramref name="lengths" /> array contains less than one element.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> is not supported. For example, <see cref="T:System.Void" /> is not supported. -or-<paramref name="elementType" /> is an open generic type.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Any value in <paramref name="lengths" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <summary>Performs the specified action on each element of the specified array.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.</param>
      <param name="action">The <see cref="T:System.Action`1" /> to perform on each element of <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.-or-<paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</summary>
      <returns>A 32-bit integer that represents the number of elements in the specified dimension.</returns>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.-or-<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>Gets the lower bound of the specified dimension in the <see cref="T:System.Array" />.</summary>
      <returns>The lower bound of the specified dimension in the <see cref="T:System.Array" />.</returns>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose lower bound needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.-or-<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>Gets the upper bound of the specified dimension in the <see cref="T:System.Array" />.</summary>
      <returns>The upper bound of the specified dimension in the <see cref="T:System.Array" />.</returns>
      <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose upper bound needs to be determined.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> is less than zero.-or-<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>Gets the value at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.</summary>
      <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array" />.</returns>
      <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>Gets the value at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.</summary>
      <returns>The value at the specified position in the multidimensional <see cref="T:System.Array" />.</returns>
      <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array" /> element to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
      <returns>The index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, the lower bound of the array minus 1.</returns>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>Initializes every element of the value-type <see cref="T:System.Array" /> by calling the default constructor of the value type.</summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Array" /> has a fixed size.</summary>
      <returns>This property is always true for all arrays.</returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Array" /> is read-only.</summary>
      <returns>This property is always false for all arrays.</returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Array" /> is synchronized (thread safe).</summary>
      <returns>This property is always false for all arrays.</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</returns>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
      <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, –1.</returns>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
      <param name="value">The object to locate in <paramref name="array" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>Gets a 32-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</summary>
      <returns>A 32-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.Rank">
      <summary>Gets the rank (number of dimensions) of the <see cref="T:System.Array" />.</summary>
      <returns>The rank (number of dimensions) of the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>Changes the size of an array to the specified new size.</summary>
      <param name="array">The one-dimensional, zero-based array to resize, or null to create a new array with the specified size.</param>
      <param name="newSize">The size of the new array.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
      <param name="index">The starting index of the section to reverse.</param>
      <param name="length">The number of elements in the section to reverse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array" />. The index is specified as a 32-bit integer.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array" /> element to set.</param>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the range of valid indexes for the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array" />. The indexes are specified as an array of 32-bit integers.</summary>
      <param name="value">The new value for the specified element.</param>
      <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of dimensions in the current <see cref="T:System.Array" /> is not equal to the number of elements in <paramref name="indices" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> cannot be cast to the element type of the current <see cref="T:System.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Any element in <paramref name="indices" /> is outside the range of valid indexes for the corresponding dimension of the current <see cref="T:System.Array" />.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>Sorts the elements in an entire one-dimensional <see cref="T:System.Array" /> using the <see cref="T:System.IComparable" /> implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>Sorts a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.-or-null to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or-null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.-or-The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="keys">The one-dimensional <see cref="T:System.Array" /> that contains the keys to sort.</param>
      <param name="items">The one-dimensional <see cref="T:System.Array" /> that contains the items that correspond to each of the keys in the <paramref name="keys" /><see cref="T:System.Array" />.-or-null to sort only the <paramref name="keys" /><see cref="T:System.Array" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or-null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.RankException">The <paramref name="keys" /><see cref="T:System.Array" /> is multidimensional.-or-The <paramref name="items" /><see cref="T:System.Array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.-or-<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.-or-<paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>Sorts the elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or-null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing elements.-or-null to use the <see cref="T:System.IComparable" /> implementation of each element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
      <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.-or-<paramref name="comparison" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="T">The type of the elements of the array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>Sorts a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.-or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each key.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.-or-<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.-or-<paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />.</exception>
      <exception cref="T:System.InvalidOperationException">One or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>Sorts a range of elements in a pair of <see cref="T:System.Array" /> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the keys to sort. </param>
      <param name="items">The one-dimensional, zero-based <see cref="T:System.Array" /> that contains the items that correspond to the keys in <paramref name="keys" />, or null to sort only <paramref name="keys" />.</param>
      <param name="index">The starting index of the range to sort.</param>
      <param name="length">The number of elements in the range to sort.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
      <typeparam name="TKey">The type of the elements of the key array.</typeparam>
      <typeparam name="TValue">The type of the elements of the items array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than the lower bound of <paramref name="keys" />.-or-<paramref name="length" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> is not null, and the lower bound of <paramref name="keys" /> does not match the lower bound of <paramref name="items" />.-or-<paramref name="items" /> is not null, and the length of <paramref name="keys" /> does not match the length of <paramref name="items" />.-or-<paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="keys" /><see cref="T:System.Array" />.-or-<paramref name="items" /> is not null, and <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in the <paramref name="items" /><see cref="T:System.Array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> is null, and one or more elements in the <paramref name="keys" /><see cref="T:System.Array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Array" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Array" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Array" />.</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>Implements <see cref="M:System.Collections.IList.Add(System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <returns>An exception is always thrown.</returns>
      <param name="value">The object to be added to the <see cref="T:System.Array" />.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>Sets all elements in the <see cref="T:System.Array" /> to zero, to false, or to null, depending on the element type.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Array" /> is read-only.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether an element is in the <see cref="T:System.Array" />.</summary>
      <returns>true if <paramref name="value" /> is found in the <see cref="T:System.Array" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Array" />. The element to locate can be null for reference types.</param>
      <exception cref="T:System.RankException">The current <see cref="T:System.Array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>Searches for the specified object and returns the index of the first occurrence within the current one-dimensional instance.</summary>
      <returns>The index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Array" />, if found; otherwise, the lower bound of the <see cref="T:System.Array" /> minus 1.</returns>
      <param name="value">The object to locate in the current <see cref="T:System.Array" />.</param>
      <exception cref="T:System.RankException">The current <see cref="T:System.Array" /> is multidimensional.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Implements <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <param name="index">The index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The object to insert.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ICollection.Count" />.</exception>
      <exception cref="T:System.ArgumentException">The current <see cref="T:System.Array" /> does not have exactly one dimension.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>Implements <see cref="M:System.Collections.IList.Remove(System.Object)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Array" />.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Implements <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />. Throws a <see cref="T:System.NotSupportedException" /> in all cases.</summary>
      <param name="index">The index of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">In all cases.</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>Delimits a section of a one-dimensional array.</summary>
      <typeparam name="T">The type of the elements in the array segment.</typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> structure that delimits all the elements in the specified array.</summary>
      <param name="array">The array to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ArraySegment`1" /> structure that delimits the specified range of the elements in the specified array.</summary>
      <param name="array">The array containing the range of elements to delimit.</param>
      <param name="offset">The zero-based index of the first element in the range.</param>
      <param name="count">The number of elements in the range.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> and <paramref name="count" /> do not specify a valid range in <paramref name="array" />.</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>Gets the original array containing the range of elements that the array segment delimits.</summary>
      <returns>The original array that was passed to the constructor, and that contains the range delimited by the <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>Gets the number of elements in the range delimited by the array segment.</summary>
      <returns>The number of elements in the range delimited by the <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>Determines whether the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance.</summary>
      <returns>true if the specified <see cref="T:System.ArraySegment`1" /> structure is equal to the current instance; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.ArraySegment`1" /> structure to be compared with the current instance.</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current instance.</summary>
      <returns>true if the specified object is a <see cref="T:System.ArraySegment`1" /> structure and is equal to the current instance; otherwise, false.</returns>
      <param name="obj">The object to be compared with the current instance.</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</summary>
      <returns>The position of the first element in the range delimited by the <see cref="T:System.ArraySegment`1" />, relative to the start of the original array.</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are equal.</summary>
      <returns>true if <paramref name="a" /> is equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.ArraySegment`1" /> structure on the left side of the equality operator.</param>
      <param name="b">The <see cref="T:System.ArraySegment`1" /> structure on the right side of the equality operator.</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>Indicates whether two <see cref="T:System.ArraySegment`1" /> structures are unequal.</summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The <see cref="T:System.ArraySegment`1" /> structure on the left side of the inequality operator.</param>
      <param name="b">The <see cref="T:System.ArraySegment`1" /> structure on the right side of the inequality operator.</param>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>The exception that is thrown when an attempt is made to store an element of the wrong type within an array. </summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class.</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ArrayTypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>References a method to be called when a corresponding asynchronous operation is completed.</summary>
      <param name="ar">The result of the asynchronous operation. </param>
    </member>
    <member name="T:System.Attribute">
      <summary>Represents the base class for custom attributes.</summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Attribute" /> class.</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> equals the type and value of this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance or null. </param>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of the custom attribute to search for.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or null if there is no such attribute.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="type">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class. </param>
      <param name="type">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="type" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> is not a constructor, method, property, event, type, or field. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option. </summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">This parameter is ignored, and does not affect the operation of this method. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
      <returns>true if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, false.</returns>
      <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class. </param>
      <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
      <param name="inherit">If true, specifies to also search the ancestors of <paramref name="element" /> for custom attributes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> or <paramref name="attributeType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />. </exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> is not a method, constructor, or type. </exception>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.</summary>
      <returns>true if this instance equals <paramref name="obj" />; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance of <see cref="T:System.Attribute" />. </param>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>Specifies the application elements on which it is valid to apply an attribute.</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>Attribute can be applied to an assembly.</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>Attribute can be applied to a module.</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>Attribute can be applied to a class.</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>Attribute can be applied to a structure; that is, a value type.</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>Attribute can be applied to an enumeration.</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>Attribute can be applied to a constructor.</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>Attribute can be applied to a method.</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>Attribute can be applied to a property.</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>Attribute can be applied to a field.</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>Attribute can be applied to an event.</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>Attribute can be applied to an interface.</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>Attribute can be applied to a parameter.</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>Attribute can be applied to a delegate.</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>Attribute can be applied to a return value.</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>Attribute can be applied to a generic parameter.</summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>Attribute can be applied to any application element.</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>Specifies the usage of another attribute class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute" /> class with the specified list of <see cref="T:System.AttributeTargets" />, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited" /> value.</summary>
      <param name="validOn">The set of values combined using a bitwise OR operation to indicate which program elements are valid. </param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
      <returns>true if more than one instance is allowed to be specified; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>Gets or sets a Boolean value indicating whether the indicated attribute can be inherited by derived classes and overriding members.</summary>
      <returns>true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</summary>
      <returns>One or several <see cref="T:System.AttributeTargets" /> values. The default is All.</returns>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>The exception that is thrown when the file image of a DLL or an executable program is invalid. </summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class.</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.BadImageFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>Gets the error message and the name of the file that caused this exception.</summary>
      <returns>A string containing the error message and the name of the file that caused this exception.</returns>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>Returns the fully qualified name of this exception and possibly the error message and the name of the inner exception.</summary>
      <returns>A string containing the fully qualified name of this exception and possibly the error message and the name of the inner exception.</returns>
    </member>
    <member name="T:System.BitConverter">
      <summary>Converts base data types to an array of bytes, and an array of bytes to base data types.</summary>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>Returns the specified Boolean value as an array of bytes.</summary>
      <returns>An array of bytes with length 1.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>Returns the specified Unicode character value as an array of bytes.</summary>
      <returns>An array of bytes with length 2.</returns>
      <param name="value">A character to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>Returns the specified double-precision floating point value as an array of bytes.</summary>
      <returns>An array of bytes with length 8.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>Returns the specified 16-bit signed integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 2.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>Returns the specified 32-bit signed integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 4.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>Returns the specified 64-bit signed integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 8.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>Returns the specified single-precision floating point value as an array of bytes.</summary>
      <returns>An array of bytes with length 4.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>Returns the specified 16-bit unsigned integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 2.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>Returns the specified 32-bit unsigned integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 4.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>Returns the specified 64-bit unsigned integer value as an array of bytes.</summary>
      <returns>An array of bytes with length 8.</returns>
      <param name="value">The number to convert. </param>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>Indicates the byte order ("endianess") in which data is stored in this computer architecture.</summary>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>Returns a Boolean value converted from one byte at a specified position in a byte array.</summary>
      <returns>true if the byte at <paramref name="startIndex" /> in <paramref name="value" /> is nonzero; otherwise, false.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>Returns a Unicode character converted from two bytes at a specified position in a byte array.</summary>
      <returns>A character formed by two bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</summary>
      <returns>A double precision floating point number formed by eight bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</summary>
      <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</summary>
      <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</summary>
      <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</summary>
      <returns>A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</summary>
      <returns>A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <paramref name="value" />; for example, "7F-2C-4A".</returns>
      <param name="value">An array of bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</summary>
      <returns>A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value" />; for example, "7F-2C-4A".</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</summary>
      <returns>A <see cref="T:System.String" /> of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name="value" />; for example, "7F-2C-4A".</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <param name="length">The number of array elements in <paramref name="value" /> to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or-<paramref name="startIndex" /> is greater than zero and is greater than or equal to the length of <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentException">The combination of <paramref name="startIndex" /> and <paramref name="length" /> does not specify a position within <paramref name="value" />; that is, the <paramref name="startIndex" /> parameter is greater than the length of <paramref name="value" /> minus the <paramref name="length" /> parameter.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</summary>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">The array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> equals the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</summary>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 3, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</summary>
      <returns>A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name="startIndex" />.</returns>
      <param name="value">An array of bytes. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> is greater than or equal to the length of <paramref name="value" /> minus 7, and is less than or equal to the length of <paramref name="value" /> minus 1.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of <paramref name="value" /> minus 1. </exception>
    </member>
    <member name="T:System.Boolean">
      <summary>Represents a Boolean value.</summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>Compares this instance to a specified <see cref="T:System.Boolean" /> object and returns an integer that indicates their relationship to one another.</summary>
      <returns>A signed integer that indicates the relative values of this instance and <paramref name="value" />.Return Value Condition Less than zero This instance is false and <paramref name="value" /> is true. Zero This instance and <paramref name="value" /> are equal (either both are true or both are false). Greater than zero This instance is true and <paramref name="value" /> is false. </returns>
      <param name="value">A <see cref="T:System.Boolean" /> object to compare to this instance. </param>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates their relationship to one another.</summary>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="obj" />.Return Value Condition Less than zero This instance is false and <paramref name="obj" /> is true. Zero This instance and <paramref name="obj" /> are equal (either both are true or both are false). Greater than zero This instance is true and <paramref name="obj" /> is false.-or- <paramref name="obj" /> is null. </returns>
      <param name="obj">An object to compare to this instance, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Boolean" />. </exception>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Boolean" /> object.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Boolean" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Boolean" /> and has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance. </param>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>Represents the Boolean value false as a string. This field is read-only.</summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Boolean" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Boolean" />.</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent.</summary>
      <returns>true if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" />; otherwise, false.</returns>
      <param name="value">A string containing the value to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equivalent to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true or false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>1 if the value of this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.Char" /> value. This conversion is not supported.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">You attempt to convert a <see cref="T:System.Boolean" /> value to a <see cref="T:System.DateTime" /> value. This conversion is not supported.</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />..</summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />..</summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />..</summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>An object of the specified type, with a value that is equivalent to the value of this <see cref="T:System.Boolean" /> object.</returns>
      <param name="type">The desired type. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>1 if this instance is true; otherwise, 0.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>Converts the value of this instance to its equivalent string representation (either "True" or "False").</summary>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is true, or <see cref="F:System.Boolean.FalseString" /> if the value of this instance is false.</returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string representation (either "True" or "False").</summary>
      <returns>
        <see cref="F:System.Boolean.TrueString" /> if the value of this instance is true, or <see cref="F:System.Boolean.FalseString" /> if the value of this instance is false.</returns>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> object. </param>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>Represents the Boolean value true as a string. This field is read-only.</summary>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="value" /> was converted successfully; otherwise, false.</returns>
      <param name="value">A string containing the value to convert. </param>
      <param name="result">When this method returns, if the conversion succeeded, contains true if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.TrueString" /> or false if <paramref name="value" /> is equivalent to <see cref="F:System.Boolean.FalseString" />. If the conversion failed, contains false. The conversion fails if <paramref name="value" /> is null or is not equivalent to either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.Buffer">
      <summary>Manipulates arrays of primitive types.</summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</summary>
      <param name="src">The source buffer. </param>
      <param name="srcOffset">The zero-based byte offset into <paramref name="src" />. </param>
      <param name="dst">The destination buffer. </param>
      <param name="dstOffset">The zero-based byte offset into <paramref name="dst" />. </param>
      <param name="count">The number of bytes to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> or <paramref name="dst" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> or <paramref name="dst" /> is not an array of primitives.-or- The length of <paramref name="src" /> is less than <paramref name="srcOffset" /> plus <paramref name="count" />.-or- The length of <paramref name="dst" /> is less than <paramref name="dstOffset" /> plus <paramref name="count" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />, <paramref name="dstOffset" />, or <paramref name="count" /> is less than 0. </exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>Returns the number of bytes in the specified array.</summary>
      <returns>The number of bytes in the array.</returns>
      <param name="array">An array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. </exception>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>Retrieves the byte at a specified location in a specified array.</summary>
      <returns>Returns the <paramref name="index" /> byte in the array.</returns>
      <param name="array">An array. </param>
      <param name="index">A location in the array. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />. </exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>Assigns a specified value to a byte at a particular location in a specified array.</summary>
      <param name="array">An array. </param>
      <param name="index">A location in the array. </param>
      <param name="value">A value to assign. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not a primitive. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is negative or greater than the length of <paramref name="array" />. </exception>
    </member>
    <member name="T:System.Byte">
      <summary>Represents an 8-bit unsigned integer.</summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>Compares this instance to a specified 8-bit unsigned integer and returns an indication of their relative values.</summary>
      <returns>A signed integer that indicates the relationship of this instance to <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An 8-bit unsigned integer to compare. </param>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed integer that indicates the relationship of this instance to <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Byte" />. </exception>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Byte" /> object represent the same value.</summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Byte" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Byte" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null. </param>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for the current <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Byte" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Byte" />.</returns>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Byte" />. This field is constant.</summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Byte" />. This field is constant.</summary>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>The <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" />  style.</param>
      <param name="provider">An object that supplies culture-specific parsing information about <paramref name="s" />. If <paramref name="provider" /> is null, the current thread culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Byte" /> value. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <returns>The string representation of the value of this object in the format specified by the <paramref name="provider" /> parameter.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> parameter.</returns>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.Byte" /> object to its equivalent string representation using the specified format and culture-specific formatting information.</summary>
      <returns>The string representation of the current <see cref="T:System.Byte" /> object, formatted as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false. </returns>
      <param name="s">A string that contains a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Byte" /> value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used. </param>
      <param name="result">When this method returns, contains the 8-bit unsigned integer value equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>The exception that is thrown when an attempt to unload an application domain fails.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.CannotUnloadAppDomainException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Char">
      <summary>Represents a Unicode character.</summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>Compares this instance to a specified <see cref="T:System.Char" /> object and returns an integer that indicates whether this instance precedes, follows, or has the same position in the sort order as the specified <see cref="T:System.Char" /> value.</summary>
      <returns>A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.Return Value Description Less than zero This instance precedes <paramref name="value" />. Zero This instance has the same position in the sort order as <paramref name="value" />. Greater than zero This instance follows <paramref name="value" />. </returns>
      <param name="value">A <see cref="T:System.Char" /> object to compare. </param>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance precedes, follows, or has the same position in the sort order as the specified object.</summary>
      <returns>A signed number that indicates the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.Return Value Description Less than zero This instance precedes <paramref name="value" />. Zero This instance has the same position in the sort order as <paramref name="value" />. Greater than zero This instance is follows <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare this instance to, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Char" /> object. </exception>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>Returns a value indicating whether this instance is equal to the specified <see cref="T:System.Char" /> object.</summary>
      <returns>true if the <paramref name="value" /> parameter equals the value of this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Char" /> object to compare to this instance. </param>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance or null. </param>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>Converts the specified numeric Unicode character to a double-precision floating point number.</summary>
      <returns>The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</summary>
      <returns>The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</returns>
      <param name="s">A <see cref="T:System.String" />. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Char" />.</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</summary>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</summary>
      <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</returns>
      <param name="s">A <see cref="T:System.String" />. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a control character.</summary>
      <returns>true if <paramref name="c" /> is a control character; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a control character.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a decimal digit.</summary>
      <returns>true if <paramref name="c" /> is a decimal digit; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, false.</returns>
      <param name="s">A <see cref="T:System.String" />. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a Unicode letter.</summary>
      <returns>true if <paramref name="c" /> is a letter; otherwise, false.</returns>
      <param name="c">The Unicode character to evaluate. </param>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</summary>
      <returns>true if <paramref name="c" /> is a letter or a decimal digit; otherwise, false.</returns>
      <param name="c">The Unicode character to evaluate. </param>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The position of the character to evaluate in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a lowercase letter.</summary>
      <returns>true if <paramref name="c" /> is a lowercase letter; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a number.</summary>
      <returns>true if <paramref name="c" /> is a number; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a number.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a punctuation mark.</summary>
      <returns>true if <paramref name="c" /> is a punctuation mark; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a separator character.</summary>
      <returns>true if <paramref name="c" /> is a separator character; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>Indicates whether the specified character has a surrogate code point.</summary>
      <returns>true if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string has a surrogate code point.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</summary>
      <returns>true if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, false.</returns>
      <param name="highSurrogate">A character. </param>
      <param name="lowSurrogate">A character. </param>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</summary>
      <returns>true if the <paramref name="s" /> parameter and the <paramref name="index" /> parameter specify a pair of adjacent characters, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">A position within <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a position within <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as a symbol character.</summary>
      <returns>true if <paramref name="c" /> is a symbol character; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as an uppercase letter.</summary>
      <returns>true if <paramref name="c" /> is an uppercase letter; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>Indicates whether the specified Unicode character is categorized as white space.</summary>
      <returns>true if <paramref name="c" /> is white space; otherwise, false.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>Indicates whether the character at the specified position in a specified string is categorized as white space.</summary>
      <returns>true if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, false.</returns>
      <param name="s">A string. </param>
      <param name="index">The character position in <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />. </exception>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Char" />. This field is constant.</summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Char" />. This field is constant.</summary>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <returns>The value of the current <see cref="T:System.Char" /> object unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No value is returned.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. (Specify null because the <paramref name="provider" /> parameter is ignored.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Note   This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>An object of the specified type.</returns>
      <param name="type">A <see cref="T:System.Type" /> object. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. </exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.Char" /> object.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>Converts the value of a Unicode character to its lowercase equivalent.</summary>
      <returns>The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</summary>
      <returns>The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules, or null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
    </member>
    <member name="M:System.Char.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>Converts the specified Unicode character to its equivalent string representation.</summary>
      <returns>The string representation of the value of <paramref name="c" />.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>Converts the value of a Unicode character to its uppercase equivalent.</summary>
      <returns>The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</summary>
      <returns>The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</returns>
      <param name="c">A Unicode character. </param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules, or null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a single character or null. </param>
      <param name="result">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null or the length of <paramref name="s" /> is not 1. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>Initializes an instance of the <see cref="T:System.CLSCompliantAttribute" /> class with a Boolean value indicating whether the indicated program element is CLS-compliant.</summary>
      <param name="isCompliant">true if CLS-compliant; otherwise, false. </param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>Gets the Boolean value indicating whether the indicated program element is CLS-compliant.</summary>
      <returns>true if the program element is CLS-compliant; otherwise, false.</returns>
    </member>
    <member name="T:System.Comparison`1">
      <summary>Represents the method that compares two objects of the same type.</summary>
      <returns>Value Condition Less than 0 <paramref name="x" /> is less than <paramref name="y" />.0 <paramref name="x" /> equals <paramref name="y" />.Greater than 0 <paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <typeparam name="T">The type of the objects to compare.</typeparam>
    </member>
    <member name="T:System.Console">
      <summary>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Console.Error">
      <summary>Gets the standard error output stream.</summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> that represents the standard error output stream.</returns>
    </member>
    <member name="P:System.Console.In">
      <summary>Gets the standard input stream.</summary>
      <returns>A <see cref="T:System.IO.TextReader" /> that represents the standard input stream.</returns>
    </member>
    <member name="P:System.Console.Out">
      <summary>Gets the standard output stream.</summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> that represents the standard output stream.</returns>
    </member>
    <member name="M:System.Console.ReadLine">
      <summary>Reads a line of characters from the console.</summary>
      <returns>The next line of characters from the console.</returns>
    </member>
    <member name="M:System.Console.SetError(System.IO.TextWriter)">
      <summary>[SECURITY CRITICAL] Sets the <see cref="P:System.Console.Error" /> property.</summary>
      <param name="newError">A <see cref="T:System.IO.TextWriter" /> stream that is the new standard error output. </param>
    </member>
    <member name="M:System.Console.SetIn(System.IO.TextReader)">
      <summary>[SECURITY CRITICAL] Sets the <see cref="P:System.Console.In" /> property.</summary>
      <param name="newIn">A <see cref="T:System.IO.TextReader" /> stream that is the new standard input. </param>
    </member>
    <member name="M:System.Console.SetOut(System.IO.TextWriter)">
      <summary>[SECURITY CRITICAL] Sets the <see cref="P:System.Console.Out" /> property.</summary>
      <param name="newOut">A <see cref="T:System.IO.TextWriter" /> stream that is the new standard output. </param>
    </member>
    <member name="M:System.Console.Write(System.Char)">
      <summary>Writes the specified Unicode character value to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Char[])">
      <summary>Writes the specified array of Unicode characters to the standard output stream.</summary>
      <param name="buffer">A Unicode character array. </param>
    </member>
    <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Writes the specified subarray of Unicode characters to the standard output stream.</summary>
      <param name="buffer">An array of Unicode characters. </param>
      <param name="index">The starting position in <paramref name="buffer" />. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Int32)">
      <summary>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.Object)">
      <summary>Writes the text representation of the specified object to the standard output stream.</summary>
      <param name="value">The value to write, or null. </param>
    </member>
    <member name="M:System.Console.Write(System.String)">
      <summary>Writes the specified string value to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object)">
      <summary>Writes the text representation of the specified object to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string.</param>
      <param name="arg0">An object to write using <paramref name="format" />.</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
      <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object[])">
      <summary>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine">
      <summary>Writes the current line terminator to the standard output stream.</summary>
    </member>
    <member name="M:System.Console.WriteLine(System.Char)">
      <summary>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[])">
      <summary>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
      <param name="buffer">A Unicode character array. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int32)">
      <summary>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:System.Console.WriteLine(System.Object)">
      <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String)">
      <summary>Writes the specified string value, followed by the current line terminator, to the standard output stream.</summary>
      <param name="value">The value to write. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object)">
      <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">An object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
      <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to write using <paramref name="format" />. </param>
      <param name="arg1">The second object to write using <paramref name="format" />. </param>
      <param name="arg2">The third object to write using <paramref name="format" />. </param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object[])">
      <summary>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
      <param name="format">A composite format string. </param>
      <param name="arg">An array of objects to write using <paramref name="format" />. </param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>Indicates that the value of a static field is unique for a particular context.</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ContextStaticAttribute" /> class.</summary>
    </member>
    <member name="T:System.Convert">
      <summary>Converts a base data type to another base data type.</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</summary>
      <returns>An object whose type is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.-or- <paramref name="value" />, if the type of <paramref name="value" /> and <paramref name="conversionType" /> are equal.-or- A null reference (Nothing in Visual Basic), if <paramref name="value" /> is null and <paramref name="conversionType" /> is not a value type.</returns>
      <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="conversionType">The type of object to return. </param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. -or-<paramref name="value" /> is null, and <paramref name="conversionType" /> is a value type.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in a format for <paramref name="conversionType" /> recognized by <paramref name="provider" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> is null.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</summary>
      <returns>An object whose underlying type is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.-or- A null reference (Nothing in Visual Basic), if <paramref name="value" /> is null and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, or <see cref="F:System.TypeCode.Object" />.</returns>
      <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="typeCode">The type of object to return. </param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported.  -or-<paramref name="value" /> is null, and <paramref name="typeCode" /> specifies a value type.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in a format for the <paramref name="typeCode" /> type recognized by <paramref name="provider" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number that is out of the range of the <paramref name="typeCode" /> type.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> is invalid. </exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>A constant representing a database column absent of data; that is, database null.</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>Converts a subset of a Unicode character array, which encodes binary data as base 64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</summary>
      <returns>An array of 8-bit unsigned integers equivalent to <paramref name="length" /> elements at position <paramref name="offset" /> in <paramref name="inArray" />.</returns>
      <param name="inArray">A Unicode character array. </param>
      <param name="offset">A position within <paramref name="inArray" />. </param>
      <param name="length">The number of elements in <paramref name="inArray" /> to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="length" /> is less than 0.-or- <paramref name="offset" /> plus <paramref name="length" /> indicates a position not within <paramref name="inArray" />. </exception>
      <exception cref="T:System.FormatException">The length of <paramref name="inArray" />, ignoring white space characters, is not zero or a multiple of 4. -or-The format of <paramref name="inArray" /> is invalid. <paramref name="inArray" /> contains a non-base 64 character, more than two padding characters, or a non-white space character among the padding characters. </exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>Converts the specified <see cref="T:System.String" />, which encodes binary data as base 64 digits, to an equivalent 8-bit unsigned integer array.</summary>
      <returns>An array of 8-bit unsigned integers equivalent to <paramref name="s" />.</returns>
      <param name="s">A <see cref="T:System.String" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">The length of <paramref name="s" />, ignoring white space characters, is not zero or a multiple of 4. -or-The format of <paramref name="s" /> is invalid. <paramref name="s" /> contains a non-base 64 character, more than two padding characters, or a non-white space character among the padding characters.</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>Returns the <see cref="T:System.TypeCode" /> for the specified object.</summary>
      <returns>The <see cref="T:System.TypeCode" /> for <paramref name="value" />, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>Returns an indication whether the specified object is of type <see cref="T:System.DBNull" />.</summary>
      <returns>true if <paramref name="value" /> is of type <see cref="T:System.DBNull" />; otherwise, false.</returns>
      <param name="value">An object. </param>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base 64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</summary>
      <returns>A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.</returns>
      <param name="inArray">An input array of 8-bit unsigned integers. </param>
      <param name="offsetIn">A position within <paramref name="inArray" />. </param>
      <param name="length">The number of elements of <paramref name="inArray" /> to convert. </param>
      <param name="outArray">An output array of Unicode characters. </param>
      <param name="offsetOut">A position within <paramref name="outArray" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> or <paramref name="outArray" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.-or- <paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.-or- <paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />. </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>Converts an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String" /> representation encoded with base 64 digits.</summary>
      <returns>The <see cref="T:System.String" /> representation, in base 64, of the contents of <paramref name="inArray" />.</returns>
      <param name="inArray">An array of 8-bit unsigned integers. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. </exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>Converts a subset of an array of 8-bit unsigned integers to its equivalent <see cref="T:System.String" /> representation encoded with base 64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</summary>
      <returns>The <see cref="T:System.String" /> representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" /> starting at position <paramref name="offset" />.</returns>
      <param name="inArray">An array of 8-bit unsigned integers. </param>
      <param name="offset">An offset in <paramref name="inArray" />. </param>
      <param name="length">The number of elements of <paramref name="inArray" /> to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="length" /> is negative.-or- <paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>Returns the specified Boolean value; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A Boolean. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A double-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>Converts the value of a specified <see cref="T:System.Object" /> to an equivalent Boolean value.</summary>
      <returns>true or false, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />. If <paramref name="value" /> is null, the method returns false. </returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <returns>true or false, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />. If <paramref name="value" /> is null, the method returns false.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A single-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a logical value to its Boolean equivalent.</summary>
      <returns>true if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or false if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or null.</returns>
      <param name="value">A <see cref="T:System.String" /> that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a logical value to its Boolean equivalent using the specified culture-specific formatting information.</summary>
      <returns>true if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or false if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or null.</returns>
      <param name="value">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </param>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. </exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</summary>
      <returns>true if <paramref name="value" /> is not zero; otherwise, false.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 8-bit unsigned integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</summary>
      <returns>The 8-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 8-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 8-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 8-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit unsigned integer using specified culture-specific formatting information.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a base 10 unsigned number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.Byte.MinValue" /> or larger than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>Returns the specified Unicode character value; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A double-precision floating-point number. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.-or- <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> equals null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to its equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.-or- <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> equals null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A single-precision floating-point number. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>Converts the first character of a <see cref="T:System.String" /> to a Unicode character.</summary>
      <returns>The Unicode character equivalent to the first and only character in <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.String" /> of length 1 or null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.FormatException">The length of <paramref name="value" /> is not 1. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>Converts the first character of a <see cref="T:System.String" /> to a Unicode character using specified culture-specific formatting information.</summary>
      <returns>The Unicode character equivalent to the first and only character in <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.String" /> of length 1 or null. </param>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.FormatException">The length of <paramref name="value" /> is not 1. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</summary>
      <returns>The Unicode character equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.-or- A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a valid <see cref="T:System.DateTime" /> value.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.-or-The conversion is not supported.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.-or- A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a date and time to an equivalent <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.-or- A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.</returns>
      <param name="value">The string representation of a date and time.</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a properly formatted date and time string. </exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent to the value of <paramref name="value" />.-or- A <see cref="T:System.DateTime" /> equivalent to <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a date and time to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a properly formatted date and time string. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>Returns the specified <see cref="T:System.Decimal" /> number; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">The numeric value of <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />. </returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent double-precision floating point number.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating point number.</summary>
      <returns>The double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>Returns the specified double-precision floating point number; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A double-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an double-precision floating point number using the specified culture-specific formatting information.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating point number.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A single-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent double-precision floating point number using the specified culture-specific formatting information.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating point number.</summary>
      <returns>The double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating point number.</summary>
      <returns>A double-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 16-bit signed integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</summary>
      <returns>The 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</summary>
      <returns>The 16-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 16-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 16-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>Returns the specified 16-bit signed integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</summary>
      <returns>The 16-bit signed integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 16-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit signed integer using specified culture-specific formatting information.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.Int16.MinValue" /> or larger than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</summary>
      <returns>The 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 32-bit signed integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</summary>
      <returns>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</summary>
      <returns>The 32-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 32-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 32-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>Returns the specified 32-bit signed integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 32-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit signed integer using specified culture-specific formatting information.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>Converts the <see cref="T:System.String" /> representation of a number in a specified base to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.Int32.MinValue" /> or larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</summary>
      <returns>The 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 64-bit signed integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 64-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 64-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>Returns the specified 64-bit signed integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 64-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.Int64.MinValue" /> or larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 8-bit signed integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 8-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 8-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>Returns the specified 8-bit signed integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 8-bit signed integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if value is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 8-bit signed integer using specified culture-specific formatting information.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.SByte.MinValue" /> or larger than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent single-precision floating point number.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating point number.</summary>
      <returns>The single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="value">A Unicode character. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.<paramref name="value" /> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.<paramref name="value" /> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</returns>
      <param name="value">A double-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to an single-precision floating point number using the specified culture-specific formatting information.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating point number.</summary>
      <returns>The 8-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>Returns the specified single-precision floating point number; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A single-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent single-precision floating point number using the specified culture-specific formatting information.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating point number.</summary>
      <returns>The single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating point number.</summary>
      <returns>A single-precision floating point number equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>Converts the value of the specified Boolean to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A Boolean value. </param>
      <param name="provider">(Reserved) An instance of an <see cref="T:System.IFormatProvider" /> interface implementation. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>Converts the value of the specified Unicode character to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.DateTime" />. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A double-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>Converts the value of the specified double-precision floating point number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.<paramref name="provider" /> is ignored; it does not participate in this operation.</returns>
      <param name="value">A double-precision floating point number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>Converts the value of the specified 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>Converts the value of a 16-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.</summary>
      <returns>The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>Converts the value of the specified 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>Converts the value of a 32-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.</summary>
      <returns>The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>Converts the value of the specified 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>Converts the value of a 64-bit signed integer to its equivalent <see cref="T:System.String" /> representation in a specified base.</summary>
      <returns>The <see cref="T:System.String" /> representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> is not 2, 8, 10, or 16. </exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to its <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if value is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> or null. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to its equivalent <see cref="T:System.String" /> representation using the specified culture-specific formatting information.</summary>
      <returns>The <see cref="T:System.String" /> representation of the value of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> or null. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>Converts the value of the specified 8-bit signed integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A single-precision floating point number. </param>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>Converts the value of the specified single-precision floating point number to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A single-precision floating point number. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> equivalent of the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 16-bit unsigned integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 16-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 16-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</summary>
      <returns>The 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 16-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 16-bit unsigned integer using specified culture-specific formatting information.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.UInt16.MinValue" /> or larger than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 32-bit unsigned integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 32-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 32-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 8-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 32-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.UInt32.MinValue" /> or larger than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</summary>
      <returns>The 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>Converts the value of the specified Boolean value to the equivalent 64-bit unsigned integer.</summary>
      <returns>The number 1 if <paramref name="value" /> is true; otherwise, 0.</returns>
      <param name="value">A Boolean value. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit signed integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> number to an equivalent 64-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>Converts the value of the specified double-precision floating point number to an equivalent 64-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A double-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>Converts the value of the specified <see cref="T:System.Object" /> to a 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />, or zero if <paramref name="value" /> is null.</returns>
      <param name="value">An <see cref="T:System.Object" /> that implements the <see cref="T:System.IConvertible" /> interface. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">An 8-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>Converts the value of the specified single-precision floating point number to an equivalent 64-bit unsigned integer.</summary>
      <returns>
        <paramref name="value" /> rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
      <param name="value">A single-precision floating point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit unsigned integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a number to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.String" /> containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number in <paramref name="value" />.-or- Zero if <paramref name="value" /> is null.</returns>
      <param name="value">A string containing a number. </param>
      <param name="fromBase">The base of the number in <paramref name="value" />, which must be 2, 8, 10, or 16. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> is not 2, 8, 10, or 16. -or-<paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.-or-The return value is less than <see cref="F:System.UInt64.MinValue" /> or larger than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</summary>
      <returns>The 64-bit unsigned integer equivalent of <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</summary>
      <returns>Parameter <paramref name="value" /> is returned unchanged.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="T:System.Converter`2">
      <summary>Represents a method that converts an object from one type to another type.</summary>
      <returns>The <paramref name="TOutput" /> that represents the converted <paramref name="TInput" />.None of the methods in the .NET Framework for Silverlight class library have a <see cref="T:System.Converter`2" /> delegate as a parameter. The <see cref="T:System.Converter`2" /> delegate exists primarily to support the infrastructure, but you can still use it to create custom methods that use converters.</returns>
      <param name="input">The object to convert.</param>
      <typeparam name="TInput">The type of object that is to be converted.</typeparam>
      <typeparam name="TOutput">The type the input object is to be converted to.</typeparam>
    </member>
    <member name="T:System.DataMisalignedException">
      <summary>The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.</summary>
    </member>
    <member name="T:System.DateTime">
      <summary>Represents an instant in time, typically expressed as a date and time of day. </summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.-or- <paramref name="month" /> is less than 1 or greater than 12.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />). </param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="calendar">The calendar to use to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.-or- <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999. -or- <paramref name="month" /> is less than 1 or greater than 12. -or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23. -or- <paramref name="minute" /> is less than 0 or greater than 59. -or- <paramref name="second" /> is less than 0 or greater than 59. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> and <paramref name="second" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999. -or- <paramref name="month" /> is less than 1 or greater than 12. -or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23. -or- <paramref name="minute" /> is less than 0 or greater than 59. -or- <paramref name="second" /> is less than 0 or greater than 59. </exception>
      <exception cref="T:System.ArgumentException">The specified date and time parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. -or-<paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />). </param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="calendar">The calendar to use to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.-or- <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23 -or- <paramref name="minute" /> is less than 0 or greater than 59. -or- <paramref name="second" /> is less than 0 or greater than 59. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="millisecond">The milliseconds (0 through 999). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.-or- <paramref name="month" /> is less than 1 or greater than 12.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
      <param name="year">The year (1 through 9999). </param>
      <param name="month">The month (1 through 12). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="millisecond">The milliseconds (0 through 999). </param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.-or- <paramref name="month" /> is less than 1 or greater than 12.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
      <exception cref="T:System.ArgumentException">The specified date and time parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. -or-<paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />). </param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="millisecond">The milliseconds (0 through 999). </param>
      <param name="calendar">The calendar to use to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.-or- <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
      <exception cref="T:System.ArgumentException">The specified parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
      <param name="year">The year (1 through the number of years in <paramref name="calendar" />). </param>
      <param name="month">The month (1 through the number of months in <paramref name="calendar" />). </param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />). </param>
      <param name="hour">The hours (0 through 23). </param>
      <param name="minute">The minutes (0 through 59). </param>
      <param name="second">The seconds (0 through 59). </param>
      <param name="millisecond">The milliseconds (0 through 999). </param>
      <param name="calendar">The calendar to use to interpret <paramref name="year" />, <paramref name="month" />, and <paramref name="day" />. </param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" />, and <paramref name="millisecond" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.-or- <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.-or- <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.-or- <paramref name="hour" /> is less than 0 or greater than 23.-or- <paramref name="minute" /> is less than 0 or greater than 59.-or- <paramref name="second" /> is less than 0 or greater than 59.-or- <paramref name="millisecond" /> is less than 0 or greater than 999. </exception>
      <exception cref="T:System.ArgumentException">The specified date and time parameters evaluate to earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. -or-<paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
      <param name="ticks">A date and time expressed in 100-nanosecond units. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
      <param name="ticks">A date and time expressed in 100-nanosecond units. </param>
      <param name="kind">One of the enumeration values that indicates whether <paramref name="ticks" /> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>Adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
      <param name="value">The time interval to add. This value can be positive or negative.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>Adds the specified number of days to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional days to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>Adds the specified number of hours to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional hours to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>Adds the specified number of milliseconds to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional milliseconds to add. This value can be positive or negative, and is rounded to the nearest integer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>Adds the specified number of minutes to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional minutes to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>Adds the specified number of months to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
      <param name="months">The number of months to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />.-or- <paramref name="months" /> is less than -120,000 or greater than 120,000. </exception>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>Adds the specified number of seconds to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
      <param name="value">The number of whole and fractional seconds to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>Adds the specified number of ticks to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
      <param name="value">The number of 100-nanosecond ticks to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>Adds the specified number of years to the value of this instance.</summary>
      <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
      <param name="value">The number of years to add. This value can be positive or negative. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first <see cref="T:System.DateTime" /> instance is earlier than, the same as, or later than the second <see cref="T:System.DateTime" /> instance.</summary>
      <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.Value Type Condition Less than zero <paramref name="t1" /> is earlier than <paramref name="t2" />. Zero <paramref name="t1" /> is the same as <paramref name="t2" />. Greater than zero <paramref name="t1" /> is later than <paramref name="t2" />. </returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>A signed integer that indicates the relationship between this instance and the <paramref name="value" /> parameter, as shown in the following table.Value Description Less than zero This instance is earlier than <paramref name="value" />. Zero This instance is the same as <paramref name="value" />. Greater than zero This instance is later than <paramref name="value" />. </returns>
      <param name="value">The object to compare to this instance. </param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
      <returns>A signed integer that indicates the relationship between this instance and the <paramref name="value" /> parameter, as shown in the following table.Value Description Less than zero This instance is earlier than <paramref name="value" />. Zero This instance is the same as <paramref name="value" />. Greater than zero This instance is later than <paramref name="value" />, or <paramref name="value" /> is null. </returns>
      <param name="value">The object to compare to this instance, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.DateTime" />. </exception>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>Gets the date component of this instance.</summary>
      <returns>A new object that has the same date as this instance, and its time value set to 12:00:00 midnight (00:00:00).</returns>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>Gets the day of the month represented by this instance.</summary>
      <returns>The day component, expressed as a value between 1 and 31.</returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>Gets the day of the week represented by this instance.</summary>
      <returns>An enumerated constant that indicates the day of the week of this <see cref="T:System.DateTime" /> value. </returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>Gets the day of the year represented by this instance.</summary>
      <returns>The day of the year, expressed as a value between 1 and 366.</returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>Returns the number of days in the specified month and year.</summary>
      <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29, depending on whether <paramref name="year" /> is a leap year.</returns>
      <param name="year">The year. </param>
      <param name="month">The month (a number ranging from 1 to 12). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> is less than 1 or greater than 12.-or-<paramref name="year" /> is less than 1 or greater than 9999.</exception>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>Returns a value indicating whether this instance is equal to the specified <see cref="T:System.DateTime" /> instance.</summary>
      <returns>true if the <paramref name="value" /> parameter equals the value of this instance; otherwise, false.</returns>
      <param name="value">The object to compare to this instance. </param>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.DateTime" /> are equal.</summary>
      <returns>true if the two <see cref="T:System.DateTime" /> values are equal; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="value">The object to compare to this instance. </param>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent local time.</summary>
      <returns>An object that represents a local time that is equivalent to the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
      <param name="fileTime">A Windows file time expressed in ticks. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
      <returns>An object that represents a UTC time that is equivalent to the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
      <param name="fileTime">A Windows file time expressed in ticks. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation date.</summary>
      <returns>An object that represents the same date and time as the <paramref name="d" /> parameter.</returns>
      <param name="d">An OLE Automation date value. </param>
      <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation date value. </exception>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>Gets the hour component of the date represented by this instance.</summary>
      <returns>The hour component, expressed as a value between 0 and 23.</returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the Daylight Saving Time range for the current time zone.</summary>
      <returns>true if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" />, and the value of this instance of <see cref="T:System.DateTime" /> is within the Daylight Saving Time range for the current time zone; false if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>Returns an indication whether the specified year is a leap year.</summary>
      <returns>true if <paramref name="year" /> is a leap year; otherwise, false.</returns>
      <param name="year">A 4-digit year. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than 1 or greater than 9999.</exception>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
      <returns>One of the enumeration values. The default is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> is outside the range of the current culture's default calendar or of a specified culture's default calendar.</exception>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>Gets the milliseconds component of the date represented by this instance.</summary>
      <returns>The milliseconds component, expressed as a value between 0 and 999.</returns>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>Gets the minute component of the date represented by this instance.</summary>
      <returns>The minute component, expressed as a value between 0 and 59.</returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>Gets the month component of the date represented by this instance.</summary>
      <returns>The month component, expressed as a value between 1 and 12.</returns>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
      <returns>An object whose value is the current local date and time.</returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
      <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
      <param name="d">The first object to add. </param>
      <param name="t">The second object to add. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, false.</returns>
      <param name="d1">The first object to compare. </param>
      <param name="d2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is greater than another specified <see cref="T:System.DateTime" />.</summary>
      <returns>true if <paramref name="t1" /> is greater than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is greater than or equal to another specified <see cref="T:System.DateTime" />.</summary>
      <returns>true if <paramref name="t1" /> is greater than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, false.</returns>
      <param name="d1">The first object to compare. </param>
      <param name="d2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is less than another specified <see cref="T:System.DateTime" />.</summary>
      <returns>true if <paramref name="t1" /> is less than <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>Determines whether one specified <see cref="T:System.DateTime" /> is less than or equal to another specified <see cref="T:System.DateTime" />.</summary>
      <returns>true if <paramref name="t1" /> is less than or equal to <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">The first object to compare. </param>
      <param name="t2">The second object to compare. </param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
      <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
      <param name="d1">The date and time value to subtract from (the minuend). </param>
      <param name="d2">The date and time value to subtract (the subtrahend). </param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
      <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
      <param name="d">The date and time value to subtract from (the minuend). </param>
      <param name="t">The time interval to subtract (the subtrahend). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is earlier than <see cref="F:System.DateTime.MinValue" /> or later than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="provider" /> parameter.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="provider" /> and <paramref name="styles" /> parameters.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" /> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not contain a valid string representation of a date and time. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="format">A format specifier that defines the required format of <paramref name="s" />. </param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />. </exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" /> parameters.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="format">A format specifier that defines the required format of <paramref name="s" />. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="style">A bitwise combination of the enumeration values that provides additional information about <paramref name="s" />, about style elements that may be present in <paramref name="s" />, or about the conversion from <paramref name="s" /> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
      <returns>An object that is equivalent to the date and time contained in the <paramref name="s" /> parameter, as specified by the <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" /> parameters.</returns>
      <param name="s">A string that contains one or more dates and times to convert. </param>
      <param name="formats">An array of allowable formats of <paramref name="s" />. </param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the required format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> or <paramref name="formats" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string. -or- an element of <paramref name="formats" /> is an empty string. -or- <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>Gets the seconds component of the date represented by this instance.</summary>
      <returns>The seconds component, expressed as a value between 0 and 59.</returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>Creates a new <see cref="T:System.DateTime" /> object that represents the same time as the specified <see cref="T:System.DateTime" />, but is designated in either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
      <returns>A new object that consists of the same time as the <paramref name="value" /> parameter, and designated as specified by the <paramref name="kind" /> parameter.</returns>
      <param name="value">The date and time value for the new object.</param>
      <param name="kind">One of the enumeration values that specifies whether the new object will be designated in local time, in UTC, or neither.</param>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>Subtracts the specified date and time from this instance.</summary>
      <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
      <param name="value">The date and time to subtract. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>Subtracts the specified duration from this instance.</summary>
      <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
      <param name="value">The time interval to subtract. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
      <returns>The current <see cref="T:System.DateTime" /> object.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface or null. </param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
      <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
      <param name="type">The desired type. </param>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
      <returns>The number of ticks that represents the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.</returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>Gets the time of day for this instance.</summary>
      <returns>A time interval that represents the fraction of the day that has elapsed since midnight.</returns>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>Gets the current date.</summary>
      <returns>An object set to today's date, with the time component set to 00:00:00.</returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </exception>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </exception>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
      <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is one of the following: the local time equivalent of the current <see cref="T:System.DateTime" /> value, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
      <returns>The long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
      <returns>The long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
      <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation date. </exception>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
      <returns>The short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
      <returns>The short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object, as specified by the <paramref name="provider" /> parameter.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format.</summary>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object, as specified by the <paramref name="format" /> parameter.</returns>
      <param name="format">A standard date and time format string or a custom date and time format string.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or- <paramref name="format" /> does not contain a valid custom format pattern. </exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object, as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <param name="format">A standard date and time format string or a custom date and time format string. </param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or- <paramref name="format" /> does not contain a valid custom format pattern. </exception>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
      <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is one of the following: the UTC equivalent of the current <see cref="T:System.DateTime" /> value, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value that is equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is an empty string, or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value that is equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains a date and time to convert. </param>
      <param name="format">The required format of <paramref name="s" />. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="style">A bitwise combination of one or more enumeration values that indicates the permitted format of <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value that is equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s" /> or <paramref name="format" /> parameter is null, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="s" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains one or more dates and times to convert. </param>
      <param name="formats">An array of allowable formats for the <paramref name="s" /> parameter. </param>
      <param name="provider">An object that supplies culture-specific format information about <paramref name="s" />. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value that is equivalent to the date and time contained in <paramref name="s" />, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s" /> or <paramref name="formats" /> is null, <paramref name="s" /> or an element of <paramref name="formats" /> is an empty string, or the format of <paramref name="s" /> is not exactly as specified by at least one of the format patterns in <paramref name="formats" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
      <returns>An object whose value is the current UTC date and time.</returns>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>Gets the year component of the date represented by this instance.</summary>
      <returns>The year component, expressed as a value between 1 and 9999.</returns>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>Specifies whether a <see cref="T:System.DateTime" /> object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>The time represented is not specified as either local time or Coordinated Universal Time (UTC).</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>The time represented is UTC.</summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>The time represented is local time.</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.</summary>
      <param name="dateTime">A date and time.   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.-or-The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.</summary>
      <param name="dateTime">A date and time.   </param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="offset" /> does not equal zero.-or-<paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Local" /> and <paramref name="offset" /> does not equal the offset of the system's local time zone.-or-<paramref name="offset" /> is not specified in whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours or greater than 14 hours.-or-<see cref="P:System.DateTimeOffset.UtcDateTime" /> is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />. </exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.</summary>
      <param name="year">The year.</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).   </param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="calendar">The calendar whose time is defined.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than the <paramref name="calendar" /> parameter's MinSupportedDateTime.Year or greater than MaxSupportedDateTime.Year.-or-<paramref name="month" /> is either less than or greater than the number of months in <paramref name="year" /> in the <paramref name="calendar" />. -or-<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.-or-<paramref name="hour" /> is less than zero or greater than 23.-or-<paramref name="minute" /> is less than 0 or greater than 59.-or-<paramref name="second" /> is less than 0 or greater than 59.-or-<paramref name="millisecond" /> is less than 0 or greater than 999.-or-<paramref name="offset" /> is less than -14 hours or greater than 14 hours.-or-The <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters cannot be represented as a date and time value.-or-The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).   </param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="millisecond">The milliseconds (0 through 999).</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.-or-<paramref name="month" /> is less than one or greater than 12.-or-<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.-or-<paramref name="hour" /> is less than zero or greater than 23.-or-<paramref name="minute" /> is less than 0 or greater than 59.-or-<paramref name="second" /> is less than 0 or greater than 59.-or-<paramref name="millisecond" /> is less than 0 or greater than 999.-or-<paramref name="offset" /> is less than -14 or greater than 14.-or-The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.</summary>
      <param name="year">The year (1 through 9999).</param>
      <param name="month">The month (1 through 12).</param>
      <param name="day">The day (1 through the number of days in <paramref name="month" />).</param>
      <param name="hour">The hours (0 through 23).   </param>
      <param name="minute">The minutes (0 through 59).</param>
      <param name="second">The seconds (0 through 59).</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> does not represent whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> is less than one or greater than 9999.-or-<paramref name="month" /> is less than one or greater than 12.-or-<paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.-or-<paramref name="hour" /> is less than zero or greater than 23.-or-<paramref name="minute" /> is less than 0 or greater than 59.-or-<paramref name="second" /> is less than 0 or greater than 59.-or-<paramref name="offset" /> is less than -14 hours or greater than 14 hours.-or-The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.</summary>
      <param name="ticks">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
      <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> is not specified in whole minutes.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.-or-<paramref name="ticks" /> is less than DateTimeOffset.MinValue.Ticks or greater than DateTimeOffset.MaxValue.Ticks.-or-<paramref name="Offset" /> s less than -14 hours or greater than 14 hours.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.</returns>
      <param name="timeSpan">A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>Adds a specified number of whole and fractional days to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.</returns>
      <param name="days">A number of whole and fractional days. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>Adds a specified number of whole and fractional hours to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.</returns>
      <param name="hours">A number of whole and fractional hours. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>Adds a specified number of milliseconds to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.</returns>
      <param name="milliseconds">A number of whole and fractional milliseconds. The number can be negative or positive.   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>Adds a specified number of whole and fractional minutes to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.</returns>
      <param name="minutes">A number of whole and fractional minutes. The number can be negative or positive.   </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>Adds a specified number of months to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.</returns>
      <param name="months">A number of whole months. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>Adds a specified number of whole and fractional seconds to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.</returns>
      <param name="seconds">A number of whole and fractional seconds. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>Adds a specified number of ticks to the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.</returns>
      <param name="ticks">A number of 100-nanosecond ticks. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>Adds a specified number of years to the <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="years" />.</returns>
      <param name="years">A number of years. The number can be negative or positive.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</summary>
      <returns>A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.Return valueConditionLess than zero<paramref name="first" /> is earlier than <paramref name="second" />.Zero<paramref name="first" /> is equal to <paramref name="second" />.Greater than zero<paramref name="first" /> is later than <paramref name="second" />.</returns>
      <param name="first">The first <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="second">The second <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.Return ValueDescriptionLess than zeroThe current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.ZeroThe current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.Greater than zero.The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.</returns>
      <param name="other">A <see cref="T:System.DateTimeOffset" /> object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The day component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 31.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>One of the <see cref="T:System.DayOfWeek" /> values that indicates the day of the week of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The day of the year of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 366.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</returns>
      <param name="other">A <see cref="T:System.DateTimeOffset" /> object to compare to the current <see cref="T:System.DateTimeOffset" /> object.   </param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
      <returns>true if the two <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</returns>
      <param name="first">The first <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="second">The second <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, false.</returns>
      <param name="obj">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same <see cref="P:System.DateTimeOffset.Offset" /> value; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.DateTimeOffset" /> object to compare to the current <see cref="T:System.DateTimeOffset" /> object. </param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>Converts the specified Windows file time to an equivalent local time.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.</returns>
      <param name="fileTime">A Windows file time, expressed in ticks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> is less than zero.-or-<paramref name="filetime" /> is greater than DateTimeOffset.MaxValue.Ticks.</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The hour component of the current <see cref="T:System.DateTimeOffset" /> object. This property uses a 24-hour clock; the value ranges from 0 to 23.</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The millisecond component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 999.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The minute component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 59.</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The month component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 1 and 12.</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose date and time is the current local time and whose offset is the local time zone's offset from Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>Gets the time's offset from Coordinated Universal Time (UTC). </summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that represents the difference between the current <see cref="T:System.DateTimeOffset" /> object's time value and Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object whose value is the sum of the values of <paramref name="dateTimeTz" /> and <paramref name="timeSpan" />.</returns>
      <param name="dateTimeOffset">A <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="timeSpan">A <see cref="T:System.TimeSpan" /> object that specifies the time interval to add to the <see cref="T:System.DateTimeOffset" /> object.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
      <returns>true if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="right">The second <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="right">The second <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is the same as or later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="right">The second <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>Defines an implicit conversion of a <see cref="T:System.DateTime" /> object to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object.</returns>
      <param name="dateTime">A <see cref="T:System.DateTime" /> object. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.-or-The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="right">The second <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="right">The second <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>true if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first <see cref="T:System.DateTimeOffset" /> object.</param>
      <param name="right">The second <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that represents the difference between <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">A <see cref="T:System.DateTimeOffset" /> object (the minuend).   </param>
      <param name="right">A second <see cref="T:System.DateTimeOffset" /> object (the subtrahend).</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object equal to the value of <paramref name="dateTimeTz" /> minus <paramref name="timeSpan" />.</returns>
      <param name="dateTimeOffset">A <see cref="T:System.DateTimeOffset" /> object that represents a particular date and time.</param>
      <param name="timeSpan">A time interval.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that is equivalent to the date and time that is contained in <paramref name="input" />.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" />.</returns>
      <param name="input">A string that contains a date and time to convert.   </param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific format information about <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</returns>
      <param name="input">A string that contains a date and time to convert.   </param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific format information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of <paramref name="input" />. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.   </param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.-or-<paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> includes an unsupported <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles" /> includes <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.-or-<paramref name="format" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").-or-<paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="format" /> is an empty string.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> equivalent to the date and time that is contained in the <paramref name="input" /> parameter as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the expected format of <paramref name="input" />.</param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.-or-The <paramref name="styles" /> parameter includes an unsupported value.-or-The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.-or-<paramref name="format" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").-or-<paramref name="input" /> does not contain a valid string representation of a date and time.-or-<paramref name="format" /> is an empty string.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> equivalent to the date and time that is contained in the <paramref name="input" /> parameter as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formats">An array of format specifiers that define the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of <paramref name="input" />.</param>
      <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.-or-<paramref name="styles" /> includes an unsupported value.-or-The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> is an empty string ("").-or-<paramref name="input" /> does not contain a valid string representation of a date and time.-or-No element of <paramref name="formats" /> contains a valid format specifier.</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The second component of the <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 59.</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.</returns>
      <param name="value">A <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.TimeSpan" /> object that represents a time interval.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.-or- The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.</summary>
      <returns>A 32-bit signed integer that indicates whether the current <see cref="T:System.DateTimeOffset" /> object is less than, equal to, or greater than <paramref name="obj" />. The return values of the method are interpreted as follows:Return ValueDescriptionLess than zeroThe current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.ZeroThe current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.Greater than zeroThe current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.</returns>
      <param name="obj">The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.</summary>
      <returns>An <see cref="T:System.Int64" /> value that represents the number of ticks in the <see cref="T:System.DateTimeOffset" /> object's clock time.</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that represents the time interval of the current date that has elapsed since midnight.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.</summary>
      <returns>The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their <see cref="M:System.DateTimeOffset.ToUniversalTime" /> methods return identical points in time) but whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to <paramref name="offset" />.</returns>
      <param name="offset">The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.   </param>
      <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value earlier than <see cref="F:System.DateTimeOffset.MinValue" />.-or-The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than -14 hours.-or-<paramref name="offset" /> is greater than 14 hours.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
      <returns>A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.</returns>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</returns>
      <param name="format">A format string.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />. -or-<paramref name="format" /> does not contain a valid custom format pattern.</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A format string.</param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.-or-<paramref name="format" /> does not contain a valid custom format pattern. </exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>Tries to converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Tries to convert a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of <paramref name="input" />. </param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.-or-<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="format">A format specifier that defines the required format of <paramref name="input" />.</param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of input. A typical value to specify is None.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> parameter is null, or does not contain a valid string representation of a date and time in the expected format defined by <paramref name="format" /> and <paramref name="provider" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.-or-<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
      <returns>true if the <paramref name="input" /> parameter is successfully converted; otherwise, false.</returns>
      <param name="input">A string that contains a date and time to convert.</param>
      <param name="formats">An array that defines the expected formats of <paramref name="input" />.</param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="input" />.</param>
      <param name="styles">A bitwise combination of <see cref="T:System.Globalization.DateTimeStyles" /> values that indicates the permitted format of input. A typical value to specify is None.</param>
      <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <paramref name="input" />, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <paramref name="input" /> does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by <paramref name="format" />, or if <paramref name="formats" /> is null. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  is not supported.-or-<paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> value whose date and time is the current Coordinated Universal Time (UTC) and whose offset is <see cref="F:System.TimeSpan.Zero" />.</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).</summary>
      <returns>An <see cref="T:System.Int64" /> value that represents the number of ticks in the <see cref="T:System.DateTimeOffset" /> object's Coordinated Universal Time (UTC).</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The year component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 9999.</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>Specifies the day of the week.</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>Indicates Sunday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>Indicates Monday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>Indicates Tuesday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>Indicates Wednesday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>Indicates Thursday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>Indicates Friday.</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>Indicates Saturday.</summary>
    </member>
    <member name="T:System.DBNull">
      <summary>Represents a nonexistent value. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>Gets the <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />.</summary>
      <returns>The <see cref="T:System.TypeCode" /> value for <see cref="T:System.DBNull" />, which is <see cref="F:System.TypeCode.DBNull" />.</returns>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current <see cref="T:System.DBNull" /> object to the specified type.</summary>
      <returns>The boxed equivalent of the current <see cref="T:System.DBNull" /> object, if that conversion is supported; otherwise, an exception is thrown and no value is returned. </returns>
      <param name="type">The type to convert the current <see cref="T:System.DBNull" /> object to. </param>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface and is used to augment the conversion. If null is specified, format information is obtained from the current culture. </param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>None. The return value for this member is not used.</returns>
      <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify null.)</param>
      <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DBNull" /> type.</exception>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>Returns an empty string (<see cref="F:System.String.Empty" />).</summary>
      <returns>An empty string (<see cref="F:System.String.Empty" />).</returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>Returns an empty string using the specified <see cref="T:System.IFormatProvider" />.</summary>
      <returns>An empty string (<see cref="F:System.String.Empty" />).</returns>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to be used to format the return value.-or- null to obtain the format information from the current locale setting of the operating system. </param>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>Represents the sole instance of the <see cref="T:System.DBNull" /> class.</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>Represents a decimal number.</summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified double-precision floating-point number.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit signed integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> from parameters specifying the instance's constituent parts.</summary>
      <param name="lo">The low 32 bits of a 96-bit integer. </param>
      <param name="mid">The middle 32 bits of a 96-bit integer. </param>
      <param name="hi">The high 32 bits of a 96-bit integer. </param>
      <param name="isNegative">The sign of the number; 1 is negative, 0 is positive. </param>
      <param name="scale">A power of 10 ranging from 0 to 28. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> is greater than 28. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to a decimal value represented in binary and contained in a specified array.</summary>
      <param name="bits">An array of 32-bit signed integers containing a representation of a decimal value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of the <paramref name="bits" /> is not 4.-or- The representation of the decimal value in <paramref name="bits" /> is not valid. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit signed integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified single-precision floating-point number.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 32-bit unsigned integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>Initializes a new instance of <see cref="T:System.Decimal" /> to the value of the specified 64-bit unsigned integer.</summary>
      <param name="value">The value to represent as a <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>Adds two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>A <see cref="T:System.Decimal" /> value that is the sum of <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">The sum of <paramref name="d1" /> and <paramref name="d2" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>Returns the smallest integral value greater than or equal to the specified decimal number. </summary>
      <returns>The smallest integral value greater than or equal to the <paramref name="d" /> parameter. Note that this method returns a <see cref="T:System.Decimal" /> rather than an integral type.</returns>
      <param name="d">A decimal number.</param>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>Compares two specified <see cref="T:System.Decimal" /> values and returns an integer that indicates whether the first value is greater than, less than, or equal to the second value.</summary>
      <returns>A signed number indicating the relationship between <paramref name="d1" /> and <paramref name="d2" />.Return Value Meaning Less than zero <paramref name="d1" /> is less than <paramref name="d2" />. Zero <paramref name="d1" /> and <paramref name="d2" /> are equal. Greater than zero <paramref name="d1" /> is greater than <paramref name="d2" />. </returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>Compares this instance to a specified <see cref="T:System.Decimal" /> object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified <see cref="T:System.Decimal" />.</summary>
      <returns>A signed number indicating the relationship between this instance and <paramref name="value" />.Return Value Meaning Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">A <see cref="T:System.Decimal" /> object.</param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>Compares this instance to a specified <see cref="T:System.Object" /> and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified <see cref="T:System.Object" />.</summary>
      <returns>A signed number indicating the relationship between this instance and <paramref name="value" />.Return Value Meaning Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An <see cref="T:System.Object" /> or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Decimal" />. </exception>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>Divides two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> that is the result of dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value (that is, the quotient) is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Decimal" /> object represent the same value.</summary>
      <returns>true if <paramref name="value" /> is equal to this instance; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether two specified instances of <see cref="T:System.Decimal" /> represent the same value.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Object" /> represent the same type and value.</summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Decimal" /> and equal to this instance; otherwise, false.</returns>
      <param name="value">An <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>Rounds a specified <see cref="T:System.Decimal" /> number to the closest integer toward negative infinity.</summary>
      <returns>If <paramref name="d" /> has a fractional part, the next whole <see cref="T:System.Decimal" /> number toward negative infinity that is less than <paramref name="d" />.-or- If <paramref name="d" /> doesn't have a fractional part, <paramref name="d" /> is returned unchanged.</returns>
      <param name="d">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>Converts the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.</summary>
      <returns>A 32-bit signed integer array with four elements that contain the binary representation of <paramref name="d" />.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value. </param>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Decimal" />.</summary>
      <returns>The enumerated constant <see cref="F:System.TypeCode.Decimal" />.</returns>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>Represents the number negative one (-1).</summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Decimal" />. This field is constant and read-only.</summary>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplies two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>A <see cref="T:System.Decimal" /> that is the result of multiplying <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the multiplicand). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the multiplier). </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>Returns the result of multiplying the specified <see cref="T:System.Decimal" /> value by negative one.</summary>
      <returns>A <see cref="T:System.Decimal" /> with the value of <paramref name="d" />, but the opposite sign.-or- Zero, if <paramref name="d" /> is zero.</returns>
      <param name="d">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="F:System.Decimal.One">
      <summary>Represents the number one (1).</summary>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>Adds two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of adding <paramref name="d1" /> and <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>Decrements the <see cref="T:System.Decimal" /> operand by one.</summary>
      <returns>The value of <paramref name="d" /> decremented by 1.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> operand. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>Divides two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Decimal" /> are equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are equal; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>Converts a <see cref="T:System.Decimal" /> to an 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>Converts a <see cref="T:System.Decimal" /> to a Unicode character.</summary>
      <returns>A Unicode character that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>Converts a <see cref="T:System.Decimal" /> to a double-precision floating-point number.</summary>
      <returns>A double-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>Converts a <see cref="T:System.Decimal" /> to a single-precision floating-point number.</summary>
      <returns>A single-precision floating-point number that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>Converts a <see cref="T:System.Decimal" /> to an 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>Converts a <see cref="T:System.Decimal" /> to a 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer that represents the converted <see cref="T:System.Decimal" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>Converts a double-precision floating-point number to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted double-precision floating point number.</returns>
      <param name="value">A double-precision floating-point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>Converts a single-precision floating-point number to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted single-precision floating point number.</returns>
      <param name="value">A single-precision floating-point number. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.-or- <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. </exception>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than another specified <see cref="T:System.Decimal" />.</summary>
      <returns>true if <paramref name="d1" /> is greater than <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is greater than or equal to another specified <see cref="T:System.Decimal" />.</summary>
      <returns>true if <paramref name="d1" /> is greater than or equal to <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>Converts an 8-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 8-bit unsigned integer.</returns>
      <param name="value">An 8-bit unsigned integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>Converts a Unicode character to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted Unicode character.</returns>
      <param name="value">A Unicode character. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>Converts a 16-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 16-bit signed integer.</returns>
      <param name="value">A 16-bit signed integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>Converts a 32-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 32-bit signed integer.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>Converts a 64-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 64-bit signed integer.</returns>
      <param name="value">A 64-bit signed integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>Converts an 8-bit signed integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 8-bit signed integer.</returns>
      <param name="value">An 8-bit signed integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>Converts a 16-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 16-bit unsigned integer.</returns>
      <param name="value">A 16-bit unsigned integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>Converts a 32-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 32-bit unsigned integer.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>Converts a 64-bit unsigned integer to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that represents the converted 64-bit unsigned integer.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>Increments the <see cref="T:System.Decimal" /> operand by 1.</summary>
      <returns>The value of <paramref name="d" /> incremented by 1.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> operand. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Decimal" /> are not equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> are not equal; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than another specified <see cref="T:System.Decimal" />.</summary>
      <returns>true if <paramref name="d1" /> is less than <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>Returns a value indicating whether a specified <see cref="T:System.Decimal" /> is less than or equal to another specified <see cref="T:System.Decimal" />.</summary>
      <returns>true if <paramref name="d1" /> is less than or equal to <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>Returns the remainder resulting from dividing two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> remainder resulting from dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>Multiplies two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of multiplying <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>Subtracts two specified <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" />. </param>
      <param name="d2">A <see cref="T:System.Decimal" />. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>Negates the value of the specified <see cref="T:System.Decimal" /> operand.</summary>
      <returns>The result of <paramref name="d" /> multiplied by negative one (-1).</returns>
      <param name="d">The <see cref="T:System.Decimal" /> operand. </param>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>Returns the value of the <see cref="T:System.Decimal" /> operand (the sign of the operand is unchanged).</summary>
      <returns>The value of the operand, <paramref name="d" />.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> operand. </param>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">The string representation of the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Decimal" /> equivalent.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" />.</returns>
      <param name="s">The string representation of the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="style" /> and <paramref name="provider" />.</returns>
      <param name="s">The string representation of the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific information about the format of <paramref name="s" />. </param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified culture-specific format information.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to the number contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
      <param name="s">The string representation of the number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific parsing information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" /></exception>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>Computes the remainder after dividing two <see cref="T:System.Decimal" /> values.</summary>
      <returns>The <see cref="T:System.Decimal" /> that is the remainder after dividing <paramref name="d1" /> by <paramref name="d2" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the dividend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the divisor). </param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> is zero. </exception>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>Rounds a <see cref="T:System.Decimal" /> value to a specified number of decimal places.</summary>
      <returns>The <see cref="T:System.Decimal" /> number equivalent to <paramref name="d" /> rounded to <paramref name="decimals" /> number of decimal places.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value to round. </param>
      <param name="decimals">A value from 0 to 28 that specifies the number of decimal places to round to. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is not a value from 0 to 28. </exception>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>Subtracts one specified <see cref="T:System.Decimal" /> value from another.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of subtracting <paramref name="d2" /> from <paramref name="d1" />.</returns>
      <param name="d1">A <see cref="T:System.Decimal" /> (the minuend). </param>
      <param name="d2">A <see cref="T:System.Decimal" /> (the subtrahend). </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored. </param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int32" />.</returns>
      <param name="provider">The parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <paramref name="type" />.</returns>
      <param name="type">The type to which to convert the value of this <see cref="T:System.Decimal" /> instance. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null. </exception>
      <exception cref="T:System.InvalidCastException">The requested type conversion is not supported. </exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.OverflowException">The resulting integer value is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit unsigned integer.</summary>
      <returns>An 8-bit unsigned integer equivalent to <paramref name="value" />.</returns>
      <param name="value">The <see cref="T:System.Decimal" /> value. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent double-precision floating-point number.</summary>
      <returns>A double-precision floating-point number equivalent to <paramref name="d" />.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert. </param>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">The <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer equivalent to <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent single-precision floating-point number.</summary>
      <returns>A single-precision floating-point number equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert. </param>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>A string that represents the value of this instance.</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 16-bit unsigned integer.</summary>
      <returns>A 16-bit unsigned integer equivalent to the value of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>Converts the value of the specified <see cref="T:System.Decimal" /> to the equivalent 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equivalent to the value of <paramref name="d" />.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> value to convert. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> is negative or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>Returns the integral digits of the specified <see cref="T:System.Decimal" />; any fractional digits are discarded.</summary>
      <returns>The <see cref="T:System.Decimal" /> result of <paramref name="d" /> rounded toward zero, to the nearest whole number.</returns>
      <param name="d">A <see cref="T:System.Decimal" /> to truncate. </param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">The string representation of the number to convert.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Decimal" /> equivalent using the specified style and culture-specific format. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">The string representation of the number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Number" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific parsing information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the <see cref="T:System.Decimal" /> number that is equivalent to the numeric value contained in <paramref name="s" />, if the conversion succeeded, or is zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>Represents the number zero (0).</summary>
    </member>
    <member name="T:System.Delegate">
      <summary>Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>Initializes a delegate that invokes the specified instance method on the specified class instance.</summary>
      <param name="target">The class instance on which the delegate invokes <paramref name="method" />. </param>
      <param name="method">The name of the instance method that the delegate represents. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">There was an error binding to the target method.</exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>Initializes a delegate that invokes the specified static method from the specified class.</summary>
      <param name="target">The class that defines <paramref name="method" />. </param>
      <param name="method">The name of the static method that the delegate represents. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not a RuntimeType. See Runtime Types in Reflection.-or-<paramref name="target" /> represents an open generic type.</exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>Concatenates the invocation lists of two delegates.</summary>
      <returns>A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order. Returns <paramref name="a" /> if <paramref name="b" /> is null, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</returns>
      <param name="a">The delegate whose invocation list comes first. </param>
      <param name="b">The delegate whose invocation list comes last. </param>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>Concatenates the invocation lists of the specified delegate and the current delegate.</summary>
      <returns>A new delegate with an invocation list that concatenates the invocation list of the current delegate and the invocation list of <paramref name="d" />, or the current delegate if <paramref name="d" /> is null.</returns>
      <param name="d">The delegate whose invocation list is to be combined with the invocation list of the current delegate. </param>
      <exception cref="T:System.MulticastNotSupportedException">In all cases. </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</summary>
      <returns>A delegate of the specified type that represents the specified static or instance method. </returns>
      <param name="type">The type of delegate to create. </param>
      <param name="firstArgument">The object to which the delegate is bound, or null to treat <paramref name="method" /> as static (Shared in Visual Basic). </param>
      <param name="method">The static or instance method the delegate is to represent.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="method" /> cannot be bound.-or-<paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</summary>
      <returns>A delegate of the specified type that represents the specified static or instance method, or null if <paramref name="throwOnBindFailure" /> is false and the delegate cannot be bound to <paramref name="method" />. </returns>
      <param name="type">A type representing the type of delegate to create. </param>
      <param name="firstArgument">The first argument of the method the delegate represents. For instance methods, it must be compatible with the instance type. </param>
      <param name="method">The static or instance method the delegate is to represent.</param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is true.-or-<paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</summary>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked. </param>
      <param name="method">The name of the instance method that the delegate is to represent. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />. -or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection.-or- <paramref name="method" /> is not an instance method. -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</summary>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked. </param>
      <param name="method">The name of the instance method that the delegate is to represent. </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection.-or- <paramref name="method" /> is not an instance method. -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</summary>
      <returns>A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class instance on which <paramref name="method" /> is invoked. </param>
      <param name="method">The name of the instance method that the delegate is to represent. </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false. </param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-  <paramref name="method" /> is not an instance method. -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a delegate of the specified type to represent the specified static method.</summary>
      <returns>A delegate of the specified type to represent the specified static method.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="method">The static or instance method the delegate is to represent. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or- <paramref name="method" /> cannot be bound.-or-<paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
      <summary>Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</summary>
      <returns>A delegate of the specified type to represent the specified static method.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="method">The static or instance method the delegate is to represent.</param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or-<paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is true.-or-<paramref name="method" /> is not a RuntimeMethodInfo. See Runtime Types in Reflection.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class.</summary>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class that implements <paramref name="method" />. </param>
      <param name="method">The name of the static method that the delegate is to represent. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or- <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="target" /> is not a RuntimeType.-or-<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.-or-<paramref name="method" /> is not a static method (Shared method in Visual Basic). -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</summary>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class that implements <paramref name="method" />. </param>
      <param name="method">The name of the static method that the delegate is to represent. </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or- <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="target" /> is not a RuntimeType.-or-<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.-or-<paramref name="method" /> is not a static method (Shared method in Visual Basic). -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found.</exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</summary>
      <returns>A delegate of the specified type that represents the specified static method of the specified class.</returns>
      <param name="type">The type of delegate to create. </param>
      <param name="target">The class that implements <paramref name="method" />. </param>
      <param name="method">The name of the static method that the delegate is to represent. </param>
      <param name="ignoreCase">true to ignore the case when comparing the name of the method; otherwise, false.</param>
      <param name="throwOnBindFailure">true to throw an exception if <paramref name="method" /> cannot be bound; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.-or- <paramref name="target" /> is null.-or- <paramref name="method" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.-or- <paramref name="type" /> is not a RuntimeType. See Runtime Types in Reflection. -or-<paramref name="target" /> is not a RuntimeType.-or-<paramref name="target" /> is an open generic type. That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is true.-or-<paramref name="method" /> is not a static method (Shared method in Visual Basic). -or-<paramref name="method" /> cannot be bound; for example, because it cannot be found, and <paramref name="throwOnBindFailure" /> is true. </exception>
      <exception cref="T:System.MissingMethodException">The Invoke method of <paramref name="type" /> is not found. </exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access to <paramref name="method" />. -or-Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>Dynamically invokes (late-bound) the method represented by the current delegate.</summary>
      <returns>The object returned by the method represented by the delegate.</returns>
      <param name="args">An array of objects that are the arguments to pass to the method represented by the current delegate.-or- A null reference (Nothing in Visual Basic), if the method represented by the current delegate does not require arguments. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private).-or- The number, order, or type of parameters listed in <paramref name="args" /> is invalid. </exception>
      <exception cref="T:System.Reflection.TargetException">The method represented by the delegate is an instance method and the target object is null.-or- The method represented by the delegate is invoked on an object or a class that does not support it. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">One of the encapsulated methods throws an exception. </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</summary>
      <returns>true if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, false.</returns>
      <param name="obj">The object to compare with the current delegate. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>Returns a hash code for the delegate.</summary>
      <returns>A hash code for the delegate.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>Returns the invocation list of the delegate.</summary>
      <returns>An array of delegates representing the invocation list of the current delegate.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>Gets the method represented by the delegate.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</returns>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>Determines whether the specified delegates are equal.</summary>
      <returns>true if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">The first delegate to compare. </param>
      <param name="d2">The second delegate to compare. </param>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>Determines whether the specified delegates are not equal.</summary>
      <returns>true if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, false.</returns>
      <param name="d1">The first delegate to compare. </param>
      <param name="d2">The second delegate to compare. </param>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</summary>
      <returns>A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />. Returns <paramref name="source" /> if <paramref name="value" /> is null or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />. Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</returns>
      <param name="source">The delegate from which to remove the invocation list of <paramref name="value" />. </param>
      <param name="value">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.ArgumentException">The delegate types do not match.</exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>Removes the invocation list of a delegate from the invocation list of another delegate.</summary>
      <returns>A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list. Returns the current delegate if <paramref name="value" /> is null or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list. Returns null if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</returns>
      <param name="d">The delegate that supplies the invocation list to remove from the invocation list of the current delegate. </param>
      <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private). </exception>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>Gets the class instance on which the current delegate invokes the instance method.</summary>
      <returns>The object on which the current delegate invokes the instance method, if the delegate represents an instance method; null if the delegate represents a static method.</returns>
      <exception cref="T:System.MethodAccessException">Application code attempts to access this member late-bound, for example, by using the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method. </exception>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>The exception that is thrown when there is an attempt to divide an integral or decimal value by zero.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class.</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DivideByZeroException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>The exception that is thrown when a DLL specified in a DLL import cannot be found.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with default properties.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Double">
      <summary>Represents a double-precision floating-point number.</summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Double.NaN" />), <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />). </returns>
      <param name="value">A double-precision floating-point number to compare. </param>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description A negative integer This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Double.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- This instance and <paramref name="value" /> are both Double.NaN, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />A positive integer This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Double.NaN" />).-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Double" />. </exception>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>Represents the smallest positive <see cref="T:System.Double" /> value greater than zero. This field is constant.</summary>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Double" /> object represent the same value.</summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Double" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Double" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Double" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Double" />.</returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity </summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to a value that is not a number (<see cref="F:System.Double.NaN" />).</summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.NaN" />; otherwise, false.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
      <returns>true if <paramref name="d" /> evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, false.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>Represents the largest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>Represents the smallest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>Represents a value that is not a number (NaN). This field is constant.</summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>Converts the string representation of a number to its double-precision floating-point number equivalent.</summary>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</summary>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is a combination of <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value. </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</summary>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</summary>
      <returns>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. </summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" /></summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Double" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored. </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.   </param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Double.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="result">When this method returns, contains the double-precision floating-point number equivalent to the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains a double-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>The exception that is thrown when an attempt to load a class fails due to the absence of an entry method.</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class.</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.EntryPointNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Enum">
      <summary>Provides the base class for enumerations.</summary>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Enum" /> class. </summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relationship of this instance to <paramref name="target" />.Return Value Description Less than zero The value of this instance is less than the value of <paramref name="target" />. Zero The value of this instance is equal to the value of <paramref name="target" />. Greater than zero The value of this instance is greater than the value of <paramref name="target" />.-or- <paramref name="target" /> is null. </returns>
      <param name="target">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> and this instance are not the same type. </exception>
      <exception cref="T:System.InvalidOperationException">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
      <exception cref="T:System.NullReferenceException">This instance is null.</exception>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an <see cref="T:System.Enum" /> with the same underlying type and value as this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance, or null. </param>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>Returns the hash code for the value of this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>Retrieves the name of the constant in the specified enumeration that has the specified value.</summary>
      <returns>A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />, or a null if no such constant is found.</returns>
      <param name="enumType">An enumeration type.</param>
      <param name="value">The value of the underlying type of a particular enumerated constant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is a null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or-<paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</exception>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>Returns the underlying <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The <see cref="T:System.TypeCode" /> for this instance.</returns>
      <exception cref="T:System.InvalidOperationException">The enumeration type is unknown.</exception>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>Returns the underlying type of the specified enumeration.</summary>
      <returns>The underlying <see cref="T:System.Type" /> of <paramref name="enumType" />.</returns>
      <param name="enumType">An enumeration type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>Returns an indication whether a constant with a specified value exists in a specified enumeration.</summary>
      <returns>true if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, false.</returns>
      <param name="enumType">An enumeration type. </param>
      <param name="value">The value or name of a constant in <paramref name="enumType" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an Enum.-or- The type of <paramref name="value" /> is not an <paramref name="enumType" />.-or- The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />. </exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.</summary>
      <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
      <param name="enumType">The <see cref="T:System.Type" /> of the enumeration. </param>
      <param name="value">A string containing the name or value to convert. </param>
      <param name="ignoreCase">If true, ignore case; otherwise, regard case. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string ("") or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the current value to a Boolean value based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the current value to an 8-bit unsigned integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the current value to a Unicode character based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the current value to a double-precision floating point number based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the current value to a 16-bit signed integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the current value to a 32-bit signed integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the current value to a 64-bit signed integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the current value to an 8-bit signed integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the current value to a single-precision floating point number based on the underlying type.</summary>
      <returns>This member always throws an exception.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the current value to a specified type based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="type">The type to convert to. </param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the current value to a 16-bit unsigned integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the current value to a 32-bit unsigned integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the current value to a 64-bit unsigned integer based on the underlying type.</summary>
      <returns>The converted value.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>Returns an instance of the specified enumeration set to the specified value.</summary>
      <returns>An enumeration object whose value is <paramref name="value" />.</returns>
      <param name="enumType">An enumeration. </param>
      <param name="value">The value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />. </exception>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>Converts the value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</summary>
      <returns>The string representation of the value of this instance.</returns>
      <param name="provider">(obsolete) </param>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>Converts the value of this instance to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A format string. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> contains an invalid specification. </exception>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</summary>
      <returns>The string representation of the value of this instance, as specified by <paramref name="format" />.</returns>
      <param name="format">A format specification. </param>
      <param name="provider">(obsolete)</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> does not contain a valid format specification. </exception>
    </member>
    <member name="T:System.Environment">
      <summary>Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>[SECURITY CRITICAL] Gets or sets the fully qualified path of the current working directory.</summary>
      <returns>A string containing a directory path. </returns>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>Gets or sets the exit code of the process.</summary>
      <returns>A 32-bit signed integer containing the exit code. The default value is zero.</returns>
    </member>
    <member name="M:System.Environment.FailFast(System.String)"></member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>[SECURITY CRITICAL] Gets the path to the system special folder identified by the specified enumeration.</summary>
      <returns>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, the empty string ("").A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</returns>
      <param name="folder">An enumerated constant that identifies a system special folder. </param>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>Gets a value indicating whether the common language runtime is shutting down or the current application domain is unloading.</summary>
      <returns>true if the common language runtime is shutting down or the current <see cref="T:System.AppDomain" /> is unloading; otherwise, false.The current application domain is the <see cref="T:System.AppDomain" /> that contains the object that is calling <see cref="P:System.Environment.HasShutdownStarted" />.</returns>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>Gets the newline string defined for this environment.</summary>
      <returns>A string containing "\r\n" for non-Unix platforms,  or a string containing "\n" for Unix platforms.</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>Gets an <see cref="T:System.OperatingSystem" /> object that contains the current platform identifier and version number.</summary>
      <returns>An <see cref="T:System.OperatingSystem" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">This property was unable to obtain the system version.-or- The obtained platform identifier is not a member of <see cref="T:System.PlatformID" />. </exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>[SECURITY CRITICAL] Gets the number of processors on the current machine.</summary>
      <returns>The 32-bit signed integer that specifies the number of processors on the current machine. There is no default.</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>Gets the number of milliseconds elapsed since the system started.</summary>
      <returns>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>Gets a <see cref="T:System.Version" /> object that describes the major, minor, build, and revision numbers of the common language runtime.</summary>
      <returns>A <see cref="T:System.Version" /> object.</returns>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>Specifies enumerated constants used to retrieve directory paths to system special folders.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>The directory that serves as a common repository for application-specific data for the current roaming user.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>The directory that serves as a common repository for application-specific data that is used by all users.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>The directory that serves as a common repository for Internet cookies.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>The logical Desktop rather than the physical file system location.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>The directory that serves as a common repository for the user's favorite items.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>The directory that serves as a common repository for Internet history items.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>The directory that serves as a common repository for temporary Internet files.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>The directory that contains the user's program groups.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>The "My Computer" folder. </summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>The "My Music" folder.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>The "My Pictures" folder.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>The directory that contains the user's most recently used documents.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>The directory that contains the Send To menu items.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>The directory that contains the Start menu items.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>The directory that corresponds to the user's Startup program group.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>The System directory.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>The directory that serves as a common repository for document templates.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>The directory used to physically store file objects on the desktop.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>The directory that serves as a common repository for documents.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>The "My Documents" folder.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>The program files directory.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>The directory for components that are shared across applications.</summary>
    </member>
    <member name="T:System.EventArgs">
      <summary>
        <see cref="T:System.EventArgs" /> is the base class for classes containing event data. </summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.EventArgs" /> class.</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>Represents an event with no event data.</summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>Represents the method that will handle an event that has no event data.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains no event data. </param>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>Represents the method that will handle an event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="T:System.Exception">
      <summary>Represents errors that occur during application execution.</summary>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</summary>
      <returns>An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</summary>
      <returns>The first exception thrown in a chain of exceptions. If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (Nothing in Visual Basic), this property returns the current exception.</returns>
    </member>
    <member name="M:System.Exception.GetType">
      <summary>Gets the runtime type of the current instance.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</returns>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</summary>
      <returns>The HRESULT value.</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</summary>
      <returns>An instance of Exception that describes the error that caused the current exception. The InnerException property returns the same value as was passed into the constructor, or a null reference (Nothing in Visual Basic) if the inner exception value was not supplied to the constructor. This property is read-only.</returns>
    </member>
    <member name="P:System.Exception.Message">
      <summary>Gets a message that describes the current exception.</summary>
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>Gets a string representation of the frames on the call stack at the time the current exception was thrown.</summary>
      <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>Creates and returns a string representation of the current exception.</summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>The exception that is thrown when there is an internal error in the execution engine of the common language runtime. This class cannot be inherited.  </summary>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>The exception that is thrown when there is an invalid attempt to access a private or protected field inside a class.</summary>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>The exception that is thrown when the format of an argument does not meet the parameter specifications of the invoked method.</summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class.</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.FormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.GC">
      <summary>Controls the system garbage collector, a service that automatically reclaims unused memory.</summary>
    </member>
    <member name="M:System.GC.Collect">
      <summary>Induces an immediate garbage collection of all generations. </summary>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</summary>
      <returns>A number that is the best available approximation of the number of bytes currently allocated in managed memory.</returns>
      <param name="forceFullCollection">true to indicate that this method can wait for garbage collection to occur before returning; otherwise, false.</param>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</summary>
      <param name="obj">The object to reference. </param>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>Gets the maximum number of generations that the system currently supports.</summary>
      <returns>A value that ranges from zero to the maximum number of supported generations.</returns>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</summary>
      <param name="obj">The object that a finalizer must be called for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null. </exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>Requests that the system not call the finalizer for the specified object.</summary>
      <param name="obj">The object that a finalizer must not be called for. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null. </exception>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</summary>
    </member>
    <member name="T:System.Guid">
      <summary>Represents a globally unique identifier (GUID).</summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified array of bytes.</summary>
      <param name="b">A 16 element byte array containing values with which to initialize the GUID. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> is not 16 bytes long. </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified integers and bytes.</summary>
      <param name="a">The first 4 bytes of the GUID. </param>
      <param name="b">The next 2 bytes of the GUID. </param>
      <param name="c">The next 2 bytes of the GUID. </param>
      <param name="d">The next byte of the GUID. </param>
      <param name="e">The next byte of the GUID. </param>
      <param name="f">The next byte of the GUID. </param>
      <param name="g">The next byte of the GUID. </param>
      <param name="h">The next byte of the GUID. </param>
      <param name="i">The next byte of the GUID. </param>
      <param name="j">The next byte of the GUID. </param>
      <param name="k">The next byte of the GUID. </param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class using the specified integers and byte array.</summary>
      <param name="a">The first 4 bytes of the GUID. </param>
      <param name="b">The next 2 bytes of the GUID. </param>
      <param name="c">The next 2 bytes of the GUID. </param>
      <param name="d">The remaining 8 bytes of the GUID. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> is not 8 bytes long. </exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class using the value represented by the specified string.</summary>
      <param name="g">A <see cref="T:System.String" /> that contains a GUID in one of the following formats ('d' represents a hexadecimal digit whose case is ignored): 32 contiguous digits: dddddddddddddddddddddddddddddddd -or- Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses: dddddddd-dddd-dddd-dddd-dddddddddddd -or- {dddddddd-dddd-dddd-dddd-dddddddddddd} -or- (dddddddd-dddd-dddd-dddd-dddddddddddd) -or- Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces: {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}} All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeroes in a group are ignored.The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low order digits of the group. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> is null. </exception>
      <exception cref="T:System.FormatException">The format of <paramref name="g" /> is invalid. </exception>
      <exception cref="T:System.OverflowException">The format of <paramref name="g" /> is invalid. </exception>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>Compares this instance to a specified <see cref="T:System.Guid" /> object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description A negative integer This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. A positive integer This instance is greater than <paramref name="value" />. </returns>
      <param name="value">A <see cref="T:System.Guid" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description A negative integer This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. A positive integer This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Guid" />. </exception>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>A read-only instance of the <see cref="T:System.Guid" /> class whose value is guaranteed to be all zeroes.</summary>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Guid" /> object represent the same value.</summary>
      <returns>true if <paramref name="g" /> is equal to this instance; otherwise, false.</returns>
      <param name="g">A <see cref="T:System.Guid" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Guid" /> that has the same value as this instance; otherwise, false.</returns>
      <param name="o">The object to compare with this instance. </param>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>Initializes a new instance of the <see cref="T:System.Guid" /> class.</summary>
      <returns>A new <see cref="T:System.Guid" /> object.</returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>Returns an indication whether the values of two specified <see cref="T:System.Guid" /> objects are equal.</summary>
      <returns>true if <paramref name="a" /> and <paramref name="b" /> are equal; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.Guid" /> object. </param>
      <param name="b">A <see cref="T:System.Guid" /> object. </param>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>Returns an indication whether the values of two specified <see cref="T:System.Guid" /> objects are not equal.</summary>
      <returns>true if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.Guid" /> object. </param>
      <param name="b">A <see cref="T:System.Guid" /> object. </param>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>Returns a 16-element byte array that contains the value of this instance.</summary>
      <returns>A 16-element byte array.</returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the value of this instance in registry format.</summary>
      <returns>A String formatted in this pattern: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx where the value of the GUID is represented as a series of lower-case hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27".</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>Returns a <see cref="T:System.String" /> representation of the value of this <see cref="T:System.Guid" /> instance, according to the provided format specifier.</summary>
      <returns>A <see cref="T:System.String" /> representation of the value of this <see cref="T:System.Guid" />.</returns>
      <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", or "P". If <paramref name="format" /> is null or the empty string (""), "D" is used. </param>
      <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not null, the empty string (""), "N", "D", "B", or "P". </exception>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>Returns a <see cref="T:System.String" /> representation of the value of this instance of the <see cref="T:System.Guid" /> class, according to the provided format specifier and culture-specific format information.</summary>
      <returns>A <see cref="T:System.String" /> representation of the value of this <see cref="T:System.Guid" />.</returns>
      <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B", or "P". If <paramref name="format" /> is null or the empty string (""), "D" is used. </param>
      <param name="provider">(Reserved) An IFormatProvider reference that supplies culture-specific formatting services. </param>
      <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not null, the empty string (""), "N", "D", "B", or "P". </exception>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>Represents the status of an asynchronous operation. </summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
      <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</summary>
      <returns>A wait handle that is used to wait for an asynchronous operation to complete.</returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
      <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
      <returns>true if the operation is complete; otherwise, false.</returns>
    </member>
    <member name="T:System.IComparable">
      <summary>Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.</summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />. </returns>
      <param name="obj">An object to compare with this instance. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="T:System.IComparable`1">
      <summary>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering instances.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>Compares the current object with another object of the same type.</summary>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />. </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:System.IConvertible">
      <summary>Defines methods that convert the value of the implementing reference or value type to a common language runtime type that has an equivalent value.</summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>Defines a method that supports custom, user-defined formatting of the value of an object.</summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</summary>
      <returns>The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
      <param name="format">A format string containing formatting specifications. </param>
      <param name="arg">An object to format. </param>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that supplies format information about the current instance. </param>
    </member>
    <member name="T:System.IDisposable">
      <summary>Defines a method to release allocated resources.</summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>Provides a mechanism for retrieving an object to control formatting.</summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>Returns an object that provides formatting services for the specified type.</summary>
      <returns>An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, null.</returns>
      <param name="formatType">An object that specifies the type of format object to return. </param>
    </member>
    <member name="T:System.IFormattable">
      <summary>Provides functionality to format the value of an object into a string representation.</summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>Formats the value of the current instance using the specified format.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>The exception that is thrown when an attempt is made to access an element of an array with an index that is outside the bounds of the array. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class.</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Int16">
      <summary>Represents a 16-bit signed integer.</summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>Compares this instance to a specified 16-bit signed integer and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified 16-bit signed integer value.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An integer to compare. </param>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int16" />. </exception>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int16" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Int16" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Int16" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance. </param>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int16" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int16" />.</returns>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int16" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Int16" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>Converts the string representation of a number to its 16-bit signed integer equivalent.</summary>
      <returns>A 16-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 16-bit signed integer equivalent.</summary>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent.</summary>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 16-bit signed integer equivalent.</summary>
      <returns>A 16-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Int16" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific formatting information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>Converts the string representation of a number to its 16-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="result">When this method returns, contains the 16-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.Int32">
      <summary>Represents a 32-bit signed integer.</summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>Compares this instance to a specified 32-bit signed integer and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified 32-bit signed integer.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An integer to compare. </param>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int32" />. </exception>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int32" /> value. </summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Int32" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Int32" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int32" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int32" />.</returns>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>Represents the largest possible value of an <see cref="T:System.Int32" />. This field is constant.</summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Int32" />. This field is constant.</summary>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>Converts the string representation of a number to its 32-bit signed integer equivalent.</summary>
      <returns>A 32-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.</summary>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.</summary>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific information about the format of <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. -or-<paramref name="s" /> includes non-zero fractional digits.</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.</summary>
      <returns>A 32-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Int32" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid or not supported.</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>Converts the string representation of a number to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="result">When this method returns, contains the 32-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.Int64">
      <summary>Represents a 64-bit signed integer.</summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>Compares this instance to a specified 64-bit signed integer and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An integer to compare. </param>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an <see cref="T:System.Int64" />. </exception>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Int64" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of an <see cref="T:System.Int64" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Int64" />.</returns>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>Represents the largest possible value of an Int64. This field is constant.</summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>Represents the smallest possible value of an Int64. This field is constant.</summary>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>Converts the string representation of a number to its 64-bit signed integer equivalent.</summary>
      <returns>A 64-bit signed integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 64-bit signed integer equivalent.</summary>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent.</summary>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 64-bit signed integer equivalent.</summary>
      <returns>A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. </summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Int64" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. </param>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>Converts the string representation of a number to its 64-bit signed integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string containing a number to convert. </param>
      <param name="result">When this method returns, contains the 64-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.IntPtr">
      <summary>A platform-specific type that is used to represent a pointer or a handle.</summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 32-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 32-bit signed integer. </param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 64-bit pointer.</summary>
      <param name="value">A pointer or handle contained in a 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large or too small to represent as an <see cref="T:System.IntPtr" />. </exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified pointer to an unspecified type.</summary>
      <param name="value">A pointer to an unspecified type. </param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.IntPtr" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance or null. </param>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are equal.</summary>
      <returns>true if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, false.</returns>
      <param name="value1">An <see cref="T:System.IntPtr" />. </param>
      <param name="value2">An <see cref="T:System.IntPtr" />. </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>Converts the value of a 32-bit signed integer to an <see cref="T:System.IntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A 32-bit signed integer. </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>Converts the value of a 64-bit signed integer to an <see cref="T:System.IntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A 64-bit signed integer. </param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.IntPtr" />. </exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a pointer to an unspecified type.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">An <see cref="T:System.IntPtr" />. </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 64-bit signed integer.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">An <see cref="T:System.IntPtr" />. </param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>Converts the value of the specified <see cref="T:System.IntPtr" /> to a 32-bit signed integer.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">An <see cref="T:System.IntPtr" />. </param>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit signed integer. </exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>Converts the specified pointer to an unspecified type to an <see cref="T:System.IntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A pointer to an unspecified type. </param>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.IntPtr" /> are not equal.</summary>
      <returns>true if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, false.</returns>
      <param name="value1">An <see cref="T:System.IntPtr" />. </param>
      <param name="value2">An <see cref="T:System.IntPtr" />. </param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>Gets the size of this instance.</summary>
      <returns>The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</returns>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>Converts the value of this instance to a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer equal to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer. </exception>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>Converts the value of this instance to a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer equal to the value of this instance.</returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>Converts the value of this instance to a pointer to an unspecified type.</summary>
      <returns>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>A read-only field that represents a pointer or handle that has been initialized to zero.</summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>The exception that is thrown for invalid casting or explicit conversion.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class.</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidCastException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>The exception that is thrown when a method call is invalid for the object's current state.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class.</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>The exception that is thrown when a program contains invalid Microsoft intermediate language (MSIL) or metadata. Generally this indicates a bug in the compiler that generated the program.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with default properties.</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.InvalidProgramException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.IServiceProvider">
      <summary>Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.</summary>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
      <summary>Gets the service object of the specified type.</summary>
      <returns>A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">An object that specifies the type of service object to get. </param>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>An enumeration used to specify loader optimizations for an executable.</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>Indicates that no optimizations for sharing internal resources are specified. If the default domain or hosting interface specified an optimization, then the loader uses that; otherwise, the loader uses <see cref="F:System.LoaderOptimization.SingleDomain" />.</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>Indicates that the application will probably have a single domain, and loader must not share internal resources across application domains. </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>Indicates that the application will probably have many domains that use the same code, and the loader must share maximal internal resources across application domains. </summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>Indicates that the application will probably host unique code in multiple domains, and the loader must share resources across application domains only for globally available (strong-named) assemblies that have been added to the global assembly cache. </summary>
    </member>
    <member name="T:System.Math">
      <summary>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>Returns the absolute value of a <see cref="T:System.Decimal" /> number.</summary>
      <returns>A <see cref="T:System.Decimal" />, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Decimal.MinValue" />≤ value ≤<see cref="F:System.Decimal.MaxValue" />. </param>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>Returns the absolute value of a double-precision floating-point number.</summary>
      <returns>A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Double.MinValue" />≤<paramref name="value" />≤<see cref="F:System.Double.MaxValue" />. </param>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>Returns the absolute value of a 16-bit signed integer.</summary>
      <returns>A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Int16.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int16.MaxValue" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />. </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>Returns the absolute value of a 32-bit signed integer.</summary>
      <returns>A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Int32.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int32.MaxValue" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />. </exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>Returns the absolute value of a 64-bit signed integer.</summary>
      <returns>A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Int64.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.Int64.MaxValue" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />. </exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>Returns the absolute value of an 8-bit signed integer.</summary>
      <returns>An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.SByte.MinValue" /> &lt; <paramref name="value" />≤<see cref="F:System.SByte.MaxValue" />. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>Returns the absolute value of a single-precision floating-point number.</summary>
      <returns>A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</returns>
      <param name="value">A number in the range <see cref="F:System.Single.MinValue" />≤<paramref name="value" />≤<see cref="F:System.Single.MaxValue" />. </param>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>Returns the angle whose cosine is the specified number.</summary>
      <returns>An angle, θ, measured in radians, such that 0 ≤θ≤π-or- <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1.</returns>
      <param name="d">A number representing a cosine, where -1 ≤<paramref name="d" />≤ 1. </param>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>Returns the angle whose sine is the specified number.</summary>
      <returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 -or- <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1.</returns>
      <param name="d">A number representing a sine, where -1 ≤<paramref name="d" />≤ 1. </param>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>Returns the angle whose tangent is the specified number.</summary>
      <returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.-or- <see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</returns>
      <param name="d">A number representing a tangent. </param>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>Returns the angle whose tangent is the quotient of two specified numbers.</summary>
      <returns>An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane. Observe the following: For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.For points on the boundaries of the quadrants, the return value is the following:If y is 0 and <paramref name="x" /> is not negative, θ = 0.If y is 0 and <paramref name="x" /> is negative, θ = π.If y is positive and <paramref name="x" /> is 0, θ = π/2.If y is negative and x is 0, θ = -π/2.</returns>
      <param name="y">The y coordinate of a point. </param>
      <param name="x">The x coordinate of a point. </param>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>Returns the smallest integral value greater than or equal to the specified double-precision floating-point number.</summary>
      <returns>The smallest integral value greater than or equal to <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned. Note that the method returns a <see cref="T:System.Double" /> rather than an integral type.</returns>
      <param name="a">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>Returns the cosine of the specified angle.</summary>
      <returns>The cosine of <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</returns>
      <param name="d">An angle, measured in radians. </param>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>Returns the hyperbolic cosine of the specified angle.</summary>
      <returns>The hyperbolic cosine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</returns>
      <param name="value">An angle, measured in radians. </param>
    </member>
    <member name="F:System.Math.E">
      <summary>Represents the natural logarithmic base, specified by the constant, e.</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>Returns e raised to the specified power.</summary>
      <returns>The number e raised to the power <paramref name="d" />. If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned. If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</returns>
      <param name="d">A number specifying a power. </param>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>Returns the largest integer less than or equal to the specified double-precision floating-point number.</summary>
      <returns>The largest integer less than or equal to <paramref name="d" />. If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</returns>
      <param name="d">A double-precision floating-point number. </param>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>Returns the remainder resulting from the division of a specified number by another specified number.</summary>
      <returns>A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> (Not-A-Number) is returned.</returns>
      <param name="x">A dividend. </param>
      <param name="y">A divisor. </param>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>Returns the natural (base e) logarithm of a specified number.</summary>
      <returns>One of the values in the following table.Sign of <paramref name="d" />Returns Positive The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e<paramref name="d" />Zero <see cref="F:System.Double.NegativeInfinity" />Negative <see cref="F:System.Double.NaN" />Equal to <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />Equal to <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">A number whose logarithm is to be found. </param>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>Returns the logarithm of a specified number in a specified base.</summary>
      <returns>One of the values in the following table. (+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)<paramref name="a" /><paramref name="newBase" />Return Value<paramref name="a" />&gt; 0(0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)lognewBase(a)<paramref name="a" />&lt; 0(any value)NaN(any value)<paramref name="newBase" />&lt; 0NaN<paramref name="a" /> != 1<paramref name="newBase" /> = 0NaN<paramref name="a" /> != 1<paramref name="newBase" /> = +InfinityNaN<paramref name="a" /> = NaN(any value)NaN(any value)<paramref name="newBase" /> = NaNNaN(any value)<paramref name="newBase" /> = 1NaN<paramref name="a" /> = 00 &lt;<paramref name="newBase" />&lt; 1 +Infinity<paramref name="a" /> = 0<paramref name="newBase" />&gt; 1-Infinity<paramref name="a" /> =  +Infinity0 &lt;<paramref name="newBase" />&lt; 1-Infinity<paramref name="a" /> =  +Infinity<paramref name="newBase" />&gt; 1+Infinity<paramref name="a" /> = 1<paramref name="newBase" /> = 00<paramref name="a" /> = 1<paramref name="newBase" /> = +Infinity0</returns>
      <param name="a">A number whose logarithm is to be found. </param>
      <param name="newBase">The base of the logarithm. </param>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>Returns the base 10 logarithm of a specified number.</summary>
      <returns>One of the values in the following table.Sign of <paramref name="d" />Returns Positive The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />. Zero <see cref="F:System.Double.NegativeInfinity" />Negative <see cref="F:System.Double.NaN" />Equal to <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />Equal to <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">A number whose logarithm is to be found. </param>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>Returns the larger of two 8-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 8-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 8-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>Returns the larger of two decimal numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two <see cref="T:System.Decimal" /> numbers to compare. </param>
      <param name="val2">The second of two <see cref="T:System.Decimal" /> numbers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>Returns the larger of two double-precision floating-point numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</returns>
      <param name="val1">The first of two double-precision floating-point numbers to compare. </param>
      <param name="val2">The second of two double-precision floating-point numbers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>Returns the larger of two 16-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 16-bit signed integers to compare. </param>
      <param name="val2">The second of two 16-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>Returns the larger of two 32-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 32-bit signed integers to compare. </param>
      <param name="val2">The second of two 32-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>Returns the larger of two 64-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 64-bit signed integers to compare. </param>
      <param name="val2">The second of two 64-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>Returns the larger of two 8-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 8-bit signed integers to compare. </param>
      <param name="val2">The second of two 8-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>Returns the larger of two single-precision floating-point numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger. If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</returns>
      <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
      <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>Returns the larger of two 16-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 16-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 16-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>Returns the larger of two 32-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 32-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 32-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>Returns the larger of two 64-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</returns>
      <param name="val1">The first of two 64-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 64-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>Returns the smaller of two 8-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 8-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 8-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>Returns the smaller of two decimal numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two <see cref="T:System.Decimal" /> numbers to compare. </param>
      <param name="val2">The second of two <see cref="T:System.Decimal" /> numbers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>Returns the smaller of two double-precision floating-point numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</returns>
      <param name="val1">The first of two double-precision floating-point numbers to compare. </param>
      <param name="val2">The second of two double-precision floating-point numbers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>Returns the smaller of two 16-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 16-bit signed integers to compare. </param>
      <param name="val2">The second of two 16-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>Returns the smaller of two 32-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 32-bit signed integers to compare. </param>
      <param name="val2">The second of two 32-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>Returns the smaller of two 64-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 64-bit signed integers to compare. </param>
      <param name="val2">The second of two 64-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>Returns the smaller of two 8-bit signed integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 8-bit signed integers to compare. </param>
      <param name="val2">The second of two 8-bit signed integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>Returns the smaller of two single-precision floating-point numbers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller. If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</returns>
      <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
      <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>Returns the smaller of two 16-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 16-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 16-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>Returns the smaller of two 32-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 32-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 32-bit unsigned integers to compare. </param>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>Returns the smaller of two 64-bit unsigned integers.</summary>
      <returns>Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</returns>
      <param name="val1">The first of two 64-bit unsigned integers to compare. </param>
      <param name="val2">The second of two 64-bit unsigned integers to compare. </param>
    </member>
    <member name="F:System.Math.PI">
      <summary>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>Returns a specified number raised to the specified power.</summary>
      <returns>The number <paramref name="x" /> raised to the power <paramref name="y" />.</returns>
      <param name="x">A double-precision floating-point number to be raised to a power. </param>
      <param name="y">A double-precision floating-point number that specifies a power. </param>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>Rounds a decimal value to the nearest integral value.</summary>
      <returns>The integer nearest parameter <paramref name="d" />. If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that the method returns a <see cref="T:System.Decimal" /> type rather than an integral type.</returns>
      <param name="d">A decimal number to be rounded. </param>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>Rounds a decimal value to a specified number of fractional digits.</summary>
      <returns>The number nearest <paramref name="d" /> with a number of fractional digits equal to <paramref name="decimals" />. </returns>
      <param name="d">A decimal number to be rounded. </param>
      <param name="decimals">The number of decimal places in the return value. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> is less than 0 or greater than 28. </exception>
      <exception cref="T:System.OverflowException">The result is outside the range of a <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>Rounds a double-precision floating-point value to the nearest integral value.</summary>
      <returns>The integer nearest <paramref name="a" />. If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that the method returns a <see cref="T:System.Double" /> type rather than an integral type.</returns>
      <param name="a">A double-precision floating-point number to be rounded. </param>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>Rounds a double-precision floating-point value to a specified number of fractional digits.</summary>
      <returns>The number nearest <paramref name="value" /> with a number of fractional digits equal to <paramref name="digits" />.</returns>
      <param name="value">A double-precision floating-point number to be rounded. </param>
      <param name="digits">The number of fractional digits in the return value. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> is less than 0 or greater than 15. </exception>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>Returns a value indicating the sign of a decimal number.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed <see cref="T:System.Decimal" /> number. </param>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>Returns a value indicating the sign of a double-precision floating-point number.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>Returns a value indicating the sign of a 16-bit signed integer.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>Returns a value indicating the sign of a 32-bit signed integer.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>Returns a value indicating the sign of a 64-bit signed integer.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>Returns a value indicating the sign of an 8-bit signed integer.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>Returns a value indicating the sign of a single-precision floating-point number.</summary>
      <returns>A number indicating the sign of <paramref name="value" />.Number Description -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
      <param name="value">A signed number. </param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />. </exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>Returns the sine of the specified angle.</summary>
      <returns>The sine of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</returns>
      <param name="a">An angle, measured in radians. </param>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>Returns the hyperbolic sine of the specified angle.</summary>
      <returns>The hyperbolic sine of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</returns>
      <param name="value">An angle, measured in radians. </param>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>Returns the square root of a specified number.</summary>
      <returns>Value of <paramref name="d" />Returns Zero, or positive The positive square root of <paramref name="d" />. Negative <see cref="F:System.Double.NaN" />If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</returns>
      <param name="d">A number. </param>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>Returns the tangent of the specified angle.</summary>
      <returns>The tangent of <paramref name="a" />. If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</returns>
      <param name="a">An angle, measured in radians. </param>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>Returns the hyperbolic tangent of the specified angle.</summary>
      <returns>The hyperbolic tangent of <paramref name="value" />. If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1. If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1. If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</returns>
      <param name="value">An angle, measured in radians. </param>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>The exception that is thrown when an attempt to access a class member fails.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class.</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MemberAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>The exception that is thrown when there is an invalid attempt to access a private or protected method inside a class.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "Attempt to access the method failed." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MethodAccessException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a field that does not exist.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class.</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingFieldException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>Gets the text string showing the signature of the missing field, the class name, and the field name. This property is read-only.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a class member that does not exist.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class.</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMemberException" /> class with a specified error message and a reference to the inner exception that is the root cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">An instance of <see cref="T:System.Exception" /> that is the cause of the current Exception. If <paramref name="inner" /> is not a null reference (Nothing in Visual Basic), then the current Exception is raised in a catch block handling <paramref name="inner" />. </param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>Gets the text string showing the class name, the member name, and the signature of the missing member.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>The exception that is thrown when there is an attempt to dynamically access a method that does not exist.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class.</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MissingMethodException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>Gets the text string showing the class name, the method name, and the signature of the missing method. This property is read-only.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastDelegate" /> class.</summary>
      <param name="target">The object on which <paramref name="method" /> is defined. </param>
      <param name="method">The name of the method for which a delegate is created. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>Combines this <see cref="T:System.Delegate" /> with the specified <see cref="T:System.Delegate" /> to form a new delegate.</summary>
      <returns>A <see cref="T:System.Delegate" /> that is the new root of the <see cref="T:System.MulticastDelegate" /> invocation list.</returns>
      <param name="follow">The delegate to combine with this delegate. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
      <exception cref="T:System.ArgumentException">Both <paramref name="a" /> and <paramref name="b" /> are not null, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type. </exception>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>Determines whether this multicast delegate and the specified object are equal.</summary>
      <returns>true if <paramref name="obj" /> and this instance have the same invocation lists; otherwise, false.</returns>
      <param name="obj">The object to compare with this instance. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>Returns the invocation list of this multicast delegate, in invocation order.</summary>
      <returns>An array of delegates whose invocation lists collectively match the invocation list of this instance.</returns>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determines whether two <see cref="T:System.MulticastDelegate" /> objects are equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> have the same invocation lists; otherwise, false.</returns>
      <param name="d1">The left operand. </param>
      <param name="d2">The right operand. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>Determines whether two <see cref="T:System.MulticastDelegate" /> objects are not equal.</summary>
      <returns>true if <paramref name="d1" /> and <paramref name="d2" /> do not have the same invocation lists; otherwise, false.</returns>
      <param name="d1">The left operand. </param>
      <param name="d2">The right operand. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>Removes an element from the invocation list of this <see cref="T:System.MulticastDelegate" /> that is equal to the specified delegate.</summary>
      <returns>If <paramref name="value" /> is found in the invocation list for this instance, then a new <see cref="T:System.Delegate" /> without <paramref name="value" /> in its invocation list; otherwise, this instance with its original invocation list.</returns>
      <param name="value">The delegate to search for in the invocation list. </param>
      <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </exception>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>The exception that is thrown when there is an attempt to combine two delegates based on the <see cref="T:System.Delegate" /> type instead of the <see cref="T:System.MulticastDelegate" /> type. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class.</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.MulticastNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>The exception that is thrown when a floating-point value is positive infinity, negative infinity, or Not-a-Number (NaN).</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class.</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotFiniteNumberException" /> class with a specified error message and a reference to the inner exception that is root cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>The exception that is thrown when a requested method or operation is not implemented.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotImplementedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Nullable">
      <summary>Supports a value type that can be assigned null like a reference type. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Compares the relative values of two <see cref="T:System.Nullable`1" /> objects.</summary>
      <returns>An integer that indicates the relative values of the <paramref name="n1" /> and <paramref name="n2" /> parameters.Return ValueDescriptionLess than zeroThe <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is false, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is true.-or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is less than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.ZeroThe <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are false.-or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is equal to the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.Greater than zeroThe <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n1" /> is true, and the <see cref="P:System.Nullable`1.HasValue" /> property for <paramref name="n2" /> is false.-or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n1" /> is greater than the value of the <see cref="P:System.Nullable`1.Value" /> property for <paramref name="n2" />.</returns>
      <param name="n1">A <see cref="T:System.Nullable`1" /> object.</param>
      <param name="n2">A <see cref="T:System.Nullable`1" /> object.</param>
      <typeparam name="T">The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>Indicates whether two specified <see cref="T:System.Nullable`1" /> objects are equal.</summary>
      <returns>true if the <paramref name="n1" /> parameter is equal to the <paramref name="n2" /> parameter; otherwise, false. The return value depends on the <see cref="P:System.Nullable`1.HasValue" /> and <see cref="P:System.Nullable`1.Value" /> properties of the two parameters that are compared.Return ValueDescriptiontrueThe <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are false. -or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are equal.falseThe <see cref="P:System.Nullable`1.HasValue" /> property is true for one parameter and false for the other parameter.-or-The <see cref="P:System.Nullable`1.HasValue" /> properties for <paramref name="n1" /> and <paramref name="n2" /> are true, and the <see cref="P:System.Nullable`1.Value" /> properties of the parameters are unequal.</returns>
      <param name="n1">A <see cref="T:System.Nullable`1" /> object.</param>
      <param name="n2">A <see cref="T:System.Nullable`1" /> object.</param>
      <typeparam name="T">The underlying value type of the <paramref name="n1" /> and <paramref name="n2" /> parameters.</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>Returns the underlying type argument of the specified nullable type.</summary>
      <returns>The type argument of the <paramref name="nullableType" /> parameter, if the <paramref name="nullableType" /> parameter is a closed generic nullable type; otherwise, null. </returns>
      <param name="nullableType">A <see cref="T:System.Type" /> object that describes a closed generic nullable type. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> is null.</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>Represents an object whose underlying type is a value type that can also be assigned null like a reference type.</summary>
      <typeparam name="T">The underlying value type of the <see cref="T:System.Nullable`1" /> generic type.</typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Nullable`1" /> structure to the specified value. </summary>
      <param name="value">A value type.</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>Indicates whether the current <see cref="T:System.Nullable`1" /> object is equal to a specified object.</summary>
      <returns>true if the <paramref name="other" /> parameter is equal to the current <see cref="T:System.Nullable`1" /> object; otherwise, false. This table describes how equality is defined for the compared values: Return ValueDescriptiontrueThe <see cref="P:System.Nullable`1.HasValue" /> property is false, and the <paramref name="other" /> parameter is null. That is, two null values are equal by definition.-or-The <see cref="P:System.Nullable`1.HasValue" /> property is true, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is equal to the <paramref name="other" /> parameter.falseThe <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is true, and the <paramref name="other" /> parameter is null.-or-The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is false, and the <paramref name="other" /> parameter is not null.-or-The <see cref="P:System.Nullable`1.HasValue" /> property for the current <see cref="T:System.Nullable`1" /> structure is true, and the value returned by the <see cref="P:System.Nullable`1.Value" /> property is not equal to the <paramref name="other" /> parameter.</returns>
      <param name="other">An object.</param>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>Retrieves the hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property.</summary>
      <returns>The hash code of the object returned by the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is true, or zero if the <see cref="P:System.Nullable`1.HasValue" /> property is false. </returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the object's default value.</summary>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property if the  <see cref="P:System.Nullable`1.HasValue" /> property is true; otherwise, the default value of the current <see cref="T:System.Nullable`1" /> object. The type of the default value is the type argument of the current <see cref="T:System.Nullable`1" /> object, and the value of the default value consists solely of binary zeroes.</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>Retrieves the value of the current <see cref="T:System.Nullable`1" /> object, or the specified default value.</summary>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property if the <see cref="P:System.Nullable`1.HasValue" /> property is true; otherwise, the <paramref name="defaultValue" /> parameter.</returns>
      <param name="defaultValue">A value to return if the <see cref="P:System.Nullable`1.HasValue" /> property is false.</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>Gets a value indicating whether the current <see cref="T:System.Nullable`1" /> object has a value.</summary>
      <returns>true if the current <see cref="T:System.Nullable`1" /> object has a value; false if the current <see cref="T:System.Nullable`1" /> object has no value.</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>Returns the value of a specified <see cref="T:System.Nullable`1" /> value.</summary>
      <returns>The value of the <see cref="P:System.Nullable`1.Value" /> property for the <paramref name="value" /> parameter.</returns>
      <param name="value">A <see cref="T:System.Nullable`1" /> value.</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>Creates a new <see cref="T:System.Nullable`1" /> object initialized to a specified value. </summary>
      <returns>A <see cref="T:System.Nullable`1" /> object whose <see cref="P:System.Nullable`1.Value" /> property is initialized with the <paramref name="value" /> parameter.</returns>
      <param name="value">A value type.</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>Returns the text representation of the value of the current <see cref="T:System.Nullable`1" /> object.</summary>
      <returns>The text representation of the value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is true, or an empty string ("") if the <see cref="P:System.Nullable`1.HasValue" /> property is false.</returns>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>Gets the value of the current <see cref="T:System.Nullable`1" /> value.</summary>
      <returns>The value of the current <see cref="T:System.Nullable`1" /> object if the <see cref="P:System.Nullable`1.HasValue" /> property is true. An exception is thrown if the <see cref="P:System.Nullable`1.HasValue" /> property is false.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Nullable`1.HasValue" /> property is false.</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>The exception that is thrown when there is an attempt to dereference a null object reference.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The value 'null' was found where an instance of an object was required." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.NullReferenceException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Object">
      <summary>Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are considered equal.</summary>
      <returns>true if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
      <param name="objA">The first <see cref="T:System.Object" /> to compare. </param>
      <param name="objB">The second <see cref="T:System.Object" /> to compare. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" /> is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>Serves as a hash function for a particular type. </summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>Gets the <see cref="T:System.Type" /> of the current instance.</summary>
      <returns>The <see cref="T:System.Type" /> instance that represents the exact runtime type of the current instance.</returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>Creates a shallow copy of the current <see cref="T:System.Object" />.</summary>
      <returns>A shallow copy of the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</summary>
      <returns>true if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null references; otherwise, false.</returns>
      <param name="objA">The first <see cref="T:System.Object" /> to compare. </param>
      <param name="objB">The second <see cref="T:System.Object" /> to compare. </param>
    </member>
    <member name="M:System.Object.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>The exception that is thrown when an operation is performed on a disposed object.</summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a string containing the name of the disposed object.</summary>
      <param name="objectName">A string containing the name of the disposed object. </param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException" /> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObjectDisposedException" /> class with the specified object name and message.</summary>
      <param name="objectName">The name of the disposed object. </param>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>Gets the message that describes the error.</summary>
      <returns>A string that describes the error.</returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>Gets the name of the disposed object.</summary>
      <returns>A string containing the name of the disposed object.</returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>Marks the program elements that are no longer in use. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with default properties.</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a specified workaround message.</summary>
      <param name="message">The text string that describes alternative workarounds. </param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ObsoleteAttribute" /> class with a workaround message and a Boolean value indicating whether the obsolete element usage is considered an error.</summary>
      <param name="message">The text string that describes alternative workarounds. </param>
      <param name="error">The Boolean value that indicates whether the obsolete element usage is considered an error. </param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program element as an error.</summary>
      <returns>true if the obsolete element usage is considered an error; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>Gets the workaround message, including a description of the alternative program elements.</summary>
      <returns>The workaround text string.</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>Represents information about an operating system, such as the version and platform identifier. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>Initializes a new instance of the <see cref="T:System.OperatingSystem" /> class, using the specified platform identifier value and version object.</summary>
      <param name="platform">One of the <see cref="T:System.PlatformID" /> values that indicates the operating system platform. </param>
      <param name="version">A <see cref="T:System.Version" /> object that indicates the version of the operating system. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> is not a <see cref="T:System.PlatformID" /> enumeration value.</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>Creates an <see cref="T:System.OperatingSystem" /> object that is identical to this instance.</summary>
      <returns>An <see cref="T:System.OperatingSystem" /> object that is a copy of this instance.</returns>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>Gets a <see cref="T:System.PlatformID" /> enumeration value that identifies the operating system platform.</summary>
      <returns>One of the <see cref="T:System.PlatformID" /> values.</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>Converts the value of this <see cref="T:System.OperatingSystem" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the values returned by the <see cref="P:System.OperatingSystem.Platform" />,and <see cref="P:System.OperatingSystem.Version" />.</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>Gets a <see cref="T:System.Version" /> object that identifies the operating system.</summary>
      <returns>A <see cref="T:System.Version" /> object that describes the major version, minor version, build, and revision numbers for the operating system.</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>The exception that is thrown when there is not enough memory to continue the execution of a program.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class.</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OutOfMemoryException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.OverflowException">
      <summary>The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class.</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.OverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ParamArrayAttribute" /> class with default properties.</summary>
    </member>
    <member name="T:System.PlatformID">
      <summary>Identifies the operating system, or development platform, supported by an assembly.</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>The operating system is Win32s. Win32s is a layer that runs on 16-bit versions of Windows to provide access to 32-bit applications.</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>The operating system is Windows 95 or later.</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>The operating system is Windows NT or later.</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>The operating system is Windows CE.</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>The operating system is Unix.</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>The development platform is Xbox 360.</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>The operating system is Macintosh.</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>The exception that is thrown when a feature does not run on a particular platform.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with default properties.</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The text message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.PlatformNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</summary>
      <returns>true if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, false.</returns>
      <param name="obj">The object to compare against the criteria. </param>
      <typeparam name="T">The type of the object to compare.</typeparam>
    </member>
    <member name="T:System.Random">
      <summary>Represents a pseudo-random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Random" /> class, using a time-dependent default seed value.</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Random" /> class, using the specified seed value.</summary>
      <param name="Seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="Seed" /> is <see cref="F:System.Int32.MinValue" />, which causes an overflow when its absolute value is calculated. </exception>
    </member>
    <member name="M:System.Random.Next">
      <summary>Returns a nonnegative random number.</summary>
      <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>Returns a nonnegative random number less than the specified maximum.</summary>
      <returns>A 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes zero but not <paramref name="maxValue" />. However, if <paramref name="maxValue" /> equals zero, <paramref name="maxValue" /> is returned.</returns>
      <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue" /> must be greater than or equal to zero. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> is less than zero. </exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>Returns a random number within a specified range.</summary>
      <returns>A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</returns>
      <param name="minValue">The inclusive lower bound of the random number returned. </param>
      <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue" /> must be greater than or equal to <paramref name="minValue" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> is greater than <paramref name="maxValue" />. </exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>Fills the elements of a specified array of bytes with random numbers.</summary>
      <param name="buffer">An array of bytes to contain random numbers. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>Returns a random number between 0.0 and 1.0.</summary>
      <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>Returns a random number between 0.0 and 1.0.</summary>
      <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
    </member>
    <member name="T:System.RankException">
      <summary>The exception that is thrown when an array with the wrong number of dimensions is passed to a method.</summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class.</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. </param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.RankException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>Provides data for the <see cref="E:System.AppDomain.AssemblyResolve" /> event.</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ResolveEventArgs" /> class.</summary>
      <param name="name">The name of an item to resolve. </param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>Gets the name of the item to resolve.</summary>
      <returns>The name of the item to resolve.</returns>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>[SECURITY CRITICAL] Represents the method that handles the <see cref="E:System.AppDomain.AssemblyResolve" /> event.</summary>
      <returns>The resolved assembly, or null if the assembly cannot be resolved.</returns>
      <param name="sender">The source of the event. </param>
      <param name="args">The event data. </param>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>References a variable-length argument list.</summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>Represents a field using an internal metadata token.</summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>Indicates whether the current instance is equal to the specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeFieldHandle" /> and equal to the value of the current instance; otherwise, false.</returns>
      <param name="obj">The object to compare to the current instance.</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>Indicates whether the current instance is equal to the specified <see cref="T:System.RuntimeFieldHandle" />.</summary>
      <returns>true if the value of <paramref name="handle" /> is equal to the value of the current instance; otherwise, false.</returns>
      <param name="handle">The <see cref="T:System.RuntimeFieldHandle" /> to compare to the current instance.</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode"></member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>Gets a handle to the field represented by the current instance.</summary>
      <returns>An <see cref="T:System.IntPtr" /> that contains the handle to the field represented by the current instance.</returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> is a handle to the internal metadata representation of a method.</summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>Indicates whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeMethodHandle" /> and equal to the value of this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Object" /> to compare to this instance.</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>Indicates whether this instance is equal to a specified <see cref="T:System.RuntimeMethodHandle" />.</summary>
      <returns>true if <paramref name="handle" /> is equal to the value of this instance; otherwise, false.</returns>
      <param name="handle">A <see cref="T:System.RuntimeMethodHandle" /> to compare to this instance.</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are equal.</summary>
      <returns>true if the value of <paramref name="left" /> is equal to the value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>Indicates whether two instances of <see cref="T:System.RuntimeMethodHandle" /> are not equal.</summary>
      <returns>true if the value of <paramref name="left" /> is unequal to the value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="right" />.</param>
      <param name="right">A <see cref="T:System.RuntimeMethodHandle" /> to compare to <paramref name="left" />.</param>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>Gets the value of this instance.</summary>
      <returns>A handle to the internal metadata representation of a method.</returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>Represents a type using an internal metadata token.</summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>Indicates whether the specified object is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is equal to the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to the current instance.</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>Indicates whether the specified <see cref="T:System.RuntimeTypeHandle" /> structure is equal to the current <see cref="T:System.RuntimeTypeHandle" /> structure.</summary>
      <returns>true if the value of <paramref name="handle" /> is equal to the value of this instance; otherwise, false.</returns>
      <param name="handle">The <see cref="T:System.RuntimeTypeHandle" /> structure to compare to the current instance.</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is equal to an object.</summary>
      <returns>true if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> and is equal to <paramref name="left" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.</param>
      <param name="right">An object to compare to <paramref name="left" />.</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>Indicates whether a <see cref="T:System.RuntimeTypeHandle" /> structure is not equal to an object.</summary>
      <returns>true if <paramref name="right" /> is a <see cref="T:System.RuntimeTypeHandle" /> structure and is not equal to <paramref name="left" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.RuntimeTypeHandle" /> structure to compare to <paramref name="right" />.</param>
      <param name="right">An object to compare to <paramref name="left" />.</param>
    </member>
    <member name="T:System.SByte">
      <summary>Represents an 8-bit signed integer.</summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="obj" />.Return Value Description Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />.-or- <paramref name="obj" /> is null. </returns>
      <param name="obj">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not an <see cref="T:System.SByte" />. </exception>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>Compares this instance to a specified 8-bit signed integer and returns an indication of their relative values.</summary>
      <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An 8-bit signed integer to compare. </param>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.SByte" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.SByte" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.SByte" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.SByte" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.SByte" />.</returns>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>Converts the string representation of a number to its 8-bit signed integer equivalent.</summary>
      <returns>An 8-bit signed integer that is equivalent to the number contained in the <paramref name="s" /> parameter.</returns>
      <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine). </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 8-bit signed integer equivalent.</summary>
      <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. -or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number that is in a specified style and culture-specific format to its 8-bit signed equivalent.</summary>
      <returns>An 8-bit signed byte value that is equivalent to the number specified in the <paramref name="s" /> parameter.</returns>
      <param name="s">A string that contains the number to convert. The string is interpreted by using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.-or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.-or-<paramref name="s" /> includes non-zero, fractional digits.</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 8-bit signed integer equivalent.</summary>
      <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is unused.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is unused.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases. </exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is unused.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an object of type <paramref name="type" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> to which to convert this <see cref="T:System.SByte" /> value.</param>
      <param name="provider">A <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance, as specified by <paramref name="provider" />.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 8-bit signed integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string that contains a number to convert.</param>
      <param name="result">When this method returns, contains the 8-bit signed integer value that is equivalent to the number contained in <paramref name="s" /> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in the correct format, or represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Single">
      <summary>Represents a single-precision floating-point number.</summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- This instance and value are both not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.Single" />. </exception>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is greater than, less than, or equal to the value of the specified single-precision floating-point number.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />.-or- This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number. Zero This instance is equal to <paramref name="value" />.-or- Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />. Greater than zero This instance is greater than <paramref name="value" />.-or- This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />). </returns>
      <param name="value">A single-precision floating-point number to compare. </param>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>Represents the smallest positive <see cref="T:System.Single" /> value greater than zero. This field is constant.</summary>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Single" /> object represent the same value.</summary>
      <returns>true if <paramref name="obj" /> is equal to this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Single" /> object to compare to this instance.</param>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.Single" />.</returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, false.</returns>
      <param name="f">A single-precision floating-point number. </param>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to not a number (<see cref="F:System.Single.NaN" />).</summary>
      <returns>true if <paramref name="f" /> evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, false.</returns>
      <param name="f">A single-precision floating-point number. </param>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, false.</returns>
      <param name="f">A single-precision floating-point number. </param>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
      <returns>true if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, false.</returns>
      <param name="f">A single-precision floating-point number. </param>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.Single" />. This field is constant.</summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.Single" />. This field is constant.</summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>Represents not a number (NaN). This field is constant.</summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>Converts the string representation of a number to its single-precision floating-point number equivalent.</summary>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string representing a number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</summary>
      <returns>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string representing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</summary>
      <returns>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a numeric value. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</summary>
      <returns>A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
      <param name="s">A string that contains a number to convert. </param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not a number in a valid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />. </summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.Single" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.Single.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return code indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing a number to convert. </param>
      <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>Converts the string representation of a number to its single-precision floating-point number equivalent. A return code indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing a number to convert. </param>
      <param name="result">When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not a number in a valid format, or represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>The exception that is thrown when the execution stack overflows because it contains too many nested method calls. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error, such as "The requested operation caused a stack overflow." This message takes into account the current system culture.</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with a specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.StackOverflowException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>Indicates that the COM threading model for an application is single-threaded apartment (STA). </summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.STAThreadAttribute" /> class.</summary>
    </member>
    <member name="T:System.String">
      <summary>Represents text as a series of Unicode characters.</summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</summary>
      <param name="value">A pointer to a null terminated array of Unicode characters. </param>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</summary>
      <param name="value">A pointer to an array of Unicode characters. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <param name="length">The number of characters within <paramref name="value" /> to use. </param>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</summary>
      <param name="c">A Unicode character. </param>
      <param name="count">The number of times <paramref name="c" /> occurs. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters.</summary>
      <param name="value">An array of Unicode characters. </param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</summary>
      <param name="value">An array of Unicode characters. </param>
      <param name="startIndex">The starting position within <paramref name="value" />. </param>
      <param name="length">The number of characters within <paramref name="value" /> to use. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.-or- The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />. </exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>[SECURITY CRITICAL] Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</summary>
      <param name="value">A pointer to a null terminated array of 8-bit signed integers. </param>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>Gets the character at a specified character position in the current <see cref="T:System.String" /> object.</summary>
      <returns>A Unicode character.</returns>
      <param name="index">A character position in the current <see cref="T:System.String" /> object. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is greater than or equal to the length of this object or less than zero. </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Performs a culture-sensitive comparison of substrings that are extracted from two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition Less than zero The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. Zero The substrings are equal, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" />. </param>
      <param name="indexA">The position of the substring within <paramref name="strA" />. </param>
      <param name="strB">The second <see cref="T:System.String" />. </param>
      <param name="indexB">The position of the substring within <paramref name="strB" />. </param>
      <param name="length">The maximum number of characters in the substrings to compare. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to one another in the sort order. </summary>
      <returns>An integer that indicates the lexical relationship between the two substrings.ValueConditionLess than zeroThe substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.ZeroThe substrings are equal or <paramref name="length" /> is zero.Greater than zeroThe substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</returns>
      <param name="strA">The first string.   </param>
      <param name="indexA">The starting position of the substring within <paramref name="strA" />.</param>
      <param name="strB">The second string.</param>
      <param name="indexB">The starting position of the substring within <paramref name="strB" />.</param>
      <param name="length">The maximum number of characters in the substrings to compare.</param>
      <param name="culture">The culture that supplies culture-specific comparison information.</param>
      <param name="options">Options, such as ignoring case or symbols, to use when performing the comparison.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than strA.Length.-or-<paramref name="indexB" /> is greater than strB.Length.-or-<paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.-or-Either <paramref name="strA" /> or <paramref name="strB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects using the specified string comparison options and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition Less than zero The substring in the <paramref name="strA" /> parameter is less than the substring in the <paramref name="strB" /> parameter.Zero The substrings are equal, or the <paramref name="length" /> parameter is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" /> object. </param>
      <param name="indexA">The position of the substring within <paramref name="strA" />. </param>
      <param name="strB">The second <see cref="T:System.String" /> object.</param>
      <param name="indexB">The position of the substring within <paramref name="strB" />. </param>
      <param name="length">The maximum number of characters in the substrings to compare. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. -or-Either <paramref name="indexA" /> or <paramref name="indexB" /> is null, and <paramref name="length" /> is greater than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>Performs a culture-sensitive comparison of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> equals <paramref name="strB" />. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" />. </param>
      <param name="strB">The second <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to one another in the sort order.</summary>
      <returns>A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />.ValueConditionLess than zero<paramref name="strA" /> is less than <paramref name="strB" />.Zero<paramref name="strA" /> equals <paramref name="strB" />.Greater than zero<paramref name="strA" /> is greater than <paramref name="strB" />.</returns>
      <param name="strA">The first string.  </param>
      <param name="strB">The second string.</param>
      <param name="culture">The culture that supplies culture-specific comparison information.</param>
      <param name="options">Options, such as ignoring case or symbols, to use when performing the comparison.  </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>Compares two specified <see cref="T:System.String" /> objects using the specified string comparison options and returns an integer that indicates their relationship to one another in the sort order.</summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> equals <paramref name="strB" />. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" /> object.</param>
      <param name="strB">The second <see cref="T:System.String" /> object. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> is not supported.</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring. </summary>
      <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.ValueCondition Less than zero The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />. Zero The substrings are equal, or <paramref name="length" /> is zero. Greater than zero The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" />. </param>
      <param name="indexA">The starting index of the substring in <paramref name="strA" />. </param>
      <param name="strB">The second <see cref="T:System.String" />. </param>
      <param name="indexB">The starting index of the substring in <paramref name="strB" />. </param>
      <param name="length">The maximum number of characters in the substrings to compare. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> is greater than <paramref name="strA" />. <see cref="P:System.String.Length" />.-or- <paramref name="indexB" /> is greater than <paramref name="strB" />. <see cref="P:System.String.Length" />.-or- <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative. </exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string and returns an integer that indicates their relative position in the sort order.</summary>
      <returns>An integer indicating the lexical relationship between the two comparands.ValueCondition Less than zero <paramref name="strA" /> is less than <paramref name="strB" />. Zero <paramref name="strA" /> and <paramref name="strB" /> are equal. Greater than zero <paramref name="strA" /> is greater than <paramref name="strB" />. </returns>
      <param name="strA">The first <see cref="T:System.String" />. </param>
      <param name="strB">The second <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</summary>
      <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.Value Condition Less than zero This instance precedes <paramref name="value" />. Zero This instance has the same position in the sort order as <paramref name="value" />. Greater than zero This instance follows <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An <see cref="T:System.Object" /> that evaluates to a String. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.String" />. </exception>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.String" />.</summary>
      <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.Value Condition Less than zero This instance precedes <paramref name="strB" />. Zero This instance has the same position in the sort order as <paramref name="strB" />. Greater than zero This instance follows <paramref name="strB" />.-or- <paramref name="strB" /> is null. </returns>
      <param name="strB">A <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>Creates the <see cref="T:System.String" /> representation of a specified object.</summary>
      <returns>The <see cref="T:System.String" /> representation of the value of <paramref name="arg0" />.</returns>
      <param name="arg0">An <see cref="T:System.Object" /> or null. </param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>Concatenates the <see cref="T:System.String" /> representations of two specified objects.</summary>
      <returns>The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
      <param name="arg0">The first <see cref="T:System.Object" />. </param>
      <param name="arg1">The second <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>Concatenates the <see cref="T:System.String" /> representations of three specified objects.</summary>
      <returns>The concatenated <see cref="T:System.String" /> representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
      <param name="arg0">The first <see cref="T:System.Object" />. </param>
      <param name="arg1">The second <see cref="T:System.Object" />. </param>
      <param name="arg2">The third <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>Concatenates the <see cref="T:System.String" /> representations of the elements in a specified <see cref="T:System.Object" /> array.</summary>
      <returns>The concatenated <see cref="T:System.String" /> representations of the values of the elements in <paramref name="args" />.</returns>
      <param name="args">An <see cref="T:System.Object" /> array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>Concatenates two specified instances of <see cref="T:System.String" />.</summary>
      <returns>The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</returns>
      <param name="str0">The first <see cref="T:System.String" />. </param>
      <param name="str1">The second <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>Concatenates three specified instances of <see cref="T:System.String" />.</summary>
      <returns>The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</returns>
      <param name="str0">The first <see cref="T:System.String" />. </param>
      <param name="str1">The second <see cref="T:System.String" />. </param>
      <param name="str2">The third <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>Concatenates four specified instances of <see cref="T:System.String" />.</summary>
      <returns>The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</returns>
      <param name="str0">The first <see cref="T:System.String" />. </param>
      <param name="str1">The second <see cref="T:System.String" />. </param>
      <param name="str2">The third <see cref="T:System.String" />. </param>
      <param name="str3">The fourth <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>Concatenates the elements of a specified <see cref="T:System.String" /> array.</summary>
      <returns>The concatenated elements of <paramref name="values" />.</returns>
      <param name="values">An array of <see cref="T:System.String" /> instances. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>Returns a value indicating whether the specified <see cref="T:System.String" /> object occurs within this string.</summary>
      <returns>true if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, false.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</summary>
      <returns>A new <see cref="T:System.String" /> with the same value as <paramref name="str" />.</returns>
      <param name="str">The <see cref="T:System.String" /> to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</summary>
      <param name="sourceIndex">A character position in this instance. </param>
      <param name="destination">An array of Unicode characters. </param>
      <param name="destinationIndex">An array element in <paramref name="destination" />. </param>
      <param name="count">The number of characters in this instance to copy to <paramref name="destination" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative -or- <paramref name="count" /> is greater than the length of the substring from <paramref name="startIndex" /> to the end of this instance -or- <paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of <paramref name="destination" /></exception>
    </member>
    <member name="F:System.String.Empty">
      <summary>Represents the empty string. This field is read-only.</summary>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>Determines whether the end of this instance matches the specified string.</summary>
      <returns>true if <paramref name="value" /> matches the end of this instance; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> to compare to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>Determines whether the end of this string matches the specified string when compared using the specified comparison option.</summary>
      <returns>true if the <paramref name="value" /> parameter matches the end of this string; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> object to compare to. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values that determines how this string and <paramref name="value" /> are compared. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.String" /> and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</summary>
      <returns>true if the value of the <paramref name="value" /> parameter is the same as this instance; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" />. </param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.String" /> or null. </param>
      <param name="b">A <see cref="T:System.String" /> or null. </param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</summary>
      <returns>true if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.String" /> object or null. </param>
      <param name="b">A <see cref="T:System.String" /> object or null. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>Determines whether this string and a specified <see cref="T:System.String" /> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</summary>
      <returns>true if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> object.</param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value. </exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>Replaces the format item in a specified string with the text equivalent of the value of a corresponding object in a specified array. A specified parameter supplies culture-specific formatting information.</summary>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific formatting information. </param>
      <param name="format">A composite format string. </param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
      <returns>A copy of <paramref name="format" /> in which the first format item has been replaced by the string representation of <paramref name="arg0" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">An object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">The format item in <paramref name="format" /> is invalid.-or- The index of a format item is greater or less than zero. </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>Replaces the format item in a specified string with the string representations of two specified objects.</summary>
      <returns>A copy of <paramref name="format" /> in which format items have been replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to format. </param>
      <param name="arg1">The second object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than one. </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>Replaces the format items in a specified string with the string representation of three specified objects.</summary>
      <returns>A copy of <paramref name="format" /> in which the first, second, and third format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="arg0">The first object to format. </param>
      <param name="arg1">The second object to format. </param>
      <param name="arg2">The third object to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than two. </exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</summary>
      <returns>A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</returns>
      <param name="format">A composite format string. </param>
      <param name="args">An object array that contains zero or more objects to format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> or <paramref name="args" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array. </exception>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.String" />.</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>Reports the index of the first occurrence of the specified Unicode character in this string.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>Reports the index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position beyond the end of this instance. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Reports the index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> + <paramref name="startIndex" /> specifies a position beyond the end of this instance. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>Reports the index of the first occurrence of the specified <see cref="T:System.String" /> in this instance.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</returns>
      <param name="value">The <see cref="T:System.String" /> to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>Reports the index of the first occurrence of the specified <see cref="T:System.String" /> in this instance. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> specifies a position not within this instance. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>Reports the index of the first occurrence of the specified <see cref="T:System.String" /> in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> plus <paramref name="startIndex" /> specify a position not within this instance. </exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> plus <paramref name="startIndex" /> specify a position that is not within this instance. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative, or specifies a position that is not within this instance. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>Reports the index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</summary>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance. </exception>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>Inserts a specified instance of <see cref="T:System.String" /> at a specified index position in this instance.</summary>
      <returns>A new <see cref="T:System.String" /> equivalent to this instance but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</returns>
      <param name="startIndex">The index position of the insertion. </param>
      <param name="value">The <see cref="T:System.String" /> to insert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is negative or greater than the length of this instance. </exception>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>Retrieves the system's reference to the specified <see cref="T:System.String" />.</summary>
      <returns>If the value of <paramref name="str" /> is already interned, the system's reference is returned; otherwise, a new reference to a string with the value of <paramref name="str" /> is returned.</returns>
      <param name="str">A <see cref="T:System.String" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>Retrieves a reference to a specified <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> reference to <paramref name="str" /> if it is in the common language runtime "intern pool"; otherwise null.</returns>
      <param name="str">A <see cref="T:System.String" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> is null. </exception>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>Indicates whether the specified <see cref="T:System.String" /> object is null or an <see cref="F:System.String.Empty" /> string.</summary>
      <returns>true if the <paramref name="value" /> parameter is null or an empty string (""); otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> reference. </param>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified <see cref="T:System.String" /> array, yielding a single concatenated string.</summary>
      <returns>A <see cref="T:System.String" /> consisting of the elements of <paramref name="value" /> interspersed with the <paramref name="separator" /> string.</returns>
      <param name="separator">A <see cref="T:System.String" />. </param>
      <param name="value">An array of <see cref="T:System.String" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified <see cref="T:System.String" /> array, yielding a single concatenated string. Parameters specify the first array element and number of elements to use.</summary>
      <returns>A <see cref="T:System.String" /> object consisting of the strings in <paramref name="value" /> joined by <paramref name="separator" />. Or, <see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.</returns>
      <param name="separator">A <see cref="T:System.String" />. </param>
      <param name="value">An array of <see cref="T:System.String" />. </param>
      <param name="startIndex">The first array element in <paramref name="value" /> to use. </param>
      <param name="count">The number of elements of <paramref name="value" /> to use. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.-or- <paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>Reports the index position of the last occurrence of a specified Unicode character within this instance.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>Reports the index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <param name="startIndex">The starting position of a substring within this instance. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>Reports the index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</returns>
      <param name="value">A Unicode character to seek. </param>
      <param name="startIndex">The starting position of a substring within this instance. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.-or-<paramref name="startIndex" /> + 1 - <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> within this instance.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</returns>
      <param name="value">A <see cref="T:System.String" /> to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> within this instance. The search starts at a specified character position.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position not within this instance. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> within this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this instance.-or-<paramref name="startIndex" /> + 1 minus <paramref name="count" /> specifies a position that is not within this instance. </exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>Reports the index position of the last occurrence of a specified <see cref="T:System.String" /> object within this instance. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> is greater than the length of this instance.-or-<paramref name="startIndex" /> +1 - <paramref name="count" /> specifies a position that is not within this instance. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>Reports the index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. Parameters specify the starting search position in the current string, and type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or specifies a position that is not within this instance. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>Reports the index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object. A parameter specifies the type of search to use for the specified string.</summary>
      <returns>The zero-based index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not. If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</returns>
      <param name="value">The <see cref="T:System.String" /> object to seek. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</summary>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position.</summary>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> specifies a position not within this instance. </exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>Reports the index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and examines a specified number of character positions.</summary>
      <returns>The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; otherwise, -1 if no character in <paramref name="anyOf" /> was found.</returns>
      <param name="anyOf">A Unicode character array containing one or more characters to seek. </param>
      <param name="startIndex">The search starting position. </param>
      <param name="count">The number of character positions to examine. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="startIndex" /> is negative.-or- <paramref name="startIndex" /> minus <paramref name="count" /> specify a position that is not within this instance. </exception>
    </member>
    <member name="P:System.String.Length">
      <summary>Gets the number of characters in the current <see cref="T:System.String" /> object.</summary>
      <returns>The number of characters in this instance.</returns>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">A <see cref="T:System.String" /> or null. </param>
      <param name="b">A <see cref="T:System.String" /> or null. </param>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>Determines whether two specified <see cref="T:System.String" /> objects have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">A String or null. </param>
      <param name="b">A String or null. </param>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>Right-aligns the characters in this instance, padding with spaces on the left for a specified total length.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> object that is identical to this instance.</returns>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>Right-aligns the characters in this instance, padding on the left with a specified Unicode character for a specified total length.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.</returns>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <param name="paddingChar">A Unicode padding character. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>Returns a new string of a specified length in which the end of the string is padded with spaces or a specified Unicode character.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.</returns>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>Left-aligns the characters in this string, padding on the right with a specified Unicode character, for a specified total length.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />. Or, if <paramref name="totalWidth" /> is less than the length of this instance, a new <see cref="T:System.String" /> that is identical to this instance.</returns>
      <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>
      <param name="paddingChar">A Unicode padding character. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>Deletes all the characters from this string beginning at a specified position and continuing through the last position.</summary>
      <returns>A new <see cref="T:System.String" /> object that is equivalent to this string without the removed characters.</returns>
      <param name="startIndex">The zero-based position to begin deleting characters.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero.-or- <paramref name="startIndex" /> specifies a position that is not within this string. </exception>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>Deletes a specified number of characters from this instance beginning at a specified position.</summary>
      <returns>A new <see cref="T:System.String" /> that is equivalent to this instance less <paramref name="count" /> number of characters.</returns>
      <param name="startIndex">The zero-based position to begin deleting characters. </param>
      <param name="count">The number of characters to delete. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.-or- <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance. </exception>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>Returns a new string in which all occurrences of a specified Unicode character in the current string are replaced with another specified Unicode character.</summary>
      <returns>A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />.</returns>
      <param name="oldChar">A Unicode character to be replaced. </param>
      <param name="newChar">A Unicode character to replace all occurrences of <paramref name="oldChar" />. </param>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>Returns a new string in which all occurrences of a specified string in the current string are replaced with another specified string.</summary>
      <returns>A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</returns>
      <param name="oldValue">A string to be replaced. </param>
      <param name="newValue">A string to replace all occurrences of <paramref name="oldValue" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> is the empty string (""). </exception>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>Returns a string array that contains the substrings in this instance that are delimited by elements of a specified Unicode character array.</summary>
      <returns>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array that contains no delimiters, or null. </param>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>Returns a string array that contains the substrings in this string that are delimited by elements of a specified Unicode character array. A parameter specifies whether to return empty array elements.</summary>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or null.</param>
      <param name="options">A flag that indicates whether to include empty elements in the returned array. Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty elements from the returned array. Specify <see cref="F:System.StringSplitOptions.None" /> to include empty elements in the returned array.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is a member of the <see cref="T:System.StringSplitOptions" /> enumeration.</exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>Returns a string array that contains the substrings in this string that are delimited by elements of a specified string array. A parameter specifies whether to return empty array elements.</summary>
      <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />. For more information, see the Remarks section.</returns>
      <param name="separator">An array of strings that delimits the substrings in this string, an empty array that contains no delimiters, or null. </param>
      <param name="options">A flag that indicates whether to include empty elements in the returned array. Specify <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the returned array. Specify <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the returned array. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> is not a member of the <see cref="T:System.StringSplitOptions" /> enumeration.</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>Determines whether the beginning of this instance matches the specified string.</summary>
      <returns>true if <paramref name="value" /> matches the beginning of this string; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.String" /> to compare. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>Determines whether the beginning of this string matches the specified string when compared using the specified comparison option.</summary>
      <returns>true if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, false.</returns>
      <param name="value">A <see cref="T:System.String" /> object to compare to. </param>
      <param name="comparisonType">One of the <see cref="T:System.StringComparison" /> values that determines how this string and <paramref name="value" /> are compared. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>Retrieves a substring from this instance. The substring starts at a specified character position.</summary>
      <returns>A <see cref="T:System.String" /> object equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</returns>
      <param name="startIndex">The zero-based starting character position of a substring in this instance. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is less than zero or greater than the length of this instance. </exception>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</summary>
      <returns>A <see cref="T:System.String" /> equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</returns>
      <param name="startIndex">The zero-based starting character position of a substring in this instance. </param>
      <param name="length">The number of characters in the substring. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.-or- <paramref name="startIndex" /> or <paramref name="length" /> is less than zero. </exception>
    </member>
    <member name="M:System.String.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the current <see cref="T:System.String" /> object. </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Char" /> that can be used to iterate through the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the current <see cref="T:System.String" /> object. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
      <returns>true if the value of the current <see cref="T:System.String" /> object is <see cref="F:System.Boolean.TrueString" />, or false if the value of the current <see cref="T:System.String" /> object is <see cref="F:System.Boolean.FalseString" />.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
      <returns>The character at index 0 in the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="type">The type of the returned object. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter. </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that provides culture-specific formatting information. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. </param>
      <exception cref="T:System.FormatException">The value of the current <see cref="T:System.String" /> object cannot be parsed. </exception>
      <exception cref="T:System.OverflowException">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
      <returns>The converted value of the current <see cref="T:System.String" /> object.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object. </param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>Copies the characters in this instance to a Unicode character array.</summary>
      <returns>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</returns>
    </member>
    <member name="M:System.String.ToLower">
      <summary>Returns a copy of this <see cref="T:System.String" /> converted to lowercase, using the casing rules of the invariant culture.</summary>
      <returns>A <see cref="T:System.String" /> in lowercase.</returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>Returns a copy of this <see cref="T:System.String" /> converted to lowercase, using the casing rules of the specified culture.</summary>
      <returns>A <see cref="T:System.String" /> in lowercase.</returns>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
    </member>
    <member name="M:System.String.ToString">
      <summary>Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</summary>
      <returns>This <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</summary>
      <returns>This <see cref="T:System.String" />.</returns>
      <param name="provider">(Reserved) An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>Returns a copy of this <see cref="T:System.String" /> converted to uppercase, using the casing rules of the invariant culture.</summary>
      <returns>A <see cref="T:System.String" /> in uppercase.</returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>Returns a copy of this <see cref="T:System.String" /> converted to uppercase, using the casing rules of the specified culture.</summary>
      <returns>A <see cref="T:System.String" /> in uppercase.</returns>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object that supplies culture-specific casing rules. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null. </exception>
    </member>
    <member name="M:System.String.Trim">
      <summary>Removes all leading and trailing white-space characters from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all white-space characters are removed from the start and end of the current <see cref="T:System.String" /> object.</returns>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null or an empty array, white-space characters are removed instead.</returns>
      <param name="trimChars">An array of Unicode characters to remove or null. </param>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null or an empty array, white-space characters are removed instead.</returns>
      <param name="trimChars">An array of Unicode characters to remove or null. </param>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>Removes all leading occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</summary>
      <returns>The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current <see cref="T:System.String" /> object. If <paramref name="trimChars" /> is null or an empty array, white-space characters are removed instead.</returns>
      <param name="trimChars">An array of Unicode characters to remove or null. </param>
    </member>
    <member name="T:System.StringComparer">
      <summary>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.StringComparer" /> class. </summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</summary>
      <returns>ValueMeaningLess than zero<paramref name="x" /> is less than <paramref name="y" />. -or-<paramref name="x" /> is null.Zero<paramref name="x" /> is equal to <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.-or-<paramref name="y" /> is null.</returns>
      <param name="x">An object to compare to <paramref name="y" />.</param>
      <param name="y">An object to compare to <paramref name="x" />.</param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</summary>
      <returns>ValueMeaningLess than zero<paramref name="x" /> is less than <paramref name="y" />.-or-<paramref name="x" /> is null.Zero<paramref name="x" /> is equal to <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.-or-<paramref name="y" /> is null.</returns>
      <param name="x">A string to compare to <paramref name="y" />.</param>
      <param name="y">A string to compare to <paramref name="x" />.</param>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</returns>
      <param name="culture">A culture whose linguistic rules are used to perform a string comparison.</param>
      <param name="ignoreCase">true to specify that comparison operations be case-insensitive; false to specify that comparison operations be case-sensitive.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> is null.</exception>
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>When overridden in a derived class, indicates whether two objects are equal.</summary>
      <returns>true if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal; otherwise, false.</returns>
      <param name="x">An object to compare to <paramref name="y" />.</param>
      <param name="y">An object to compare to <paramref name="x" />.</param>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>When overridden in a derived class, indicates whether two strings are equal.</summary>
      <returns>true if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal; otherwise, false.</returns>
      <param name="x">A string to compare to <paramref name="y" />.</param>
      <param name="y">A string to compare to <paramref name="x" />.</param>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>When overridden in a derived class, gets the hash code for the specified object.</summary>
      <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</returns>
      <param name="obj">An object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>When overridden in a derived class, gets the hash code for the specified string.</summary>
      <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</returns>
      <param name="obj">A string.</param>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</summary>
      <returns>A new <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</summary>
      <returns>A <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</summary>
      <returns>A <see cref="T:System.StringComparer" /> object.</returns>
    </member>
    <member name="T:System.StringComparison">
      <summary>Specifies the culture, case, and sort rules to be used by certain overloads of the <see cref="M:System.String.Compare(System.String,System.String)" /> and <see cref="M:System.String.Equals(System.Object)" /> methods.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>Compare strings using culture-sensitive sort rules and the current culture.</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
      <summary>Compare strings using culture-sensitive sort rules and the invariant culture.</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
      <summary>Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>Compare strings using ordinal sort rules.</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>Compare strings using ordinal sort rules and ignoring the case of the strings being compared.</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>Specifies whether methods that split delimited substrings include or omit empty substrings from the returned array.</summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>The return value includes array elements that contain an empty string</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>The return value does not include array elements that contain an empty string</summary>
    </member>
    <member name="T:System.SystemException">
      <summary>Defines the base class for predefined exceptions in the <see cref="N:System" /> namespace.</summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class.</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.SystemException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>Indicates that the value of a static field is unique for each thread.</summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ThreadStaticAttribute" /> class.</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>The exception that is thrown when the time allotted for a process or operation has expired.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class.</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TimeoutException" /> class with the specified error message and inner exception.</summary>
      <param name="message">The message that describes the error. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>Represents a time interval.</summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of hours, minutes, and seconds.</summary>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of days, hours, minutes, and seconds.</summary>
      <param name="days">Number of days. </param>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.TimeSpan" /> to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
      <param name="days">Number of days. </param>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <param name="milliseconds">Number of milliseconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>Initializes a new <see cref="T:System.TimeSpan" /> to the specified number of ticks.</summary>
      <param name="ticks">A time period expressed in 100-nanosecond units. </param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>Adds the specified <see cref="T:System.TimeSpan" /> to this instance.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the value of this instance plus the value of <paramref name="ts" />.</returns>
      <param name="ts">A <see cref="T:System.TimeSpan" />. </param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that indicates whether the first time interval is longer than, equal to, or shorter than the second time interval.</summary>
      <returns>Value Condition -1 <paramref name="t1" /> is shorter than <paramref name="t2" />0 <paramref name="t1" /> is equal to <paramref name="t2" />1 <paramref name="t1" /> is longer than <paramref name="t2" /></returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A <see cref="T:System.TimeSpan" />. </param>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the time interval represented by this instance is longer than, equal to, or shorter than the time interval represented by the specified object.</summary>
      <returns>Value Condition -1 The value of this instance is shorter than the value of <paramref name="value" />. 0 The value of this instance is equal to the value of <paramref name="value" />. 1 The value of this instance is longer than the value of <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.TimeSpan" />. </exception>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>Compares this instance to a specified <see cref="T:System.TimeSpan" /> object and returns an integer that indicates whether the time interval represented by this instance is longer than, equal to, or shorter than the time interval represented by the specified <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Value Description A negative integer This instance is shorter than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. A positive integer This instance is longer than <paramref name="value" />. </returns>
      <param name="value">A <see cref="T:System.TimeSpan" /> object to compare to this instance.</param>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The day component of this instance. The return value can be positive or negative.</returns>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>A new <see cref="T:System.TimeSpan" /> whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</returns>
      <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.TimeSpan" /> object that represents the same time interval as the current <see cref="T:System.TimeSpan" /> structure; otherwise, false.</returns>
      <param name="value">An object to compare with this instance. </param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>true if <paramref name="obj" /> represents the same time interval as this instance; otherwise, false.</returns>
      <param name="obj">An <see cref="T:System.TimeSpan" /> object to compare with this instance. </param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>Returns a value indicating whether two specified instances of <see cref="T:System.TimeSpan" /> are equal.</summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, false.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A TimeSpan. </param>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</returns>
      <param name="value">A number of days, accurate to the nearest millisecond. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</returns>
      <param name="value">A number of hours accurate to the nearest millisecond. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. -or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</returns>
      <param name="value">A number of milliseconds. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</returns>
      <param name="value">A number of minutes, accurate to the nearest millisecond. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents <paramref name="value" />.</returns>
      <param name="value">A number of seconds, accurate to the nearest millisecond. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />. </exception>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> with a value of <paramref name="value" />.</returns>
      <param name="value">A number of ticks that represent a time. </param>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>Gets the hour component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The hour component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -23 through 23.</returns>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>Gets the millisecond component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The millisecond component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -999 through 999.</returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>Gets the minute component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The minute component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</returns>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of this instance.</summary>
      <returns>The same numeric value as this instance, but with the opposite sign.</returns>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>Adds two specified <see cref="T:System.TimeSpan" /> instances.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> whose value is the sum of the values of <paramref name="t1" /> and <paramref name="t2" />.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A <see cref="T:System.TimeSpan" />. </param>
      <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.</summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, false.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A TimeSpan. </param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>true if the value of <paramref name="t1" /> is greater than the value of <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A TimeSpan. </param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>true if the value of <paramref name="t1" /> is greater than or equal to the value of <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A TimeSpan. </param>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.</summary>
      <returns>true if the values of <paramref name="t1" /> and <paramref name="t2" /> are not equal; otherwise, false.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A TimeSpan. </param>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>true if the value of <paramref name="t1" /> is less than the value of <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A TimeSpan. </param>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>true if the value of <paramref name="t1" /> is less than or equal to the value of <paramref name="t2" />; otherwise, false.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A TimeSpan. </param>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified <see cref="T:System.TimeSpan" />.</summary>
      <returns>A TimeSpan whose value is the result of the value of <paramref name="t1" /> minus the value of <paramref name="t2" />.</returns>
      <param name="t1">A <see cref="T:System.TimeSpan" />. </param>
      <param name="t2">A TimeSpan. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the specified instance.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> with the same numeric value as this instance, but the opposite sign.</returns>
      <param name="t">A <see cref="T:System.TimeSpan" />. </param>
      <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue" />. </exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>Returns the specified instance of <see cref="T:System.TimeSpan" />.</summary>
      <returns>Returns <paramref name="t" /> unchanged.</returns>
      <param name="t">A <see cref="T:System.TimeSpan" />. </param>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>Constructs a new <see cref="T:System.TimeSpan" /> object from a time interval specified in a string.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that corresponds to <paramref name="s" />.</returns>
      <param name="s">A string that specifies a time interval. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> has an invalid format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range. </exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>Gets the second component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The second component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>Subtracts the specified <see cref="T:System.TimeSpan" /> from this instance.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> whose value is the result of the value of this instance minus the value of <paramref name="ts" />.</returns>
      <param name="ts">A <see cref="T:System.TimeSpan" />. </param>
      <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>Gets the number of ticks that represents the value of the current <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>The number of ticks contained in this instance.</returns>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>Represents the number of ticks in 1 day. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>Represents the number of ticks in 1 hour. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>Represents the number of ticks in 1 millisecond. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>Represents the number of ticks in 1 minute. This field is constant.</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>Represents the number of ticks in 1 second.</summary>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>Returns the string representation of the value of this instance.</summary>
      <returns>A string that represents the value of this instance. The return value is of the form: [-][d.]hh:mm:ss[.fffffff] Elements in square brackets ([ and ]) may not be included in the returned string. Colons and periods (: and.) are literal characters. The non-literal elements are listed in the following table.Item Description "-" A minus sign, which indicates a negative time span. No sign is included for a positive time span."d" The number of days in the time span. This element is omitted if the time span is less than one day. "hh" The number of hours in the time span, ranging from 0 to 23. "mm" The number of minutes in the time span, ranging from 0 to 59. "ss" The number of seconds in the time span, ranging from 0 to 59. "ff" Fractional seconds in the time span. This element is omitted if the time span does not include fractional seconds. If present, fractional seconds are always expressed using 7 decimal digits. Note:For more information about comparing the string representation of <see cref="T:System.TimeSpan" /> and Oracle data types, see article Q324577, "System.TimeSpan Does Not Match Oracle 9i INTERVAL DAY TO SECOND Data Type," in the Microsoft Knowledge Base at http://support.microsoft.com.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional days.</summary>
      <returns>The total number of days represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional hours.</summary>
      <returns>The total number of hours represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional milliseconds.</summary>
      <returns>The total number of milliseconds represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional minutes.</summary>
      <returns>The total number of minutes represented by this instance.</returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional seconds.</summary>
      <returns>The total number of seconds represented by this instance.</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>Constructs a new <see cref="T:System.TimeSpan" /> object from a time interval specified in a string. Parameters specify the time interval and the variable where the new <see cref="T:System.TimeSpan" /> object is returned. </summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false. This operation returns false if the <paramref name="s" /> parameter is null, has an invalid format, represents a time interval less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
      <param name="s">A string that specifies a time interval.</param>
      <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s" />, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
    </member>
    <member name="T:System.Type">
      <summary>Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</summary>
      <returns>An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>Gets the assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</summary>
      <returns>The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or null if the current instance represents a generic type parameter.</returns>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>Gets the attributes associated with the <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified. </returns>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</summary>
      <returns>The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or null if the current Type represents the <see cref="T:System.Object" /> class or an interface.</returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</summary>
      <returns>true if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</summary>
      <returns>If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, null.</returns>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>Gets the type that declares the current nested type or generic type parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, null.</returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</summary>
      <returns>A reference to the default binder used by the system.</returns>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>Separates names in the namespace of the <see cref="T:System.Type" />. This field is read-only.</summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>Represents an empty array of type <see cref="T:System.Type" />. This field is read-only.</summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" />.</summary>
      <returns>true if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, false. This method also returns false if the object specified by the <paramref name="o" /> parameter is not a Type.</returns>
      <param name="o">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />. </param>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</summary>
      <returns>true if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />. </param>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>Represents the case-insensitive member filter used on names. This field is read-only.</summary>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</summary>
      <returns>A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</returns>
      <param name="memberType">A MemberTypes object indicating the type of member to search for. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="filter">The delegate that does the comparisons, returning true if the member currently being inspected matches the <paramref name="filterCriteria" /> and false otherwise. You can use the FilterAttribute, FilterName, and FilterNameIgnoreCase delegates supplied by this class. The first uses the fields of FieldAttributes, MethodAttributes, and MethodImplAttributes as search criteria, and the other two delegates use String objects as the search criteria. </param>
      <param name="filterCriteria">The search criteria that determines whether a member is returned in the array of MemberInfo objects.The fields of FieldAttributes, MethodAttributes, and MethodImplAttributes can be used in conjunction with the FilterAttribute delegate supplied by this class. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is null. </exception>
    </member>
    <member name="P:System.Type.FullName">
      <summary>Gets the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</summary>
      <returns>The fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter. </summary>
      <returns>A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns false.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</summary>
      <returns>The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.</returns>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a type parameter. That is, <see cref="P:System.Type.IsGenericParameter" /> returns false. </exception>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>Gets the number of dimensions in an <see cref="T:System.Array" />.</summary>
      <returns>An <see cref="T:System.Int32" /> containing the number of dimensions in the current Type.</returns>
      <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. </exception>
      <exception cref="T:System.ArgumentException">The current Type is not an array. </exception>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.-or- <see cref="F:System.Type.EmptyTypes" />. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>Searches for a public instance constructor whose parameters match the types in the specified array.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.</returns>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.-or- An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters. Such an empty array is provided by the static field <see cref="F:System.Type.EmptyTypes" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <returns>A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>Returns all the public constructors defined for the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor). If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified BindingFlags.</summary>
      <returns>An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</summary>
      <returns>The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</summary>
      <returns>The <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event which is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</summary>
      <returns>The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event which is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events which are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>Searches for the public field with the specified name.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called. </exception>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified field, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the data field to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>Returns all the public fields of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type or the type parameters of a generic type definition.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter. </summary>
      <returns>An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</returns>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> object is not a generic type parameter. That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns false.</exception>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</summary>
      <returns>A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</returns>
      <exception cref="T:System.InvalidOperationException">The current type is not a generic type.  That is, <see cref="P:System.Type.IsGenericType" /> returns false. </exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>An <see cref="T:System.Int32" /> containing the hash code for this instance.</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the interface to get. For generic interfaces, this is the mangled name.</param>
      <param name="ignoreCase">true to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).-or- false to perform a case-sensitive search for all parts of <paramref name="name" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments. </exception>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>Returns an interface mapping for the specified interface type.</summary>
      <returns>An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</returns>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="interfaceType" /> parameter does not refer to an interface. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is true.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception. </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>Searches for the public members with the specified name.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public members to get. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified members, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return an empty array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Searches for the specified members of the specified member type, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the members to get. </param>
      <param name="type">The <see cref="T:System.Reflection.MemberTypes" /> value to search for. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return an empty array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">A derived class must provide an implementation. </exception>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>Returns all the public members of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>Searches for the public method with the specified name.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified method, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>Searches for the specified public method whose parameters match the specified argument types.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public method whose parameters match the specified argument types and modifiers.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public method to get. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.  </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional. </exception>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the method to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="callConvention">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.-or- null. If <paramref name="types" /> is null, arguments are not matched. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>Returns all the public methods of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The string containing the name of the nested type to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>Returns all the public properties of the current <see cref="T:System.Type" />.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.-or- An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</returns>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>Searches for the public property with the specified name.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. See Remarks.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified property, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. See Remarks.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>Searches for the public property with the specified name and return type.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null, or <paramref name="returnType" /> is null. </exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional. </exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Searches for the specified public property whose parameters match the specified argument types and modifiers.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the public property to get. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types and modifiers. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
      <exception cref="T:System.NullReferenceException">An element of <paramref name="types" /> is null.</exception>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the property to get. </param>
      <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.-or- Zero, to return null. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="types">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array. The default binder does not process this parameter. </param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.-or- <paramref name="types" /> is null.-or- One of the elements in <paramref name="types" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length. </exception>
    </member>
    <member name="M:System.Type.GetType">
      <summary>Gets the current <see cref="T:System.Type" />.</summary>
      <returns>The current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</summary>
      <returns>The <see cref="T:System.Type" /> with the specified name, if found; otherwise, null.</returns>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-The assembly was compiled with a later version of the .NET Framework.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</summary>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section. </returns>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null. Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax. For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found.</exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-The assembly was compiled with a later version of the .NET Framework.</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</summary>
      <returns>The type with the specified name. If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />. See the Exceptions section. </returns>
      <param name="typeName">The assembly-qualified name of the type to get. See <see cref="P:System.Type.AssemblyQualifiedName" />. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
      <param name="throwOnError">true to throw an exception if the type cannot be found; false to return null. Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.</param>
      <param name="ignoreCase">true to perform a case-insensitive search for <paramref name="typeName" />, false to perform a case-sensitive search for <paramref name="typeName" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> is true and the type is not found. -or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> is an empty string.-or-<paramref name="throwOnError" /> is true and <paramref name="typeName" /> represents an array type with an invalid size. -or-<paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> is true and <paramref name="typeName" /> contains invalid syntax. For example, "MyType[,*,]".-or- <paramref name="typeName" /> represents a generic type that has a pointer type, a ByRef type, or <see cref="T:System.Void" /> as one of its type arguments.-or-<paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.-or-<paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> is true and the assembly or one of its dependencies was not found. </exception>
      <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded. </exception>
      <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-The assembly was compiled with a later version of the .NET Framework.</exception>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>Gets the underlying type code of the specified <see cref="T:System.Type" />.</summary>
      <returns>The <see cref="T:System.TypeCode" /> value of the underlying type.</returns>
      <param name="type">The <see cref="T:System.Type" /> whose underlying type code to get. </param>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>Gets the type referenced by the specified type handle.</summary>
      <returns>The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or null if the value of the handle is null.</returns>
      <param name="handle">The <see cref="T:System.RuntimeTypeHandle" /> object that refers to the type. </param>
      <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
    </member>
    <member name="P:System.Type.GUID">
      <summary>Gets the GUID associated with the <see cref="T:System.Type" />.</summary>
      <returns>The GUID associated with the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>Invokes the specified member, using the specified binding constraints and matching the specified argument list.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the invoked member.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. </param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be requird for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member. </param>
      <param name="args">An array containing the arguments to pass to the member to invoke. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> contains CreateInstance and <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> is multidimensional.-or- <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. -or- <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. -or- <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains both GetField and SetField.-or- <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
      <exception cref="T:System.MissingMethodException">The method cannot be found.-or- The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. </exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this method.</exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</summary>
      <returns>An <see cref="T:System.Object" /> representing the return value of the invoked member.</returns>
      <param name="name">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.-or- An empty string ("") to invoke the default member. -or-For IDispatch members, a string representing the DispID, for example "[DispID=3]".</param>
      <param name="invokeAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. </param>
      <param name="binder">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- null, to use the <see cref="P:System.Type.DefaultBinder" />. Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be requird for successfully invoking method overloads with variable arguments.</param>
      <param name="target">The <see cref="T:System.Object" /> on which to invoke the specified member. </param>
      <param name="args">An array containing the arguments to pass to the member to invoke. </param>
      <param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array. A parameter's associated attributes are stored in the member's signature. The default binder processes this parameter only when calling a COM component. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.-or- null to use the current thread's <see cref="T:System.Globalization.CultureInfo" />. </param>
      <param name="namedParameters">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> contains CreateInstance and <paramref name="typeName" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> is multidimensional.-or- <paramref name="modifiers" /> is multidimensional.-or- <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.-or- <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute. -or- <paramref name="invokeAttr" /> does not contain one of the following binding flags: InvokeMethod, CreateInstance, GetField, SetField, GetProperty, or SetProperty. -or- <paramref name="invokeAttr" /> contains CreateInstance combined with InvokeMethod, GetField, SetField, GetProperty, or SetProperty.-or- <paramref name="invokeAttr" /> contains both GetField and SetField.-or- <paramref name="invokeAttr" /> contains both GetProperty and SetProperty.-or- <paramref name="invokeAttr" /> contains InvokeMethod combined with SetField or SetProperty.-or- <paramref name="invokeAttr" /> contains SetField and <paramref name="args" /> has more than one element.-or- The named parameter array is larger than the argument array.-or- This method is called on a COM object and one of the following binding flags was not passed in: BindingFlags.InvokeMethod, BindingFlags.GetProperty, BindingFlags.SetProperty, BindingFlags.PutDispProperty, or BindingFlags.PutRefDispProperty.-or- One of the named parameter arrays contains a string that is null. </exception>
      <exception cref="T:System.MethodAccessException">The specified member is a class initializer. </exception>
      <exception cref="T:System.MissingFieldException">The field or property cannot be found. </exception>
      <exception cref="T:System.MissingMethodException">The method cannot be found.-or- The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true. </exception>
      <exception cref="T:System.Reflection.TargetException">The specified member cannot be invoked on <paramref name="target" />. </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method matches the binding criteria. </exception>
      <exception cref="T:System.InvalidOperationException">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters. That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns true.</exception>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</summary>
      <returns>true if the <see cref="T:System.Type" /> is abstract; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>Gets a value indicating whether the string format attribute AnsiClass is selected for the <see cref="T:System.Type" />.</summary>
      <returns>true if the string format attribute AnsiClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>Determines whether an instance of the current <see cref="T:System.Type" /> can be assigned from an instance of the specified Type.</summary>
      <returns>true if <paramref name="c" /> and the current Type represent the same type, or if the current Type is in the inheritance hierarchy of <paramref name="c" />, or if the current Type is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current Type represents one of the constraints of <paramref name="c" />. false if none of these conditions are true, or if <paramref name="c" /> is null.</returns>
      <param name="c">The Type to compare with the current Type. </param>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>Gets a value indicating whether the string format attribute AutoClass is selected for the <see cref="T:System.Type" />.</summary>
      <returns>true if the string format attribute AutoClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>Gets a value indicating whether the class layout attribute AutoLayout is selected for the <see cref="T:System.Type" />.</summary>
      <returns>true if the class layout attribute AutoLayout is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</summary>
      <returns>true if the <see cref="T:System.Type" /> is passed by reference; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsClass">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a class; that is, not a value type or interface.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a class; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a COM object; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</summary>
      <returns>true if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</summary>
      <returns>true if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>Gets a value indicating whether the current type is a generic type.</summary>
      <returns>true if the current type is a generic type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</summary>
      <returns>true if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsImport">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</summary>
      <returns>true if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</summary>
      <returns>true if the current Type is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current Type is an interface that <paramref name="o" /> supports. false if neither of these conditions is the case, or if <paramref name="o" /> is null, or if the current Type is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns true).</returns>
      <param name="o">The object to compare with the current Type. </param>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</summary>
      <returns>true if the <see cref="T:System.Type" /> is an interface; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</summary>
      <returns>true if the <see cref="T:System.Type" /> is nested and declared private; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>Gets a value indicating whether a class is nested and declared public.</summary>
      <returns>true if the class is nested and declared public; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</summary>
      <returns>true if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a pointer; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</summary>
      <returns>true if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</summary>
      <returns>true if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</summary>
      <returns>true if the <see cref="T:System.Type" /> is declared sealed; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsSpecialName">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> has a name that requires special handling.</summary>
      <returns>true if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>Determines whether the class represented by the current <see cref="T:System.Type" /> derives from the class represented by the specified <see cref="T:System.Type" />.</summary>
      <returns>true if the Type represented by the <paramref name="c" /> parameter and the current Type represent classes, and the class represented by the current Type derives from the class represented by <paramref name="c" />; otherwise, false. This method also returns false if <paramref name="c" /> and the current Type represent the same class.</returns>
      <param name="c">The Type to compare with the current Type. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="c" /> parameter is null. </exception>
    </member>
    <member name="P:System.Type.IsUnicodeClass">
      <summary>Gets a value indicating whether the string format attribute UnicodeClass is selected for the <see cref="T:System.Type" />.</summary>
      <returns>true if the string format attribute UnicodeClass is selected for the <see cref="T:System.Type" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a value type; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</summary>
      <returns>true if the <see cref="T:System.Type" /> is a value type; otherwise, false.</returns>
    </member>
    <member name="P:System.Type.IsVisible">
      <summary>Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</summary>
      <returns>true if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, false.</returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</summary>
      <returns>A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</summary>
      <returns>A <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</returns>
      <param name="rank">The number of dimensions for the array. </param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> is invalid. For example, 0 or negative.</exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</summary>
      <returns>A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</returns>
      <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type.</param>
      <exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition. That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns false. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> is null.-or- Any element of <paramref name="typeArguments" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.-or- Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. </exception>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents a pointer to the current type.</returns>
      <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class.</exception>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</summary>
      <returns>A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</returns>
    </member>
    <member name="F:System.Type.Missing">
      <summary>Represents a missing value in the <see cref="T:System.Type" /> information. This field is read-only.</summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</summary>
      <returns>The module in which the current <see cref="T:System.Type" /> is defined.</returns>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>Gets the namespace of the <see cref="T:System.Type" />.</summary>
      <returns>The namespace of the <see cref="T:System.Type" />; null if the current instance has no namespace, or represents a generic parameter.</returns>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>Gets the class object that was used to obtain this member. </summary>
      <returns>The Type object through which this MemberInfo object was obtained. </returns>
    </member>
    <member name="M:System.Type.ToString">
      <summary>Returns a String representing the name of the current Type.</summary>
      <returns>A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>Gets the handle for the current <see cref="T:System.Type" />.</summary>
      <returns>The handle for the current <see cref="T:System.Type" />.</returns>
      <exception cref="T:System.NotSupportedException">The .NET Compact Framework does not currently support this property.</exception>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>Indicates the type provided by the common language runtime that represents this type.</summary>
      <returns>The underlying system type for the <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.TypeCode">
      <summary>Specifies the type of an object.</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>A null reference.</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>A general type representing any reference or value type not explicitly represented by another TypeCode.</summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>A database null (column) value.</summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>A simple type representing Boolean values of true or false.</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the <see cref="F:System.TypeCode.Char" /> type corresponds to the Unicode character set.</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>An integral type representing signed 8-bit integers with values between -128 and 127.</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>An integral type representing unsigned 8-bit integers with values between 0 and 255.</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>An integral type representing signed 16-bit integers with values between -32768 and 32767.</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535.</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits.</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>A type representing a date and time value.</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>A sealed class type representing Unicode character strings.</summary>
    </member>
    <member name="T:System.TypedReference">
      <summary>Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location.</summary>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
      <summary>Checks if this object is equal to the specified object.</summary>
      <returns>true if this object is equal to the specified object; otherwise, false.</returns>
      <param name="o">The object with which to compare the current object. </param>
      <exception cref="T:System.NotSupportedException">This method is not implemented. </exception>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
      <summary>Returns the hash code of this object.</summary>
      <returns>The hash code of this object.</returns>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeInitializationException" /> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</summary>
      <param name="fullTypeName">The fully qualified name of the type that fails to initialize. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>Gets the fully qualified name of the type that fails to initialize.</summary>
      <returns>The fully qualified name of the type that fails to initialize.</returns>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>The exception that is thrown when type-loading failures occur.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class.</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.TypeLoadException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>Gets the error message for this exception.</summary>
      <returns>The error message string.</returns>
    </member>
    <member name="T:System.UInt16">
      <summary>Represents a 16-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt16" />. </exception>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>Compares this instance to a specified 16-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 16-bit unsigned integer.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An unsigned integer to compare. </param>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt16" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance. </param>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt16" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.UInt16" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt16" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt16" />.</returns>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt16" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt16" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>Converts the string representation of a number to its 16-bit unsigned integer equivalent.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 16-bit unsigned integer equivalent.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 16-bit unsigned integer equivalent.</summary>
      <returns>A 16-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of this instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The current value pf this instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.UInt16" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The current value of this instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. </param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid. </exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>Converts the string representation of a number to its 16-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="result">When this method returns, contains the 16-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in the correct format. , or represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.UInt32">
      <summary>Represents a 32-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt32" />. </exception>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>Compares this instance to a specified 32-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 32-bit unsigned integer.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An unsigned integer to compare. </param>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt32" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance. </param>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt32" />.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.UInt32" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt32" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt32" />.</returns>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt32" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt32" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>Converts the string representation of a number to its 32-bit unsigned integer equivalent.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not of the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 32-bit unsigned integer equivalent.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 32-bit unsigned integer equivalent.</summary>
      <returns>A 32-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct style.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.UInt32" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies culture-specific information about the format of the returned value.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. </param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>Converts the string representation of a number to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="result">When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.UInt64">
      <summary>Represents a 64-bit unsigned integer.</summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified object.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is null. </returns>
      <param name="value">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not a <see cref="T:System.UInt64" />. </exception>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>Compares this instance to a specified 64-bit unsigned integer and returns an integer that indicates whether the value of this instance is greater than, equal to, or less than the value of the specified 64-bit unsigned integer.</summary>
      <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.Return Value Description Less than zero This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. Greater than zero This instance is greater than <paramref name="value" />. </returns>
      <param name="value">An unsigned integer to compare. </param>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UInt64" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare to this instance. </param>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt64" /> value.</summary>
      <returns>true if <paramref name="obj" /> has the same value as this instance; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.UInt64" /> value to compare to this instance.</param>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.UInt64" />.</summary>
      <returns>The enumerated constant, <see cref="F:System.TypeCode.UInt64" />.</returns>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>Represents the largest possible value of <see cref="T:System.UInt64" />. This field is constant.</summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>Represents the smallest possible value of <see cref="T:System.UInt64" />. This field is constant.</summary>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>Converts the string representation of a number to its 64-bit unsigned integer equivalent.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number contained in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its 64-bit unsigned integer equivalent.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a format compliant with <paramref name="style" />. </exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its 64-bit unsigned integer equivalent.</summary>
      <returns>A 64-bit unsigned integer equivalent to the number specified in <paramref name="s" />.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in the correct format.</exception>
      <exception cref="T:System.OverflowException">The <paramref name="s" /> parameter represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />. </summary>
      <returns>true if the value of the current instance is not zero; otherwise, false.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
      <returns>This conversion is not supported. No value is returned.</returns>
      <param name="provider">This parameter is ignored.</param>
      <exception cref="T:System.InvalidCastException">In all cases.</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to an <see cref="T:System.SByte" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to <paramref name="type" />.</returns>
      <param name="type">The type to which to convert this <see cref="T:System.UInt64" /> value.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> implementation that supplies information about the format of the returned value.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />. </summary>
      <returns>The value of the current instance, unchanged.</returns>
      <param name="provider">This parameter is ignored.</param>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information. </param>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard numeric format string or a Custom Numeric Format Strings.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about this instance. </param>
      <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <paramref name="s" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s" />. </param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not in a format compliant with <paramref name="style" />, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>Converts the string representation of a number to its 64-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
      <returns>true if <paramref name="s" /> was converted successfully; otherwise, false.</returns>
      <param name="s">A string representing the number to convert. </param>
      <param name="result">When this method returns, contains the 64-bit unsigned integer value equivalent to the number contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <paramref name="s" /> parameter is null, is not of the correct format, or represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.UIntPtr">
      <summary>A platform-specific type that is used to represent a pointer or a handle.</summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.UIntPtr" /> structure using the specified 32-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified 64-bit pointer or handle.</summary>
      <param name="value">A pointer or handle contained in a 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />. </exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>Initializes a new instance of <see cref="T:System.UIntPtr" /> using the specified pointer to an unspecified type.</summary>
      <param name="value">A pointer to an unspecified type. </param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <returns>true if <paramref name="obj" /> is an instance of <see cref="T:System.UIntPtr" /> and equals the value of this instance; otherwise, false.</returns>
      <param name="obj">An object to compare with this instance or null. </param>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are equal.</summary>
      <returns>true if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, false.</returns>
      <param name="value1">A <see cref="T:System.UIntPtr" />. </param>
      <param name="value2">A <see cref="T:System.UIntPtr" />. </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>Converts the value of a 32-bit unsigned integer to an <see cref="T:System.UIntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A 32-bit unsigned integer. </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>Converts the value of a 64-bit unsigned integer to an <see cref="T:System.UIntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A 64-bit unsigned integer. </param>
      <exception cref="T:System.OverflowException">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.UIntPtr" />. </exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 32-bit unsigned integer.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.UIntPtr" />. </param>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit unsigned integer. </exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a 64-bit unsigned integer.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.UIntPtr" />. </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>Converts the value of the specified <see cref="T:System.UIntPtr" /> to a pointer to an unspecified type.</summary>
      <returns>The contents of <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.UIntPtr" />. </param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>Converts the specified pointer to an unspecified type to a <see cref="T:System.UIntPtr" />.</summary>
      <returns>A new instance of <see cref="T:System.UIntPtr" /> initialized to <paramref name="value" />.</returns>
      <param name="value">A pointer to an unspecified type. </param>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>Determines whether two specified instances of <see cref="T:System.UIntPtr" /> are not equal.</summary>
      <returns>true if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, false.</returns>
      <param name="value1">A <see cref="T:System.UIntPtr" />. </param>
      <param name="value2">A <see cref="T:System.UIntPtr" />. </param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>Gets the size of this instance.</summary>
      <returns>The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</returns>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>Converts the value of this instance to a pointer to an unspecified type.</summary>
      <returns>A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>Converts the value of this instance to a 32-bit unsigned integer.</summary>
      <returns>A 32-bit unsigned integer equal to the value of this instance.</returns>
      <exception cref="T:System.OverflowException">On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer. </exception>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>Converts the value of this instance to a 64-bit unsigned integer.</summary>
      <returns>A 64-bit unsigned integer equal to the value of this instance.</returns>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>A read-only field that represents a pointer or handle that has been initialized to zero.</summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>The exception that is thrown when the operating system denies access because of an I/O error or a specific type of security error. </summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class.</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.UnauthorizedAccessException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="inner">The exception that caused the current exception. If the <paramref name="inner" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>Provides data for the event that is raised when there is an exception that is not handled in any application domain.</summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</summary>
      <param name="exception">The exception that is not handled. </param>
      <param name="isTerminating">true if the runtime is terminating; otherwise, false. </param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>Gets the unhandled exception object.</summary>
      <returns>The unhandled exception object.</returns>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>Indicates whether the common language runtime is terminating.</summary>
      <returns>true if the runtime is terminating; otherwise, false.</returns>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>[SECURITY CRITICAL] Represents the method that will handle the event raised by an exception that is not handled by the application domain.</summary>
      <param name="sender">The source of the unhandled exception event. </param>
      <param name="e">The event data. </param>
    </member>
    <member name="T:System.ValueType">
      <summary>Provides the base class for value types.</summary>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ValueType" /> class. </summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
      <param name="obj">Another object to compare to. </param>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
    </member>
    <member name="T:System.Version">
      <summary>Represents the version number for a common language runtime assembly. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major and minor values.</summary>
      <param name="major">The major version number. </param>
      <param name="minor">The minor version number. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> or <paramref name="minor" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified major, minor, and build values.</summary>
      <param name="major">The major version number. </param>
      <param name="minor">The minor version number. </param>
      <param name="build">The build number. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, or <paramref name="build" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class with the specified major, minor, build, and revision numbers.</summary>
      <param name="major">The major version number. </param>
      <param name="minor">The minor version number. </param>
      <param name="build">The build number. </param>
      <param name="revision">The revision number. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />, <paramref name="minor" />, <paramref name="build" />, or <paramref name="revision" /> is less than zero. </exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Version" /> class using the specified string.</summary>
      <param name="version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.'). </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> has fewer than two components or more than four components. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A major, minor, build, or revision component is less than zero. </exception>
      <exception cref="T:System.FormatException">At least one component of <paramref name="version" /> does not parse to an integer. </exception>
      <exception cref="T:System.OverflowException">At least one component of <paramref name="version" /> represents a number greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>Gets the value of the build component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The build number, or -1 if the build number is undefined.</returns>
    </member>
    <member name="M:System.Version.Clone">
      <summary>Returns a new <see cref="T:System.Version" /> object whose value is the same as the current <see cref="T:System.Version" /> object.</summary>
      <returns>A new <see cref="T:System.Object" /> whose values are a copy of the current <see cref="T:System.Version" /> object.</returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Version" /> object to a specified object and returns an indication of their relative values.</summary>
      <returns>Return Value Description Less than zero The current <see cref="T:System.Version" /> object is a version before <paramref name="version" />. Zero The current <see cref="T:System.Version" /> object is the same version as <paramref name="version" />. Greater than zero The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="version" />.-or- <paramref name="version" /> is null. </returns>
      <param name="version">An object to compare, or null. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> is not of type <see cref="T:System.Version" />. </exception>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>Compares the current <see cref="T:System.Version" /> object to a specified <see cref="T:System.Version" /> object and returns an indication of their relative values.</summary>
      <returns>Return Value Description Less than zero The current <see cref="T:System.Version" /> object is a version before <paramref name="value" />. Zero The current <see cref="T:System.Version" /> object is the same version as <paramref name="value" />. Greater than zero The current <see cref="T:System.Version" /> object is a version subsequent to <paramref name="value" />. -or-<paramref name="value" /> is null.</returns>
      <param name="value">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or null.</param>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>Returns a value indicating whether the current <see cref="T:System.Version" /> object is equal to a specified object.</summary>
      <returns>true if the current <see cref="T:System.Version" /> object and <paramref name="obj" /> are both <see cref="T:System.Version" /> objects, and every component of the current <see cref="T:System.Version" /> object matches the corresponding component of <paramref name="obj" />; otherwise, false.</returns>
      <param name="obj">An object to compare with the current <see cref="T:System.Version" /> object, or null. </param>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>Returns a value indicating whether the current <see cref="T:System.Version" /> object and a specified <see cref="T:System.Version" /> object represent the same value.</summary>
      <returns>true if every component of the current <see cref="T:System.Version" /> object matches the corresponding component of the <paramref name="obj" /> parameter; otherwise, false.</returns>
      <param name="obj">A <see cref="T:System.Version" /> object to compare to the current <see cref="T:System.Version" /> object, or null.</param>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Version" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>Gets the value of the major component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The major version number.</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>Gets the value of the minor component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The minor version number.</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>Determines whether two specified <see cref="T:System.Version" /> objects are equal.</summary>
      <returns>true if <paramref name="v1" /> equals <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is greater than the second specified <see cref="T:System.Version" /> object.</summary>
      <returns>true if <paramref name="v1" /> is greater than <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is greater than or equal to the second specified <see cref="T:System.Version" /> object.</summary>
      <returns>true if <paramref name="v1" /> is greater than or equal to <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>Determines whether two specified <see cref="T:System.Version" /> objects are not equal.</summary>
      <returns>true if <paramref name="v1" /> does not equal <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is less than the second specified <see cref="T:System.Version" /> object.</summary>
      <returns>true if <paramref name="v1" /> is less than <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>Determines whether the first specified <see cref="T:System.Version" /> object is less than or equal to the second <see cref="T:System.Version" /> object.</summary>
      <returns>true if <paramref name="v1" /> is less than or equal to <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The first <see cref="T:System.Version" /> object. </param>
      <param name="v2">The second <see cref="T:System.Version" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> is null. </exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>Gets the value of the revision component of the version number for the current <see cref="T:System.Version" /> object.</summary>
      <returns>The revision number, or -1 if the revision number is undefined.</returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation.</summary>
      <returns>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined: major.minor[.build[.revision]] For example, if you create a <see cref="T:System.Version" /> object using the constructor Version(1,1), the returned string is "1.1". If you create a <see cref="T:System.Version" /> object using the constructor Version(1,3,4,2), the returned string is "1.3.4.2".</returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>Converts the value of the current <see cref="T:System.Version" /> object to its equivalent <see cref="T:System.String" /> representation. A specified count indicates the number of components to return.</summary>
      <returns>The <see cref="T:System.String" /> representation of the values of the major, minor, build, and revision components of the current <see cref="T:System.Version" /> object, each separated by a period character ('.'). The <paramref name="fieldCount" /> parameter determines how many components are returned.fieldCount Return Value 0 An empty string (""). 1 major 2 major.minor 3 major.minor.build 4 major.minor.build.revision For example, if you create <see cref="T:System.Version" /> object using the constructor Version(1,3,5), ToString(2) returns "1.3" and ToString(4) throws an exception.</returns>
      <param name="fieldCount">The number of components to return. The <paramref name="fieldCount" /> ranges from 0 to 4. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> is less than 0, or more than 4.-or- <paramref name="fieldCount" /> is more than the number of components defined in the current <see cref="T:System.Version" /> object. </exception>
    </member>
    <member name="T:System.Void">
      <summary>Specifies a return value type for a method that does not return a value.</summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.WeakReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class. This constructor overload cannot be implemented in Silverlight-based applications.</summary>
      <exception cref="T:System.NotImplementedException">This constructor is not implemented.</exception>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object.</summary>
      <param name="target">The object to track or null. </param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.WeakReference" /> class, referencing the specified object and using the specified resurrection tracking.</summary>
      <param name="target">An object to track. </param>
      <param name="trackResurrection">Indicates when to stop tracking the object. If true, the object is tracked after finalization; if false, the object is only tracked until finalization. </param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>Discards the reference to the target represented by the current <see cref="T:System.WeakReference" /> object.</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected.</summary>
      <returns>true if the object referenced by the current <see cref="T:System.WeakReference" /> object has not been garbage collected and is still accessible; otherwise, false.</returns>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference" /> object.</summary>
      <returns>null if the object referenced by the current <see cref="T:System.WeakReference" /> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</exception>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>Gets an indication whether the object referenced by the current <see cref="T:System.WeakReference" /> object is tracked after it is finalized.</summary>
      <returns>true if the object the current <see cref="T:System.WeakReference" /> object refers to is tracked after finalization; or false if the object is only tracked until finalization.</returns>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>Manages a compact array of bit values, which are represented as Booleans, where true indicates that the bit is on (1) and false indicates the bit is off (0).</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of Booleans.</summary>
      <param name="values">An array of Booleans to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of bytes.</summary>
      <param name="bytes">An array of bytes containing the values to copy, where each byte represents eight consecutive bits. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="bytes" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="bits">The <see cref="T:System.Collections.BitArray" /> to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> is null. </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to false.</summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero. </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to the specified value.</summary>
      <param name="length">The number of bit values in the new <see cref="T:System.Collections.BitArray" />. </param>
      <param name="defaultValue">The Boolean value to assign to each bit. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero. </exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of 32-bit integers.</summary>
      <param name="values">An array of integers containing the values to copy, where each integer represents 32 consecutive bits. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="values" /> is greater than <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>Performs the bitwise AND operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise AND operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</returns>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise AND operation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. </exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A shallow copy of the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Collections.BitArray" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.BitArray" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.BitArray" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. </exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.BitArray" /> cannot be cast automatically to the type of the destination <paramref name="array" />. </exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>Gets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The value of the bit at position <paramref name="index" />.</returns>
      <param name="index">The zero-based index of the value to get. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.BitArray" /> is read-only.</summary>
      <returns>This property is always false.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.BitArray" /> is synchronized (thread safe).</summary>
      <returns>This property is always false.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>Gets or sets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The value of the bit at position <paramref name="index" />.</returns>
      <param name="index">The zero-based index of the value to get or set. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.BitArray.Count" />. </exception>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>Gets or sets the number of elements in the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>The number of elements in the <see cref="T:System.Collections.BitArray" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property is set to a value that is less than zero. </exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>Inverts all the bit values in the current <see cref="T:System.Collections.BitArray" />, so that elements set to true are changed to false, and elements set to false are changed to true.</summary>
      <returns>The current instance with inverted bit values.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>Performs the bitwise OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</returns>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise OR operation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. </exception>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>Sets the bit at a specific position in the <see cref="T:System.Collections.BitArray" /> to the specified value.</summary>
      <param name="index">The zero-based index of the bit to set. </param>
      <param name="value">The Boolean value to assign to the bit. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or- <paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />. </exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>Sets all bits in the <see cref="T:System.Collections.BitArray" /> to the specified value.</summary>
      <param name="value">The Boolean value to assign to all bits. </param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>Performs the bitwise exclusive OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>A <see cref="T:System.Collections.BitArray" /> containing the result of the bitwise exclusive OR operation on the elements in the current <see cref="T:System.Collections.BitArray" /> against the corresponding elements in the specified <see cref="T:System.Collections.BitArray" />.</returns>
      <param name="value">The <see cref="T:System.Collections.BitArray" /> with which to perform the bitwise exclusive OR operation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements. </exception>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>Defines a dictionary key/value pair that can be set or retrieved.</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry" /> type with the specified key and value.</summary>
      <param name="key">The object defined in each key/value pair. </param>
      <param name="value">The definition associated with <paramref name="key" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null and the .NET Framework version is 1.0 or 1.1. </exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>Gets or sets the key in the key/value pair.</summary>
      <returns>The key in the key/value pair.</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>Gets or sets the value in the key/value pair.</summary>
      <returns>The value in the key/value pair.</returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>Defines size, enumerators, and synchronization methods for all nongeneric collections.</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. </exception>
      <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />. </exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>Exposes a method that compares two objects.</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>Value Condition Less than zero <paramref name="x" /> is less than <paramref name="y" />. Zero <paramref name="x" /> equals <paramref name="y" />. Greater than zero <paramref name="x" /> is greater than <paramref name="y" />. </returns>
      <param name="x">The first object to compare. </param>
      <param name="y">The second object to compare. </param>
      <exception cref="T:System.ArgumentException">Neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.-or- <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other. </exception>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>Represents a nongeneric collection of key/value pairs.</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add. </param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only. </exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>Gets or sets the element with the specified key.</summary>
      <returns>The element with the specified key.</returns>
      <param name="key">The key of the element to get or set. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <param name="key">The key of the element to remove. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>Enumerates the elements of a nongeneric dictionary.</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>Gets both the key and the value of the current dictionary entry.</summary>
      <returns>A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. </exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>Gets the key of the current dictionary entry.</summary>
      <returns>The key of the current element of the enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. </exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>Gets the value of the current dictionary entry.</summary>
      <returns>The value of the current element of the enumeration.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last entry. </exception>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>Exposes the enumerator, which supports a simple iteration over a non-generic collection.</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>Supports a simple iteration over a nongeneric collection.</summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>Defines methods to support the comparison of objects for equality.</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified objects are equal.</summary>
      <returns>true if the specified objects are equal; otherwise, false.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> and <paramref name="y" /> are of different types and neither one can handle comparisons with the other.</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>Returns a hash code for the specified object.</summary>
      <returns>A hash code for the specified object.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>Represents a non-generic collection of objects that can be individually accessed by index.</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only. </exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only. </exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
      <typeparam name="T">The type of objects to compare.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Comparer`1" /> class.</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</summary>
      <returns>Value Condition Less than zero <paramref name="x" /> is less than <paramref name="y" />.Zero <paramref name="x" /> equals <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">Type <paramref name="T" /> does not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>Returns a default sort order comparer for the type specified by the generic argument.</summary>
      <returns>An object that inherits <see cref="T:System.Collections.Generic.Comparer`1" /> and serves as a sort order comparer for type <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
      <returns>Value Condition Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> or <paramref name="y" /> is of a type that cannot be cast to type <paramref name="T" />.-or-<paramref name="x" /> and <paramref name="y" /> do not implement either the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface.</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>Represents a collection of keys and values.</summary>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the default equality comparer for the key type.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>Removes all keys and values from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> that is used to determine equality of keys for the dictionary. </summary>
      <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation that is used to determine equality of keys for the current <see cref="T:System.Collections.Generic.Dictionary`2" /> and to provide hash values for the keys.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified value; otherwise, false.</returns>
      <param name="value">The value to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />. The value can be null for reference types.</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> structure for the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>Gets or sets the value associated with the specified key.</summary>
      <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</returns>
      <param name="key">The key of the value to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> does not exist in the collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> containing the keys in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false.  This method returns false if <paramref name="key" /> is not found in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection`1" /> with the specified key.</summary>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to add to the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The key of <paramref name="keyValuePair" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific key and value.</summary>
      <returns>true if <paramref name="keyValuePair" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the dictionary is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Removes a key and value from the dictionary.</summary>
      <returns>true if the key and value represented by <paramref name="keyValuePair" /> is successfully found and removed; otherwise, false. This method returns false if <paramref name="keyValuePair" /> is not found in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure representing the key and value to remove from the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TKey" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of type <paramref name="TValue" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.-or-<paramref name="index" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.Generic.ICollection`1" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />. </returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The object to use as the key.</param>
      <param name="value">The object to use as the value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.-or-<paramref name="value" /> is of a type that is not assignable to <paramref name="TValue" />, the type of values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.-or-A value with the same key already exists in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2" />, this property always returns false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Gets or sets the value with the specified key.</summary>
      <returns>The value associated with the specified key, or null if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <param name="key">The key of the value to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.-or-A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>Gets a collection containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.Dictionary`2" /> at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the dictionary at the current position of the enumerator, as a <see cref="T:System.Collections.DictionaryEntry" />.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Gets the key of the element at the current position of the enumerator.</summary>
      <returns>The key of the element in the dictionary at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Gets the value of the element at the current position of the enumerator.</summary>
      <returns>The value of the element in the dictionary at the current position of the enumerator.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>Represents the collection of keys in a <see cref="T:System.Collections.Generic.Dictionary`2" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> class that reflects the keys in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2" /> whose keys are reflected in the new <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.Retrieving the value of this property is an O(1) operation.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> for the <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, this property always returns true.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.  This implementation always throws <see cref="T:System.NotSupportedException" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end